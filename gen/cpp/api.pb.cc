// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace api_pb {
}  // namespace api_pb
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_api_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tapi.proto\022\006api_pb\032\033google/protobuf/emp"
  "ty.proto\032\017resources.proto\032\034google/api/an"
  "notations.proto\032.protoc-gen-openapiv2/op"
  "tions/annotations.proto2\356!\n\nApiService\022e"
  "\n\tSubscribe\022\030.api_pb.SubscribeRequest\032\031."
  "api_pb.SubscribeResponse\"!\222A\014\n\nWebSocket"
  "s\202\323\344\223\002\014\022\n/subscribe0\001\022V\n\005Halts\022\024.api_pb."
  "HaltsRequest\032\025.api_pb.HaltsResponse\" \222A\006"
  "\n\004Vote\202\323\344\223\002\021\022\017/halts/{height}\022[\n\007Genesis"
  "\022\026.google.protobuf.Empty\032\027.api_pb.Genesi"
  "sResponse\"\037\222A\014\n\nBlockchain\202\323\344\223\002\n\022\010/genes"
  "is\022d\n\013MinGasPrice\022\026.google.protobuf.Empt"
  "y\032\033.api_pb.MinGasPriceResponse\" \222A\007\n\005Pri"
  "ce\202\323\344\223\002\020\022\016/min_gas_price\022\\\n\007NetInfo\022\026.go"
  "ogle.protobuf.Empty\032\027.api_pb.NetInfoResp"
  "onse\" \222A\014\n\nBlockchain\202\323\344\223\002\013\022\t/net_info\022X"
  "\n\006Status\022\026.google.protobuf.Empty\032\026.api_p"
  "b.StatusResponse\"\036\222A\014\n\nBlockchain\202\323\344\223\002\t\022"
  "\007/status\022b\n\007Address\022\026.api_pb.AddressRequ"
  "est\032\027.api_pb.AddressResponse\"&\222A\t\n\007Balan"
  "ce\202\323\344\223\002\024\022\022/address/{address}\022`\n\tAddresse"
  "s\022\030.api_pb.AddressesRequest\032\031.api_pb.Add"
  "ressesResponse\"\036\222A\t\n\007Balance\202\323\344\223\002\014\022\n/add"
  "resses\022\\\n\005Block\022\024.api_pb.BlockRequest\032\025."
  "api_pb.BlockResponse\"&\222A\014\n\nBlockchain\202\323\344"
  "\223\002\021\022\017/block/{height}\022o\n\tCandidate\022\030.api_"
  "pb.CandidateRequest\032\031.api_pb.CandidateRe"
  "sponse\"-\222A\013\n\tValidator\202\323\344\223\002\031\022\027/candidate"
  "/{public_key}\022f\n\nCandidates\022\031.api_pb.Can"
  "didatesRequest\032\032.api_pb.CandidatesRespon"
  "se\"!\222A\013\n\tValidator\202\323\344\223\002\r\022\013/candidates\022g\n"
  "\014CoinInfoById\022\025.api_pb.CoinIdRequest\032\030.a"
  "pi_pb.CoinInfoResponse\"&\222A\006\n\004Coin\202\323\344\223\002\027\022"
  "\025/coin_info_by_id/{id}\022c\n\010CoinInfo\022\027.api"
  "_pb.CoinInfoRequest\032\030.api_pb.CoinInfoRes"
  "ponse\"$\222A\006\n\004Coin\202\323\344\223\002\025\022\023/coin_info/{symb"
  "ol}\022w\n\017EstimateCoinBuy\022\036.api_pb.Estimate"
  "CoinBuyRequest\032\037.api_pb.EstimateCoinBuyR"
  "esponse\"#\222A\006\n\004Coin\202\323\344\223\002\024\022\022/estimate_coin"
  "_buy\022{\n\020EstimateCoinSell\022\037.api_pb.Estima"
  "teCoinSellRequest\032 .api_pb.EstimateCoinS"
  "ellResponse\"$\222A\006\n\004Coin\202\323\344\223\002\025\022\023/estimate_"
  "coin_sell\022\210\001\n\023EstimateCoinSellAll\022\".api_"
  "pb.EstimateCoinSellAllRequest\032#.api_pb.E"
  "stimateCoinSellAllResponse\"(\222A\006\n\004Coin\202\323\344"
  "\223\002\031\022\027/estimate_coin_sell_all\022\221\001\n\024Estimat"
  "eTxCommission\022#.api_pb.EstimateTxCommiss"
  "ionRequest\032$.api_pb.EstimateTxCommission"
  "Response\".\222A\007\n\005Price\202\323\344\223\002\036\022\034/estimate_tx"
  "_commission/{tx}\022[\n\006Events\022\025.api_pb.Even"
  "tsRequest\032\026.api_pb.EventsResponse\"\"\222A\007\n\005"
  "Event\202\323\344\223\002\022\022\020/events/{height}\022h\n\013MaxGasP"
  "rice\022\032.api_pb.MaxGasPriceRequest\032\033.api_p"
  "b.MaxGasPriceResponse\" \222A\007\n\005Price\202\323\344\223\002\020\022"
  "\016/max_gas_price\022|\n\014MissedBlocks\022\033.api_pb"
  ".MissedBlocksRequest\032\034.api_pb.MissedBloc"
  "ksResponse\"1\222A\013\n\tValidator\202\323\344\223\002\035\022\033/misse"
  "d_blocks/{public_key}\022\352\001\n\017SendTransactio"
  "n\022\036.api_pb.SendTransactionRequest\032\037.api_"
  "pb.SendTransactionResponse\"\225\001\222A\\\n\nBlockc"
  "hain\"N\n\036More about Minter transactions\022,"
  "https://www.minter.network/docs#transact"
  "ions\202\323\344\223\0020\022\026/send_transaction/{tx}Z\026\"\021/s"
  "end_transaction:\001*\022r\n\013Transaction\022\032.api_"
  "pb.TransactionRequest\032\033.api_pb.Transacti"
  "onResponse\"*\222A\014\n\nBlockchain\202\323\344\223\002\025\022\023/tran"
  "saction/{hash}\022o\n\014Transactions\022\033.api_pb."
  "TransactionsRequest\032\034.api_pb.Transaction"
  "sResponse\"$\222A\014\n\nBlockchain\202\323\344\223\002\017\022\r/trans"
  "actions\022x\n\016UnconfirmedTxs\022\035.api_pb.Uncon"
  "firmedTxsRequest\032\036.api_pb.UnconfirmedTxs"
  "Response\"\'\222A\014\n\nBlockchain\202\323\344\223\002\022\022\020/unconf"
  "irmed_txs\022f\n\nValidators\022\031.api_pb.Validat"
  "orsRequest\032\032.api_pb.ValidatorsResponse\"!"
  "\222A\013\n\tValidator\202\323\344\223\002\r\022\013/validators\022^\n\006Fro"
  "zen\022\025.api_pb.FrozenRequest\032\026.api_pb.Froz"
  "enResponse\"%\222A\t\n\007Balance\202\323\344\223\002\023\022\021/frozen/"
  "{address}\022f\n\010WaitList\022\027.api_pb.WaitListR"
  "equest\032\030.api_pb.WaitListResponse\"\'\222A\t\n\007B"
  "alance\202\323\344\223\002\025\022\023/waitlist/{address}\022X\n\tTes"
  "tBlock\022\026.google.protobuf.Empty\032\025.api_pb."
  "BlockResponse\"\034\222A\006\n\004Test\202\323\344\223\002\r\022\013/test/bl"
  "ock\022j\n\010SwapPool\022\027.api_pb.SwapPoolRequest"
  "\032\030.api_pb.SwapPoolResponse\"+\222A\006\n\004Coin\202\323\344"
  "\223\002\034\022\032/swap_pool/{coin0}/{coin1}\022\205\001\n\020Swap"
  "PoolProvider\022\037.api_pb.SwapPoolProviderRe"
  "quest\032\030.api_pb.SwapPoolResponse\"6\222A\006\n\004Co"
  "in\202\323\344\223\002\'\022%/swap_pool/{coin0}/{coin1}/{pr"
  "ovider}\022x\n\017PriceCommission\022\036.api_pb.Pric"
  "eCommissionRequest\032\037.api_pb.PriceCommiss"
  "ionResponse\"$\222A\007\n\005Price\202\323\344\223\002\024\022\022/price_co"
  "mmissions\022x\n\016VersionNetwork\022\035.api_pb.Ver"
  "sionNetworkRequest\032\036.api_pb.VersionNetwo"
  "rkResponse\"\'\222A\014\n\nBlockchain\202\323\344\223\002\022\022\020/vers"
  "ion_network\022\207\001\n\017CommissionVotes\022\036.api_pb"
  ".CommissionVotesRequest\032\037.api_pb.Commiss"
  "ionVotesResponse\"3\222A\006\n\004Vote\202\323\344\223\002$\022\"/comm"
  "ission_votes/{target_version}\022w\n\013UpdateV"
  "otes\022\032.api_pb.UpdateVotesRequest\032\033.api_p"
  "b.UpdateVotesResponse\"/\222A\006\n\004Vote\202\323\344\223\002 \022\036"
  "/update_votes/{target_version}\022W\n\006Blocks"
  "\022\025.api_pb.BlocksRequest\032\026.api_pb.BlocksR"
  "esponse\"\036\222A\014\n\nBlockchain\202\323\344\223\002\t\022\007/blocks\022"
  "m\n\nLimitOrder\022\031.api_pb.LimitOrderRequest"
  "\032\032.api_pb.LimitOrderResponse\"(\222A\006\n\004Coin\202"
  "\323\344\223\002\031\022\027/limit_order/{order_id}\022\217\001\n\021Limit"
  "OrdersOfPool\022 .api_pb.LimitOrdersOfPoolR"
  "equest\032!.api_pb.LimitOrdersOfPoolRespons"
  "e\"5\222A\006\n\004Coin\202\323\344\223\002&\022$/limit_orders/{sell_"
  "coin}/{buy_coin}\022f\n\013LimitOrders\022\032.api_pb"
  ".LimitOrdersRequest\032\033.api_pb.LimitOrders"
  "Response\"\036\222A\006\n\004Coin\202\323\344\223\002\017\022\r/limit_orders"
  "BZ\n\023network.minter.grpcP\001Z5github.com/Mi"
  "nterTeam/node-grpc-gateway/gen/go;api_pb"
  "\370\001\000\272\002\006Minterb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2eproto_deps[4] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
  &::descriptor_table_resources_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
  false, false, 4580, descriptor_table_protodef_api_2eproto, "api.proto", 
  &descriptor_table_api_2eproto_once, descriptor_table_api_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_api_2eproto::offsets,
  nullptr, file_level_enum_descriptors_api_2eproto, file_level_service_descriptors_api_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_api_2eproto_getter() {
  return &descriptor_table_api_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_api_2eproto(&descriptor_table_api_2eproto);
namespace api_pb {

// @@protoc_insertion_point(namespace_scope)
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
