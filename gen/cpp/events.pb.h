// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_events_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_events_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_events_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_events_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto;
namespace api_pb {
class JailEvent;
struct JailEventDefaultTypeInternal;
extern JailEventDefaultTypeInternal _JailEvent_default_instance_;
class OrderExpiredEvent;
struct OrderExpiredEventDefaultTypeInternal;
extern OrderExpiredEventDefaultTypeInternal _OrderExpiredEvent_default_instance_;
class RemoveCandidateEvent;
struct RemoveCandidateEventDefaultTypeInternal;
extern RemoveCandidateEventDefaultTypeInternal _RemoveCandidateEvent_default_instance_;
class RewardEvent;
struct RewardEventDefaultTypeInternal;
extern RewardEventDefaultTypeInternal _RewardEvent_default_instance_;
class SlashEvent;
struct SlashEventDefaultTypeInternal;
extern SlashEventDefaultTypeInternal _SlashEvent_default_instance_;
class StakeKickEvent;
struct StakeKickEventDefaultTypeInternal;
extern StakeKickEventDefaultTypeInternal _StakeKickEvent_default_instance_;
class UnbondEvent;
struct UnbondEventDefaultTypeInternal;
extern UnbondEventDefaultTypeInternal _UnbondEvent_default_instance_;
class UpdateCommissionsEvent;
struct UpdateCommissionsEventDefaultTypeInternal;
extern UpdateCommissionsEventDefaultTypeInternal _UpdateCommissionsEvent_default_instance_;
class UpdateNetworkEvent;
struct UpdateNetworkEventDefaultTypeInternal;
extern UpdateNetworkEventDefaultTypeInternal _UpdateNetworkEvent_default_instance_;
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::api_pb::JailEvent* Arena::CreateMaybeMessage<::api_pb::JailEvent>(Arena*);
template<> ::api_pb::OrderExpiredEvent* Arena::CreateMaybeMessage<::api_pb::OrderExpiredEvent>(Arena*);
template<> ::api_pb::RemoveCandidateEvent* Arena::CreateMaybeMessage<::api_pb::RemoveCandidateEvent>(Arena*);
template<> ::api_pb::RewardEvent* Arena::CreateMaybeMessage<::api_pb::RewardEvent>(Arena*);
template<> ::api_pb::SlashEvent* Arena::CreateMaybeMessage<::api_pb::SlashEvent>(Arena*);
template<> ::api_pb::StakeKickEvent* Arena::CreateMaybeMessage<::api_pb::StakeKickEvent>(Arena*);
template<> ::api_pb::UnbondEvent* Arena::CreateMaybeMessage<::api_pb::UnbondEvent>(Arena*);
template<> ::api_pb::UpdateCommissionsEvent* Arena::CreateMaybeMessage<::api_pb::UpdateCommissionsEvent>(Arena*);
template<> ::api_pb::UpdateNetworkEvent* Arena::CreateMaybeMessage<::api_pb::UpdateNetworkEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api_pb {

enum RewardEvent_Role : int {
  RewardEvent_Role_Validator = 0,
  RewardEvent_Role_Delegator = 1,
  RewardEvent_Role_DAO = 2,
  RewardEvent_Role_Developers = 3,
  RewardEvent_Role_RewardEvent_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RewardEvent_Role_RewardEvent_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RewardEvent_Role_IsValid(int value);
constexpr RewardEvent_Role RewardEvent_Role_Role_MIN = RewardEvent_Role_Validator;
constexpr RewardEvent_Role RewardEvent_Role_Role_MAX = RewardEvent_Role_Developers;
constexpr int RewardEvent_Role_Role_ARRAYSIZE = RewardEvent_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardEvent_Role_descriptor();
template<typename T>
inline const std::string& RewardEvent_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RewardEvent_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RewardEvent_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RewardEvent_Role_descriptor(), enum_t_value);
}
inline bool RewardEvent_Role_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RewardEvent_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RewardEvent_Role>(
    RewardEvent_Role_descriptor(), name, value);
}
// ===================================================================

class JailEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.JailEvent) */ {
 public:
  inline JailEvent() : JailEvent(nullptr) {}
  ~JailEvent() override;
  explicit constexpr JailEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JailEvent(const JailEvent& from);
  JailEvent(JailEvent&& from) noexcept
    : JailEvent() {
    *this = ::std::move(from);
  }

  inline JailEvent& operator=(const JailEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline JailEvent& operator=(JailEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JailEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const JailEvent* internal_default_instance() {
    return reinterpret_cast<const JailEvent*>(
               &_JailEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JailEvent& a, JailEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(JailEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JailEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JailEvent* New() const final {
    return new JailEvent();
  }

  JailEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JailEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JailEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const JailEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JailEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.JailEvent";
  }
  protected:
  explicit JailEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorPubKeyFieldNumber = 1,
    kJailedUntilFieldNumber = 2,
  };
  // string validator_pub_key = 1 [json_name = "validatorPubKey"];
  void clear_validator_pub_key();
  const std::string& validator_pub_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_pub_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_pub_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_validator_pub_key();
  void set_allocated_validator_pub_key(std::string* validator_pub_key);
  private:
  const std::string& _internal_validator_pub_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_pub_key(const std::string& value);
  std::string* _internal_mutable_validator_pub_key();
  public:

  // uint64 jailed_until = 2 [json_name = "jailedUntil"];
  void clear_jailed_until();
  ::PROTOBUF_NAMESPACE_ID::uint64 jailed_until() const;
  void set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jailed_until() const;
  void _internal_set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.JailEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jailed_until_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class RemoveCandidateEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.RemoveCandidateEvent) */ {
 public:
  inline RemoveCandidateEvent() : RemoveCandidateEvent(nullptr) {}
  ~RemoveCandidateEvent() override;
  explicit constexpr RemoveCandidateEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveCandidateEvent(const RemoveCandidateEvent& from);
  RemoveCandidateEvent(RemoveCandidateEvent&& from) noexcept
    : RemoveCandidateEvent() {
    *this = ::std::move(from);
  }

  inline RemoveCandidateEvent& operator=(const RemoveCandidateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCandidateEvent& operator=(RemoveCandidateEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveCandidateEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveCandidateEvent* internal_default_instance() {
    return reinterpret_cast<const RemoveCandidateEvent*>(
               &_RemoveCandidateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoveCandidateEvent& a, RemoveCandidateEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCandidateEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveCandidateEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveCandidateEvent* New() const final {
    return new RemoveCandidateEvent();
  }

  RemoveCandidateEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCandidateEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveCandidateEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveCandidateEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCandidateEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.RemoveCandidateEvent";
  }
  protected:
  explicit RemoveCandidateEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatePubKeyFieldNumber = 1,
  };
  // string candidate_pub_key = 1 [json_name = "candidatePubKey"];
  void clear_candidate_pub_key();
  const std::string& candidate_pub_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate_pub_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate_pub_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_candidate_pub_key();
  void set_allocated_candidate_pub_key(std::string* candidate_pub_key);
  private:
  const std::string& _internal_candidate_pub_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate_pub_key(const std::string& value);
  std::string* _internal_mutable_candidate_pub_key();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.RemoveCandidateEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_pub_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class RewardEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.RewardEvent) */ {
 public:
  inline RewardEvent() : RewardEvent(nullptr) {}
  ~RewardEvent() override;
  explicit constexpr RewardEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewardEvent(const RewardEvent& from);
  RewardEvent(RewardEvent&& from) noexcept
    : RewardEvent() {
    *this = ::std::move(from);
  }

  inline RewardEvent& operator=(const RewardEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardEvent& operator=(RewardEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardEvent* internal_default_instance() {
    return reinterpret_cast<const RewardEvent*>(
               &_RewardEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RewardEvent& a, RewardEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardEvent* New() const final {
    return new RewardEvent();
  }

  RewardEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RewardEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RewardEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.RewardEvent";
  }
  protected:
  explicit RewardEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RewardEvent_Role Role;
  static constexpr Role Validator =
    RewardEvent_Role_Validator;
  static constexpr Role Delegator =
    RewardEvent_Role_Delegator;
  static constexpr Role DAO =
    RewardEvent_Role_DAO;
  static constexpr Role Developers =
    RewardEvent_Role_Developers;
  static inline bool Role_IsValid(int value) {
    return RewardEvent_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    RewardEvent_Role_Role_MIN;
  static constexpr Role Role_MAX =
    RewardEvent_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    RewardEvent_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return RewardEvent_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return RewardEvent_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Role* value) {
    return RewardEvent_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kValidatorPubKeyFieldNumber = 4,
    kCoinFieldNumber = 5,
    kForCoinFieldNumber = 6,
    kRoleFieldNumber = 1,
  };
  // string address = 2 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 3 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  void clear_validator_pub_key();
  const std::string& validator_pub_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_pub_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_pub_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_validator_pub_key();
  void set_allocated_validator_pub_key(std::string* validator_pub_key);
  private:
  const std::string& _internal_validator_pub_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_pub_key(const std::string& value);
  std::string* _internal_mutable_validator_pub_key();
  public:

  // uint64 coin = 5 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 for_coin = 6 [json_name = "forCoin"];
  void clear_for_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 for_coin() const;
  void set_for_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_for_coin() const;
  void _internal_set_for_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .api_pb.RewardEvent.Role role = 1 [json_name = "role"];
  void clear_role();
  ::api_pb::RewardEvent_Role role() const;
  void set_role(::api_pb::RewardEvent_Role value);
  private:
  ::api_pb::RewardEvent_Role _internal_role() const;
  void _internal_set_role(::api_pb::RewardEvent_Role value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.RewardEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 for_coin_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class SlashEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SlashEvent) */ {
 public:
  inline SlashEvent() : SlashEvent(nullptr) {}
  ~SlashEvent() override;
  explicit constexpr SlashEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlashEvent(const SlashEvent& from);
  SlashEvent(SlashEvent&& from) noexcept
    : SlashEvent() {
    *this = ::std::move(from);
  }

  inline SlashEvent& operator=(const SlashEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlashEvent& operator=(SlashEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlashEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlashEvent* internal_default_instance() {
    return reinterpret_cast<const SlashEvent*>(
               &_SlashEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SlashEvent& a, SlashEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SlashEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlashEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SlashEvent* New() const final {
    return new SlashEvent();
  }

  SlashEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SlashEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlashEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlashEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlashEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SlashEvent";
  }
  protected:
  explicit SlashEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kValidatorPubKeyFieldNumber = 4,
    kCoinFieldNumber = 3,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 2 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  void clear_validator_pub_key();
  const std::string& validator_pub_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_pub_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_pub_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_validator_pub_key();
  void set_allocated_validator_pub_key(std::string* validator_pub_key);
  private:
  const std::string& _internal_validator_pub_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_pub_key(const std::string& value);
  std::string* _internal_mutable_validator_pub_key();
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SlashEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class UnbondEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UnbondEvent) */ {
 public:
  inline UnbondEvent() : UnbondEvent(nullptr) {}
  ~UnbondEvent() override;
  explicit constexpr UnbondEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnbondEvent(const UnbondEvent& from);
  UnbondEvent(UnbondEvent&& from) noexcept
    : UnbondEvent() {
    *this = ::std::move(from);
  }

  inline UnbondEvent& operator=(const UnbondEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnbondEvent& operator=(UnbondEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnbondEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnbondEvent* internal_default_instance() {
    return reinterpret_cast<const UnbondEvent*>(
               &_UnbondEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnbondEvent& a, UnbondEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UnbondEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnbondEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnbondEvent* New() const final {
    return new UnbondEvent();
  }

  UnbondEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnbondEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnbondEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnbondEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnbondEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UnbondEvent";
  }
  protected:
  explicit UnbondEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kValidatorPubKeyFieldNumber = 4,
    kCoinFieldNumber = 3,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 2 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  void clear_validator_pub_key();
  const std::string& validator_pub_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_pub_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_pub_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_validator_pub_key();
  void set_allocated_validator_pub_key(std::string* validator_pub_key);
  private:
  const std::string& _internal_validator_pub_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_pub_key(const std::string& value);
  std::string* _internal_mutable_validator_pub_key();
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UnbondEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class StakeKickEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.StakeKickEvent) */ {
 public:
  inline StakeKickEvent() : StakeKickEvent(nullptr) {}
  ~StakeKickEvent() override;
  explicit constexpr StakeKickEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StakeKickEvent(const StakeKickEvent& from);
  StakeKickEvent(StakeKickEvent&& from) noexcept
    : StakeKickEvent() {
    *this = ::std::move(from);
  }

  inline StakeKickEvent& operator=(const StakeKickEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeKickEvent& operator=(StakeKickEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakeKickEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const StakeKickEvent* internal_default_instance() {
    return reinterpret_cast<const StakeKickEvent*>(
               &_StakeKickEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StakeKickEvent& a, StakeKickEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeKickEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeKickEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StakeKickEvent* New() const final {
    return new StakeKickEvent();
  }

  StakeKickEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StakeKickEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StakeKickEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StakeKickEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeKickEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.StakeKickEvent";
  }
  protected:
  explicit StakeKickEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
    kValidatorPubKeyFieldNumber = 4,
    kCoinFieldNumber = 3,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 2 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  void clear_validator_pub_key();
  const std::string& validator_pub_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validator_pub_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validator_pub_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_validator_pub_key();
  void set_allocated_validator_pub_key(std::string* validator_pub_key);
  private:
  const std::string& _internal_validator_pub_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_pub_key(const std::string& value);
  std::string* _internal_mutable_validator_pub_key();
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.StakeKickEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class UpdateNetworkEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UpdateNetworkEvent) */ {
 public:
  inline UpdateNetworkEvent() : UpdateNetworkEvent(nullptr) {}
  ~UpdateNetworkEvent() override;
  explicit constexpr UpdateNetworkEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNetworkEvent(const UpdateNetworkEvent& from);
  UpdateNetworkEvent(UpdateNetworkEvent&& from) noexcept
    : UpdateNetworkEvent() {
    *this = ::std::move(from);
  }

  inline UpdateNetworkEvent& operator=(const UpdateNetworkEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNetworkEvent& operator=(UpdateNetworkEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNetworkEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNetworkEvent* internal_default_instance() {
    return reinterpret_cast<const UpdateNetworkEvent*>(
               &_UpdateNetworkEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateNetworkEvent& a, UpdateNetworkEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNetworkEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNetworkEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateNetworkEvent* New() const final {
    return new UpdateNetworkEvent();
  }

  UpdateNetworkEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNetworkEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNetworkEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNetworkEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNetworkEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UpdateNetworkEvent";
  }
  protected:
  explicit UpdateNetworkEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // string version = 1 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UpdateNetworkEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class UpdateCommissionsEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UpdateCommissionsEvent) */ {
 public:
  inline UpdateCommissionsEvent() : UpdateCommissionsEvent(nullptr) {}
  ~UpdateCommissionsEvent() override;
  explicit constexpr UpdateCommissionsEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCommissionsEvent(const UpdateCommissionsEvent& from);
  UpdateCommissionsEvent(UpdateCommissionsEvent&& from) noexcept
    : UpdateCommissionsEvent() {
    *this = ::std::move(from);
  }

  inline UpdateCommissionsEvent& operator=(const UpdateCommissionsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCommissionsEvent& operator=(UpdateCommissionsEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCommissionsEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCommissionsEvent* internal_default_instance() {
    return reinterpret_cast<const UpdateCommissionsEvent*>(
               &_UpdateCommissionsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateCommissionsEvent& a, UpdateCommissionsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCommissionsEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCommissionsEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCommissionsEvent* New() const final {
    return new UpdateCommissionsEvent();
  }

  UpdateCommissionsEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCommissionsEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCommissionsEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateCommissionsEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCommissionsEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UpdateCommissionsEvent";
  }
  protected:
  explicit UpdateCommissionsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadByteFieldNumber = 4,
    kSendFieldNumber = 5,
    kCreateTicker3FieldNumber = 7,
    kCreateTicker4FieldNumber = 8,
    kCreateTicker5FieldNumber = 9,
    kCreateTicker6FieldNumber = 10,
    kCreateTicker710FieldNumber = 11,
    kDeclareCandidacyFieldNumber = 13,
    kDelegateFieldNumber = 14,
    kUnbondFieldNumber = 15,
    kRedeemCheckFieldNumber = 16,
    kCreateMultisigFieldNumber = 18,
    kEditCandidateFieldNumber = 20,
    kSetHaltBlockFieldNumber = 21,
    kEditTickerOwnerFieldNumber = 22,
    kEditMultisigFieldNumber = 23,
    kEditCandidatePublicKeyFieldNumber = 25,
    kEditCandidateCommissionFieldNumber = 28,
    kVoteCommissionFieldNumber = 31,
    kVoteUpdateFieldNumber = 32,
    kCreateCoinFieldNumber = 34,
    kCreateTokenFieldNumber = 35,
    kRecreateCoinFieldNumber = 36,
    kRecreateTokenFieldNumber = 37,
    kBuyBancorFieldNumber = 38,
    kSellBancorFieldNumber = 39,
    kSellAllBancorFieldNumber = 40,
    kBuyPoolBaseFieldNumber = 41,
    kSellPoolBaseFieldNumber = 42,
    kSellAllPoolBaseFieldNumber = 43,
    kSetCandidateOnFieldNumber = 44,
    kSetCandidateOffFieldNumber = 45,
    kMintTokenFieldNumber = 46,
    kBurnTokenFieldNumber = 47,
    kCreateSwapPoolFieldNumber = 48,
    kAddLiquidityFieldNumber = 49,
    kRemoveLiquidityFieldNumber = 50,
    kMultisendBaseFieldNumber = 51,
    kMultisendDeltaFieldNumber = 52,
    kBuyPoolDeltaFieldNumber = 53,
    kSellPoolDeltaFieldNumber = 54,
    kSellAllPoolDeltaFieldNumber = 55,
    kFailedTxFieldNumber = 56,
    kAddLimitOrderFieldNumber = 57,
    kRemoveLimitOrderFieldNumber = 58,
    kCoinFieldNumber = 3,
  };
  // string payload_byte = 4 [json_name = "payloadByte"];
  void clear_payload_byte();
  const std::string& payload_byte() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_byte(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_byte();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload_byte();
  void set_allocated_payload_byte(std::string* payload_byte);
  private:
  const std::string& _internal_payload_byte() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_byte(const std::string& value);
  std::string* _internal_mutable_payload_byte();
  public:

  // string send = 5 [json_name = "send"];
  void clear_send();
  const std::string& send() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send();
  PROTOBUF_MUST_USE_RESULT std::string* release_send();
  void set_allocated_send(std::string* send);
  private:
  const std::string& _internal_send() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send(const std::string& value);
  std::string* _internal_mutable_send();
  public:

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  void clear_create_ticker3();
  const std::string& create_ticker3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker3();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker3();
  void set_allocated_create_ticker3(std::string* create_ticker3);
  private:
  const std::string& _internal_create_ticker3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker3(const std::string& value);
  std::string* _internal_mutable_create_ticker3();
  public:

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  void clear_create_ticker4();
  const std::string& create_ticker4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker4();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker4();
  void set_allocated_create_ticker4(std::string* create_ticker4);
  private:
  const std::string& _internal_create_ticker4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker4(const std::string& value);
  std::string* _internal_mutable_create_ticker4();
  public:

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  void clear_create_ticker5();
  const std::string& create_ticker5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker5();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker5();
  void set_allocated_create_ticker5(std::string* create_ticker5);
  private:
  const std::string& _internal_create_ticker5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker5(const std::string& value);
  std::string* _internal_mutable_create_ticker5();
  public:

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  void clear_create_ticker6();
  const std::string& create_ticker6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker6();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker6();
  void set_allocated_create_ticker6(std::string* create_ticker6);
  private:
  const std::string& _internal_create_ticker6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker6(const std::string& value);
  std::string* _internal_mutable_create_ticker6();
  public:

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  void clear_create_ticker7_10();
  const std::string& create_ticker7_10() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker7_10(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker7_10();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker7_10();
  void set_allocated_create_ticker7_10(std::string* create_ticker7_10);
  private:
  const std::string& _internal_create_ticker7_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker7_10(const std::string& value);
  std::string* _internal_mutable_create_ticker7_10();
  public:

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  void clear_declare_candidacy();
  const std::string& declare_candidacy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_declare_candidacy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_declare_candidacy();
  PROTOBUF_MUST_USE_RESULT std::string* release_declare_candidacy();
  void set_allocated_declare_candidacy(std::string* declare_candidacy);
  private:
  const std::string& _internal_declare_candidacy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_declare_candidacy(const std::string& value);
  std::string* _internal_mutable_declare_candidacy();
  public:

  // string delegate = 14 [json_name = "delegate"];
  void clear_delegate();
  const std::string& delegate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate();
  PROTOBUF_MUST_USE_RESULT std::string* release_delegate();
  void set_allocated_delegate(std::string* delegate);
  private:
  const std::string& _internal_delegate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate(const std::string& value);
  std::string* _internal_mutable_delegate();
  public:

  // string unbond = 15 [json_name = "unbond"];
  void clear_unbond();
  const std::string& unbond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unbond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unbond();
  PROTOBUF_MUST_USE_RESULT std::string* release_unbond();
  void set_allocated_unbond(std::string* unbond);
  private:
  const std::string& _internal_unbond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unbond(const std::string& value);
  std::string* _internal_mutable_unbond();
  public:

  // string redeem_check = 16 [json_name = "redeemCheck"];
  void clear_redeem_check();
  const std::string& redeem_check() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redeem_check(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redeem_check();
  PROTOBUF_MUST_USE_RESULT std::string* release_redeem_check();
  void set_allocated_redeem_check(std::string* redeem_check);
  private:
  const std::string& _internal_redeem_check() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redeem_check(const std::string& value);
  std::string* _internal_mutable_redeem_check();
  public:

  // string create_multisig = 18 [json_name = "createMultisig"];
  void clear_create_multisig();
  const std::string& create_multisig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_multisig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_multisig();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_multisig();
  void set_allocated_create_multisig(std::string* create_multisig);
  private:
  const std::string& _internal_create_multisig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_multisig(const std::string& value);
  std::string* _internal_mutable_create_multisig();
  public:

  // string edit_candidate = 20 [json_name = "editCandidate"];
  void clear_edit_candidate();
  const std::string& edit_candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate();
  void set_allocated_edit_candidate(std::string* edit_candidate);
  private:
  const std::string& _internal_edit_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate(const std::string& value);
  std::string* _internal_mutable_edit_candidate();
  public:

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  void clear_set_halt_block();
  const std::string& set_halt_block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_halt_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_halt_block();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_halt_block();
  void set_allocated_set_halt_block(std::string* set_halt_block);
  private:
  const std::string& _internal_set_halt_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_halt_block(const std::string& value);
  std::string* _internal_mutable_set_halt_block();
  public:

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  void clear_edit_ticker_owner();
  const std::string& edit_ticker_owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_ticker_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_ticker_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_ticker_owner();
  void set_allocated_edit_ticker_owner(std::string* edit_ticker_owner);
  private:
  const std::string& _internal_edit_ticker_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_ticker_owner(const std::string& value);
  std::string* _internal_mutable_edit_ticker_owner();
  public:

  // string edit_multisig = 23 [json_name = "editMultisig"];
  void clear_edit_multisig();
  const std::string& edit_multisig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_multisig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_multisig();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_multisig();
  void set_allocated_edit_multisig(std::string* edit_multisig);
  private:
  const std::string& _internal_edit_multisig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_multisig(const std::string& value);
  std::string* _internal_mutable_edit_multisig();
  public:

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  void clear_edit_candidate_public_key();
  const std::string& edit_candidate_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate_public_key();
  void set_allocated_edit_candidate_public_key(std::string* edit_candidate_public_key);
  private:
  const std::string& _internal_edit_candidate_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate_public_key(const std::string& value);
  std::string* _internal_mutable_edit_candidate_public_key();
  public:

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  void clear_edit_candidate_commission();
  const std::string& edit_candidate_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate_commission();
  void set_allocated_edit_candidate_commission(std::string* edit_candidate_commission);
  private:
  const std::string& _internal_edit_candidate_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate_commission(const std::string& value);
  std::string* _internal_mutable_edit_candidate_commission();
  public:

  // string vote_commission = 31 [json_name = "voteCommission"];
  void clear_vote_commission();
  const std::string& vote_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vote_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vote_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_vote_commission();
  void set_allocated_vote_commission(std::string* vote_commission);
  private:
  const std::string& _internal_vote_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_commission(const std::string& value);
  std::string* _internal_mutable_vote_commission();
  public:

  // string vote_update = 32 [json_name = "voteUpdate"];
  void clear_vote_update();
  const std::string& vote_update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vote_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vote_update();
  PROTOBUF_MUST_USE_RESULT std::string* release_vote_update();
  void set_allocated_vote_update(std::string* vote_update);
  private:
  const std::string& _internal_vote_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_update(const std::string& value);
  std::string* _internal_mutable_vote_update();
  public:

  // string create_coin = 34 [json_name = "createCoin"];
  void clear_create_coin();
  const std::string& create_coin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_coin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_coin();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_coin();
  void set_allocated_create_coin(std::string* create_coin);
  private:
  const std::string& _internal_create_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_coin(const std::string& value);
  std::string* _internal_mutable_create_coin();
  public:

  // string create_token = 35 [json_name = "createToken"];
  void clear_create_token();
  const std::string& create_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_token();
  void set_allocated_create_token(std::string* create_token);
  private:
  const std::string& _internal_create_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_token(const std::string& value);
  std::string* _internal_mutable_create_token();
  public:

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  void clear_recreate_coin();
  const std::string& recreate_coin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recreate_coin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recreate_coin();
  PROTOBUF_MUST_USE_RESULT std::string* release_recreate_coin();
  void set_allocated_recreate_coin(std::string* recreate_coin);
  private:
  const std::string& _internal_recreate_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recreate_coin(const std::string& value);
  std::string* _internal_mutable_recreate_coin();
  public:

  // string recreate_token = 37 [json_name = "recreateToken"];
  void clear_recreate_token();
  const std::string& recreate_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recreate_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recreate_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_recreate_token();
  void set_allocated_recreate_token(std::string* recreate_token);
  private:
  const std::string& _internal_recreate_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recreate_token(const std::string& value);
  std::string* _internal_mutable_recreate_token();
  public:

  // string buy_bancor = 38 [json_name = "buyBancor"];
  void clear_buy_bancor();
  const std::string& buy_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_bancor();
  void set_allocated_buy_bancor(std::string* buy_bancor);
  private:
  const std::string& _internal_buy_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_bancor(const std::string& value);
  std::string* _internal_mutable_buy_bancor();
  public:

  // string sell_bancor = 39 [json_name = "sellBancor"];
  void clear_sell_bancor();
  const std::string& sell_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_bancor();
  void set_allocated_sell_bancor(std::string* sell_bancor);
  private:
  const std::string& _internal_sell_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_bancor(const std::string& value);
  std::string* _internal_mutable_sell_bancor();
  public:

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  void clear_sell_all_bancor();
  const std::string& sell_all_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_bancor();
  void set_allocated_sell_all_bancor(std::string* sell_all_bancor);
  private:
  const std::string& _internal_sell_all_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_bancor(const std::string& value);
  std::string* _internal_mutable_sell_all_bancor();
  public:

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  void clear_buy_pool_base();
  const std::string& buy_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_pool_base();
  void set_allocated_buy_pool_base(std::string* buy_pool_base);
  private:
  const std::string& _internal_buy_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_pool_base(const std::string& value);
  std::string* _internal_mutable_buy_pool_base();
  public:

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  void clear_sell_pool_base();
  const std::string& sell_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_pool_base();
  void set_allocated_sell_pool_base(std::string* sell_pool_base);
  private:
  const std::string& _internal_sell_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_pool_base(const std::string& value);
  std::string* _internal_mutable_sell_pool_base();
  public:

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  void clear_sell_all_pool_base();
  const std::string& sell_all_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_pool_base();
  void set_allocated_sell_all_pool_base(std::string* sell_all_pool_base);
  private:
  const std::string& _internal_sell_all_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_pool_base(const std::string& value);
  std::string* _internal_mutable_sell_all_pool_base();
  public:

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  void clear_set_candidate_on();
  const std::string& set_candidate_on() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_candidate_on(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_candidate_on();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_candidate_on();
  void set_allocated_set_candidate_on(std::string* set_candidate_on);
  private:
  const std::string& _internal_set_candidate_on() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_candidate_on(const std::string& value);
  std::string* _internal_mutable_set_candidate_on();
  public:

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  void clear_set_candidate_off();
  const std::string& set_candidate_off() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_candidate_off(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_candidate_off();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_candidate_off();
  void set_allocated_set_candidate_off(std::string* set_candidate_off);
  private:
  const std::string& _internal_set_candidate_off() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_candidate_off(const std::string& value);
  std::string* _internal_mutable_set_candidate_off();
  public:

  // string mint_token = 46 [json_name = "mintToken"];
  void clear_mint_token();
  const std::string& mint_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mint_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mint_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_mint_token();
  void set_allocated_mint_token(std::string* mint_token);
  private:
  const std::string& _internal_mint_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mint_token(const std::string& value);
  std::string* _internal_mutable_mint_token();
  public:

  // string burn_token = 47 [json_name = "burnToken"];
  void clear_burn_token();
  const std::string& burn_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_burn_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_burn_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_burn_token();
  void set_allocated_burn_token(std::string* burn_token);
  private:
  const std::string& _internal_burn_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_burn_token(const std::string& value);
  std::string* _internal_mutable_burn_token();
  public:

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  void clear_create_swap_pool();
  const std::string& create_swap_pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_swap_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_swap_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_swap_pool();
  void set_allocated_create_swap_pool(std::string* create_swap_pool);
  private:
  const std::string& _internal_create_swap_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_swap_pool(const std::string& value);
  std::string* _internal_mutable_create_swap_pool();
  public:

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  void clear_add_liquidity();
  const std::string& add_liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_liquidity();
  void set_allocated_add_liquidity(std::string* add_liquidity);
  private:
  const std::string& _internal_add_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_liquidity(const std::string& value);
  std::string* _internal_mutable_add_liquidity();
  public:

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  void clear_remove_liquidity();
  const std::string& remove_liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remove_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remove_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_remove_liquidity();
  void set_allocated_remove_liquidity(std::string* remove_liquidity);
  private:
  const std::string& _internal_remove_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remove_liquidity(const std::string& value);
  std::string* _internal_mutable_remove_liquidity();
  public:

  // string multisend_base = 51 [json_name = "multisendBase"];
  void clear_multisend_base();
  const std::string& multisend_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multisend_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multisend_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_multisend_base();
  void set_allocated_multisend_base(std::string* multisend_base);
  private:
  const std::string& _internal_multisend_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multisend_base(const std::string& value);
  std::string* _internal_mutable_multisend_base();
  public:

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  void clear_multisend_delta();
  const std::string& multisend_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multisend_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multisend_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_multisend_delta();
  void set_allocated_multisend_delta(std::string* multisend_delta);
  private:
  const std::string& _internal_multisend_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multisend_delta(const std::string& value);
  std::string* _internal_mutable_multisend_delta();
  public:

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  void clear_buy_pool_delta();
  const std::string& buy_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_pool_delta();
  void set_allocated_buy_pool_delta(std::string* buy_pool_delta);
  private:
  const std::string& _internal_buy_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_pool_delta(const std::string& value);
  std::string* _internal_mutable_buy_pool_delta();
  public:

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  void clear_sell_pool_delta();
  const std::string& sell_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_pool_delta();
  void set_allocated_sell_pool_delta(std::string* sell_pool_delta);
  private:
  const std::string& _internal_sell_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_pool_delta(const std::string& value);
  std::string* _internal_mutable_sell_pool_delta();
  public:

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  void clear_sell_all_pool_delta();
  const std::string& sell_all_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_pool_delta();
  void set_allocated_sell_all_pool_delta(std::string* sell_all_pool_delta);
  private:
  const std::string& _internal_sell_all_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_pool_delta(const std::string& value);
  std::string* _internal_mutable_sell_all_pool_delta();
  public:

  // string failed_tx = 56 [json_name = "failedTx"];
  void clear_failed_tx();
  const std::string& failed_tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failed_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failed_tx();
  PROTOBUF_MUST_USE_RESULT std::string* release_failed_tx();
  void set_allocated_failed_tx(std::string* failed_tx);
  private:
  const std::string& _internal_failed_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failed_tx(const std::string& value);
  std::string* _internal_mutable_failed_tx();
  public:

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  void clear_add_limit_order();
  const std::string& add_limit_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_limit_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_limit_order();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_limit_order();
  void set_allocated_add_limit_order(std::string* add_limit_order);
  private:
  const std::string& _internal_add_limit_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_limit_order(const std::string& value);
  std::string* _internal_mutable_add_limit_order();
  public:

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  void clear_remove_limit_order();
  const std::string& remove_limit_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remove_limit_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remove_limit_order();
  PROTOBUF_MUST_USE_RESULT std::string* release_remove_limit_order();
  void set_allocated_remove_limit_order(std::string* remove_limit_order);
  private:
  const std::string& _internal_remove_limit_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remove_limit_order(const std::string& value);
  std::string* _internal_mutable_remove_limit_order();
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UpdateCommissionsEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_byte_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker7_10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr declare_candidacy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unbond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redeem_check_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_multisig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_halt_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_ticker_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_multisig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_commission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_commission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_update_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recreate_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recreate_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_candidate_on_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_candidate_off_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mint_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burn_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_swap_pool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remove_liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multisend_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multisend_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failed_tx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_limit_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remove_limit_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// -------------------------------------------------------------------

class OrderExpiredEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.OrderExpiredEvent) */ {
 public:
  inline OrderExpiredEvent() : OrderExpiredEvent(nullptr) {}
  ~OrderExpiredEvent() override;
  explicit constexpr OrderExpiredEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderExpiredEvent(const OrderExpiredEvent& from);
  OrderExpiredEvent(OrderExpiredEvent&& from) noexcept
    : OrderExpiredEvent() {
    *this = ::std::move(from);
  }

  inline OrderExpiredEvent& operator=(const OrderExpiredEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderExpiredEvent& operator=(OrderExpiredEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderExpiredEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderExpiredEvent* internal_default_instance() {
    return reinterpret_cast<const OrderExpiredEvent*>(
               &_OrderExpiredEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OrderExpiredEvent& a, OrderExpiredEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderExpiredEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderExpiredEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderExpiredEvent* New() const final {
    return new OrderExpiredEvent();
  }

  OrderExpiredEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderExpiredEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderExpiredEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrderExpiredEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderExpiredEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.OrderExpiredEvent";
  }
  protected:
  explicit OrderExpiredEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kAmountFieldNumber = 4,
    kIdFieldNumber = 1,
    kCoinFieldNumber = 3,
  };
  // string address = 2 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string amount = 4 [json_name = "amount"];
  void clear_amount();
  const std::string& amount() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount();
  void set_allocated_amount(std::string* amount);
  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(const std::string& value);
  std::string* _internal_mutable_amount();
  public:

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.OrderExpiredEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_events_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JailEvent

// string validator_pub_key = 1 [json_name = "validatorPubKey"];
inline void JailEvent::clear_validator_pub_key() {
  validator_pub_key_.ClearToEmpty();
}
inline const std::string& JailEvent::validator_pub_key() const {
  // @@protoc_insertion_point(field_get:api_pb.JailEvent.validator_pub_key)
  return _internal_validator_pub_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JailEvent::set_validator_pub_key(ArgT0&& arg0, ArgT... args) {
 
 validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.JailEvent.validator_pub_key)
}
inline std::string* JailEvent::mutable_validator_pub_key() {
  std::string* _s = _internal_mutable_validator_pub_key();
  // @@protoc_insertion_point(field_mutable:api_pb.JailEvent.validator_pub_key)
  return _s;
}
inline const std::string& JailEvent::_internal_validator_pub_key() const {
  return validator_pub_key_.Get();
}
inline void JailEvent::_internal_set_validator_pub_key(const std::string& value) {
  
  validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* JailEvent::_internal_mutable_validator_pub_key() {
  
  return validator_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* JailEvent::release_validator_pub_key() {
  // @@protoc_insertion_point(field_release:api_pb.JailEvent.validator_pub_key)
  return validator_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void JailEvent::set_allocated_validator_pub_key(std::string* validator_pub_key) {
  if (validator_pub_key != nullptr) {
    
  } else {
    
  }
  validator_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pub_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.JailEvent.validator_pub_key)
}

// uint64 jailed_until = 2 [json_name = "jailedUntil"];
inline void JailEvent::clear_jailed_until() {
  jailed_until_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JailEvent::_internal_jailed_until() const {
  return jailed_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JailEvent::jailed_until() const {
  // @@protoc_insertion_point(field_get:api_pb.JailEvent.jailed_until)
  return _internal_jailed_until();
}
inline void JailEvent::_internal_set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  jailed_until_ = value;
}
inline void JailEvent::set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jailed_until(value);
  // @@protoc_insertion_point(field_set:api_pb.JailEvent.jailed_until)
}

// -------------------------------------------------------------------

// RemoveCandidateEvent

// string candidate_pub_key = 1 [json_name = "candidatePubKey"];
inline void RemoveCandidateEvent::clear_candidate_pub_key() {
  candidate_pub_key_.ClearToEmpty();
}
inline const std::string& RemoveCandidateEvent::candidate_pub_key() const {
  // @@protoc_insertion_point(field_get:api_pb.RemoveCandidateEvent.candidate_pub_key)
  return _internal_candidate_pub_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveCandidateEvent::set_candidate_pub_key(ArgT0&& arg0, ArgT... args) {
 
 candidate_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.RemoveCandidateEvent.candidate_pub_key)
}
inline std::string* RemoveCandidateEvent::mutable_candidate_pub_key() {
  std::string* _s = _internal_mutable_candidate_pub_key();
  // @@protoc_insertion_point(field_mutable:api_pb.RemoveCandidateEvent.candidate_pub_key)
  return _s;
}
inline const std::string& RemoveCandidateEvent::_internal_candidate_pub_key() const {
  return candidate_pub_key_.Get();
}
inline void RemoveCandidateEvent::_internal_set_candidate_pub_key(const std::string& value) {
  
  candidate_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RemoveCandidateEvent::_internal_mutable_candidate_pub_key() {
  
  return candidate_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RemoveCandidateEvent::release_candidate_pub_key() {
  // @@protoc_insertion_point(field_release:api_pb.RemoveCandidateEvent.candidate_pub_key)
  return candidate_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RemoveCandidateEvent::set_allocated_candidate_pub_key(std::string* candidate_pub_key) {
  if (candidate_pub_key != nullptr) {
    
  } else {
    
  }
  candidate_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate_pub_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.RemoveCandidateEvent.candidate_pub_key)
}

// -------------------------------------------------------------------

// RewardEvent

// .api_pb.RewardEvent.Role role = 1 [json_name = "role"];
inline void RewardEvent::clear_role() {
  role_ = 0;
}
inline ::api_pb::RewardEvent_Role RewardEvent::_internal_role() const {
  return static_cast< ::api_pb::RewardEvent_Role >(role_);
}
inline ::api_pb::RewardEvent_Role RewardEvent::role() const {
  // @@protoc_insertion_point(field_get:api_pb.RewardEvent.role)
  return _internal_role();
}
inline void RewardEvent::_internal_set_role(::api_pb::RewardEvent_Role value) {
  
  role_ = value;
}
inline void RewardEvent::set_role(::api_pb::RewardEvent_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:api_pb.RewardEvent.role)
}

// string address = 2 [json_name = "address"];
inline void RewardEvent::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& RewardEvent::address() const {
  // @@protoc_insertion_point(field_get:api_pb.RewardEvent.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewardEvent::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.RewardEvent.address)
}
inline std::string* RewardEvent::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.RewardEvent.address)
  return _s;
}
inline const std::string& RewardEvent::_internal_address() const {
  return address_.Get();
}
inline void RewardEvent::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RewardEvent::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RewardEvent::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.RewardEvent.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RewardEvent::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.RewardEvent.address)
}

// string amount = 3 [json_name = "amount"];
inline void RewardEvent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& RewardEvent::amount() const {
  // @@protoc_insertion_point(field_get:api_pb.RewardEvent.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewardEvent::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.RewardEvent.amount)
}
inline std::string* RewardEvent::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:api_pb.RewardEvent.amount)
  return _s;
}
inline const std::string& RewardEvent::_internal_amount() const {
  return amount_.Get();
}
inline void RewardEvent::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RewardEvent::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RewardEvent::release_amount() {
  // @@protoc_insertion_point(field_release:api_pb.RewardEvent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RewardEvent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.RewardEvent.amount)
}

// uint64 coin = 5 [json_name = "coin"];
inline void RewardEvent::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardEvent::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardEvent::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.RewardEvent.coin)
  return _internal_coin();
}
inline void RewardEvent::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void RewardEvent::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.RewardEvent.coin)
}

// string validator_pub_key = 4 [json_name = "validatorPubKey"];
inline void RewardEvent::clear_validator_pub_key() {
  validator_pub_key_.ClearToEmpty();
}
inline const std::string& RewardEvent::validator_pub_key() const {
  // @@protoc_insertion_point(field_get:api_pb.RewardEvent.validator_pub_key)
  return _internal_validator_pub_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewardEvent::set_validator_pub_key(ArgT0&& arg0, ArgT... args) {
 
 validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.RewardEvent.validator_pub_key)
}
inline std::string* RewardEvent::mutable_validator_pub_key() {
  std::string* _s = _internal_mutable_validator_pub_key();
  // @@protoc_insertion_point(field_mutable:api_pb.RewardEvent.validator_pub_key)
  return _s;
}
inline const std::string& RewardEvent::_internal_validator_pub_key() const {
  return validator_pub_key_.Get();
}
inline void RewardEvent::_internal_set_validator_pub_key(const std::string& value) {
  
  validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RewardEvent::_internal_mutable_validator_pub_key() {
  
  return validator_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RewardEvent::release_validator_pub_key() {
  // @@protoc_insertion_point(field_release:api_pb.RewardEvent.validator_pub_key)
  return validator_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RewardEvent::set_allocated_validator_pub_key(std::string* validator_pub_key) {
  if (validator_pub_key != nullptr) {
    
  } else {
    
  }
  validator_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pub_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.RewardEvent.validator_pub_key)
}

// uint64 for_coin = 6 [json_name = "forCoin"];
inline void RewardEvent::clear_for_coin() {
  for_coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardEvent::_internal_for_coin() const {
  return for_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RewardEvent::for_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.RewardEvent.for_coin)
  return _internal_for_coin();
}
inline void RewardEvent::_internal_set_for_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  for_coin_ = value;
}
inline void RewardEvent::set_for_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_for_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.RewardEvent.for_coin)
}

// -------------------------------------------------------------------

// SlashEvent

// string address = 1 [json_name = "address"];
inline void SlashEvent::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& SlashEvent::address() const {
  // @@protoc_insertion_point(field_get:api_pb.SlashEvent.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlashEvent::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SlashEvent.address)
}
inline std::string* SlashEvent::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.SlashEvent.address)
  return _s;
}
inline const std::string& SlashEvent::_internal_address() const {
  return address_.Get();
}
inline void SlashEvent::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlashEvent::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlashEvent::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.SlashEvent.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlashEvent::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SlashEvent.address)
}

// string amount = 2 [json_name = "amount"];
inline void SlashEvent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& SlashEvent::amount() const {
  // @@protoc_insertion_point(field_get:api_pb.SlashEvent.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlashEvent::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SlashEvent.amount)
}
inline std::string* SlashEvent::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:api_pb.SlashEvent.amount)
  return _s;
}
inline const std::string& SlashEvent::_internal_amount() const {
  return amount_.Get();
}
inline void SlashEvent::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlashEvent::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlashEvent::release_amount() {
  // @@protoc_insertion_point(field_release:api_pb.SlashEvent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlashEvent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SlashEvent.amount)
}

// uint64 coin = 3 [json_name = "coin"];
inline void SlashEvent::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SlashEvent::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SlashEvent::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.SlashEvent.coin)
  return _internal_coin();
}
inline void SlashEvent::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void SlashEvent::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.SlashEvent.coin)
}

// string validator_pub_key = 4 [json_name = "validatorPubKey"];
inline void SlashEvent::clear_validator_pub_key() {
  validator_pub_key_.ClearToEmpty();
}
inline const std::string& SlashEvent::validator_pub_key() const {
  // @@protoc_insertion_point(field_get:api_pb.SlashEvent.validator_pub_key)
  return _internal_validator_pub_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SlashEvent::set_validator_pub_key(ArgT0&& arg0, ArgT... args) {
 
 validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SlashEvent.validator_pub_key)
}
inline std::string* SlashEvent::mutable_validator_pub_key() {
  std::string* _s = _internal_mutable_validator_pub_key();
  // @@protoc_insertion_point(field_mutable:api_pb.SlashEvent.validator_pub_key)
  return _s;
}
inline const std::string& SlashEvent::_internal_validator_pub_key() const {
  return validator_pub_key_.Get();
}
inline void SlashEvent::_internal_set_validator_pub_key(const std::string& value) {
  
  validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SlashEvent::_internal_mutable_validator_pub_key() {
  
  return validator_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SlashEvent::release_validator_pub_key() {
  // @@protoc_insertion_point(field_release:api_pb.SlashEvent.validator_pub_key)
  return validator_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SlashEvent::set_allocated_validator_pub_key(std::string* validator_pub_key) {
  if (validator_pub_key != nullptr) {
    
  } else {
    
  }
  validator_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pub_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SlashEvent.validator_pub_key)
}

// -------------------------------------------------------------------

// UnbondEvent

// string address = 1 [json_name = "address"];
inline void UnbondEvent::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& UnbondEvent::address() const {
  // @@protoc_insertion_point(field_get:api_pb.UnbondEvent.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnbondEvent::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UnbondEvent.address)
}
inline std::string* UnbondEvent::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.UnbondEvent.address)
  return _s;
}
inline const std::string& UnbondEvent::_internal_address() const {
  return address_.Get();
}
inline void UnbondEvent::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnbondEvent::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnbondEvent::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.UnbondEvent.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnbondEvent::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UnbondEvent.address)
}

// string amount = 2 [json_name = "amount"];
inline void UnbondEvent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& UnbondEvent::amount() const {
  // @@protoc_insertion_point(field_get:api_pb.UnbondEvent.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnbondEvent::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UnbondEvent.amount)
}
inline std::string* UnbondEvent::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:api_pb.UnbondEvent.amount)
  return _s;
}
inline const std::string& UnbondEvent::_internal_amount() const {
  return amount_.Get();
}
inline void UnbondEvent::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnbondEvent::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnbondEvent::release_amount() {
  // @@protoc_insertion_point(field_release:api_pb.UnbondEvent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnbondEvent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UnbondEvent.amount)
}

// uint64 coin = 3 [json_name = "coin"];
inline void UnbondEvent::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnbondEvent::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnbondEvent::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.UnbondEvent.coin)
  return _internal_coin();
}
inline void UnbondEvent::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void UnbondEvent::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.UnbondEvent.coin)
}

// string validator_pub_key = 4 [json_name = "validatorPubKey"];
inline void UnbondEvent::clear_validator_pub_key() {
  validator_pub_key_.ClearToEmpty();
}
inline const std::string& UnbondEvent::validator_pub_key() const {
  // @@protoc_insertion_point(field_get:api_pb.UnbondEvent.validator_pub_key)
  return _internal_validator_pub_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnbondEvent::set_validator_pub_key(ArgT0&& arg0, ArgT... args) {
 
 validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UnbondEvent.validator_pub_key)
}
inline std::string* UnbondEvent::mutable_validator_pub_key() {
  std::string* _s = _internal_mutable_validator_pub_key();
  // @@protoc_insertion_point(field_mutable:api_pb.UnbondEvent.validator_pub_key)
  return _s;
}
inline const std::string& UnbondEvent::_internal_validator_pub_key() const {
  return validator_pub_key_.Get();
}
inline void UnbondEvent::_internal_set_validator_pub_key(const std::string& value) {
  
  validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UnbondEvent::_internal_mutable_validator_pub_key() {
  
  return validator_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UnbondEvent::release_validator_pub_key() {
  // @@protoc_insertion_point(field_release:api_pb.UnbondEvent.validator_pub_key)
  return validator_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UnbondEvent::set_allocated_validator_pub_key(std::string* validator_pub_key) {
  if (validator_pub_key != nullptr) {
    
  } else {
    
  }
  validator_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pub_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UnbondEvent.validator_pub_key)
}

// -------------------------------------------------------------------

// StakeKickEvent

// string address = 1 [json_name = "address"];
inline void StakeKickEvent::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& StakeKickEvent::address() const {
  // @@protoc_insertion_point(field_get:api_pb.StakeKickEvent.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakeKickEvent::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StakeKickEvent.address)
}
inline std::string* StakeKickEvent::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.StakeKickEvent.address)
  return _s;
}
inline const std::string& StakeKickEvent::_internal_address() const {
  return address_.Get();
}
inline void StakeKickEvent::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakeKickEvent::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakeKickEvent::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.StakeKickEvent.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakeKickEvent::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StakeKickEvent.address)
}

// string amount = 2 [json_name = "amount"];
inline void StakeKickEvent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& StakeKickEvent::amount() const {
  // @@protoc_insertion_point(field_get:api_pb.StakeKickEvent.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakeKickEvent::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StakeKickEvent.amount)
}
inline std::string* StakeKickEvent::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:api_pb.StakeKickEvent.amount)
  return _s;
}
inline const std::string& StakeKickEvent::_internal_amount() const {
  return amount_.Get();
}
inline void StakeKickEvent::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakeKickEvent::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakeKickEvent::release_amount() {
  // @@protoc_insertion_point(field_release:api_pb.StakeKickEvent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakeKickEvent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StakeKickEvent.amount)
}

// uint64 coin = 3 [json_name = "coin"];
inline void StakeKickEvent::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakeKickEvent::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StakeKickEvent::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.StakeKickEvent.coin)
  return _internal_coin();
}
inline void StakeKickEvent::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void StakeKickEvent::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.StakeKickEvent.coin)
}

// string validator_pub_key = 4 [json_name = "validatorPubKey"];
inline void StakeKickEvent::clear_validator_pub_key() {
  validator_pub_key_.ClearToEmpty();
}
inline const std::string& StakeKickEvent::validator_pub_key() const {
  // @@protoc_insertion_point(field_get:api_pb.StakeKickEvent.validator_pub_key)
  return _internal_validator_pub_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StakeKickEvent::set_validator_pub_key(ArgT0&& arg0, ArgT... args) {
 
 validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StakeKickEvent.validator_pub_key)
}
inline std::string* StakeKickEvent::mutable_validator_pub_key() {
  std::string* _s = _internal_mutable_validator_pub_key();
  // @@protoc_insertion_point(field_mutable:api_pb.StakeKickEvent.validator_pub_key)
  return _s;
}
inline const std::string& StakeKickEvent::_internal_validator_pub_key() const {
  return validator_pub_key_.Get();
}
inline void StakeKickEvent::_internal_set_validator_pub_key(const std::string& value) {
  
  validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StakeKickEvent::_internal_mutable_validator_pub_key() {
  
  return validator_pub_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StakeKickEvent::release_validator_pub_key() {
  // @@protoc_insertion_point(field_release:api_pb.StakeKickEvent.validator_pub_key)
  return validator_pub_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StakeKickEvent::set_allocated_validator_pub_key(std::string* validator_pub_key) {
  if (validator_pub_key != nullptr) {
    
  } else {
    
  }
  validator_pub_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validator_pub_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StakeKickEvent.validator_pub_key)
}

// -------------------------------------------------------------------

// UpdateNetworkEvent

// string version = 1 [json_name = "version"];
inline void UpdateNetworkEvent::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& UpdateNetworkEvent::version() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateNetworkEvent.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateNetworkEvent::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateNetworkEvent.version)
}
inline std::string* UpdateNetworkEvent::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateNetworkEvent.version)
  return _s;
}
inline const std::string& UpdateNetworkEvent::_internal_version() const {
  return version_.Get();
}
inline void UpdateNetworkEvent::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateNetworkEvent::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateNetworkEvent::release_version() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateNetworkEvent.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateNetworkEvent::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateNetworkEvent.version)
}

// -------------------------------------------------------------------

// UpdateCommissionsEvent

// uint64 coin = 3 [json_name = "coin"];
inline void UpdateCommissionsEvent::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateCommissionsEvent::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateCommissionsEvent::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.coin)
  return _internal_coin();
}
inline void UpdateCommissionsEvent::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void UpdateCommissionsEvent::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.coin)
}

// string payload_byte = 4 [json_name = "payloadByte"];
inline void UpdateCommissionsEvent::clear_payload_byte() {
  payload_byte_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::payload_byte() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.payload_byte)
  return _internal_payload_byte();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_payload_byte(ArgT0&& arg0, ArgT... args) {
 
 payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.payload_byte)
}
inline std::string* UpdateCommissionsEvent::mutable_payload_byte() {
  std::string* _s = _internal_mutable_payload_byte();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.payload_byte)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_payload_byte() const {
  return payload_byte_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_payload_byte(const std::string& value) {
  
  payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_payload_byte() {
  
  return payload_byte_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_payload_byte() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.payload_byte)
  return payload_byte_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_payload_byte(std::string* payload_byte) {
  if (payload_byte != nullptr) {
    
  } else {
    
  }
  payload_byte_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_byte,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.payload_byte)
}

// string send = 5 [json_name = "send"];
inline void UpdateCommissionsEvent::clear_send() {
  send_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::send() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.send)
  return _internal_send();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_send(ArgT0&& arg0, ArgT... args) {
 
 send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.send)
}
inline std::string* UpdateCommissionsEvent::mutable_send() {
  std::string* _s = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.send)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_send() const {
  return send_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_send(const std::string& value) {
  
  send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_send() {
  
  return send_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_send() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.send)
  return send_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_send(std::string* send) {
  if (send != nullptr) {
    
  } else {
    
  }
  send_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), send,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.send)
}

// string buy_bancor = 38 [json_name = "buyBancor"];
inline void UpdateCommissionsEvent::clear_buy_bancor() {
  buy_bancor_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::buy_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.buy_bancor)
  return _internal_buy_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_buy_bancor(ArgT0&& arg0, ArgT... args) {
 
 buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.buy_bancor)
}
inline std::string* UpdateCommissionsEvent::mutable_buy_bancor() {
  std::string* _s = _internal_mutable_buy_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.buy_bancor)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_buy_bancor() const {
  return buy_bancor_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_buy_bancor(const std::string& value) {
  
  buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_buy_bancor() {
  
  return buy_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_buy_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.buy_bancor)
  return buy_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_buy_bancor(std::string* buy_bancor) {
  if (buy_bancor != nullptr) {
    
  } else {
    
  }
  buy_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.buy_bancor)
}

// string sell_bancor = 39 [json_name = "sellBancor"];
inline void UpdateCommissionsEvent::clear_sell_bancor() {
  sell_bancor_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::sell_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.sell_bancor)
  return _internal_sell_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_sell_bancor(ArgT0&& arg0, ArgT... args) {
 
 sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.sell_bancor)
}
inline std::string* UpdateCommissionsEvent::mutable_sell_bancor() {
  std::string* _s = _internal_mutable_sell_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.sell_bancor)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_sell_bancor() const {
  return sell_bancor_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_sell_bancor(const std::string& value) {
  
  sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_sell_bancor() {
  
  return sell_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_sell_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.sell_bancor)
  return sell_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_sell_bancor(std::string* sell_bancor) {
  if (sell_bancor != nullptr) {
    
  } else {
    
  }
  sell_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.sell_bancor)
}

// string sell_all_bancor = 40 [json_name = "sellAllBancor"];
inline void UpdateCommissionsEvent::clear_sell_all_bancor() {
  sell_all_bancor_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::sell_all_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.sell_all_bancor)
  return _internal_sell_all_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_sell_all_bancor(ArgT0&& arg0, ArgT... args) {
 
 sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.sell_all_bancor)
}
inline std::string* UpdateCommissionsEvent::mutable_sell_all_bancor() {
  std::string* _s = _internal_mutable_sell_all_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.sell_all_bancor)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_sell_all_bancor() const {
  return sell_all_bancor_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_sell_all_bancor(const std::string& value) {
  
  sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_sell_all_bancor() {
  
  return sell_all_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_sell_all_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.sell_all_bancor)
  return sell_all_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_sell_all_bancor(std::string* sell_all_bancor) {
  if (sell_all_bancor != nullptr) {
    
  } else {
    
  }
  sell_all_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.sell_all_bancor)
}

// string buy_pool_base = 41 [json_name = "buyPoolBase"];
inline void UpdateCommissionsEvent::clear_buy_pool_base() {
  buy_pool_base_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::buy_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.buy_pool_base)
  return _internal_buy_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_buy_pool_base(ArgT0&& arg0, ArgT... args) {
 
 buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.buy_pool_base)
}
inline std::string* UpdateCommissionsEvent::mutable_buy_pool_base() {
  std::string* _s = _internal_mutable_buy_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.buy_pool_base)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_buy_pool_base() const {
  return buy_pool_base_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_buy_pool_base(const std::string& value) {
  
  buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_buy_pool_base() {
  
  return buy_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_buy_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.buy_pool_base)
  return buy_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_buy_pool_base(std::string* buy_pool_base) {
  if (buy_pool_base != nullptr) {
    
  } else {
    
  }
  buy_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.buy_pool_base)
}

// string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
inline void UpdateCommissionsEvent::clear_buy_pool_delta() {
  buy_pool_delta_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::buy_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.buy_pool_delta)
  return _internal_buy_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_buy_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.buy_pool_delta)
}
inline std::string* UpdateCommissionsEvent::mutable_buy_pool_delta() {
  std::string* _s = _internal_mutable_buy_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.buy_pool_delta)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_buy_pool_delta() const {
  return buy_pool_delta_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_buy_pool_delta(const std::string& value) {
  
  buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_buy_pool_delta() {
  
  return buy_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_buy_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.buy_pool_delta)
  return buy_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_buy_pool_delta(std::string* buy_pool_delta) {
  if (buy_pool_delta != nullptr) {
    
  } else {
    
  }
  buy_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.buy_pool_delta)
}

// string sell_pool_base = 42 [json_name = "sellPoolBase"];
inline void UpdateCommissionsEvent::clear_sell_pool_base() {
  sell_pool_base_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::sell_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.sell_pool_base)
  return _internal_sell_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_sell_pool_base(ArgT0&& arg0, ArgT... args) {
 
 sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.sell_pool_base)
}
inline std::string* UpdateCommissionsEvent::mutable_sell_pool_base() {
  std::string* _s = _internal_mutable_sell_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.sell_pool_base)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_sell_pool_base() const {
  return sell_pool_base_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_sell_pool_base(const std::string& value) {
  
  sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_sell_pool_base() {
  
  return sell_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_sell_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.sell_pool_base)
  return sell_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_sell_pool_base(std::string* sell_pool_base) {
  if (sell_pool_base != nullptr) {
    
  } else {
    
  }
  sell_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.sell_pool_base)
}

// string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
inline void UpdateCommissionsEvent::clear_sell_pool_delta() {
  sell_pool_delta_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::sell_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.sell_pool_delta)
  return _internal_sell_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_sell_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.sell_pool_delta)
}
inline std::string* UpdateCommissionsEvent::mutable_sell_pool_delta() {
  std::string* _s = _internal_mutable_sell_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.sell_pool_delta)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_sell_pool_delta() const {
  return sell_pool_delta_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_sell_pool_delta(const std::string& value) {
  
  sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_sell_pool_delta() {
  
  return sell_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_sell_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.sell_pool_delta)
  return sell_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_sell_pool_delta(std::string* sell_pool_delta) {
  if (sell_pool_delta != nullptr) {
    
  } else {
    
  }
  sell_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.sell_pool_delta)
}

// string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
inline void UpdateCommissionsEvent::clear_sell_all_pool_base() {
  sell_all_pool_base_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::sell_all_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.sell_all_pool_base)
  return _internal_sell_all_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_sell_all_pool_base(ArgT0&& arg0, ArgT... args) {
 
 sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.sell_all_pool_base)
}
inline std::string* UpdateCommissionsEvent::mutable_sell_all_pool_base() {
  std::string* _s = _internal_mutable_sell_all_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.sell_all_pool_base)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_sell_all_pool_base() const {
  return sell_all_pool_base_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_sell_all_pool_base(const std::string& value) {
  
  sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_sell_all_pool_base() {
  
  return sell_all_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_sell_all_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.sell_all_pool_base)
  return sell_all_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_sell_all_pool_base(std::string* sell_all_pool_base) {
  if (sell_all_pool_base != nullptr) {
    
  } else {
    
  }
  sell_all_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.sell_all_pool_base)
}

// string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
inline void UpdateCommissionsEvent::clear_sell_all_pool_delta() {
  sell_all_pool_delta_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::sell_all_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.sell_all_pool_delta)
  return _internal_sell_all_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_sell_all_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.sell_all_pool_delta)
}
inline std::string* UpdateCommissionsEvent::mutable_sell_all_pool_delta() {
  std::string* _s = _internal_mutable_sell_all_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.sell_all_pool_delta)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_sell_all_pool_delta() const {
  return sell_all_pool_delta_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_sell_all_pool_delta(const std::string& value) {
  
  sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_sell_all_pool_delta() {
  
  return sell_all_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_sell_all_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.sell_all_pool_delta)
  return sell_all_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_sell_all_pool_delta(std::string* sell_all_pool_delta) {
  if (sell_all_pool_delta != nullptr) {
    
  } else {
    
  }
  sell_all_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.sell_all_pool_delta)
}

// string create_ticker3 = 7 [json_name = "createTicker3"];
inline void UpdateCommissionsEvent::clear_create_ticker3() {
  create_ticker3_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_ticker3() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_ticker3)
  return _internal_create_ticker3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_ticker3(ArgT0&& arg0, ArgT... args) {
 
 create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_ticker3)
}
inline std::string* UpdateCommissionsEvent::mutable_create_ticker3() {
  std::string* _s = _internal_mutable_create_ticker3();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_ticker3)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_ticker3() const {
  return create_ticker3_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_ticker3(const std::string& value) {
  
  create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_ticker3() {
  
  return create_ticker3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_ticker3() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_ticker3)
  return create_ticker3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_ticker3(std::string* create_ticker3) {
  if (create_ticker3 != nullptr) {
    
  } else {
    
  }
  create_ticker3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker3,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_ticker3)
}

// string create_ticker4 = 8 [json_name = "createTicker4"];
inline void UpdateCommissionsEvent::clear_create_ticker4() {
  create_ticker4_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_ticker4() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_ticker4)
  return _internal_create_ticker4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_ticker4(ArgT0&& arg0, ArgT... args) {
 
 create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_ticker4)
}
inline std::string* UpdateCommissionsEvent::mutable_create_ticker4() {
  std::string* _s = _internal_mutable_create_ticker4();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_ticker4)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_ticker4() const {
  return create_ticker4_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_ticker4(const std::string& value) {
  
  create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_ticker4() {
  
  return create_ticker4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_ticker4() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_ticker4)
  return create_ticker4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_ticker4(std::string* create_ticker4) {
  if (create_ticker4 != nullptr) {
    
  } else {
    
  }
  create_ticker4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker4,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_ticker4)
}

// string create_ticker5 = 9 [json_name = "createTicker5"];
inline void UpdateCommissionsEvent::clear_create_ticker5() {
  create_ticker5_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_ticker5() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_ticker5)
  return _internal_create_ticker5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_ticker5(ArgT0&& arg0, ArgT... args) {
 
 create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_ticker5)
}
inline std::string* UpdateCommissionsEvent::mutable_create_ticker5() {
  std::string* _s = _internal_mutable_create_ticker5();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_ticker5)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_ticker5() const {
  return create_ticker5_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_ticker5(const std::string& value) {
  
  create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_ticker5() {
  
  return create_ticker5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_ticker5() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_ticker5)
  return create_ticker5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_ticker5(std::string* create_ticker5) {
  if (create_ticker5 != nullptr) {
    
  } else {
    
  }
  create_ticker5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_ticker5)
}

// string create_ticker6 = 10 [json_name = "createTicker6"];
inline void UpdateCommissionsEvent::clear_create_ticker6() {
  create_ticker6_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_ticker6() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_ticker6)
  return _internal_create_ticker6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_ticker6(ArgT0&& arg0, ArgT... args) {
 
 create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_ticker6)
}
inline std::string* UpdateCommissionsEvent::mutable_create_ticker6() {
  std::string* _s = _internal_mutable_create_ticker6();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_ticker6)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_ticker6() const {
  return create_ticker6_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_ticker6(const std::string& value) {
  
  create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_ticker6() {
  
  return create_ticker6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_ticker6() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_ticker6)
  return create_ticker6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_ticker6(std::string* create_ticker6) {
  if (create_ticker6 != nullptr) {
    
  } else {
    
  }
  create_ticker6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker6,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_ticker6)
}

// string create_ticker7_10 = 11 [json_name = "createTicker710"];
inline void UpdateCommissionsEvent::clear_create_ticker7_10() {
  create_ticker7_10_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_ticker7_10() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_ticker7_10)
  return _internal_create_ticker7_10();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_ticker7_10(ArgT0&& arg0, ArgT... args) {
 
 create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_ticker7_10)
}
inline std::string* UpdateCommissionsEvent::mutable_create_ticker7_10() {
  std::string* _s = _internal_mutable_create_ticker7_10();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_ticker7_10)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_ticker7_10() const {
  return create_ticker7_10_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_ticker7_10(const std::string& value) {
  
  create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_ticker7_10() {
  
  return create_ticker7_10_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_ticker7_10() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_ticker7_10)
  return create_ticker7_10_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_ticker7_10(std::string* create_ticker7_10) {
  if (create_ticker7_10 != nullptr) {
    
  } else {
    
  }
  create_ticker7_10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker7_10,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_ticker7_10)
}

// string create_coin = 34 [json_name = "createCoin"];
inline void UpdateCommissionsEvent::clear_create_coin() {
  create_coin_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_coin)
  return _internal_create_coin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_coin(ArgT0&& arg0, ArgT... args) {
 
 create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_coin)
}
inline std::string* UpdateCommissionsEvent::mutable_create_coin() {
  std::string* _s = _internal_mutable_create_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_coin)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_coin() const {
  return create_coin_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_coin(const std::string& value) {
  
  create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_coin() {
  
  return create_coin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_coin() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_coin)
  return create_coin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_coin(std::string* create_coin) {
  if (create_coin != nullptr) {
    
  } else {
    
  }
  create_coin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_coin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_coin)
}

// string create_token = 35 [json_name = "createToken"];
inline void UpdateCommissionsEvent::clear_create_token() {
  create_token_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_token() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_token)
  return _internal_create_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_token(ArgT0&& arg0, ArgT... args) {
 
 create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_token)
}
inline std::string* UpdateCommissionsEvent::mutable_create_token() {
  std::string* _s = _internal_mutable_create_token();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_token)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_token() const {
  return create_token_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_token(const std::string& value) {
  
  create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_token() {
  
  return create_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_token() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_token)
  return create_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_token(std::string* create_token) {
  if (create_token != nullptr) {
    
  } else {
    
  }
  create_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_token)
}

// string recreate_coin = 36 [json_name = "recreateCoin"];
inline void UpdateCommissionsEvent::clear_recreate_coin() {
  recreate_coin_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::recreate_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.recreate_coin)
  return _internal_recreate_coin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_recreate_coin(ArgT0&& arg0, ArgT... args) {
 
 recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.recreate_coin)
}
inline std::string* UpdateCommissionsEvent::mutable_recreate_coin() {
  std::string* _s = _internal_mutable_recreate_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.recreate_coin)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_recreate_coin() const {
  return recreate_coin_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_recreate_coin(const std::string& value) {
  
  recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_recreate_coin() {
  
  return recreate_coin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_recreate_coin() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.recreate_coin)
  return recreate_coin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_recreate_coin(std::string* recreate_coin) {
  if (recreate_coin != nullptr) {
    
  } else {
    
  }
  recreate_coin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recreate_coin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.recreate_coin)
}

// string recreate_token = 37 [json_name = "recreateToken"];
inline void UpdateCommissionsEvent::clear_recreate_token() {
  recreate_token_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::recreate_token() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.recreate_token)
  return _internal_recreate_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_recreate_token(ArgT0&& arg0, ArgT... args) {
 
 recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.recreate_token)
}
inline std::string* UpdateCommissionsEvent::mutable_recreate_token() {
  std::string* _s = _internal_mutable_recreate_token();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.recreate_token)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_recreate_token() const {
  return recreate_token_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_recreate_token(const std::string& value) {
  
  recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_recreate_token() {
  
  return recreate_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_recreate_token() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.recreate_token)
  return recreate_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_recreate_token(std::string* recreate_token) {
  if (recreate_token != nullptr) {
    
  } else {
    
  }
  recreate_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recreate_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.recreate_token)
}

// string declare_candidacy = 13 [json_name = "declareCandidacy"];
inline void UpdateCommissionsEvent::clear_declare_candidacy() {
  declare_candidacy_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::declare_candidacy() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.declare_candidacy)
  return _internal_declare_candidacy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_declare_candidacy(ArgT0&& arg0, ArgT... args) {
 
 declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.declare_candidacy)
}
inline std::string* UpdateCommissionsEvent::mutable_declare_candidacy() {
  std::string* _s = _internal_mutable_declare_candidacy();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.declare_candidacy)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_declare_candidacy() const {
  return declare_candidacy_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_declare_candidacy(const std::string& value) {
  
  declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_declare_candidacy() {
  
  return declare_candidacy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_declare_candidacy() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.declare_candidacy)
  return declare_candidacy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_declare_candidacy(std::string* declare_candidacy) {
  if (declare_candidacy != nullptr) {
    
  } else {
    
  }
  declare_candidacy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), declare_candidacy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.declare_candidacy)
}

// string delegate = 14 [json_name = "delegate"];
inline void UpdateCommissionsEvent::clear_delegate() {
  delegate_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::delegate() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.delegate)
  return _internal_delegate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_delegate(ArgT0&& arg0, ArgT... args) {
 
 delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.delegate)
}
inline std::string* UpdateCommissionsEvent::mutable_delegate() {
  std::string* _s = _internal_mutable_delegate();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.delegate)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_delegate() const {
  return delegate_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_delegate(const std::string& value) {
  
  delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_delegate() {
  
  return delegate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_delegate() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.delegate)
  return delegate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_delegate(std::string* delegate) {
  if (delegate != nullptr) {
    
  } else {
    
  }
  delegate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.delegate)
}

// string unbond = 15 [json_name = "unbond"];
inline void UpdateCommissionsEvent::clear_unbond() {
  unbond_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::unbond() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.unbond)
  return _internal_unbond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_unbond(ArgT0&& arg0, ArgT... args) {
 
 unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.unbond)
}
inline std::string* UpdateCommissionsEvent::mutable_unbond() {
  std::string* _s = _internal_mutable_unbond();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.unbond)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_unbond() const {
  return unbond_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_unbond(const std::string& value) {
  
  unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_unbond() {
  
  return unbond_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_unbond() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.unbond)
  return unbond_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_unbond(std::string* unbond) {
  if (unbond != nullptr) {
    
  } else {
    
  }
  unbond_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unbond,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.unbond)
}

// string redeem_check = 16 [json_name = "redeemCheck"];
inline void UpdateCommissionsEvent::clear_redeem_check() {
  redeem_check_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::redeem_check() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.redeem_check)
  return _internal_redeem_check();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_redeem_check(ArgT0&& arg0, ArgT... args) {
 
 redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.redeem_check)
}
inline std::string* UpdateCommissionsEvent::mutable_redeem_check() {
  std::string* _s = _internal_mutable_redeem_check();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.redeem_check)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_redeem_check() const {
  return redeem_check_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_redeem_check(const std::string& value) {
  
  redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_redeem_check() {
  
  return redeem_check_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_redeem_check() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.redeem_check)
  return redeem_check_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_redeem_check(std::string* redeem_check) {
  if (redeem_check != nullptr) {
    
  } else {
    
  }
  redeem_check_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redeem_check,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.redeem_check)
}

// string set_candidate_on = 44 [json_name = "setCandidateOn"];
inline void UpdateCommissionsEvent::clear_set_candidate_on() {
  set_candidate_on_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::set_candidate_on() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.set_candidate_on)
  return _internal_set_candidate_on();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_set_candidate_on(ArgT0&& arg0, ArgT... args) {
 
 set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.set_candidate_on)
}
inline std::string* UpdateCommissionsEvent::mutable_set_candidate_on() {
  std::string* _s = _internal_mutable_set_candidate_on();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.set_candidate_on)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_set_candidate_on() const {
  return set_candidate_on_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_set_candidate_on(const std::string& value) {
  
  set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_set_candidate_on() {
  
  return set_candidate_on_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_set_candidate_on() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.set_candidate_on)
  return set_candidate_on_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_set_candidate_on(std::string* set_candidate_on) {
  if (set_candidate_on != nullptr) {
    
  } else {
    
  }
  set_candidate_on_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_candidate_on,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.set_candidate_on)
}

// string set_candidate_off = 45 [json_name = "setCandidateOff"];
inline void UpdateCommissionsEvent::clear_set_candidate_off() {
  set_candidate_off_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::set_candidate_off() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.set_candidate_off)
  return _internal_set_candidate_off();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_set_candidate_off(ArgT0&& arg0, ArgT... args) {
 
 set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.set_candidate_off)
}
inline std::string* UpdateCommissionsEvent::mutable_set_candidate_off() {
  std::string* _s = _internal_mutable_set_candidate_off();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.set_candidate_off)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_set_candidate_off() const {
  return set_candidate_off_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_set_candidate_off(const std::string& value) {
  
  set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_set_candidate_off() {
  
  return set_candidate_off_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_set_candidate_off() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.set_candidate_off)
  return set_candidate_off_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_set_candidate_off(std::string* set_candidate_off) {
  if (set_candidate_off != nullptr) {
    
  } else {
    
  }
  set_candidate_off_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_candidate_off,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.set_candidate_off)
}

// string create_multisig = 18 [json_name = "createMultisig"];
inline void UpdateCommissionsEvent::clear_create_multisig() {
  create_multisig_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_multisig)
  return _internal_create_multisig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_multisig(ArgT0&& arg0, ArgT... args) {
 
 create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_multisig)
}
inline std::string* UpdateCommissionsEvent::mutable_create_multisig() {
  std::string* _s = _internal_mutable_create_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_multisig)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_multisig() const {
  return create_multisig_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_multisig(const std::string& value) {
  
  create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_multisig() {
  
  return create_multisig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_multisig)
  return create_multisig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_multisig(std::string* create_multisig) {
  if (create_multisig != nullptr) {
    
  } else {
    
  }
  create_multisig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_multisig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_multisig)
}

// string multisend_base = 51 [json_name = "multisendBase"];
inline void UpdateCommissionsEvent::clear_multisend_base() {
  multisend_base_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::multisend_base() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.multisend_base)
  return _internal_multisend_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_multisend_base(ArgT0&& arg0, ArgT... args) {
 
 multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.multisend_base)
}
inline std::string* UpdateCommissionsEvent::mutable_multisend_base() {
  std::string* _s = _internal_mutable_multisend_base();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.multisend_base)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_multisend_base() const {
  return multisend_base_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_multisend_base(const std::string& value) {
  
  multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_multisend_base() {
  
  return multisend_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_multisend_base() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.multisend_base)
  return multisend_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_multisend_base(std::string* multisend_base) {
  if (multisend_base != nullptr) {
    
  } else {
    
  }
  multisend_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multisend_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.multisend_base)
}

// string multisend_delta = 52 [json_name = "multisendDelta"];
inline void UpdateCommissionsEvent::clear_multisend_delta() {
  multisend_delta_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::multisend_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.multisend_delta)
  return _internal_multisend_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_multisend_delta(ArgT0&& arg0, ArgT... args) {
 
 multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.multisend_delta)
}
inline std::string* UpdateCommissionsEvent::mutable_multisend_delta() {
  std::string* _s = _internal_mutable_multisend_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.multisend_delta)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_multisend_delta() const {
  return multisend_delta_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_multisend_delta(const std::string& value) {
  
  multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_multisend_delta() {
  
  return multisend_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_multisend_delta() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.multisend_delta)
  return multisend_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_multisend_delta(std::string* multisend_delta) {
  if (multisend_delta != nullptr) {
    
  } else {
    
  }
  multisend_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multisend_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.multisend_delta)
}

// string edit_candidate = 20 [json_name = "editCandidate"];
inline void UpdateCommissionsEvent::clear_edit_candidate() {
  edit_candidate_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::edit_candidate() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.edit_candidate)
  return _internal_edit_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_edit_candidate(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.edit_candidate)
}
inline std::string* UpdateCommissionsEvent::mutable_edit_candidate() {
  std::string* _s = _internal_mutable_edit_candidate();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.edit_candidate)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_edit_candidate() const {
  return edit_candidate_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_edit_candidate(const std::string& value) {
  
  edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_edit_candidate() {
  
  return edit_candidate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_edit_candidate() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.edit_candidate)
  return edit_candidate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_edit_candidate(std::string* edit_candidate) {
  if (edit_candidate != nullptr) {
    
  } else {
    
  }
  edit_candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.edit_candidate)
}

// string set_halt_block = 21 [json_name = "setHaltBlock"];
inline void UpdateCommissionsEvent::clear_set_halt_block() {
  set_halt_block_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::set_halt_block() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.set_halt_block)
  return _internal_set_halt_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_set_halt_block(ArgT0&& arg0, ArgT... args) {
 
 set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.set_halt_block)
}
inline std::string* UpdateCommissionsEvent::mutable_set_halt_block() {
  std::string* _s = _internal_mutable_set_halt_block();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.set_halt_block)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_set_halt_block() const {
  return set_halt_block_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_set_halt_block(const std::string& value) {
  
  set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_set_halt_block() {
  
  return set_halt_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_set_halt_block() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.set_halt_block)
  return set_halt_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_set_halt_block(std::string* set_halt_block) {
  if (set_halt_block != nullptr) {
    
  } else {
    
  }
  set_halt_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_halt_block,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.set_halt_block)
}

// string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
inline void UpdateCommissionsEvent::clear_edit_ticker_owner() {
  edit_ticker_owner_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::edit_ticker_owner() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.edit_ticker_owner)
  return _internal_edit_ticker_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_edit_ticker_owner(ArgT0&& arg0, ArgT... args) {
 
 edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.edit_ticker_owner)
}
inline std::string* UpdateCommissionsEvent::mutable_edit_ticker_owner() {
  std::string* _s = _internal_mutable_edit_ticker_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.edit_ticker_owner)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_edit_ticker_owner() const {
  return edit_ticker_owner_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_edit_ticker_owner(const std::string& value) {
  
  edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_edit_ticker_owner() {
  
  return edit_ticker_owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_edit_ticker_owner() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.edit_ticker_owner)
  return edit_ticker_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_edit_ticker_owner(std::string* edit_ticker_owner) {
  if (edit_ticker_owner != nullptr) {
    
  } else {
    
  }
  edit_ticker_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_ticker_owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.edit_ticker_owner)
}

// string edit_multisig = 23 [json_name = "editMultisig"];
inline void UpdateCommissionsEvent::clear_edit_multisig() {
  edit_multisig_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::edit_multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.edit_multisig)
  return _internal_edit_multisig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_edit_multisig(ArgT0&& arg0, ArgT... args) {
 
 edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.edit_multisig)
}
inline std::string* UpdateCommissionsEvent::mutable_edit_multisig() {
  std::string* _s = _internal_mutable_edit_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.edit_multisig)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_edit_multisig() const {
  return edit_multisig_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_edit_multisig(const std::string& value) {
  
  edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_edit_multisig() {
  
  return edit_multisig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_edit_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.edit_multisig)
  return edit_multisig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_edit_multisig(std::string* edit_multisig) {
  if (edit_multisig != nullptr) {
    
  } else {
    
  }
  edit_multisig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_multisig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.edit_multisig)
}

// string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
inline void UpdateCommissionsEvent::clear_edit_candidate_public_key() {
  edit_candidate_public_key_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::edit_candidate_public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.edit_candidate_public_key)
  return _internal_edit_candidate_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_edit_candidate_public_key(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.edit_candidate_public_key)
}
inline std::string* UpdateCommissionsEvent::mutable_edit_candidate_public_key() {
  std::string* _s = _internal_mutable_edit_candidate_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.edit_candidate_public_key)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_edit_candidate_public_key() const {
  return edit_candidate_public_key_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_edit_candidate_public_key(const std::string& value) {
  
  edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_edit_candidate_public_key() {
  
  return edit_candidate_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_edit_candidate_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.edit_candidate_public_key)
  return edit_candidate_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_edit_candidate_public_key(std::string* edit_candidate_public_key) {
  if (edit_candidate_public_key != nullptr) {
    
  } else {
    
  }
  edit_candidate_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate_public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.edit_candidate_public_key)
}

// string create_swap_pool = 48 [json_name = "createSwapPool"];
inline void UpdateCommissionsEvent::clear_create_swap_pool() {
  create_swap_pool_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::create_swap_pool() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.create_swap_pool)
  return _internal_create_swap_pool();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_create_swap_pool(ArgT0&& arg0, ArgT... args) {
 
 create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.create_swap_pool)
}
inline std::string* UpdateCommissionsEvent::mutable_create_swap_pool() {
  std::string* _s = _internal_mutable_create_swap_pool();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.create_swap_pool)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_create_swap_pool() const {
  return create_swap_pool_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_create_swap_pool(const std::string& value) {
  
  create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_create_swap_pool() {
  
  return create_swap_pool_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_create_swap_pool() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.create_swap_pool)
  return create_swap_pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_create_swap_pool(std::string* create_swap_pool) {
  if (create_swap_pool != nullptr) {
    
  } else {
    
  }
  create_swap_pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_swap_pool,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.create_swap_pool)
}

// string add_liquidity = 49 [json_name = "addLiquidity"];
inline void UpdateCommissionsEvent::clear_add_liquidity() {
  add_liquidity_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::add_liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.add_liquidity)
  return _internal_add_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_add_liquidity(ArgT0&& arg0, ArgT... args) {
 
 add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.add_liquidity)
}
inline std::string* UpdateCommissionsEvent::mutable_add_liquidity() {
  std::string* _s = _internal_mutable_add_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.add_liquidity)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_add_liquidity() const {
  return add_liquidity_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_add_liquidity(const std::string& value) {
  
  add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_add_liquidity() {
  
  return add_liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_add_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.add_liquidity)
  return add_liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_add_liquidity(std::string* add_liquidity) {
  if (add_liquidity != nullptr) {
    
  } else {
    
  }
  add_liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.add_liquidity)
}

// string remove_liquidity = 50 [json_name = "removeLiquidity"];
inline void UpdateCommissionsEvent::clear_remove_liquidity() {
  remove_liquidity_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::remove_liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.remove_liquidity)
  return _internal_remove_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_remove_liquidity(ArgT0&& arg0, ArgT... args) {
 
 remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.remove_liquidity)
}
inline std::string* UpdateCommissionsEvent::mutable_remove_liquidity() {
  std::string* _s = _internal_mutable_remove_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.remove_liquidity)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_remove_liquidity() const {
  return remove_liquidity_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_remove_liquidity(const std::string& value) {
  
  remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_remove_liquidity() {
  
  return remove_liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_remove_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.remove_liquidity)
  return remove_liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_remove_liquidity(std::string* remove_liquidity) {
  if (remove_liquidity != nullptr) {
    
  } else {
    
  }
  remove_liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remove_liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.remove_liquidity)
}

// string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
inline void UpdateCommissionsEvent::clear_edit_candidate_commission() {
  edit_candidate_commission_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::edit_candidate_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.edit_candidate_commission)
  return _internal_edit_candidate_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_edit_candidate_commission(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.edit_candidate_commission)
}
inline std::string* UpdateCommissionsEvent::mutable_edit_candidate_commission() {
  std::string* _s = _internal_mutable_edit_candidate_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.edit_candidate_commission)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_edit_candidate_commission() const {
  return edit_candidate_commission_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_edit_candidate_commission(const std::string& value) {
  
  edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_edit_candidate_commission() {
  
  return edit_candidate_commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_edit_candidate_commission() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.edit_candidate_commission)
  return edit_candidate_commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_edit_candidate_commission(std::string* edit_candidate_commission) {
  if (edit_candidate_commission != nullptr) {
    
  } else {
    
  }
  edit_candidate_commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate_commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.edit_candidate_commission)
}

// string mint_token = 46 [json_name = "mintToken"];
inline void UpdateCommissionsEvent::clear_mint_token() {
  mint_token_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::mint_token() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.mint_token)
  return _internal_mint_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_mint_token(ArgT0&& arg0, ArgT... args) {
 
 mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.mint_token)
}
inline std::string* UpdateCommissionsEvent::mutable_mint_token() {
  std::string* _s = _internal_mutable_mint_token();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.mint_token)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_mint_token() const {
  return mint_token_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_mint_token(const std::string& value) {
  
  mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_mint_token() {
  
  return mint_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_mint_token() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.mint_token)
  return mint_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_mint_token(std::string* mint_token) {
  if (mint_token != nullptr) {
    
  } else {
    
  }
  mint_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mint_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.mint_token)
}

// string burn_token = 47 [json_name = "burnToken"];
inline void UpdateCommissionsEvent::clear_burn_token() {
  burn_token_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::burn_token() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.burn_token)
  return _internal_burn_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_burn_token(ArgT0&& arg0, ArgT... args) {
 
 burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.burn_token)
}
inline std::string* UpdateCommissionsEvent::mutable_burn_token() {
  std::string* _s = _internal_mutable_burn_token();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.burn_token)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_burn_token() const {
  return burn_token_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_burn_token(const std::string& value) {
  
  burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_burn_token() {
  
  return burn_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_burn_token() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.burn_token)
  return burn_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_burn_token(std::string* burn_token) {
  if (burn_token != nullptr) {
    
  } else {
    
  }
  burn_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), burn_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.burn_token)
}

// string vote_commission = 31 [json_name = "voteCommission"];
inline void UpdateCommissionsEvent::clear_vote_commission() {
  vote_commission_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::vote_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.vote_commission)
  return _internal_vote_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_vote_commission(ArgT0&& arg0, ArgT... args) {
 
 vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.vote_commission)
}
inline std::string* UpdateCommissionsEvent::mutable_vote_commission() {
  std::string* _s = _internal_mutable_vote_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.vote_commission)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_vote_commission() const {
  return vote_commission_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_vote_commission(const std::string& value) {
  
  vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_vote_commission() {
  
  return vote_commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_vote_commission() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.vote_commission)
  return vote_commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_vote_commission(std::string* vote_commission) {
  if (vote_commission != nullptr) {
    
  } else {
    
  }
  vote_commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.vote_commission)
}

// string vote_update = 32 [json_name = "voteUpdate"];
inline void UpdateCommissionsEvent::clear_vote_update() {
  vote_update_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::vote_update() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.vote_update)
  return _internal_vote_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_vote_update(ArgT0&& arg0, ArgT... args) {
 
 vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.vote_update)
}
inline std::string* UpdateCommissionsEvent::mutable_vote_update() {
  std::string* _s = _internal_mutable_vote_update();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.vote_update)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_vote_update() const {
  return vote_update_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_vote_update(const std::string& value) {
  
  vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_vote_update() {
  
  return vote_update_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_vote_update() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.vote_update)
  return vote_update_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_vote_update(std::string* vote_update) {
  if (vote_update != nullptr) {
    
  } else {
    
  }
  vote_update_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_update,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.vote_update)
}

// string failed_tx = 56 [json_name = "failedTx"];
inline void UpdateCommissionsEvent::clear_failed_tx() {
  failed_tx_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::failed_tx() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.failed_tx)
  return _internal_failed_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_failed_tx(ArgT0&& arg0, ArgT... args) {
 
 failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.failed_tx)
}
inline std::string* UpdateCommissionsEvent::mutable_failed_tx() {
  std::string* _s = _internal_mutable_failed_tx();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.failed_tx)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_failed_tx() const {
  return failed_tx_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_failed_tx(const std::string& value) {
  
  failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_failed_tx() {
  
  return failed_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_failed_tx() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.failed_tx)
  return failed_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_failed_tx(std::string* failed_tx) {
  if (failed_tx != nullptr) {
    
  } else {
    
  }
  failed_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failed_tx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.failed_tx)
}

// string add_limit_order = 57 [json_name = "addLimitOrder"];
inline void UpdateCommissionsEvent::clear_add_limit_order() {
  add_limit_order_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::add_limit_order() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.add_limit_order)
  return _internal_add_limit_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_add_limit_order(ArgT0&& arg0, ArgT... args) {
 
 add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.add_limit_order)
}
inline std::string* UpdateCommissionsEvent::mutable_add_limit_order() {
  std::string* _s = _internal_mutable_add_limit_order();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.add_limit_order)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_add_limit_order() const {
  return add_limit_order_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_add_limit_order(const std::string& value) {
  
  add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_add_limit_order() {
  
  return add_limit_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_add_limit_order() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.add_limit_order)
  return add_limit_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_add_limit_order(std::string* add_limit_order) {
  if (add_limit_order != nullptr) {
    
  } else {
    
  }
  add_limit_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_limit_order,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.add_limit_order)
}

// string remove_limit_order = 58 [json_name = "removeLimitOrder"];
inline void UpdateCommissionsEvent::clear_remove_limit_order() {
  remove_limit_order_.ClearToEmpty();
}
inline const std::string& UpdateCommissionsEvent::remove_limit_order() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateCommissionsEvent.remove_limit_order)
  return _internal_remove_limit_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateCommissionsEvent::set_remove_limit_order(ArgT0&& arg0, ArgT... args) {
 
 remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateCommissionsEvent.remove_limit_order)
}
inline std::string* UpdateCommissionsEvent::mutable_remove_limit_order() {
  std::string* _s = _internal_mutable_remove_limit_order();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateCommissionsEvent.remove_limit_order)
  return _s;
}
inline const std::string& UpdateCommissionsEvent::_internal_remove_limit_order() const {
  return remove_limit_order_.Get();
}
inline void UpdateCommissionsEvent::_internal_set_remove_limit_order(const std::string& value) {
  
  remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::_internal_mutable_remove_limit_order() {
  
  return remove_limit_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateCommissionsEvent::release_remove_limit_order() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateCommissionsEvent.remove_limit_order)
  return remove_limit_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateCommissionsEvent::set_allocated_remove_limit_order(std::string* remove_limit_order) {
  if (remove_limit_order != nullptr) {
    
  } else {
    
  }
  remove_limit_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remove_limit_order,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateCommissionsEvent.remove_limit_order)
}

// -------------------------------------------------------------------

// OrderExpiredEvent

// uint64 id = 1 [json_name = "id"];
inline void OrderExpiredEvent::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderExpiredEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderExpiredEvent::id() const {
  // @@protoc_insertion_point(field_get:api_pb.OrderExpiredEvent.id)
  return _internal_id();
}
inline void OrderExpiredEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void OrderExpiredEvent::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.OrderExpiredEvent.id)
}

// string address = 2 [json_name = "address"];
inline void OrderExpiredEvent::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& OrderExpiredEvent::address() const {
  // @@protoc_insertion_point(field_get:api_pb.OrderExpiredEvent.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderExpiredEvent::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.OrderExpiredEvent.address)
}
inline std::string* OrderExpiredEvent::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.OrderExpiredEvent.address)
  return _s;
}
inline const std::string& OrderExpiredEvent::_internal_address() const {
  return address_.Get();
}
inline void OrderExpiredEvent::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderExpiredEvent::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderExpiredEvent::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.OrderExpiredEvent.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderExpiredEvent::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.OrderExpiredEvent.address)
}

// uint64 coin = 3 [json_name = "coin"];
inline void OrderExpiredEvent::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderExpiredEvent::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OrderExpiredEvent::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.OrderExpiredEvent.coin)
  return _internal_coin();
}
inline void OrderExpiredEvent::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void OrderExpiredEvent::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.OrderExpiredEvent.coin)
}

// string amount = 4 [json_name = "amount"];
inline void OrderExpiredEvent::clear_amount() {
  amount_.ClearToEmpty();
}
inline const std::string& OrderExpiredEvent::amount() const {
  // @@protoc_insertion_point(field_get:api_pb.OrderExpiredEvent.amount)
  return _internal_amount();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderExpiredEvent::set_amount(ArgT0&& arg0, ArgT... args) {
 
 amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.OrderExpiredEvent.amount)
}
inline std::string* OrderExpiredEvent::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:api_pb.OrderExpiredEvent.amount)
  return _s;
}
inline const std::string& OrderExpiredEvent::_internal_amount() const {
  return amount_.Get();
}
inline void OrderExpiredEvent::_internal_set_amount(const std::string& value) {
  
  amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderExpiredEvent::_internal_mutable_amount() {
  
  return amount_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderExpiredEvent::release_amount() {
  // @@protoc_insertion_point(field_release:api_pb.OrderExpiredEvent.amount)
  return amount_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderExpiredEvent::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.OrderExpiredEvent.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api_pb::RewardEvent_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api_pb::RewardEvent_Role>() {
  return ::api_pb::RewardEvent_Role_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_events_2eproto
