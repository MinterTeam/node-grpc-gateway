// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swagger.proto

#include "swagger.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace api_pb {
constexpr ErrorBody_Error_DataEntry_DoNotUse::ErrorBody_Error_DataEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ErrorBody_Error_DataEntry_DoNotUseDefaultTypeInternal {
  constexpr ErrorBody_Error_DataEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorBody_Error_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ErrorBody_Error_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorBody_Error_DataEntry_DoNotUseDefaultTypeInternal _ErrorBody_Error_DataEntry_DoNotUse_default_instance_;
constexpr ErrorBody_Error::ErrorBody_Error(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ErrorBody_ErrorDefaultTypeInternal {
  constexpr ErrorBody_ErrorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorBody_ErrorDefaultTypeInternal() {}
  union {
    ErrorBody_Error _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorBody_ErrorDefaultTypeInternal _ErrorBody_Error_default_instance_;
constexpr ErrorBody::ErrorBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(nullptr){}
struct ErrorBodyDefaultTypeInternal {
  constexpr ErrorBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorBodyDefaultTypeInternal() {}
  union {
    ErrorBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorBodyDefaultTypeInternal _ErrorBody_default_instance_;
}  // namespace api_pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_swagger_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_swagger_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_swagger_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_swagger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error, code_),
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error, message_),
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody_Error, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::ErrorBody, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::api_pb::ErrorBody_Error_DataEntry_DoNotUse)},
  { 9, -1, sizeof(::api_pb::ErrorBody_Error)},
  { 17, -1, sizeof(::api_pb::ErrorBody)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_ErrorBody_Error_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_ErrorBody_Error_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_ErrorBody_default_instance_),
};

const char descriptor_table_protodef_swagger_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rswagger.proto\022\006api_pb\032.protoc-gen-open"
  "apiv2/options/annotations.proto\"\342\001\n\tErro"
  "rBody\022-\n\005error\030\001 \001(\0132\027.api_pb.ErrorBody."
  "ErrorR\005error\032\245\001\n\005Error\022\022\n\004code\030\001 \001(\tR\004co"
  "de\022\030\n\007message\030\002 \001(\tR\007message\0225\n\004data\030\003 \003"
  "(\0132!.api_pb.ErrorBody.Error.DataEntryR\004d"
  "ata\0327\n\tDataEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005va"
  "lue\030\002 \001(\tR\005value:\0028\001B\251\004\n\023network.minter."
  "grpcP\001Z5github.com/MinterTeam/node-grpc-"
  "gateway/gen/go;api_pb\272\002\006Minter\222A\316\003\022\273\001\n\022M"
  "inter Node API v2\"U\n\023Minter gRPC-Gateway"
  "\022/https://github.com/MinterTeam/node-grp"
  "c-gateway\032\rsk@minter.org*G\n\003MIT\022@https:/"
  "/github.com/MinterTeam/minter-go-node/bl"
  "ob/master/LICENSE2\0051.5.0\"\003/v22\020applicati"
  "on/json:\020application/jsonR\243\001\n\007default\022\227\001"
  "\n\035An unexpected error response.\022v\n\023\032\021.ap"
  "i_pb.ErrorBody2_{\"error\": {\"code\": \"504\""
  ", \"message\": \"context deadline exceeded\""
  ", \"data\": {\"operation\":\"ABC\"}}}r\?\n\034More "
  "about Minter blockchain\022\037https://www.min"
  "ter.network/docsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_swagger_2eproto_deps[1] = {
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_swagger_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_swagger_2eproto = {
  false, false, 864, descriptor_table_protodef_swagger_2eproto, "swagger.proto", 
  &descriptor_table_swagger_2eproto_once, descriptor_table_swagger_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_swagger_2eproto::offsets,
  file_level_metadata_swagger_2eproto, file_level_enum_descriptors_swagger_2eproto, file_level_service_descriptors_swagger_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_swagger_2eproto_getter() {
  return &descriptor_table_swagger_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_swagger_2eproto(&descriptor_table_swagger_2eproto);
namespace api_pb {

// ===================================================================

ErrorBody_Error_DataEntry_DoNotUse::ErrorBody_Error_DataEntry_DoNotUse() {}
ErrorBody_Error_DataEntry_DoNotUse::ErrorBody_Error_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ErrorBody_Error_DataEntry_DoNotUse::MergeFrom(const ErrorBody_Error_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ErrorBody_Error_DataEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_swagger_2eproto_getter, &descriptor_table_swagger_2eproto_once,
      file_level_metadata_swagger_2eproto[0]);
}

// ===================================================================

class ErrorBody_Error::_Internal {
 public:
};

ErrorBody_Error::ErrorBody_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.ErrorBody.Error)
}
ErrorBody_Error::ErrorBody_Error(const ErrorBody_Error& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.ErrorBody.Error)
}

inline void ErrorBody_Error::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorBody_Error::~ErrorBody_Error() {
  // @@protoc_insertion_point(destructor:api_pb.ErrorBody.Error)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrorBody_Error::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorBody_Error::ArenaDtor(void* object) {
  ErrorBody_Error* _this = reinterpret_cast< ErrorBody_Error* >(object);
  (void)_this;
  _this->data_. ~MapField();
}
inline void ErrorBody_Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ErrorBody_Error::ArenaDtor);
  }
}
void ErrorBody_Error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorBody_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.ErrorBody.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  code_.ClearToEmpty();
  message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorBody_Error::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.ErrorBody.Error.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.ErrorBody.Error.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorBody_Error::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.ErrorBody.Error)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.ErrorBody.Error.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.ErrorBody.Error.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // map<string, string> data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api_pb.ErrorBody.Error.DataEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api_pb.ErrorBody.Error.DataEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ErrorBody_Error_DataEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = ErrorBody_Error_DataEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.ErrorBody.Error)
  return target;
}

size_t ErrorBody_Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.ErrorBody.Error)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> data = 3 [json_name = "data"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += ErrorBody_Error_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string code = 1 [json_name = "code"];
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorBody_Error::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrorBody_Error::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorBody_Error::GetClassData() const { return &_class_data_; }

void ErrorBody_Error::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ErrorBody_Error *>(to)->MergeFrom(
      static_cast<const ErrorBody_Error &>(from));
}


void ErrorBody_Error::MergeFrom(const ErrorBody_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.ErrorBody.Error)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorBody_Error::CopyFrom(const ErrorBody_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.ErrorBody.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorBody_Error::IsInitialized() const {
  return true;
}

void ErrorBody_Error::InternalSwap(ErrorBody_Error* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, GetArenaForAllocation(),
      &other->code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorBody_Error::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_swagger_2eproto_getter, &descriptor_table_swagger_2eproto_once,
      file_level_metadata_swagger_2eproto[1]);
}

// ===================================================================

class ErrorBody::_Internal {
 public:
  static const ::api_pb::ErrorBody_Error& error(const ErrorBody* msg);
};

const ::api_pb::ErrorBody_Error&
ErrorBody::_Internal::error(const ErrorBody* msg) {
  return *msg->error_;
}
ErrorBody::ErrorBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.ErrorBody)
}
ErrorBody::ErrorBody(const ErrorBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error()) {
    error_ = new ::api_pb::ErrorBody_Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.ErrorBody)
}

inline void ErrorBody::SharedCtor() {
error_ = nullptr;
}

ErrorBody::~ErrorBody() {
  // @@protoc_insertion_point(destructor:api_pb.ErrorBody)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrorBody::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void ErrorBody::ArenaDtor(void* object) {
  ErrorBody* _this = reinterpret_cast< ErrorBody* >(object);
  (void)_this;
}
void ErrorBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorBody::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.ErrorBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.ErrorBody.Error error = 1 [json_name = "error"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.ErrorBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.ErrorBody.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.ErrorBody)
  return target;
}

size_t ErrorBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.ErrorBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api_pb.ErrorBody.Error error = 1 [json_name = "error"];
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorBody::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrorBody::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorBody::GetClassData() const { return &_class_data_; }

void ErrorBody::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ErrorBody *>(to)->MergeFrom(
      static_cast<const ErrorBody &>(from));
}


void ErrorBody::MergeFrom(const ErrorBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.ErrorBody)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_error()) {
    _internal_mutable_error()->::api_pb::ErrorBody_Error::MergeFrom(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorBody::CopyFrom(const ErrorBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.ErrorBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorBody::IsInitialized() const {
  return true;
}

void ErrorBody::InternalSwap(ErrorBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorBody::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_swagger_2eproto_getter, &descriptor_table_swagger_2eproto_once,
      file_level_metadata_swagger_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api_pb::ErrorBody_Error_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::api_pb::ErrorBody_Error_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::ErrorBody_Error_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::ErrorBody_Error* Arena::CreateMaybeMessage< ::api_pb::ErrorBody_Error >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::ErrorBody_Error >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::ErrorBody* Arena::CreateMaybeMessage< ::api_pb::ErrorBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::ErrorBody >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
