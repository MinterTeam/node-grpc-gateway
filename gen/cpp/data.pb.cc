// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace api_pb {
constexpr SendData::SendData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct SendDataDefaultTypeInternal {
  constexpr SendDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendDataDefaultTypeInternal() {}
  union {
    SendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendDataDefaultTypeInternal _SendData_default_instance_;
constexpr SellCoinData::SellCoinData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minimum_value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_to_sell_(nullptr)
  , coin_to_buy_(nullptr){}
struct SellCoinDataDefaultTypeInternal {
  constexpr SellCoinDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SellCoinDataDefaultTypeInternal() {}
  union {
    SellCoinData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SellCoinDataDefaultTypeInternal _SellCoinData_default_instance_;
constexpr SellAllCoinData::SellAllCoinData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minimum_value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_to_sell_(nullptr)
  , coin_to_buy_(nullptr){}
struct SellAllCoinDataDefaultTypeInternal {
  constexpr SellAllCoinDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SellAllCoinDataDefaultTypeInternal() {}
  union {
    SellAllCoinData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SellAllCoinDataDefaultTypeInternal _SellAllCoinData_default_instance_;
constexpr BuyCoinData::BuyCoinData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maximum_value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_to_buy_(nullptr)
  , coin_to_sell_(nullptr){}
struct BuyCoinDataDefaultTypeInternal {
  constexpr BuyCoinDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuyCoinDataDefaultTypeInternal() {}
  union {
    BuyCoinData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuyCoinDataDefaultTypeInternal _BuyCoinData_default_instance_;
constexpr CreateCoinData::CreateCoinData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_reserve_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_supply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , constant_reserve_ratio_(uint64_t{0u}){}
struct CreateCoinDataDefaultTypeInternal {
  constexpr CreateCoinDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCoinDataDefaultTypeInternal() {}
  union {
    CreateCoinData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCoinDataDefaultTypeInternal _CreateCoinData_default_instance_;
constexpr DeclareCandidacyData::DeclareCandidacyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stake_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr)
  , commission_(uint64_t{0u}){}
struct DeclareCandidacyDataDefaultTypeInternal {
  constexpr DeclareCandidacyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeclareCandidacyDataDefaultTypeInternal() {}
  union {
    DeclareCandidacyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeclareCandidacyDataDefaultTypeInternal _DeclareCandidacyData_default_instance_;
constexpr DelegateData::DelegateData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct DelegateDataDefaultTypeInternal {
  constexpr DelegateDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelegateDataDefaultTypeInternal() {}
  union {
    DelegateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelegateDataDefaultTypeInternal _DelegateData_default_instance_;
constexpr UnbondData::UnbondData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct UnbondDataDefaultTypeInternal {
  constexpr UnbondDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnbondDataDefaultTypeInternal() {}
  union {
    UnbondData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnbondDataDefaultTypeInternal _UnbondData_default_instance_;
constexpr RedeemCheckData::RedeemCheckData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_check_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proof_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RedeemCheckDataDefaultTypeInternal {
  constexpr RedeemCheckDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RedeemCheckDataDefaultTypeInternal() {}
  union {
    RedeemCheckData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RedeemCheckDataDefaultTypeInternal _RedeemCheckData_default_instance_;
constexpr SetCandidateOnData::SetCandidateOnData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetCandidateOnDataDefaultTypeInternal {
  constexpr SetCandidateOnDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCandidateOnDataDefaultTypeInternal() {}
  union {
    SetCandidateOnData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCandidateOnDataDefaultTypeInternal _SetCandidateOnData_default_instance_;
constexpr SetCandidateOffData::SetCandidateOffData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetCandidateOffDataDefaultTypeInternal {
  constexpr SetCandidateOffDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetCandidateOffDataDefaultTypeInternal() {}
  union {
    SetCandidateOffData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetCandidateOffDataDefaultTypeInternal _SetCandidateOffData_default_instance_;
constexpr CreateMultisigData::CreateMultisigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weights_()
  , _weights_cached_byte_size_(0)
  , addresses_()
  , threshold_(uint64_t{0u}){}
struct CreateMultisigDataDefaultTypeInternal {
  constexpr CreateMultisigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateMultisigDataDefaultTypeInternal() {}
  union {
    CreateMultisigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateMultisigDataDefaultTypeInternal _CreateMultisigData_default_instance_;
constexpr MultiSendData::MultiSendData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct MultiSendDataDefaultTypeInternal {
  constexpr MultiSendDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiSendDataDefaultTypeInternal() {}
  union {
    MultiSendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiSendDataDefaultTypeInternal _MultiSendData_default_instance_;
constexpr EditCandidateData::EditCandidateData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EditCandidateDataDefaultTypeInternal {
  constexpr EditCandidateDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCandidateDataDefaultTypeInternal() {}
  union {
    EditCandidateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCandidateDataDefaultTypeInternal _EditCandidateData_default_instance_;
constexpr SetHaltBlockData::SetHaltBlockData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct SetHaltBlockDataDefaultTypeInternal {
  constexpr SetHaltBlockDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetHaltBlockDataDefaultTypeInternal() {}
  union {
    SetHaltBlockData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetHaltBlockDataDefaultTypeInternal _SetHaltBlockData_default_instance_;
constexpr RecreateCoinData::RecreateCoinData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_reserve_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_supply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , constant_reserve_ratio_(uint64_t{0u}){}
struct RecreateCoinDataDefaultTypeInternal {
  constexpr RecreateCoinDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecreateCoinDataDefaultTypeInternal() {}
  union {
    RecreateCoinData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecreateCoinDataDefaultTypeInternal _RecreateCoinData_default_instance_;
constexpr EditCoinOwnerData::EditCoinOwnerData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EditCoinOwnerDataDefaultTypeInternal {
  constexpr EditCoinOwnerDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCoinOwnerDataDefaultTypeInternal() {}
  union {
    EditCoinOwnerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCoinOwnerDataDefaultTypeInternal _EditCoinOwnerData_default_instance_;
constexpr EditMultisigData::EditMultisigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weights_()
  , _weights_cached_byte_size_(0)
  , addresses_()
  , threshold_(uint64_t{0u}){}
struct EditMultisigDataDefaultTypeInternal {
  constexpr EditMultisigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditMultisigDataDefaultTypeInternal() {}
  union {
    EditMultisigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditMultisigDataDefaultTypeInternal _EditMultisigData_default_instance_;
constexpr EditCandidatePublicKeyData::EditCandidatePublicKeyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , new_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EditCandidatePublicKeyDataDefaultTypeInternal {
  constexpr EditCandidatePublicKeyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCandidatePublicKeyDataDefaultTypeInternal() {}
  union {
    EditCandidatePublicKeyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCandidatePublicKeyDataDefaultTypeInternal _EditCandidatePublicKeyData_default_instance_;
constexpr CreateSwapPoolData::CreateSwapPoolData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin0_(nullptr)
  , coin1_(nullptr){}
struct CreateSwapPoolDataDefaultTypeInternal {
  constexpr CreateSwapPoolDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSwapPoolDataDefaultTypeInternal() {}
  union {
    CreateSwapPoolData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSwapPoolDataDefaultTypeInternal _CreateSwapPoolData_default_instance_;
constexpr AddLiquidityData::AddLiquidityData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volume0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maximum_volume1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin0_(nullptr)
  , coin1_(nullptr){}
struct AddLiquidityDataDefaultTypeInternal {
  constexpr AddLiquidityDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddLiquidityDataDefaultTypeInternal() {}
  union {
    AddLiquidityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddLiquidityDataDefaultTypeInternal _AddLiquidityData_default_instance_;
constexpr RemoveLiquidityData::RemoveLiquidityData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minimum_volume0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minimum_volume1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin0_(nullptr)
  , coin1_(nullptr){}
struct RemoveLiquidityDataDefaultTypeInternal {
  constexpr RemoveLiquidityDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveLiquidityDataDefaultTypeInternal() {}
  union {
    RemoveLiquidityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveLiquidityDataDefaultTypeInternal _RemoveLiquidityData_default_instance_;
constexpr SellSwapPoolData::SellSwapPoolData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coins_()
  , value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , minimum_value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SellSwapPoolDataDefaultTypeInternal {
  constexpr SellSwapPoolDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SellSwapPoolDataDefaultTypeInternal() {}
  union {
    SellSwapPoolData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SellSwapPoolDataDefaultTypeInternal _SellSwapPoolData_default_instance_;
constexpr SellAllSwapPoolData::SellAllSwapPoolData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coins_()
  , minimum_value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SellAllSwapPoolDataDefaultTypeInternal {
  constexpr SellAllSwapPoolDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SellAllSwapPoolDataDefaultTypeInternal() {}
  union {
    SellAllSwapPoolData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SellAllSwapPoolDataDefaultTypeInternal _SellAllSwapPoolData_default_instance_;
constexpr BuySwapPoolData::BuySwapPoolData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coins_()
  , value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maximum_value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BuySwapPoolDataDefaultTypeInternal {
  constexpr BuySwapPoolDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BuySwapPoolDataDefaultTypeInternal() {}
  union {
    BuySwapPoolData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BuySwapPoolDataDefaultTypeInternal _BuySwapPoolData_default_instance_;
constexpr EditCandidateCommission::EditCandidateCommission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commission_(uint64_t{0u}){}
struct EditCandidateCommissionDefaultTypeInternal {
  constexpr EditCandidateCommissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCandidateCommissionDefaultTypeInternal() {}
  union {
    EditCandidateCommission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCandidateCommissionDefaultTypeInternal _EditCandidateCommission_default_instance_;
constexpr MintTokenData::MintTokenData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct MintTokenDataDefaultTypeInternal {
  constexpr MintTokenDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MintTokenDataDefaultTypeInternal() {}
  union {
    MintTokenData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MintTokenDataDefaultTypeInternal _MintTokenData_default_instance_;
constexpr BurnTokenData::BurnTokenData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct BurnTokenDataDefaultTypeInternal {
  constexpr BurnTokenDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BurnTokenDataDefaultTypeInternal() {}
  union {
    BurnTokenData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BurnTokenDataDefaultTypeInternal _BurnTokenData_default_instance_;
constexpr CreateTokenData::CreateTokenData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_supply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mintable_(false)
  , burnable_(false){}
struct CreateTokenDataDefaultTypeInternal {
  constexpr CreateTokenDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTokenDataDefaultTypeInternal() {}
  union {
    CreateTokenData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTokenDataDefaultTypeInternal _CreateTokenData_default_instance_;
constexpr RecreateTokenData::RecreateTokenData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , initial_amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_supply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mintable_(false)
  , burnable_(false){}
struct RecreateTokenDataDefaultTypeInternal {
  constexpr RecreateTokenDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecreateTokenDataDefaultTypeInternal() {}
  union {
    RecreateTokenData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecreateTokenDataDefaultTypeInternal _RecreateTokenData_default_instance_;
constexpr VoteCommissionData::VoteCommissionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_byte_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker7_10_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , declare_candidacy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delegate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unbond_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redeem_check_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_halt_block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_ticker_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_update_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_on_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_off_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mint_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , burn_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_swap_pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , failed_tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr)
  , height_(uint64_t{0u}){}
struct VoteCommissionDataDefaultTypeInternal {
  constexpr VoteCommissionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteCommissionDataDefaultTypeInternal() {}
  union {
    VoteCommissionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteCommissionDataDefaultTypeInternal _VoteCommissionData_default_instance_;
constexpr VoteUpdateData::VoteUpdateData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct VoteUpdateDataDefaultTypeInternal {
  constexpr VoteUpdateDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteUpdateDataDefaultTypeInternal() {}
  union {
    VoteUpdateData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteUpdateDataDefaultTypeInternal _VoteUpdateData_default_instance_;
constexpr AddLimitOrderData::AddLimitOrderData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_to_sell_(nullptr)
  , coin_to_buy_(nullptr){}
struct AddLimitOrderDataDefaultTypeInternal {
  constexpr AddLimitOrderDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddLimitOrderDataDefaultTypeInternal() {}
  union {
    AddLimitOrderData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddLimitOrderDataDefaultTypeInternal _AddLimitOrderData_default_instance_;
constexpr RemoveLimitOrderData::RemoveLimitOrderData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(uint64_t{0u}){}
struct RemoveLimitOrderDataDefaultTypeInternal {
  constexpr RemoveLimitOrderDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveLimitOrderDataDefaultTypeInternal() {}
  union {
    RemoveLimitOrderData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveLimitOrderDataDefaultTypeInternal _RemoveLimitOrderData_default_instance_;
}  // namespace api_pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_2eproto[34];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_data_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SendData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SendData, to_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SendData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellCoinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellCoinData, coin_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellCoinData, value_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellCoinData, coin_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellCoinData, minimum_value_to_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllCoinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllCoinData, coin_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllCoinData, coin_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllCoinData, minimum_value_to_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BuyCoinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BuyCoinData, coin_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BuyCoinData, value_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BuyCoinData, coin_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BuyCoinData, maximum_value_to_sell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, initial_amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, initial_reserve_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, constant_reserve_ratio_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateCoinData, max_supply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::DeclareCandidacyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::DeclareCandidacyData, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::DeclareCandidacyData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::DeclareCandidacyData, commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::DeclareCandidacyData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::DeclareCandidacyData, stake_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::DelegateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::DelegateData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::DelegateData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::DelegateData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RedeemCheckData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RedeemCheckData, raw_check_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RedeemCheckData, proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SetCandidateOnData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SetCandidateOnData, pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SetCandidateOffData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SetCandidateOffData, pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateMultisigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateMultisigData, threshold_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateMultisigData, weights_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateMultisigData, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MultiSendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MultiSendData, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateData, reward_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateData, owner_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateData, control_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SetHaltBlockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SetHaltBlockData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SetHaltBlockData, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, initial_amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, initial_reserve_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, constant_reserve_ratio_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateCoinData, max_supply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCoinOwnerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCoinOwnerData, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCoinOwnerData, new_owner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditMultisigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditMultisigData, threshold_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditMultisigData, weights_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditMultisigData, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidatePublicKeyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidatePublicKeyData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidatePublicKeyData, new_pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateSwapPoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateSwapPoolData, coin0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateSwapPoolData, coin1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateSwapPoolData, volume0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateSwapPoolData, volume1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLiquidityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLiquidityData, coin0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLiquidityData, coin1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLiquidityData, volume0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLiquidityData, maximum_volume1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLiquidityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLiquidityData, coin0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLiquidityData, coin1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLiquidityData, liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLiquidityData, minimum_volume0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLiquidityData, minimum_volume1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellSwapPoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellSwapPoolData, coins_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellSwapPoolData, value_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellSwapPoolData, minimum_value_to_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllSwapPoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllSwapPoolData, coins_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SellAllSwapPoolData, minimum_value_to_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BuySwapPoolData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BuySwapPoolData, coins_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BuySwapPoolData, value_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BuySwapPoolData, maximum_value_to_sell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateCommission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateCommission, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EditCandidateCommission, commission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MintTokenData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MintTokenData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::MintTokenData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BurnTokenData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BurnTokenData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BurnTokenData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, initial_amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, max_supply_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, mintable_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CreateTokenData, burnable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, initial_amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, max_supply_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, mintable_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RecreateTokenData, burnable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, payload_byte_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, send_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, buy_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, sell_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, sell_all_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, buy_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, buy_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, sell_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, sell_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, sell_all_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, sell_all_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_ticker3_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_ticker4_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_ticker5_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_ticker6_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_ticker7_10_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, recreate_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, recreate_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, declare_candidacy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, delegate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, unbond_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, redeem_check_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, set_candidate_on_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, set_candidate_off_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, multisend_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, multisend_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, edit_candidate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, set_halt_block_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, edit_ticker_owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, edit_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, edit_candidate_public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, create_swap_pool_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, add_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, remove_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, edit_candidate_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, mint_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, burn_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, vote_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, vote_update_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, failed_tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, add_limit_order_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteCommissionData, remove_limit_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteUpdateData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteUpdateData, pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteUpdateData, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VoteUpdateData, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLimitOrderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLimitOrderData, coin_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLimitOrderData, value_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLimitOrderData, coin_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddLimitOrderData, value_to_buy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLimitOrderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveLimitOrderData, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api_pb::SendData)},
  { 8, -1, sizeof(::api_pb::SellCoinData)},
  { 17, -1, sizeof(::api_pb::SellAllCoinData)},
  { 25, -1, sizeof(::api_pb::BuyCoinData)},
  { 34, -1, sizeof(::api_pb::CreateCoinData)},
  { 45, -1, sizeof(::api_pb::DeclareCandidacyData)},
  { 55, -1, sizeof(::api_pb::DelegateData)},
  { 63, -1, sizeof(::api_pb::UnbondData)},
  { 71, -1, sizeof(::api_pb::RedeemCheckData)},
  { 78, -1, sizeof(::api_pb::SetCandidateOnData)},
  { 84, -1, sizeof(::api_pb::SetCandidateOffData)},
  { 90, -1, sizeof(::api_pb::CreateMultisigData)},
  { 98, -1, sizeof(::api_pb::MultiSendData)},
  { 104, -1, sizeof(::api_pb::EditCandidateData)},
  { 113, -1, sizeof(::api_pb::SetHaltBlockData)},
  { 120, -1, sizeof(::api_pb::RecreateCoinData)},
  { 131, -1, sizeof(::api_pb::EditCoinOwnerData)},
  { 138, -1, sizeof(::api_pb::EditMultisigData)},
  { 146, -1, sizeof(::api_pb::EditCandidatePublicKeyData)},
  { 153, -1, sizeof(::api_pb::CreateSwapPoolData)},
  { 162, -1, sizeof(::api_pb::AddLiquidityData)},
  { 171, -1, sizeof(::api_pb::RemoveLiquidityData)},
  { 181, -1, sizeof(::api_pb::SellSwapPoolData)},
  { 189, -1, sizeof(::api_pb::SellAllSwapPoolData)},
  { 196, -1, sizeof(::api_pb::BuySwapPoolData)},
  { 204, -1, sizeof(::api_pb::EditCandidateCommission)},
  { 211, -1, sizeof(::api_pb::MintTokenData)},
  { 218, -1, sizeof(::api_pb::BurnTokenData)},
  { 225, -1, sizeof(::api_pb::CreateTokenData)},
  { 236, -1, sizeof(::api_pb::RecreateTokenData)},
  { 247, -1, sizeof(::api_pb::VoteCommissionData)},
  { 300, -1, sizeof(::api_pb::VoteUpdateData)},
  { 308, -1, sizeof(::api_pb::AddLimitOrderData)},
  { 317, -1, sizeof(::api_pb::RemoveLimitOrderData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SellCoinData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SellAllCoinData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BuyCoinData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CreateCoinData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_DeclareCandidacyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_DelegateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UnbondData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RedeemCheckData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SetCandidateOnData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SetCandidateOffData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CreateMultisigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MultiSendData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EditCandidateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SetHaltBlockData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RecreateCoinData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EditCoinOwnerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EditMultisigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EditCandidatePublicKeyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CreateSwapPoolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddLiquidityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RemoveLiquidityData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SellSwapPoolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SellAllSwapPoolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BuySwapPoolData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EditCandidateCommission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MintTokenData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BurnTokenData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CreateTokenData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RecreateTokenData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_VoteCommissionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_VoteUpdateData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddLimitOrderData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RemoveLimitOrderData_default_instance_),
};

const char descriptor_table_protodef_data_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndata.proto\022\006api_pb\032\017resources.proto\"R\n"
  "\010SendData\022 \n\004coin\030\001 \001(\0132\014.api_pb.CoinR\004c"
  "oin\022\016\n\002to\030\002 \001(\tR\002to\022\024\n\005value\030\003 \001(\tR\005valu"
  "e\"\301\001\n\014SellCoinData\022.\n\014coin_to_sell\030\001 \001(\013"
  "2\014.api_pb.CoinR\ncoinToSell\022\"\n\rvalue_to_s"
  "ell\030\002 \001(\tR\013valueToSell\022,\n\013coin_to_buy\030\003 "
  "\001(\0132\014.api_pb.CoinR\tcoinToBuy\022/\n\024minimum_"
  "value_to_buy\030\004 \001(\tR\021minimumValueToBuy\"\240\001"
  "\n\017SellAllCoinData\022.\n\014coin_to_sell\030\001 \001(\0132"
  "\014.api_pb.CoinR\ncoinToSell\022,\n\013coin_to_buy"
  "\030\002 \001(\0132\014.api_pb.CoinR\tcoinToBuy\022/\n\024minim"
  "um_value_to_buy\030\003 \001(\tR\021minimumValueToBuy"
  "\"\300\001\n\013BuyCoinData\022,\n\013coin_to_buy\030\001 \001(\0132\014."
  "api_pb.CoinR\tcoinToBuy\022 \n\014value_to_buy\030\002"
  " \001(\tR\nvalueToBuy\022.\n\014coin_to_sell\030\003 \001(\0132\014"
  ".api_pb.CoinR\ncoinToSell\0221\n\025maximum_valu"
  "e_to_sell\030\004 \001(\tR\022maximumValueToSell\"\341\001\n\016"
  "CreateCoinData\022\022\n\004name\030\001 \001(\tR\004name\022\026\n\006sy"
  "mbol\030\002 \001(\tR\006symbol\022%\n\016initial_amount\030\003 \001"
  "(\tR\rinitialAmount\022\'\n\017initial_reserve\030\004 \001"
  "(\tR\016initialReserve\0224\n\026constant_reserve_r"
  "atio\030\005 \001(\004R\024constantReserveRatio\022\035\n\nmax_"
  "supply\030\006 \001(\tR\tmaxSupply\"\241\001\n\024DeclareCandi"
  "dacyData\022\030\n\007address\030\001 \001(\tR\007address\022\027\n\007pu"
  "b_key\030\002 \001(\tR\006pubKey\022\036\n\ncommission\030\003 \001(\004R"
  "\ncommission\022 \n\004coin\030\004 \001(\0132\014.api_pb.CoinR"
  "\004coin\022\024\n\005stake\030\005 \001(\tR\005stake\"_\n\014DelegateD"
  "ata\022\027\n\007pub_key\030\001 \001(\tR\006pubKey\022 \n\004coin\030\002 \001"
  "(\0132\014.api_pb.CoinR\004coin\022\024\n\005value\030\003 \001(\tR\005v"
  "alue\"]\n\nUnbondData\022\027\n\007pub_key\030\001 \001(\tR\006pub"
  "Key\022 \n\004coin\030\002 \001(\0132\014.api_pb.CoinR\004coin\022\024\n"
  "\005value\030\003 \001(\tR\005value\"D\n\017RedeemCheckData\022\033"
  "\n\traw_check\030\001 \001(\tR\010rawCheck\022\024\n\005proof\030\002 \001"
  "(\tR\005proof\"-\n\022SetCandidateOnData\022\027\n\007pub_k"
  "ey\030\001 \001(\tR\006pubKey\".\n\023SetCandidateOffData\022"
  "\027\n\007pub_key\030\001 \001(\tR\006pubKey\"j\n\022CreateMultis"
  "igData\022\034\n\tthreshold\030\001 \001(\004R\tthreshold\022\030\n\007"
  "weights\030\002 \003(\004R\007weights\022\034\n\taddresses\030\003 \003("
  "\tR\taddresses\"5\n\rMultiSendData\022$\n\004list\030\001 "
  "\003(\0132\020.api_pb.SendDataR\004list\"\241\001\n\021EditCand"
  "idateData\022\027\n\007pub_key\030\001 \001(\tR\006pubKey\022%\n\016re"
  "ward_address\030\003 \001(\tR\rrewardAddress\022#\n\rown"
  "er_address\030\004 \001(\tR\014ownerAddress\022\'\n\017contro"
  "l_address\030\005 \001(\tR\016controlAddress\"C\n\020SetHa"
  "ltBlockData\022\027\n\007pub_key\030\001 \001(\tR\006pubKey\022\026\n\006"
  "height\030\002 \001(\004R\006height\"\343\001\n\020RecreateCoinDat"
  "a\022\022\n\004name\030\001 \001(\tR\004name\022\026\n\006symbol\030\002 \001(\tR\006s"
  "ymbol\022%\n\016initial_amount\030\003 \001(\tR\rinitialAm"
  "ount\022\'\n\017initial_reserve\030\004 \001(\tR\016initialRe"
  "serve\0224\n\026constant_reserve_ratio\030\005 \001(\004R\024c"
  "onstantReserveRatio\022\035\n\nmax_supply\030\006 \001(\tR"
  "\tmaxSupply\"H\n\021EditCoinOwnerData\022\026\n\006symbo"
  "l\030\001 \001(\tR\006symbol\022\033\n\tnew_owner\030\002 \001(\tR\010newO"
  "wner\"h\n\020EditMultisigData\022\034\n\tthreshold\030\001 "
  "\001(\004R\tthreshold\022\030\n\007weights\030\002 \003(\004R\007weights"
  "\022\034\n\taddresses\030\003 \003(\tR\taddresses\"U\n\032EditCa"
  "ndidatePublicKeyData\022\027\n\007pub_key\030\001 \001(\tR\006p"
  "ubKey\022\036\n\013new_pub_key\030\002 \001(\tR\tnewPubKey\"\220\001"
  "\n\022CreateSwapPoolData\022\"\n\005coin0\030\001 \001(\0132\014.ap"
  "i_pb.CoinR\005coin0\022\"\n\005coin1\030\002 \001(\0132\014.api_pb"
  ".CoinR\005coin1\022\030\n\007volume0\030\003 \001(\tR\007volume0\022\030"
  "\n\007volume1\030\004 \001(\tR\007volume1\"\235\001\n\020AddLiquidit"
  "yData\022\"\n\005coin0\030\001 \001(\0132\014.api_pb.CoinR\005coin"
  "0\022\"\n\005coin1\030\002 \001(\0132\014.api_pb.CoinR\005coin1\022\030\n"
  "\007volume0\030\003 \001(\tR\007volume0\022\'\n\017maximum_volum"
  "e1\030\004 \001(\tR\016maximumVolume1\"\315\001\n\023RemoveLiqui"
  "dityData\022\"\n\005coin0\030\001 \001(\0132\014.api_pb.CoinR\005c"
  "oin0\022\"\n\005coin1\030\002 \001(\0132\014.api_pb.CoinR\005coin1"
  "\022\034\n\tliquidity\030\003 \001(\tR\tliquidity\022\'\n\017minimu"
  "m_volume0\030\004 \001(\tR\016minimumVolume0\022\'\n\017minim"
  "um_volume1\030\005 \001(\tR\016minimumVolume1\"\213\001\n\020Sel"
  "lSwapPoolData\022\"\n\005coins\030\001 \003(\0132\014.api_pb.Co"
  "inR\005coins\022\"\n\rvalue_to_sell\030\002 \001(\tR\013valueT"
  "oSell\022/\n\024minimum_value_to_buy\030\004 \001(\tR\021min"
  "imumValueToBuy\"j\n\023SellAllSwapPoolData\022\"\n"
  "\005coins\030\001 \003(\0132\014.api_pb.CoinR\005coins\022/\n\024min"
  "imum_value_to_buy\030\003 \001(\tR\021minimumValueToB"
  "uy\"\212\001\n\017BuySwapPoolData\022\"\n\005coins\030\001 \003(\0132\014."
  "api_pb.CoinR\005coins\022 \n\014value_to_buy\030\002 \001(\t"
  "R\nvalueToBuy\0221\n\025maximum_value_to_sell\030\004 "
  "\001(\tR\022maximumValueToSell\"R\n\027EditCandidate"
  "Commission\022\027\n\007pub_key\030\001 \001(\tR\006pubKey\022\036\n\nc"
  "ommission\030\002 \001(\004R\ncommission\"G\n\rMintToken"
  "Data\022 \n\004coin\030\001 \001(\0132\014.api_pb.CoinR\004coin\022\024"
  "\n\005value\030\002 \001(\tR\005value\"G\n\rBurnTokenData\022 \n"
  "\004coin\030\001 \001(\0132\014.api_pb.CoinR\004coin\022\024\n\005value"
  "\030\002 \001(\tR\005value\"\273\001\n\017CreateTokenData\022\022\n\004nam"
  "e\030\001 \001(\tR\004name\022\026\n\006symbol\030\002 \001(\tR\006symbol\022%\n"
  "\016initial_amount\030\003 \001(\tR\rinitialAmount\022\035\n\n"
  "max_supply\030\004 \001(\tR\tmaxSupply\022\032\n\010mintable\030"
  "\005 \001(\010R\010mintable\022\032\n\010burnable\030\006 \001(\010R\010burna"
  "ble\"\275\001\n\021RecreateTokenData\022\022\n\004name\030\001 \001(\tR"
  "\004name\022\026\n\006symbol\030\002 \001(\tR\006symbol\022%\n\016initial"
  "_amount\030\003 \001(\tR\rinitialAmount\022\035\n\nmax_supp"
  "ly\030\004 \001(\tR\tmaxSupply\022\032\n\010mintable\030\005 \001(\010R\010m"
  "intable\022\032\n\010burnable\030\006 \001(\010R\010burnable\"\257\016\n\022"
  "VoteCommissionData\022\027\n\007pub_key\030\001 \001(\tR\006pub"
  "Key\022\026\n\006height\030\002 \001(\004R\006height\022 \n\004coin\030\003 \001("
  "\0132\014.api_pb.CoinR\004coin\022!\n\014payload_byte\030\004 "
  "\001(\tR\013payloadByte\022\022\n\004send\030\005 \001(\tR\004send\022\035\n\n"
  "buy_bancor\030& \001(\tR\tbuyBancor\022\037\n\013sell_banc"
  "or\030\' \001(\tR\nsellBancor\022&\n\017sell_all_bancor\030"
  "( \001(\tR\rsellAllBancor\022\"\n\rbuy_pool_base\030) "
  "\001(\tR\013buyPoolBase\022$\n\016buy_pool_delta\0305 \001(\t"
  "R\014buyPoolDelta\022$\n\016sell_pool_base\030* \001(\tR\014"
  "sellPoolBase\022&\n\017sell_pool_delta\0306 \001(\tR\rs"
  "ellPoolDelta\022+\n\022sell_all_pool_base\030+ \001(\t"
  "R\017sellAllPoolBase\022-\n\023sell_all_pool_delta"
  "\0307 \001(\tR\020sellAllPoolDelta\022%\n\016create_ticke"
  "r3\030\007 \001(\tR\rcreateTicker3\022%\n\016create_ticker"
  "4\030\010 \001(\tR\rcreateTicker4\022%\n\016create_ticker5"
  "\030\t \001(\tR\rcreateTicker5\022%\n\016create_ticker6\030"
  "\n \001(\tR\rcreateTicker6\022*\n\021create_ticker7_1"
  "0\030\013 \001(\tR\017createTicker710\022\037\n\013create_coin\030"
  "\" \001(\tR\ncreateCoin\022!\n\014create_token\030# \001(\tR"
  "\013createToken\022#\n\rrecreate_coin\030$ \001(\tR\014rec"
  "reateCoin\022%\n\016recreate_token\030% \001(\tR\rrecre"
  "ateToken\022+\n\021declare_candidacy\030\r \001(\tR\020dec"
  "lareCandidacy\022\032\n\010delegate\030\016 \001(\tR\010delegat"
  "e\022\026\n\006unbond\030\017 \001(\tR\006unbond\022!\n\014redeem_chec"
  "k\030\020 \001(\tR\013redeemCheck\022(\n\020set_candidate_on"
  "\030, \001(\tR\016setCandidateOn\022*\n\021set_candidate_"
  "off\030- \001(\tR\017setCandidateOff\022\'\n\017create_mul"
  "tisig\030\022 \001(\tR\016createMultisig\022%\n\016multisend"
  "_base\0303 \001(\tR\rmultisendBase\022\'\n\017multisend_"
  "delta\0304 \001(\tR\016multisendDelta\022%\n\016edit_cand"
  "idate\030\024 \001(\tR\reditCandidate\022$\n\016set_halt_b"
  "lock\030\025 \001(\tR\014setHaltBlock\022*\n\021edit_ticker_"
  "owner\030\026 \001(\tR\017editTickerOwner\022#\n\redit_mul"
  "tisig\030\027 \001(\tR\014editMultisig\0229\n\031edit_candid"
  "ate_public_key\030\031 \001(\tR\026editCandidatePubli"
  "cKey\022(\n\020create_swap_pool\0300 \001(\tR\016createSw"
  "apPool\022#\n\radd_liquidity\0301 \001(\tR\014addLiquid"
  "ity\022)\n\020remove_liquidity\0302 \001(\tR\017removeLiq"
  "uidity\022:\n\031edit_candidate_commission\030\034 \001("
  "\tR\027editCandidateCommission\022\035\n\nmint_token"
  "\030. \001(\tR\tmintToken\022\035\n\nburn_token\030/ \001(\tR\tb"
  "urnToken\022\'\n\017vote_commission\030\037 \001(\tR\016voteC"
  "ommission\022\037\n\013vote_update\030  \001(\tR\nvoteUpda"
  "te\022\033\n\tfailed_tx\0308 \001(\tR\010failedTx\022&\n\017add_l"
  "imit_order\0309 \001(\tR\raddLimitOrder\022,\n\022remov"
  "e_limit_order\030: \001(\tR\020removeLimitOrder\"[\n"
  "\016VoteUpdateData\022\027\n\007pub_key\030\001 \001(\tR\006pubKey"
  "\022\026\n\006height\030\002 \001(\004R\006height\022\030\n\007version\030\003 \001("
  "\tR\007version\"\267\001\n\021AddLimitOrderData\022.\n\014coin"
  "_to_sell\030\001 \001(\0132\014.api_pb.CoinR\ncoinToSell"
  "\022\"\n\rvalue_to_sell\030\002 \001(\tR\013valueToSell\022,\n\013"
  "coin_to_buy\030\003 \001(\0132\014.api_pb.CoinR\tcoinToB"
  "uy\022 \n\014value_to_buy\030\004 \001(\tR\nvalueToBuy\"&\n\024"
  "RemoveLimitOrderData\022\016\n\002id\030\001 \001(\004R\002idBW\n\023"
  "network.minter.grpcP\001Z5github.com/Minter"
  "Team/node-grpc-gateway/gen/go;api_pb\272\002\006M"
  "interb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_data_2eproto_deps[1] = {
  &::descriptor_table_resources_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto = {
  false, false, 6093, descriptor_table_protodef_data_2eproto, "data.proto", 
  &descriptor_table_data_2eproto_once, descriptor_table_data_2eproto_deps, 1, 34,
  schemas, file_default_instances, TableStruct_data_2eproto::offsets,
  file_level_metadata_data_2eproto, file_level_enum_descriptors_data_2eproto, file_level_service_descriptors_data_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_data_2eproto_getter() {
  return &descriptor_table_data_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_data_2eproto(&descriptor_table_data_2eproto);
namespace api_pb {

// ===================================================================

class SendData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const SendData* msg);
};

const ::api_pb::Coin&
SendData::_Internal::coin(const SendData* msg) {
  return *msg->coin_;
}
void SendData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
SendData::SendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SendData)
}
SendData::SendData(const SendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SendData)
}

inline void SendData::SharedCtor() {
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

SendData::~SendData() {
  // @@protoc_insertion_point(destructor:api_pb.SendData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void SendData::ArenaDtor(void* object) {
  SendData* _this = reinterpret_cast< SendData* >(object);
  (void)_this;
}
void SendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2 [json_name = "to"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SendData.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3 [json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SendData.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin(this), target, stream);
  }

  // string to = 2 [json_name = "to"];
  if (!this->_internal_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SendData.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SendData.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SendData)
  return target;
}

size_t SendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string to = 2 [json_name = "to"];
  if (!this->_internal_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendData::GetClassData() const { return &_class_data_; }

void SendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendData *>(to)->MergeFrom(
      static_cast<const SendData &>(from));
}


void SendData::MergeFrom(const SendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SendData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_to().empty()) {
    _internal_set_to(from._internal_to());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendData::CopyFrom(const SendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendData::IsInitialized() const {
  return true;
}

void SendData::InternalSwap(SendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &to_, GetArenaForAllocation(),
      &other->to_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[0]);
}

// ===================================================================

class SellCoinData::_Internal {
 public:
  static const ::api_pb::Coin& coin_to_sell(const SellCoinData* msg);
  static const ::api_pb::Coin& coin_to_buy(const SellCoinData* msg);
};

const ::api_pb::Coin&
SellCoinData::_Internal::coin_to_sell(const SellCoinData* msg) {
  return *msg->coin_to_sell_;
}
const ::api_pb::Coin&
SellCoinData::_Internal::coin_to_buy(const SellCoinData* msg) {
  return *msg->coin_to_buy_;
}
void SellCoinData::clear_coin_to_sell() {
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
}
void SellCoinData::clear_coin_to_buy() {
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
}
SellCoinData::SellCoinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SellCoinData)
}
SellCoinData::SellCoinData(const SellCoinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_sell().empty()) {
    value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_sell(), 
      GetArenaForAllocation());
  }
  minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minimum_value_to_buy().empty()) {
    minimum_value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minimum_value_to_buy(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin_to_sell()) {
    coin_to_sell_ = new ::api_pb::Coin(*from.coin_to_sell_);
  } else {
    coin_to_sell_ = nullptr;
  }
  if (from._internal_has_coin_to_buy()) {
    coin_to_buy_ = new ::api_pb::Coin(*from.coin_to_buy_);
  } else {
    coin_to_buy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SellCoinData)
}

inline void SellCoinData::SharedCtor() {
value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_to_sell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_to_buy_) -
    reinterpret_cast<char*>(&coin_to_sell_)) + sizeof(coin_to_buy_));
}

SellCoinData::~SellCoinData() {
  // @@protoc_insertion_point(destructor:api_pb.SellCoinData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SellCoinData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minimum_value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_to_sell_;
  if (this != internal_default_instance()) delete coin_to_buy_;
}

void SellCoinData::ArenaDtor(void* object) {
  SellCoinData* _this = reinterpret_cast< SellCoinData* >(object);
  (void)_this;
}
void SellCoinData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SellCoinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SellCoinData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SellCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_to_sell_.ClearToEmpty();
  minimum_value_to_buy_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SellCoinData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_sell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_sell = 2 [json_name = "valueToSell"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SellCoinData.value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin_to_buy = 3 [json_name = "coinToBuy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_buy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minimum_value_to_buy = 4 [json_name = "minimumValueToBuy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_minimum_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SellCoinData.minimum_value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SellCoinData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SellCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin_to_sell(this), target, stream);
  }

  // string value_to_sell = 2 [json_name = "valueToSell"];
  if (!this->_internal_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_sell().data(), static_cast<int>(this->_internal_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SellCoinData.value_to_sell");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_to_sell(), target);
  }

  // .api_pb.Coin coin_to_buy = 3 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coin_to_buy(this), target, stream);
  }

  // string minimum_value_to_buy = 4 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minimum_value_to_buy().data(), static_cast<int>(this->_internal_minimum_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SellCoinData.minimum_value_to_buy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_minimum_value_to_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SellCoinData)
  return target;
}

size_t SellCoinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SellCoinData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value_to_sell = 2 [json_name = "valueToSell"];
  if (!this->_internal_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_sell());
  }

  // string minimum_value_to_buy = 4 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minimum_value_to_buy());
  }

  // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_sell_);
  }

  // .api_pb.Coin coin_to_buy = 3 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_buy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SellCoinData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SellCoinData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SellCoinData::GetClassData() const { return &_class_data_; }

void SellCoinData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SellCoinData *>(to)->MergeFrom(
      static_cast<const SellCoinData &>(from));
}


void SellCoinData::MergeFrom(const SellCoinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SellCoinData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value_to_sell().empty()) {
    _internal_set_value_to_sell(from._internal_value_to_sell());
  }
  if (!from._internal_minimum_value_to_buy().empty()) {
    _internal_set_minimum_value_to_buy(from._internal_minimum_value_to_buy());
  }
  if (from._internal_has_coin_to_sell()) {
    _internal_mutable_coin_to_sell()->::api_pb::Coin::MergeFrom(from._internal_coin_to_sell());
  }
  if (from._internal_has_coin_to_buy()) {
    _internal_mutable_coin_to_buy()->::api_pb::Coin::MergeFrom(from._internal_coin_to_buy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SellCoinData::CopyFrom(const SellCoinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SellCoinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellCoinData::IsInitialized() const {
  return true;
}

void SellCoinData::InternalSwap(SellCoinData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_sell_, GetArenaForAllocation(),
      &other->value_to_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minimum_value_to_buy_, GetArenaForAllocation(),
      &other->minimum_value_to_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SellCoinData, coin_to_buy_)
      + sizeof(SellCoinData::coin_to_buy_)
      - PROTOBUF_FIELD_OFFSET(SellCoinData, coin_to_sell_)>(
          reinterpret_cast<char*>(&coin_to_sell_),
          reinterpret_cast<char*>(&other->coin_to_sell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SellCoinData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[1]);
}

// ===================================================================

class SellAllCoinData::_Internal {
 public:
  static const ::api_pb::Coin& coin_to_sell(const SellAllCoinData* msg);
  static const ::api_pb::Coin& coin_to_buy(const SellAllCoinData* msg);
};

const ::api_pb::Coin&
SellAllCoinData::_Internal::coin_to_sell(const SellAllCoinData* msg) {
  return *msg->coin_to_sell_;
}
const ::api_pb::Coin&
SellAllCoinData::_Internal::coin_to_buy(const SellAllCoinData* msg) {
  return *msg->coin_to_buy_;
}
void SellAllCoinData::clear_coin_to_sell() {
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
}
void SellAllCoinData::clear_coin_to_buy() {
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
}
SellAllCoinData::SellAllCoinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SellAllCoinData)
}
SellAllCoinData::SellAllCoinData(const SellAllCoinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minimum_value_to_buy().empty()) {
    minimum_value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minimum_value_to_buy(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin_to_sell()) {
    coin_to_sell_ = new ::api_pb::Coin(*from.coin_to_sell_);
  } else {
    coin_to_sell_ = nullptr;
  }
  if (from._internal_has_coin_to_buy()) {
    coin_to_buy_ = new ::api_pb::Coin(*from.coin_to_buy_);
  } else {
    coin_to_buy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SellAllCoinData)
}

inline void SellAllCoinData::SharedCtor() {
minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_to_sell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_to_buy_) -
    reinterpret_cast<char*>(&coin_to_sell_)) + sizeof(coin_to_buy_));
}

SellAllCoinData::~SellAllCoinData() {
  // @@protoc_insertion_point(destructor:api_pb.SellAllCoinData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SellAllCoinData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  minimum_value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_to_sell_;
  if (this != internal_default_instance()) delete coin_to_buy_;
}

void SellAllCoinData::ArenaDtor(void* object) {
  SellAllCoinData* _this = reinterpret_cast< SellAllCoinData* >(object);
  (void)_this;
}
void SellAllCoinData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SellAllCoinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SellAllCoinData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SellAllCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  minimum_value_to_buy_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SellAllCoinData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_sell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin_to_buy = 2 [json_name = "coinToBuy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_buy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minimum_value_to_buy = 3 [json_name = "minimumValueToBuy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_minimum_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SellAllCoinData.minimum_value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SellAllCoinData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SellAllCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin_to_sell(this), target, stream);
  }

  // .api_pb.Coin coin_to_buy = 2 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin_to_buy(this), target, stream);
  }

  // string minimum_value_to_buy = 3 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minimum_value_to_buy().data(), static_cast<int>(this->_internal_minimum_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SellAllCoinData.minimum_value_to_buy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_minimum_value_to_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SellAllCoinData)
  return target;
}

size_t SellAllCoinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SellAllCoinData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string minimum_value_to_buy = 3 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minimum_value_to_buy());
  }

  // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_sell_);
  }

  // .api_pb.Coin coin_to_buy = 2 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_buy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SellAllCoinData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SellAllCoinData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SellAllCoinData::GetClassData() const { return &_class_data_; }

void SellAllCoinData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SellAllCoinData *>(to)->MergeFrom(
      static_cast<const SellAllCoinData &>(from));
}


void SellAllCoinData::MergeFrom(const SellAllCoinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SellAllCoinData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_minimum_value_to_buy().empty()) {
    _internal_set_minimum_value_to_buy(from._internal_minimum_value_to_buy());
  }
  if (from._internal_has_coin_to_sell()) {
    _internal_mutable_coin_to_sell()->::api_pb::Coin::MergeFrom(from._internal_coin_to_sell());
  }
  if (from._internal_has_coin_to_buy()) {
    _internal_mutable_coin_to_buy()->::api_pb::Coin::MergeFrom(from._internal_coin_to_buy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SellAllCoinData::CopyFrom(const SellAllCoinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SellAllCoinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellAllCoinData::IsInitialized() const {
  return true;
}

void SellAllCoinData::InternalSwap(SellAllCoinData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minimum_value_to_buy_, GetArenaForAllocation(),
      &other->minimum_value_to_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SellAllCoinData, coin_to_buy_)
      + sizeof(SellAllCoinData::coin_to_buy_)
      - PROTOBUF_FIELD_OFFSET(SellAllCoinData, coin_to_sell_)>(
          reinterpret_cast<char*>(&coin_to_sell_),
          reinterpret_cast<char*>(&other->coin_to_sell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SellAllCoinData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[2]);
}

// ===================================================================

class BuyCoinData::_Internal {
 public:
  static const ::api_pb::Coin& coin_to_buy(const BuyCoinData* msg);
  static const ::api_pb::Coin& coin_to_sell(const BuyCoinData* msg);
};

const ::api_pb::Coin&
BuyCoinData::_Internal::coin_to_buy(const BuyCoinData* msg) {
  return *msg->coin_to_buy_;
}
const ::api_pb::Coin&
BuyCoinData::_Internal::coin_to_sell(const BuyCoinData* msg) {
  return *msg->coin_to_sell_;
}
void BuyCoinData::clear_coin_to_buy() {
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
}
void BuyCoinData::clear_coin_to_sell() {
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
}
BuyCoinData::BuyCoinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BuyCoinData)
}
BuyCoinData::BuyCoinData(const BuyCoinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_buy().empty()) {
    value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_buy(), 
      GetArenaForAllocation());
  }
  maximum_value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maximum_value_to_sell().empty()) {
    maximum_value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maximum_value_to_sell(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin_to_buy()) {
    coin_to_buy_ = new ::api_pb::Coin(*from.coin_to_buy_);
  } else {
    coin_to_buy_ = nullptr;
  }
  if (from._internal_has_coin_to_sell()) {
    coin_to_sell_ = new ::api_pb::Coin(*from.coin_to_sell_);
  } else {
    coin_to_sell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.BuyCoinData)
}

inline void BuyCoinData::SharedCtor() {
value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maximum_value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_to_buy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_to_sell_) -
    reinterpret_cast<char*>(&coin_to_buy_)) + sizeof(coin_to_sell_));
}

BuyCoinData::~BuyCoinData() {
  // @@protoc_insertion_point(destructor:api_pb.BuyCoinData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuyCoinData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maximum_value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_to_buy_;
  if (this != internal_default_instance()) delete coin_to_sell_;
}

void BuyCoinData::ArenaDtor(void* object) {
  BuyCoinData* _this = reinterpret_cast< BuyCoinData* >(object);
  (void)_this;
}
void BuyCoinData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuyCoinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuyCoinData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BuyCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_to_buy_.ClearToEmpty();
  maximum_value_to_sell_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuyCoinData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin_to_buy = 1 [json_name = "coinToBuy"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_buy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_buy = 2 [json_name = "valueToBuy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BuyCoinData.value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin_to_sell = 3 [json_name = "coinToSell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_sell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maximum_value_to_sell = 4 [json_name = "maximumValueToSell"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_maximum_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BuyCoinData.maximum_value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuyCoinData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BuyCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin_to_buy = 1 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin_to_buy(this), target, stream);
  }

  // string value_to_buy = 2 [json_name = "valueToBuy"];
  if (!this->_internal_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_buy().data(), static_cast<int>(this->_internal_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BuyCoinData.value_to_buy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_to_buy(), target);
  }

  // .api_pb.Coin coin_to_sell = 3 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coin_to_sell(this), target, stream);
  }

  // string maximum_value_to_sell = 4 [json_name = "maximumValueToSell"];
  if (!this->_internal_maximum_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maximum_value_to_sell().data(), static_cast<int>(this->_internal_maximum_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BuyCoinData.maximum_value_to_sell");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maximum_value_to_sell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BuyCoinData)
  return target;
}

size_t BuyCoinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BuyCoinData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value_to_buy = 2 [json_name = "valueToBuy"];
  if (!this->_internal_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_buy());
  }

  // string maximum_value_to_sell = 4 [json_name = "maximumValueToSell"];
  if (!this->_internal_maximum_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maximum_value_to_sell());
  }

  // .api_pb.Coin coin_to_buy = 1 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_buy_);
  }

  // .api_pb.Coin coin_to_sell = 3 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_sell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuyCoinData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuyCoinData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuyCoinData::GetClassData() const { return &_class_data_; }

void BuyCoinData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuyCoinData *>(to)->MergeFrom(
      static_cast<const BuyCoinData &>(from));
}


void BuyCoinData::MergeFrom(const BuyCoinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BuyCoinData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value_to_buy().empty()) {
    _internal_set_value_to_buy(from._internal_value_to_buy());
  }
  if (!from._internal_maximum_value_to_sell().empty()) {
    _internal_set_maximum_value_to_sell(from._internal_maximum_value_to_sell());
  }
  if (from._internal_has_coin_to_buy()) {
    _internal_mutable_coin_to_buy()->::api_pb::Coin::MergeFrom(from._internal_coin_to_buy());
  }
  if (from._internal_has_coin_to_sell()) {
    _internal_mutable_coin_to_sell()->::api_pb::Coin::MergeFrom(from._internal_coin_to_sell());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuyCoinData::CopyFrom(const BuyCoinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BuyCoinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyCoinData::IsInitialized() const {
  return true;
}

void BuyCoinData::InternalSwap(BuyCoinData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_buy_, GetArenaForAllocation(),
      &other->value_to_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maximum_value_to_sell_, GetArenaForAllocation(),
      &other->maximum_value_to_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuyCoinData, coin_to_sell_)
      + sizeof(BuyCoinData::coin_to_sell_)
      - PROTOBUF_FIELD_OFFSET(BuyCoinData, coin_to_buy_)>(
          reinterpret_cast<char*>(&coin_to_buy_),
          reinterpret_cast<char*>(&other->coin_to_buy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuyCoinData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[3]);
}

// ===================================================================

class CreateCoinData::_Internal {
 public:
};

CreateCoinData::CreateCoinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CreateCoinData)
}
CreateCoinData::CreateCoinData(const CreateCoinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_amount().empty()) {
    initial_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_amount(), 
      GetArenaForAllocation());
  }
  initial_reserve_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_reserve().empty()) {
    initial_reserve_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_reserve(), 
      GetArenaForAllocation());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_supply().empty()) {
    max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_supply(), 
      GetArenaForAllocation());
  }
  constant_reserve_ratio_ = from.constant_reserve_ratio_;
  // @@protoc_insertion_point(copy_constructor:api_pb.CreateCoinData)
}

inline void CreateCoinData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_reserve_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
constant_reserve_ratio_ = uint64_t{0u};
}

CreateCoinData::~CreateCoinData() {
  // @@protoc_insertion_point(destructor:api_pb.CreateCoinData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCoinData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_reserve_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateCoinData::ArenaDtor(void* object) {
  CreateCoinData* _this = reinterpret_cast< CreateCoinData* >(object);
  (void)_this;
}
void CreateCoinData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCoinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCoinData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CreateCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  initial_amount_.ClearToEmpty();
  initial_reserve_.ClearToEmpty();
  max_supply_.ClearToEmpty();
  constant_reserve_ratio_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCoinData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateCoinData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateCoinData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_amount = 3 [json_name = "initialAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_initial_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateCoinData.initial_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_reserve = 4 [json_name = "initialReserve"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_initial_reserve();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateCoinData.initial_reserve"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 constant_reserve_ratio = 5 [json_name = "constantReserveRatio"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          constant_reserve_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_supply = 6 [json_name = "maxSupply"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateCoinData.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCoinData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CreateCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateCoinData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateCoinData.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_amount().data(), static_cast<int>(this->_internal_initial_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateCoinData.initial_amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_initial_amount(), target);
  }

  // string initial_reserve = 4 [json_name = "initialReserve"];
  if (!this->_internal_initial_reserve().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_reserve().data(), static_cast<int>(this->_internal_initial_reserve().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateCoinData.initial_reserve");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_initial_reserve(), target);
  }

  // uint64 constant_reserve_ratio = 5 [json_name = "constantReserveRatio"];
  if (this->_internal_constant_reserve_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_constant_reserve_ratio(), target);
  }

  // string max_supply = 6 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateCoinData.max_supply");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_max_supply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CreateCoinData)
  return target;
}

size_t CreateCoinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CreateCoinData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_amount());
  }

  // string initial_reserve = 4 [json_name = "initialReserve"];
  if (!this->_internal_initial_reserve().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_reserve());
  }

  // string max_supply = 6 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // uint64 constant_reserve_ratio = 5 [json_name = "constantReserveRatio"];
  if (this->_internal_constant_reserve_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_constant_reserve_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCoinData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCoinData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCoinData::GetClassData() const { return &_class_data_; }

void CreateCoinData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateCoinData *>(to)->MergeFrom(
      static_cast<const CreateCoinData &>(from));
}


void CreateCoinData::MergeFrom(const CreateCoinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CreateCoinData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_initial_amount().empty()) {
    _internal_set_initial_amount(from._internal_initial_amount());
  }
  if (!from._internal_initial_reserve().empty()) {
    _internal_set_initial_reserve(from._internal_initial_reserve());
  }
  if (!from._internal_max_supply().empty()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from._internal_constant_reserve_ratio() != 0) {
    _internal_set_constant_reserve_ratio(from._internal_constant_reserve_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCoinData::CopyFrom(const CreateCoinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CreateCoinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCoinData::IsInitialized() const {
  return true;
}

void CreateCoinData::InternalSwap(CreateCoinData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_amount_, GetArenaForAllocation(),
      &other->initial_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_reserve_, GetArenaForAllocation(),
      &other->initial_reserve_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_supply_, GetArenaForAllocation(),
      &other->max_supply_, other->GetArenaForAllocation()
  );
  swap(constant_reserve_ratio_, other->constant_reserve_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCoinData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[4]);
}

// ===================================================================

class DeclareCandidacyData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const DeclareCandidacyData* msg);
};

const ::api_pb::Coin&
DeclareCandidacyData::_Internal::coin(const DeclareCandidacyData* msg) {
  return *msg->coin_;
}
void DeclareCandidacyData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
DeclareCandidacyData::DeclareCandidacyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.DeclareCandidacyData)
}
DeclareCandidacyData::DeclareCandidacyData(const DeclareCandidacyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stake().empty()) {
    stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stake(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  commission_ = from.commission_;
  // @@protoc_insertion_point(copy_constructor:api_pb.DeclareCandidacyData)
}

inline void DeclareCandidacyData::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commission_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(commission_));
}

DeclareCandidacyData::~DeclareCandidacyData() {
  // @@protoc_insertion_point(destructor:api_pb.DeclareCandidacyData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeclareCandidacyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void DeclareCandidacyData::ArenaDtor(void* object) {
  DeclareCandidacyData* _this = reinterpret_cast< DeclareCandidacyData* >(object);
  (void)_this;
}
void DeclareCandidacyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeclareCandidacyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeclareCandidacyData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.DeclareCandidacyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  pub_key_.ClearToEmpty();
  stake_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  commission_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeclareCandidacyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.DeclareCandidacyData.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pub_key = 2 [json_name = "pubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.DeclareCandidacyData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commission = 3 [json_name = "commission"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin = 4 [json_name = "coin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stake = 5 [json_name = "stake"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.DeclareCandidacyData.stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeclareCandidacyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.DeclareCandidacyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.DeclareCandidacyData.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string pub_key = 2 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.DeclareCandidacyData.pub_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pub_key(), target);
  }

  // uint64 commission = 3 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_commission(), target);
  }

  // .api_pb.Coin coin = 4 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::coin(this), target, stream);
  }

  // string stake = 5 [json_name = "stake"];
  if (!this->_internal_stake().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stake().data(), static_cast<int>(this->_internal_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.DeclareCandidacyData.stake");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.DeclareCandidacyData)
  return target;
}

size_t DeclareCandidacyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.DeclareCandidacyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string pub_key = 2 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string stake = 5 [json_name = "stake"];
  if (!this->_internal_stake().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stake());
  }

  // .api_pb.Coin coin = 4 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  // uint64 commission = 3 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeclareCandidacyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeclareCandidacyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeclareCandidacyData::GetClassData() const { return &_class_data_; }

void DeclareCandidacyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeclareCandidacyData *>(to)->MergeFrom(
      static_cast<const DeclareCandidacyData &>(from));
}


void DeclareCandidacyData::MergeFrom(const DeclareCandidacyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.DeclareCandidacyData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_stake().empty()) {
    _internal_set_stake(from._internal_stake());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  if (from._internal_commission() != 0) {
    _internal_set_commission(from._internal_commission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeclareCandidacyData::CopyFrom(const DeclareCandidacyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.DeclareCandidacyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclareCandidacyData::IsInitialized() const {
  return true;
}

void DeclareCandidacyData::InternalSwap(DeclareCandidacyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stake_, GetArenaForAllocation(),
      &other->stake_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeclareCandidacyData, commission_)
      + sizeof(DeclareCandidacyData::commission_)
      - PROTOBUF_FIELD_OFFSET(DeclareCandidacyData, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclareCandidacyData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[5]);
}

// ===================================================================

class DelegateData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const DelegateData* msg);
};

const ::api_pb::Coin&
DelegateData::_Internal::coin(const DelegateData* msg) {
  return *msg->coin_;
}
void DelegateData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
DelegateData::DelegateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.DelegateData)
}
DelegateData::DelegateData(const DelegateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.DelegateData)
}

inline void DelegateData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

DelegateData::~DelegateData() {
  // @@protoc_insertion_point(destructor:api_pb.DelegateData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelegateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void DelegateData::ArenaDtor(void* object) {
  DelegateData* _this = reinterpret_cast< DelegateData* >(object);
  (void)_this;
}
void DelegateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelegateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelegateData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.DelegateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.DelegateData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin = 2 [json_name = "coin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3 [json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.DelegateData.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.DelegateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.DelegateData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin(this), target, stream);
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.DelegateData.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.DelegateData)
  return target;
}

size_t DelegateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.DelegateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelegateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegateData::GetClassData() const { return &_class_data_; }

void DelegateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DelegateData *>(to)->MergeFrom(
      static_cast<const DelegateData &>(from));
}


void DelegateData::MergeFrom(const DelegateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.DelegateData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegateData::CopyFrom(const DelegateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.DelegateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegateData::IsInitialized() const {
  return true;
}

void DelegateData::InternalSwap(DelegateData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegateData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[6]);
}

// ===================================================================

class UnbondData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const UnbondData* msg);
};

const ::api_pb::Coin&
UnbondData::_Internal::coin(const UnbondData* msg) {
  return *msg->coin_;
}
void UnbondData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
UnbondData::UnbondData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UnbondData)
}
UnbondData::UnbondData(const UnbondData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.UnbondData)
}

inline void UnbondData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

UnbondData::~UnbondData() {
  // @@protoc_insertion_point(destructor:api_pb.UnbondData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnbondData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void UnbondData::ArenaDtor(void* object) {
  UnbondData* _this = reinterpret_cast< UnbondData* >(object);
  (void)_this;
}
void UnbondData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnbondData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnbondData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UnbondData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnbondData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UnbondData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin = 2 [json_name = "coin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3 [json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UnbondData.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnbondData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UnbondData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UnbondData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin(this), target, stream);
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UnbondData.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UnbondData)
  return target;
}

size_t UnbondData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UnbondData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnbondData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnbondData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnbondData::GetClassData() const { return &_class_data_; }

void UnbondData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnbondData *>(to)->MergeFrom(
      static_cast<const UnbondData &>(from));
}


void UnbondData::MergeFrom(const UnbondData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UnbondData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnbondData::CopyFrom(const UnbondData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UnbondData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnbondData::IsInitialized() const {
  return true;
}

void UnbondData::InternalSwap(UnbondData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnbondData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[7]);
}

// ===================================================================

class RedeemCheckData::_Internal {
 public:
};

RedeemCheckData::RedeemCheckData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RedeemCheckData)
}
RedeemCheckData::RedeemCheckData(const RedeemCheckData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raw_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_check().empty()) {
    raw_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_check(), 
      GetArenaForAllocation());
  }
  proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proof().empty()) {
    proof_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proof(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.RedeemCheckData)
}

inline void RedeemCheckData::SharedCtor() {
raw_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RedeemCheckData::~RedeemCheckData() {
  // @@protoc_insertion_point(destructor:api_pb.RedeemCheckData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RedeemCheckData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  raw_check_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RedeemCheckData::ArenaDtor(void* object) {
  RedeemCheckData* _this = reinterpret_cast< RedeemCheckData* >(object);
  (void)_this;
}
void RedeemCheckData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RedeemCheckData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RedeemCheckData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RedeemCheckData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_check_.ClearToEmpty();
  proof_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedeemCheckData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string raw_check = 1 [json_name = "rawCheck"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw_check();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RedeemCheckData.raw_check"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RedeemCheckData.proof"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RedeemCheckData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RedeemCheckData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string raw_check = 1 [json_name = "rawCheck"];
  if (!this->_internal_raw_check().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_check().data(), static_cast<int>(this->_internal_raw_check().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RedeemCheckData.raw_check");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_raw_check(), target);
  }

  // string proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proof().data(), static_cast<int>(this->_internal_proof().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RedeemCheckData.proof");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RedeemCheckData)
  return target;
}

size_t RedeemCheckData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RedeemCheckData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string raw_check = 1 [json_name = "rawCheck"];
  if (!this->_internal_raw_check().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_check());
  }

  // string proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proof());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedeemCheckData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RedeemCheckData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedeemCheckData::GetClassData() const { return &_class_data_; }

void RedeemCheckData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RedeemCheckData *>(to)->MergeFrom(
      static_cast<const RedeemCheckData &>(from));
}


void RedeemCheckData::MergeFrom(const RedeemCheckData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RedeemCheckData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_raw_check().empty()) {
    _internal_set_raw_check(from._internal_raw_check());
  }
  if (!from._internal_proof().empty()) {
    _internal_set_proof(from._internal_proof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedeemCheckData::CopyFrom(const RedeemCheckData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RedeemCheckData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedeemCheckData::IsInitialized() const {
  return true;
}

void RedeemCheckData::InternalSwap(RedeemCheckData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_check_, GetArenaForAllocation(),
      &other->raw_check_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proof_, GetArenaForAllocation(),
      &other->proof_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RedeemCheckData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[8]);
}

// ===================================================================

class SetCandidateOnData::_Internal {
 public:
};

SetCandidateOnData::SetCandidateOnData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SetCandidateOnData)
}
SetCandidateOnData::SetCandidateOnData(const SetCandidateOnData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SetCandidateOnData)
}

inline void SetCandidateOnData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetCandidateOnData::~SetCandidateOnData() {
  // @@protoc_insertion_point(destructor:api_pb.SetCandidateOnData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetCandidateOnData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCandidateOnData::ArenaDtor(void* object) {
  SetCandidateOnData* _this = reinterpret_cast< SetCandidateOnData* >(object);
  (void)_this;
}
void SetCandidateOnData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCandidateOnData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCandidateOnData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SetCandidateOnData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCandidateOnData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SetCandidateOnData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCandidateOnData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SetCandidateOnData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SetCandidateOnData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SetCandidateOnData)
  return target;
}

size_t SetCandidateOnData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SetCandidateOnData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCandidateOnData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCandidateOnData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCandidateOnData::GetClassData() const { return &_class_data_; }

void SetCandidateOnData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetCandidateOnData *>(to)->MergeFrom(
      static_cast<const SetCandidateOnData &>(from));
}


void SetCandidateOnData::MergeFrom(const SetCandidateOnData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SetCandidateOnData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCandidateOnData::CopyFrom(const SetCandidateOnData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SetCandidateOnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCandidateOnData::IsInitialized() const {
  return true;
}

void SetCandidateOnData::InternalSwap(SetCandidateOnData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCandidateOnData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[9]);
}

// ===================================================================

class SetCandidateOffData::_Internal {
 public:
};

SetCandidateOffData::SetCandidateOffData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SetCandidateOffData)
}
SetCandidateOffData::SetCandidateOffData(const SetCandidateOffData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SetCandidateOffData)
}

inline void SetCandidateOffData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetCandidateOffData::~SetCandidateOffData() {
  // @@protoc_insertion_point(destructor:api_pb.SetCandidateOffData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetCandidateOffData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCandidateOffData::ArenaDtor(void* object) {
  SetCandidateOffData* _this = reinterpret_cast< SetCandidateOffData* >(object);
  (void)_this;
}
void SetCandidateOffData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCandidateOffData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetCandidateOffData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SetCandidateOffData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCandidateOffData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SetCandidateOffData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCandidateOffData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SetCandidateOffData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SetCandidateOffData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SetCandidateOffData)
  return target;
}

size_t SetCandidateOffData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SetCandidateOffData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCandidateOffData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetCandidateOffData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCandidateOffData::GetClassData() const { return &_class_data_; }

void SetCandidateOffData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetCandidateOffData *>(to)->MergeFrom(
      static_cast<const SetCandidateOffData &>(from));
}


void SetCandidateOffData::MergeFrom(const SetCandidateOffData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SetCandidateOffData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCandidateOffData::CopyFrom(const SetCandidateOffData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SetCandidateOffData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCandidateOffData::IsInitialized() const {
  return true;
}

void SetCandidateOffData::InternalSwap(SetCandidateOffData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCandidateOffData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[10]);
}

// ===================================================================

class CreateMultisigData::_Internal {
 public:
};

CreateMultisigData::CreateMultisigData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  weights_(arena),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CreateMultisigData)
}
CreateMultisigData::CreateMultisigData(const CreateMultisigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weights_(from.weights_),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:api_pb.CreateMultisigData)
}

inline void CreateMultisigData::SharedCtor() {
threshold_ = uint64_t{0u};
}

CreateMultisigData::~CreateMultisigData() {
  // @@protoc_insertion_point(destructor:api_pb.CreateMultisigData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateMultisigData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateMultisigData::ArenaDtor(void* object) {
  CreateMultisigData* _this = reinterpret_cast< CreateMultisigData* >(object);
  (void)_this;
}
void CreateMultisigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateMultisigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateMultisigData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CreateMultisigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  addresses_.Clear();
  threshold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMultisigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 threshold = 1 [json_name = "threshold"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 weights = 2 [json_name = "weights"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 3 [json_name = "addresses"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateMultisigData.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateMultisigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CreateMultisigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_threshold(), target);
  }

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    int byte_size = _weights_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_weights(), byte_size, target);
    }
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateMultisigData.addresses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CreateMultisigData)
  return target;
}

size_t CreateMultisigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CreateMultisigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateMultisigData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateMultisigData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateMultisigData::GetClassData() const { return &_class_data_; }

void CreateMultisigData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateMultisigData *>(to)->MergeFrom(
      static_cast<const CreateMultisigData &>(from));
}


void CreateMultisigData::MergeFrom(const CreateMultisigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CreateMultisigData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  addresses_.MergeFrom(from.addresses_);
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateMultisigData::CopyFrom(const CreateMultisigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CreateMultisigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMultisigData::IsInitialized() const {
  return true;
}

void CreateMultisigData::InternalSwap(CreateMultisigData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  weights_.InternalSwap(&other->weights_);
  addresses_.InternalSwap(&other->addresses_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMultisigData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[11]);
}

// ===================================================================

class MultiSendData::_Internal {
 public:
};

MultiSendData::MultiSendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MultiSendData)
}
MultiSendData::MultiSendData(const MultiSendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.MultiSendData)
}

inline void MultiSendData::SharedCtor() {
}

MultiSendData::~MultiSendData() {
  // @@protoc_insertion_point(destructor:api_pb.MultiSendData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MultiSendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiSendData::ArenaDtor(void* object) {
  MultiSendData* _this = reinterpret_cast< MultiSendData* >(object);
  (void)_this;
}
void MultiSendData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiSendData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiSendData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MultiSendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiSendData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.SendData list = 1 [json_name = "list"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiSendData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MultiSendData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.SendData list = 1 [json_name = "list"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MultiSendData)
  return target;
}

size_t MultiSendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MultiSendData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.SendData list = 1 [json_name = "list"];
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiSendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MultiSendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiSendData::GetClassData() const { return &_class_data_; }

void MultiSendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MultiSendData *>(to)->MergeFrom(
      static_cast<const MultiSendData &>(from));
}


void MultiSendData::MergeFrom(const MultiSendData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MultiSendData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiSendData::CopyFrom(const MultiSendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MultiSendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSendData::IsInitialized() const {
  return true;
}

void MultiSendData::InternalSwap(MultiSendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiSendData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[12]);
}

// ===================================================================

class EditCandidateData::_Internal {
 public:
};

EditCandidateData::EditCandidateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EditCandidateData)
}
EditCandidateData::EditCandidateData(const EditCandidateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  reward_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_address().empty()) {
    reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_address(), 
      GetArenaForAllocation());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  control_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_control_address().empty()) {
    control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EditCandidateData)
}

inline void EditCandidateData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reward_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
control_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EditCandidateData::~EditCandidateData() {
  // @@protoc_insertion_point(destructor:api_pb.EditCandidateData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditCandidateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reward_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EditCandidateData::ArenaDtor(void* object) {
  EditCandidateData* _this = reinterpret_cast< EditCandidateData* >(object);
  (void)_this;
}
void EditCandidateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCandidateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCandidateData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EditCandidateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  reward_address_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  control_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCandidateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidateData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reward_address = 3 [json_name = "rewardAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reward_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidateData.reward_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_address = 4 [json_name = "ownerAddress"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidateData.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string control_address = 5 [json_name = "controlAddress"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_control_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidateData.control_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditCandidateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EditCandidateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidateData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // string reward_address = 3 [json_name = "rewardAddress"];
  if (!this->_internal_reward_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward_address().data(), static_cast<int>(this->_internal_reward_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidateData.reward_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reward_address(), target);
  }

  // string owner_address = 4 [json_name = "ownerAddress"];
  if (!this->_internal_owner_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidateData.owner_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_owner_address(), target);
  }

  // string control_address = 5 [json_name = "controlAddress"];
  if (!this->_internal_control_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_control_address().data(), static_cast<int>(this->_internal_control_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidateData.control_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_control_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EditCandidateData)
  return target;
}

size_t EditCandidateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EditCandidateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string reward_address = 3 [json_name = "rewardAddress"];
  if (!this->_internal_reward_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward_address());
  }

  // string owner_address = 4 [json_name = "ownerAddress"];
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string control_address = 5 [json_name = "controlAddress"];
  if (!this->_internal_control_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_control_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCandidateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditCandidateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCandidateData::GetClassData() const { return &_class_data_; }

void EditCandidateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EditCandidateData *>(to)->MergeFrom(
      static_cast<const EditCandidateData &>(from));
}


void EditCandidateData::MergeFrom(const EditCandidateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EditCandidateData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_reward_address().empty()) {
    _internal_set_reward_address(from._internal_reward_address());
  }
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_control_address().empty()) {
    _internal_set_control_address(from._internal_control_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCandidateData::CopyFrom(const EditCandidateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EditCandidateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCandidateData::IsInitialized() const {
  return true;
}

void EditCandidateData::InternalSwap(EditCandidateData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_address_, GetArenaForAllocation(),
      &other->reward_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_address_, GetArenaForAllocation(),
      &other->control_address_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCandidateData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[13]);
}

// ===================================================================

class SetHaltBlockData::_Internal {
 public:
};

SetHaltBlockData::SetHaltBlockData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SetHaltBlockData)
}
SetHaltBlockData::SetHaltBlockData(const SetHaltBlockData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.SetHaltBlockData)
}

inline void SetHaltBlockData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

SetHaltBlockData::~SetHaltBlockData() {
  // @@protoc_insertion_point(destructor:api_pb.SetHaltBlockData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetHaltBlockData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetHaltBlockData::ArenaDtor(void* object) {
  SetHaltBlockData* _this = reinterpret_cast< SetHaltBlockData* >(object);
  (void)_this;
}
void SetHaltBlockData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetHaltBlockData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetHaltBlockData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SetHaltBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetHaltBlockData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SetHaltBlockData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetHaltBlockData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SetHaltBlockData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SetHaltBlockData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SetHaltBlockData)
  return target;
}

size_t SetHaltBlockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SetHaltBlockData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetHaltBlockData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetHaltBlockData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetHaltBlockData::GetClassData() const { return &_class_data_; }

void SetHaltBlockData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SetHaltBlockData *>(to)->MergeFrom(
      static_cast<const SetHaltBlockData &>(from));
}


void SetHaltBlockData::MergeFrom(const SetHaltBlockData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SetHaltBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetHaltBlockData::CopyFrom(const SetHaltBlockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SetHaltBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetHaltBlockData::IsInitialized() const {
  return true;
}

void SetHaltBlockData::InternalSwap(SetHaltBlockData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetHaltBlockData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[14]);
}

// ===================================================================

class RecreateCoinData::_Internal {
 public:
};

RecreateCoinData::RecreateCoinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RecreateCoinData)
}
RecreateCoinData::RecreateCoinData(const RecreateCoinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_amount().empty()) {
    initial_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_amount(), 
      GetArenaForAllocation());
  }
  initial_reserve_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_reserve().empty()) {
    initial_reserve_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_reserve(), 
      GetArenaForAllocation());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_supply().empty()) {
    max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_supply(), 
      GetArenaForAllocation());
  }
  constant_reserve_ratio_ = from.constant_reserve_ratio_;
  // @@protoc_insertion_point(copy_constructor:api_pb.RecreateCoinData)
}

inline void RecreateCoinData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_reserve_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
constant_reserve_ratio_ = uint64_t{0u};
}

RecreateCoinData::~RecreateCoinData() {
  // @@protoc_insertion_point(destructor:api_pb.RecreateCoinData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecreateCoinData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_reserve_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecreateCoinData::ArenaDtor(void* object) {
  RecreateCoinData* _this = reinterpret_cast< RecreateCoinData* >(object);
  (void)_this;
}
void RecreateCoinData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecreateCoinData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecreateCoinData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RecreateCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  initial_amount_.ClearToEmpty();
  initial_reserve_.ClearToEmpty();
  max_supply_.ClearToEmpty();
  constant_reserve_ratio_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecreateCoinData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateCoinData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateCoinData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_amount = 3 [json_name = "initialAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_initial_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateCoinData.initial_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_reserve = 4 [json_name = "initialReserve"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_initial_reserve();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateCoinData.initial_reserve"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 constant_reserve_ratio = 5 [json_name = "constantReserveRatio"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          constant_reserve_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_supply = 6 [json_name = "maxSupply"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateCoinData.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecreateCoinData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RecreateCoinData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateCoinData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateCoinData.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_amount().data(), static_cast<int>(this->_internal_initial_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateCoinData.initial_amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_initial_amount(), target);
  }

  // string initial_reserve = 4 [json_name = "initialReserve"];
  if (!this->_internal_initial_reserve().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_reserve().data(), static_cast<int>(this->_internal_initial_reserve().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateCoinData.initial_reserve");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_initial_reserve(), target);
  }

  // uint64 constant_reserve_ratio = 5 [json_name = "constantReserveRatio"];
  if (this->_internal_constant_reserve_ratio() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_constant_reserve_ratio(), target);
  }

  // string max_supply = 6 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateCoinData.max_supply");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_max_supply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RecreateCoinData)
  return target;
}

size_t RecreateCoinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RecreateCoinData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_amount());
  }

  // string initial_reserve = 4 [json_name = "initialReserve"];
  if (!this->_internal_initial_reserve().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_reserve());
  }

  // string max_supply = 6 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // uint64 constant_reserve_ratio = 5 [json_name = "constantReserveRatio"];
  if (this->_internal_constant_reserve_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_constant_reserve_ratio());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecreateCoinData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecreateCoinData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecreateCoinData::GetClassData() const { return &_class_data_; }

void RecreateCoinData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecreateCoinData *>(to)->MergeFrom(
      static_cast<const RecreateCoinData &>(from));
}


void RecreateCoinData::MergeFrom(const RecreateCoinData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RecreateCoinData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_initial_amount().empty()) {
    _internal_set_initial_amount(from._internal_initial_amount());
  }
  if (!from._internal_initial_reserve().empty()) {
    _internal_set_initial_reserve(from._internal_initial_reserve());
  }
  if (!from._internal_max_supply().empty()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from._internal_constant_reserve_ratio() != 0) {
    _internal_set_constant_reserve_ratio(from._internal_constant_reserve_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecreateCoinData::CopyFrom(const RecreateCoinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RecreateCoinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecreateCoinData::IsInitialized() const {
  return true;
}

void RecreateCoinData::InternalSwap(RecreateCoinData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_amount_, GetArenaForAllocation(),
      &other->initial_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_reserve_, GetArenaForAllocation(),
      &other->initial_reserve_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_supply_, GetArenaForAllocation(),
      &other->max_supply_, other->GetArenaForAllocation()
  );
  swap(constant_reserve_ratio_, other->constant_reserve_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecreateCoinData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[15]);
}

// ===================================================================

class EditCoinOwnerData::_Internal {
 public:
};

EditCoinOwnerData::EditCoinOwnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EditCoinOwnerData)
}
EditCoinOwnerData::EditCoinOwnerData(const EditCoinOwnerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  new_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_owner().empty()) {
    new_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_owner(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EditCoinOwnerData)
}

inline void EditCoinOwnerData::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EditCoinOwnerData::~EditCoinOwnerData() {
  // @@protoc_insertion_point(destructor:api_pb.EditCoinOwnerData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditCoinOwnerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EditCoinOwnerData::ArenaDtor(void* object) {
  EditCoinOwnerData* _this = reinterpret_cast< EditCoinOwnerData* >(object);
  (void)_this;
}
void EditCoinOwnerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCoinOwnerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCoinOwnerData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EditCoinOwnerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  new_owner_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCoinOwnerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string symbol = 1 [json_name = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCoinOwnerData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_owner = 2 [json_name = "newOwner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCoinOwnerData.new_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditCoinOwnerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EditCoinOwnerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCoinOwnerData.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // string new_owner = 2 [json_name = "newOwner"];
  if (!this->_internal_new_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_owner().data(), static_cast<int>(this->_internal_new_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCoinOwnerData.new_owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EditCoinOwnerData)
  return target;
}

size_t EditCoinOwnerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EditCoinOwnerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string new_owner = 2 [json_name = "newOwner"];
  if (!this->_internal_new_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_owner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCoinOwnerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditCoinOwnerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCoinOwnerData::GetClassData() const { return &_class_data_; }

void EditCoinOwnerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EditCoinOwnerData *>(to)->MergeFrom(
      static_cast<const EditCoinOwnerData &>(from));
}


void EditCoinOwnerData::MergeFrom(const EditCoinOwnerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EditCoinOwnerData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_new_owner().empty()) {
    _internal_set_new_owner(from._internal_new_owner());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCoinOwnerData::CopyFrom(const EditCoinOwnerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EditCoinOwnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCoinOwnerData::IsInitialized() const {
  return true;
}

void EditCoinOwnerData::InternalSwap(EditCoinOwnerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_owner_, GetArenaForAllocation(),
      &other->new_owner_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCoinOwnerData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[16]);
}

// ===================================================================

class EditMultisigData::_Internal {
 public:
};

EditMultisigData::EditMultisigData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  weights_(arena),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EditMultisigData)
}
EditMultisigData::EditMultisigData(const EditMultisigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weights_(from.weights_),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EditMultisigData)
}

inline void EditMultisigData::SharedCtor() {
threshold_ = uint64_t{0u};
}

EditMultisigData::~EditMultisigData() {
  // @@protoc_insertion_point(destructor:api_pb.EditMultisigData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditMultisigData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EditMultisigData::ArenaDtor(void* object) {
  EditMultisigData* _this = reinterpret_cast< EditMultisigData* >(object);
  (void)_this;
}
void EditMultisigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditMultisigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditMultisigData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EditMultisigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  addresses_.Clear();
  threshold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditMultisigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 threshold = 1 [json_name = "threshold"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 weights = 2 [json_name = "weights"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 3 [json_name = "addresses"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditMultisigData.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditMultisigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EditMultisigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_threshold(), target);
  }

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    int byte_size = _weights_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_weights(), byte_size, target);
    }
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditMultisigData.addresses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EditMultisigData)
  return target;
}

size_t EditMultisigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EditMultisigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditMultisigData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditMultisigData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditMultisigData::GetClassData() const { return &_class_data_; }

void EditMultisigData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EditMultisigData *>(to)->MergeFrom(
      static_cast<const EditMultisigData &>(from));
}


void EditMultisigData::MergeFrom(const EditMultisigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EditMultisigData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  addresses_.MergeFrom(from.addresses_);
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditMultisigData::CopyFrom(const EditMultisigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EditMultisigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMultisigData::IsInitialized() const {
  return true;
}

void EditMultisigData::InternalSwap(EditMultisigData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  weights_.InternalSwap(&other->weights_);
  addresses_.InternalSwap(&other->addresses_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditMultisigData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[17]);
}

// ===================================================================

class EditCandidatePublicKeyData::_Internal {
 public:
};

EditCandidatePublicKeyData::EditCandidatePublicKeyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EditCandidatePublicKeyData)
}
EditCandidatePublicKeyData::EditCandidatePublicKeyData(const EditCandidatePublicKeyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  new_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_new_pub_key().empty()) {
    new_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_new_pub_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EditCandidatePublicKeyData)
}

inline void EditCandidatePublicKeyData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
new_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EditCandidatePublicKeyData::~EditCandidatePublicKeyData() {
  // @@protoc_insertion_point(destructor:api_pb.EditCandidatePublicKeyData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditCandidatePublicKeyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EditCandidatePublicKeyData::ArenaDtor(void* object) {
  EditCandidatePublicKeyData* _this = reinterpret_cast< EditCandidatePublicKeyData* >(object);
  (void)_this;
}
void EditCandidatePublicKeyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCandidatePublicKeyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCandidatePublicKeyData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EditCandidatePublicKeyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  new_pub_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCandidatePublicKeyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidatePublicKeyData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string new_pub_key = 2 [json_name = "newPubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidatePublicKeyData.new_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditCandidatePublicKeyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EditCandidatePublicKeyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidatePublicKeyData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // string new_pub_key = 2 [json_name = "newPubKey"];
  if (!this->_internal_new_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_new_pub_key().data(), static_cast<int>(this->_internal_new_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidatePublicKeyData.new_pub_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EditCandidatePublicKeyData)
  return target;
}

size_t EditCandidatePublicKeyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EditCandidatePublicKeyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string new_pub_key = 2 [json_name = "newPubKey"];
  if (!this->_internal_new_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_new_pub_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCandidatePublicKeyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditCandidatePublicKeyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCandidatePublicKeyData::GetClassData() const { return &_class_data_; }

void EditCandidatePublicKeyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EditCandidatePublicKeyData *>(to)->MergeFrom(
      static_cast<const EditCandidatePublicKeyData &>(from));
}


void EditCandidatePublicKeyData::MergeFrom(const EditCandidatePublicKeyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EditCandidatePublicKeyData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_new_pub_key().empty()) {
    _internal_set_new_pub_key(from._internal_new_pub_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCandidatePublicKeyData::CopyFrom(const EditCandidatePublicKeyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EditCandidatePublicKeyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCandidatePublicKeyData::IsInitialized() const {
  return true;
}

void EditCandidatePublicKeyData::InternalSwap(EditCandidatePublicKeyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &new_pub_key_, GetArenaForAllocation(),
      &other->new_pub_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCandidatePublicKeyData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[18]);
}

// ===================================================================

class CreateSwapPoolData::_Internal {
 public:
  static const ::api_pb::Coin& coin0(const CreateSwapPoolData* msg);
  static const ::api_pb::Coin& coin1(const CreateSwapPoolData* msg);
};

const ::api_pb::Coin&
CreateSwapPoolData::_Internal::coin0(const CreateSwapPoolData* msg) {
  return *msg->coin0_;
}
const ::api_pb::Coin&
CreateSwapPoolData::_Internal::coin1(const CreateSwapPoolData* msg) {
  return *msg->coin1_;
}
void CreateSwapPoolData::clear_coin0() {
  if (GetArenaForAllocation() == nullptr && coin0_ != nullptr) {
    delete coin0_;
  }
  coin0_ = nullptr;
}
void CreateSwapPoolData::clear_coin1() {
  if (GetArenaForAllocation() == nullptr && coin1_ != nullptr) {
    delete coin1_;
  }
  coin1_ = nullptr;
}
CreateSwapPoolData::CreateSwapPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CreateSwapPoolData)
}
CreateSwapPoolData::CreateSwapPoolData(const CreateSwapPoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume0().empty()) {
    volume0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume0(), 
      GetArenaForAllocation());
  }
  volume1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume1().empty()) {
    volume1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume1(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin0()) {
    coin0_ = new ::api_pb::Coin(*from.coin0_);
  } else {
    coin0_ = nullptr;
  }
  if (from._internal_has_coin1()) {
    coin1_ = new ::api_pb::Coin(*from.coin1_);
  } else {
    coin1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.CreateSwapPoolData)
}

inline void CreateSwapPoolData::SharedCtor() {
volume0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin1_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(coin1_));
}

CreateSwapPoolData::~CreateSwapPoolData() {
  // @@protoc_insertion_point(destructor:api_pb.CreateSwapPoolData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateSwapPoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  volume0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin0_;
  if (this != internal_default_instance()) delete coin1_;
}

void CreateSwapPoolData::ArenaDtor(void* object) {
  CreateSwapPoolData* _this = reinterpret_cast< CreateSwapPoolData* >(object);
  (void)_this;
}
void CreateSwapPoolData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSwapPoolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateSwapPoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CreateSwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume0_.ClearToEmpty();
  volume1_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin0_ != nullptr) {
    delete coin0_;
  }
  coin0_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin1_ != nullptr) {
    delete coin1_;
  }
  coin1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSwapPoolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume0 = 3 [json_name = "volume0"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_volume0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateSwapPoolData.volume0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume1 = 4 [json_name = "volume1"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_volume1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateSwapPoolData.volume1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSwapPoolData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CreateSwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
  if (this->_internal_has_coin0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin0(this), target, stream);
  }

  // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
  if (this->_internal_has_coin1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin1(this), target, stream);
  }

  // string volume0 = 3 [json_name = "volume0"];
  if (!this->_internal_volume0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume0().data(), static_cast<int>(this->_internal_volume0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateSwapPoolData.volume0");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_volume0(), target);
  }

  // string volume1 = 4 [json_name = "volume1"];
  if (!this->_internal_volume1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume1().data(), static_cast<int>(this->_internal_volume1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateSwapPoolData.volume1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_volume1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CreateSwapPoolData)
  return target;
}

size_t CreateSwapPoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CreateSwapPoolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume0 = 3 [json_name = "volume0"];
  if (!this->_internal_volume0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume0());
  }

  // string volume1 = 4 [json_name = "volume1"];
  if (!this->_internal_volume1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume1());
  }

  // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
  if (this->_internal_has_coin0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin0_);
  }

  // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
  if (this->_internal_has_coin1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSwapPoolData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateSwapPoolData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSwapPoolData::GetClassData() const { return &_class_data_; }

void CreateSwapPoolData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateSwapPoolData *>(to)->MergeFrom(
      static_cast<const CreateSwapPoolData &>(from));
}


void CreateSwapPoolData::MergeFrom(const CreateSwapPoolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CreateSwapPoolData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_volume0().empty()) {
    _internal_set_volume0(from._internal_volume0());
  }
  if (!from._internal_volume1().empty()) {
    _internal_set_volume1(from._internal_volume1());
  }
  if (from._internal_has_coin0()) {
    _internal_mutable_coin0()->::api_pb::Coin::MergeFrom(from._internal_coin0());
  }
  if (from._internal_has_coin1()) {
    _internal_mutable_coin1()->::api_pb::Coin::MergeFrom(from._internal_coin1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSwapPoolData::CopyFrom(const CreateSwapPoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CreateSwapPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSwapPoolData::IsInitialized() const {
  return true;
}

void CreateSwapPoolData::InternalSwap(CreateSwapPoolData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &volume0_, GetArenaForAllocation(),
      &other->volume0_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &volume1_, GetArenaForAllocation(),
      &other->volume1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSwapPoolData, coin1_)
      + sizeof(CreateSwapPoolData::coin1_)
      - PROTOBUF_FIELD_OFFSET(CreateSwapPoolData, coin0_)>(
          reinterpret_cast<char*>(&coin0_),
          reinterpret_cast<char*>(&other->coin0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSwapPoolData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[19]);
}

// ===================================================================

class AddLiquidityData::_Internal {
 public:
  static const ::api_pb::Coin& coin0(const AddLiquidityData* msg);
  static const ::api_pb::Coin& coin1(const AddLiquidityData* msg);
};

const ::api_pb::Coin&
AddLiquidityData::_Internal::coin0(const AddLiquidityData* msg) {
  return *msg->coin0_;
}
const ::api_pb::Coin&
AddLiquidityData::_Internal::coin1(const AddLiquidityData* msg) {
  return *msg->coin1_;
}
void AddLiquidityData::clear_coin0() {
  if (GetArenaForAllocation() == nullptr && coin0_ != nullptr) {
    delete coin0_;
  }
  coin0_ = nullptr;
}
void AddLiquidityData::clear_coin1() {
  if (GetArenaForAllocation() == nullptr && coin1_ != nullptr) {
    delete coin1_;
  }
  coin1_ = nullptr;
}
AddLiquidityData::AddLiquidityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddLiquidityData)
}
AddLiquidityData::AddLiquidityData(const AddLiquidityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  volume0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume0().empty()) {
    volume0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume0(), 
      GetArenaForAllocation());
  }
  maximum_volume1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maximum_volume1().empty()) {
    maximum_volume1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maximum_volume1(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin0()) {
    coin0_ = new ::api_pb::Coin(*from.coin0_);
  } else {
    coin0_ = nullptr;
  }
  if (from._internal_has_coin1()) {
    coin1_ = new ::api_pb::Coin(*from.coin1_);
  } else {
    coin1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.AddLiquidityData)
}

inline void AddLiquidityData::SharedCtor() {
volume0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maximum_volume1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin1_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(coin1_));
}

AddLiquidityData::~AddLiquidityData() {
  // @@protoc_insertion_point(destructor:api_pb.AddLiquidityData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddLiquidityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  volume0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maximum_volume1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin0_;
  if (this != internal_default_instance()) delete coin1_;
}

void AddLiquidityData::ArenaDtor(void* object) {
  AddLiquidityData* _this = reinterpret_cast< AddLiquidityData* >(object);
  (void)_this;
}
void AddLiquidityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLiquidityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddLiquidityData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddLiquidityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume0_.ClearToEmpty();
  maximum_volume1_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin0_ != nullptr) {
    delete coin0_;
  }
  coin0_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin1_ != nullptr) {
    delete coin1_;
  }
  coin1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLiquidityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume0 = 3 [json_name = "volume0"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_volume0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddLiquidityData.volume0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maximum_volume1 = 4 [json_name = "maximumVolume1"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_maximum_volume1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddLiquidityData.maximum_volume1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLiquidityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddLiquidityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
  if (this->_internal_has_coin0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin0(this), target, stream);
  }

  // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
  if (this->_internal_has_coin1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin1(this), target, stream);
  }

  // string volume0 = 3 [json_name = "volume0"];
  if (!this->_internal_volume0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume0().data(), static_cast<int>(this->_internal_volume0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddLiquidityData.volume0");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_volume0(), target);
  }

  // string maximum_volume1 = 4 [json_name = "maximumVolume1"];
  if (!this->_internal_maximum_volume1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maximum_volume1().data(), static_cast<int>(this->_internal_maximum_volume1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddLiquidityData.maximum_volume1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maximum_volume1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddLiquidityData)
  return target;
}

size_t AddLiquidityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddLiquidityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string volume0 = 3 [json_name = "volume0"];
  if (!this->_internal_volume0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume0());
  }

  // string maximum_volume1 = 4 [json_name = "maximumVolume1"];
  if (!this->_internal_maximum_volume1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maximum_volume1());
  }

  // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
  if (this->_internal_has_coin0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin0_);
  }

  // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
  if (this->_internal_has_coin1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddLiquidityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddLiquidityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddLiquidityData::GetClassData() const { return &_class_data_; }

void AddLiquidityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddLiquidityData *>(to)->MergeFrom(
      static_cast<const AddLiquidityData &>(from));
}


void AddLiquidityData::MergeFrom(const AddLiquidityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddLiquidityData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_volume0().empty()) {
    _internal_set_volume0(from._internal_volume0());
  }
  if (!from._internal_maximum_volume1().empty()) {
    _internal_set_maximum_volume1(from._internal_maximum_volume1());
  }
  if (from._internal_has_coin0()) {
    _internal_mutable_coin0()->::api_pb::Coin::MergeFrom(from._internal_coin0());
  }
  if (from._internal_has_coin1()) {
    _internal_mutable_coin1()->::api_pb::Coin::MergeFrom(from._internal_coin1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddLiquidityData::CopyFrom(const AddLiquidityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddLiquidityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLiquidityData::IsInitialized() const {
  return true;
}

void AddLiquidityData::InternalSwap(AddLiquidityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &volume0_, GetArenaForAllocation(),
      &other->volume0_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maximum_volume1_, GetArenaForAllocation(),
      &other->maximum_volume1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLiquidityData, coin1_)
      + sizeof(AddLiquidityData::coin1_)
      - PROTOBUF_FIELD_OFFSET(AddLiquidityData, coin0_)>(
          reinterpret_cast<char*>(&coin0_),
          reinterpret_cast<char*>(&other->coin0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLiquidityData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[20]);
}

// ===================================================================

class RemoveLiquidityData::_Internal {
 public:
  static const ::api_pb::Coin& coin0(const RemoveLiquidityData* msg);
  static const ::api_pb::Coin& coin1(const RemoveLiquidityData* msg);
};

const ::api_pb::Coin&
RemoveLiquidityData::_Internal::coin0(const RemoveLiquidityData* msg) {
  return *msg->coin0_;
}
const ::api_pb::Coin&
RemoveLiquidityData::_Internal::coin1(const RemoveLiquidityData* msg) {
  return *msg->coin1_;
}
void RemoveLiquidityData::clear_coin0() {
  if (GetArenaForAllocation() == nullptr && coin0_ != nullptr) {
    delete coin0_;
  }
  coin0_ = nullptr;
}
void RemoveLiquidityData::clear_coin1() {
  if (GetArenaForAllocation() == nullptr && coin1_ != nullptr) {
    delete coin1_;
  }
  coin1_ = nullptr;
}
RemoveLiquidityData::RemoveLiquidityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RemoveLiquidityData)
}
RemoveLiquidityData::RemoveLiquidityData(const RemoveLiquidityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_liquidity().empty()) {
    liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_liquidity(), 
      GetArenaForAllocation());
  }
  minimum_volume0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minimum_volume0().empty()) {
    minimum_volume0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minimum_volume0(), 
      GetArenaForAllocation());
  }
  minimum_volume1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minimum_volume1().empty()) {
    minimum_volume1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minimum_volume1(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin0()) {
    coin0_ = new ::api_pb::Coin(*from.coin0_);
  } else {
    coin0_ = nullptr;
  }
  if (from._internal_has_coin1()) {
    coin1_ = new ::api_pb::Coin(*from.coin1_);
  } else {
    coin1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.RemoveLiquidityData)
}

inline void RemoveLiquidityData::SharedCtor() {
liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minimum_volume0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minimum_volume1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin1_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(coin1_));
}

RemoveLiquidityData::~RemoveLiquidityData() {
  // @@protoc_insertion_point(destructor:api_pb.RemoveLiquidityData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveLiquidityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minimum_volume0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minimum_volume1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin0_;
  if (this != internal_default_instance()) delete coin1_;
}

void RemoveLiquidityData::ArenaDtor(void* object) {
  RemoveLiquidityData* _this = reinterpret_cast< RemoveLiquidityData* >(object);
  (void)_this;
}
void RemoveLiquidityData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveLiquidityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveLiquidityData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RemoveLiquidityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  liquidity_.ClearToEmpty();
  minimum_volume0_.ClearToEmpty();
  minimum_volume1_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin0_ != nullptr) {
    delete coin0_;
  }
  coin0_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin1_ != nullptr) {
    delete coin1_;
  }
  coin1_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveLiquidityData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string liquidity = 3 [json_name = "liquidity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RemoveLiquidityData.liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minimum_volume0 = 4 [json_name = "minimumVolume0"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_minimum_volume0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RemoveLiquidityData.minimum_volume0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minimum_volume1 = 5 [json_name = "minimumVolume1"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_minimum_volume1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RemoveLiquidityData.minimum_volume1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveLiquidityData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RemoveLiquidityData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
  if (this->_internal_has_coin0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin0(this), target, stream);
  }

  // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
  if (this->_internal_has_coin1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin1(this), target, stream);
  }

  // string liquidity = 3 [json_name = "liquidity"];
  if (!this->_internal_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liquidity().data(), static_cast<int>(this->_internal_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RemoveLiquidityData.liquidity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_liquidity(), target);
  }

  // string minimum_volume0 = 4 [json_name = "minimumVolume0"];
  if (!this->_internal_minimum_volume0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minimum_volume0().data(), static_cast<int>(this->_internal_minimum_volume0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RemoveLiquidityData.minimum_volume0");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_minimum_volume0(), target);
  }

  // string minimum_volume1 = 5 [json_name = "minimumVolume1"];
  if (!this->_internal_minimum_volume1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minimum_volume1().data(), static_cast<int>(this->_internal_minimum_volume1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RemoveLiquidityData.minimum_volume1");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_minimum_volume1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RemoveLiquidityData)
  return target;
}

size_t RemoveLiquidityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RemoveLiquidityData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string liquidity = 3 [json_name = "liquidity"];
  if (!this->_internal_liquidity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liquidity());
  }

  // string minimum_volume0 = 4 [json_name = "minimumVolume0"];
  if (!this->_internal_minimum_volume0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minimum_volume0());
  }

  // string minimum_volume1 = 5 [json_name = "minimumVolume1"];
  if (!this->_internal_minimum_volume1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minimum_volume1());
  }

  // .api_pb.Coin coin0 = 1 [json_name = "coin0"];
  if (this->_internal_has_coin0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin0_);
  }

  // .api_pb.Coin coin1 = 2 [json_name = "coin1"];
  if (this->_internal_has_coin1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveLiquidityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveLiquidityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveLiquidityData::GetClassData() const { return &_class_data_; }

void RemoveLiquidityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RemoveLiquidityData *>(to)->MergeFrom(
      static_cast<const RemoveLiquidityData &>(from));
}


void RemoveLiquidityData::MergeFrom(const RemoveLiquidityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RemoveLiquidityData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_liquidity().empty()) {
    _internal_set_liquidity(from._internal_liquidity());
  }
  if (!from._internal_minimum_volume0().empty()) {
    _internal_set_minimum_volume0(from._internal_minimum_volume0());
  }
  if (!from._internal_minimum_volume1().empty()) {
    _internal_set_minimum_volume1(from._internal_minimum_volume1());
  }
  if (from._internal_has_coin0()) {
    _internal_mutable_coin0()->::api_pb::Coin::MergeFrom(from._internal_coin0());
  }
  if (from._internal_has_coin1()) {
    _internal_mutable_coin1()->::api_pb::Coin::MergeFrom(from._internal_coin1());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveLiquidityData::CopyFrom(const RemoveLiquidityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RemoveLiquidityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLiquidityData::IsInitialized() const {
  return true;
}

void RemoveLiquidityData::InternalSwap(RemoveLiquidityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &liquidity_, GetArenaForAllocation(),
      &other->liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minimum_volume0_, GetArenaForAllocation(),
      &other->minimum_volume0_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minimum_volume1_, GetArenaForAllocation(),
      &other->minimum_volume1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveLiquidityData, coin1_)
      + sizeof(RemoveLiquidityData::coin1_)
      - PROTOBUF_FIELD_OFFSET(RemoveLiquidityData, coin0_)>(
          reinterpret_cast<char*>(&coin0_),
          reinterpret_cast<char*>(&other->coin0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveLiquidityData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[21]);
}

// ===================================================================

class SellSwapPoolData::_Internal {
 public:
};

void SellSwapPoolData::clear_coins() {
  coins_.Clear();
}
SellSwapPoolData::SellSwapPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SellSwapPoolData)
}
SellSwapPoolData::SellSwapPoolData(const SellSwapPoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_sell().empty()) {
    value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_sell(), 
      GetArenaForAllocation());
  }
  minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minimum_value_to_buy().empty()) {
    minimum_value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minimum_value_to_buy(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SellSwapPoolData)
}

inline void SellSwapPoolData::SharedCtor() {
value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SellSwapPoolData::~SellSwapPoolData() {
  // @@protoc_insertion_point(destructor:api_pb.SellSwapPoolData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SellSwapPoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minimum_value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SellSwapPoolData::ArenaDtor(void* object) {
  SellSwapPoolData* _this = reinterpret_cast< SellSwapPoolData* >(object);
  (void)_this;
}
void SellSwapPoolData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SellSwapPoolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SellSwapPoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SellSwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  value_to_sell_.ClearToEmpty();
  minimum_value_to_buy_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SellSwapPoolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string value_to_sell = 2 [json_name = "valueToSell"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SellSwapPoolData.value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minimum_value_to_buy = 4 [json_name = "minimumValueToBuy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_minimum_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SellSwapPoolData.minimum_value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SellSwapPoolData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SellSwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_coins(i), target, stream);
  }

  // string value_to_sell = 2 [json_name = "valueToSell"];
  if (!this->_internal_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_sell().data(), static_cast<int>(this->_internal_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SellSwapPoolData.value_to_sell");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_to_sell(), target);
  }

  // string minimum_value_to_buy = 4 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minimum_value_to_buy().data(), static_cast<int>(this->_internal_minimum_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SellSwapPoolData.minimum_value_to_buy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_minimum_value_to_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SellSwapPoolData)
  return target;
}

size_t SellSwapPoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SellSwapPoolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
  total_size += 1UL * this->_internal_coins_size();
  for (const auto& msg : this->coins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string value_to_sell = 2 [json_name = "valueToSell"];
  if (!this->_internal_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_sell());
  }

  // string minimum_value_to_buy = 4 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minimum_value_to_buy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SellSwapPoolData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SellSwapPoolData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SellSwapPoolData::GetClassData() const { return &_class_data_; }

void SellSwapPoolData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SellSwapPoolData *>(to)->MergeFrom(
      static_cast<const SellSwapPoolData &>(from));
}


void SellSwapPoolData::MergeFrom(const SellSwapPoolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SellSwapPoolData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (!from._internal_value_to_sell().empty()) {
    _internal_set_value_to_sell(from._internal_value_to_sell());
  }
  if (!from._internal_minimum_value_to_buy().empty()) {
    _internal_set_minimum_value_to_buy(from._internal_minimum_value_to_buy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SellSwapPoolData::CopyFrom(const SellSwapPoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SellSwapPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellSwapPoolData::IsInitialized() const {
  return true;
}

void SellSwapPoolData::InternalSwap(SellSwapPoolData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  coins_.InternalSwap(&other->coins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_sell_, GetArenaForAllocation(),
      &other->value_to_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minimum_value_to_buy_, GetArenaForAllocation(),
      &other->minimum_value_to_buy_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SellSwapPoolData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[22]);
}

// ===================================================================

class SellAllSwapPoolData::_Internal {
 public:
};

void SellAllSwapPoolData::clear_coins() {
  coins_.Clear();
}
SellAllSwapPoolData::SellAllSwapPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SellAllSwapPoolData)
}
SellAllSwapPoolData::SellAllSwapPoolData(const SellAllSwapPoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minimum_value_to_buy().empty()) {
    minimum_value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minimum_value_to_buy(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SellAllSwapPoolData)
}

inline void SellAllSwapPoolData::SharedCtor() {
minimum_value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SellAllSwapPoolData::~SellAllSwapPoolData() {
  // @@protoc_insertion_point(destructor:api_pb.SellAllSwapPoolData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SellAllSwapPoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  minimum_value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SellAllSwapPoolData::ArenaDtor(void* object) {
  SellAllSwapPoolData* _this = reinterpret_cast< SellAllSwapPoolData* >(object);
  (void)_this;
}
void SellAllSwapPoolData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SellAllSwapPoolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SellAllSwapPoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SellAllSwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  minimum_value_to_buy_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SellAllSwapPoolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string minimum_value_to_buy = 3 [json_name = "minimumValueToBuy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_minimum_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SellAllSwapPoolData.minimum_value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SellAllSwapPoolData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SellAllSwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_coins(i), target, stream);
  }

  // string minimum_value_to_buy = 3 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minimum_value_to_buy().data(), static_cast<int>(this->_internal_minimum_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SellAllSwapPoolData.minimum_value_to_buy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_minimum_value_to_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SellAllSwapPoolData)
  return target;
}

size_t SellAllSwapPoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SellAllSwapPoolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
  total_size += 1UL * this->_internal_coins_size();
  for (const auto& msg : this->coins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string minimum_value_to_buy = 3 [json_name = "minimumValueToBuy"];
  if (!this->_internal_minimum_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minimum_value_to_buy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SellAllSwapPoolData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SellAllSwapPoolData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SellAllSwapPoolData::GetClassData() const { return &_class_data_; }

void SellAllSwapPoolData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SellAllSwapPoolData *>(to)->MergeFrom(
      static_cast<const SellAllSwapPoolData &>(from));
}


void SellAllSwapPoolData::MergeFrom(const SellAllSwapPoolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SellAllSwapPoolData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (!from._internal_minimum_value_to_buy().empty()) {
    _internal_set_minimum_value_to_buy(from._internal_minimum_value_to_buy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SellAllSwapPoolData::CopyFrom(const SellAllSwapPoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SellAllSwapPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SellAllSwapPoolData::IsInitialized() const {
  return true;
}

void SellAllSwapPoolData::InternalSwap(SellAllSwapPoolData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  coins_.InternalSwap(&other->coins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &minimum_value_to_buy_, GetArenaForAllocation(),
      &other->minimum_value_to_buy_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SellAllSwapPoolData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[23]);
}

// ===================================================================

class BuySwapPoolData::_Internal {
 public:
};

void BuySwapPoolData::clear_coins() {
  coins_.Clear();
}
BuySwapPoolData::BuySwapPoolData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  coins_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BuySwapPoolData)
}
BuySwapPoolData::BuySwapPoolData(const BuySwapPoolData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_buy().empty()) {
    value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_buy(), 
      GetArenaForAllocation());
  }
  maximum_value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maximum_value_to_sell().empty()) {
    maximum_value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maximum_value_to_sell(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.BuySwapPoolData)
}

inline void BuySwapPoolData::SharedCtor() {
value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maximum_value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BuySwapPoolData::~BuySwapPoolData() {
  // @@protoc_insertion_point(destructor:api_pb.BuySwapPoolData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BuySwapPoolData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maximum_value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuySwapPoolData::ArenaDtor(void* object) {
  BuySwapPoolData* _this = reinterpret_cast< BuySwapPoolData* >(object);
  (void)_this;
}
void BuySwapPoolData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuySwapPoolData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BuySwapPoolData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BuySwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  value_to_buy_.ClearToEmpty();
  maximum_value_to_sell_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuySwapPoolData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string value_to_buy = 2 [json_name = "valueToBuy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BuySwapPoolData.value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maximum_value_to_sell = 4 [json_name = "maximumValueToSell"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_maximum_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BuySwapPoolData.maximum_value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuySwapPoolData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BuySwapPoolData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_coins(i), target, stream);
  }

  // string value_to_buy = 2 [json_name = "valueToBuy"];
  if (!this->_internal_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_buy().data(), static_cast<int>(this->_internal_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BuySwapPoolData.value_to_buy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_to_buy(), target);
  }

  // string maximum_value_to_sell = 4 [json_name = "maximumValueToSell"];
  if (!this->_internal_maximum_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maximum_value_to_sell().data(), static_cast<int>(this->_internal_maximum_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BuySwapPoolData.maximum_value_to_sell");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_maximum_value_to_sell(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BuySwapPoolData)
  return target;
}

size_t BuySwapPoolData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BuySwapPoolData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.Coin coins = 1 [json_name = "coins"];
  total_size += 1UL * this->_internal_coins_size();
  for (const auto& msg : this->coins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string value_to_buy = 2 [json_name = "valueToBuy"];
  if (!this->_internal_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_buy());
  }

  // string maximum_value_to_sell = 4 [json_name = "maximumValueToSell"];
  if (!this->_internal_maximum_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maximum_value_to_sell());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuySwapPoolData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BuySwapPoolData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuySwapPoolData::GetClassData() const { return &_class_data_; }

void BuySwapPoolData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BuySwapPoolData *>(to)->MergeFrom(
      static_cast<const BuySwapPoolData &>(from));
}


void BuySwapPoolData::MergeFrom(const BuySwapPoolData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BuySwapPoolData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (!from._internal_value_to_buy().empty()) {
    _internal_set_value_to_buy(from._internal_value_to_buy());
  }
  if (!from._internal_maximum_value_to_sell().empty()) {
    _internal_set_maximum_value_to_sell(from._internal_maximum_value_to_sell());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuySwapPoolData::CopyFrom(const BuySwapPoolData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BuySwapPoolData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySwapPoolData::IsInitialized() const {
  return true;
}

void BuySwapPoolData::InternalSwap(BuySwapPoolData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  coins_.InternalSwap(&other->coins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_buy_, GetArenaForAllocation(),
      &other->value_to_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maximum_value_to_sell_, GetArenaForAllocation(),
      &other->maximum_value_to_sell_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BuySwapPoolData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[24]);
}

// ===================================================================

class EditCandidateCommission::_Internal {
 public:
};

EditCandidateCommission::EditCandidateCommission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EditCandidateCommission)
}
EditCandidateCommission::EditCandidateCommission(const EditCandidateCommission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  commission_ = from.commission_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EditCandidateCommission)
}

inline void EditCandidateCommission::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commission_ = uint64_t{0u};
}

EditCandidateCommission::~EditCandidateCommission() {
  // @@protoc_insertion_point(destructor:api_pb.EditCandidateCommission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EditCandidateCommission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EditCandidateCommission::ArenaDtor(void* object) {
  EditCandidateCommission* _this = reinterpret_cast< EditCandidateCommission* >(object);
  (void)_this;
}
void EditCandidateCommission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCandidateCommission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCandidateCommission::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EditCandidateCommission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  commission_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCandidateCommission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EditCandidateCommission.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commission = 2 [json_name = "commission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditCandidateCommission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EditCandidateCommission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EditCandidateCommission.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // uint64 commission = 2 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_commission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EditCandidateCommission)
  return target;
}

size_t EditCandidateCommission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EditCandidateCommission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // uint64 commission = 2 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCandidateCommission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EditCandidateCommission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCandidateCommission::GetClassData() const { return &_class_data_; }

void EditCandidateCommission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EditCandidateCommission *>(to)->MergeFrom(
      static_cast<const EditCandidateCommission &>(from));
}


void EditCandidateCommission::MergeFrom(const EditCandidateCommission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EditCandidateCommission)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (from._internal_commission() != 0) {
    _internal_set_commission(from._internal_commission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCandidateCommission::CopyFrom(const EditCandidateCommission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EditCandidateCommission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCandidateCommission::IsInitialized() const {
  return true;
}

void EditCandidateCommission::InternalSwap(EditCandidateCommission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  swap(commission_, other->commission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCandidateCommission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[25]);
}

// ===================================================================

class MintTokenData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const MintTokenData* msg);
};

const ::api_pb::Coin&
MintTokenData::_Internal::coin(const MintTokenData* msg) {
  return *msg->coin_;
}
void MintTokenData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
MintTokenData::MintTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MintTokenData)
}
MintTokenData::MintTokenData(const MintTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.MintTokenData)
}

inline void MintTokenData::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

MintTokenData::~MintTokenData() {
  // @@protoc_insertion_point(destructor:api_pb.MintTokenData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MintTokenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void MintTokenData::ArenaDtor(void* object) {
  MintTokenData* _this = reinterpret_cast< MintTokenData* >(object);
  (void)_this;
}
void MintTokenData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MintTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MintTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MintTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MintTokenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.MintTokenData.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MintTokenData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MintTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin(this), target, stream);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.MintTokenData.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MintTokenData)
  return target;
}

size_t MintTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MintTokenData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MintTokenData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MintTokenData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MintTokenData::GetClassData() const { return &_class_data_; }

void MintTokenData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MintTokenData *>(to)->MergeFrom(
      static_cast<const MintTokenData &>(from));
}


void MintTokenData::MergeFrom(const MintTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MintTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MintTokenData::CopyFrom(const MintTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MintTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MintTokenData::IsInitialized() const {
  return true;
}

void MintTokenData::InternalSwap(MintTokenData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MintTokenData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[26]);
}

// ===================================================================

class BurnTokenData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const BurnTokenData* msg);
};

const ::api_pb::Coin&
BurnTokenData::_Internal::coin(const BurnTokenData* msg) {
  return *msg->coin_;
}
void BurnTokenData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
BurnTokenData::BurnTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BurnTokenData)
}
BurnTokenData::BurnTokenData(const BurnTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.BurnTokenData)
}

inline void BurnTokenData::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

BurnTokenData::~BurnTokenData() {
  // @@protoc_insertion_point(destructor:api_pb.BurnTokenData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BurnTokenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void BurnTokenData::ArenaDtor(void* object) {
  BurnTokenData* _this = reinterpret_cast< BurnTokenData* >(object);
  (void)_this;
}
void BurnTokenData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BurnTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BurnTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BurnTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BurnTokenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BurnTokenData.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BurnTokenData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BurnTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin(this), target, stream);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BurnTokenData.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BurnTokenData)
  return target;
}

size_t BurnTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BurnTokenData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BurnTokenData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BurnTokenData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BurnTokenData::GetClassData() const { return &_class_data_; }

void BurnTokenData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BurnTokenData *>(to)->MergeFrom(
      static_cast<const BurnTokenData &>(from));
}


void BurnTokenData::MergeFrom(const BurnTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BurnTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BurnTokenData::CopyFrom(const BurnTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BurnTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BurnTokenData::IsInitialized() const {
  return true;
}

void BurnTokenData::InternalSwap(BurnTokenData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BurnTokenData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[27]);
}

// ===================================================================

class CreateTokenData::_Internal {
 public:
};

CreateTokenData::CreateTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CreateTokenData)
}
CreateTokenData::CreateTokenData(const CreateTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_amount().empty()) {
    initial_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_amount(), 
      GetArenaForAllocation());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_supply().empty()) {
    max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_supply(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mintable_, &from.mintable_,
    static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&mintable_)) + sizeof(burnable_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CreateTokenData)
}

inline void CreateTokenData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mintable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&mintable_)) + sizeof(burnable_));
}

CreateTokenData::~CreateTokenData() {
  // @@protoc_insertion_point(destructor:api_pb.CreateTokenData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTokenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateTokenData::ArenaDtor(void* object) {
  CreateTokenData* _this = reinterpret_cast< CreateTokenData* >(object);
  (void)_this;
}
void CreateTokenData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CreateTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  initial_amount_.ClearToEmpty();
  max_supply_.ClearToEmpty();
  ::memset(&mintable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burnable_) -
      reinterpret_cast<char*>(&mintable_)) + sizeof(burnable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTokenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateTokenData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateTokenData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_amount = 3 [json_name = "initialAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_initial_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateTokenData.initial_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_supply = 4 [json_name = "maxSupply"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CreateTokenData.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mintable = 5 [json_name = "mintable"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mintable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool burnable = 6 [json_name = "burnable"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          burnable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTokenData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CreateTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateTokenData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateTokenData.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_amount().data(), static_cast<int>(this->_internal_initial_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateTokenData.initial_amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_initial_amount(), target);
  }

  // string max_supply = 4 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CreateTokenData.max_supply");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_max_supply(), target);
  }

  // bool mintable = 5 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mintable(), target);
  }

  // bool burnable = 6 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_burnable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CreateTokenData)
  return target;
}

size_t CreateTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CreateTokenData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_amount());
  }

  // string max_supply = 4 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // bool mintable = 5 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    total_size += 1 + 1;
  }

  // bool burnable = 6 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTokenData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTokenData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTokenData::GetClassData() const { return &_class_data_; }

void CreateTokenData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTokenData *>(to)->MergeFrom(
      static_cast<const CreateTokenData &>(from));
}


void CreateTokenData::MergeFrom(const CreateTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CreateTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_initial_amount().empty()) {
    _internal_set_initial_amount(from._internal_initial_amount());
  }
  if (!from._internal_max_supply().empty()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from._internal_mintable() != 0) {
    _internal_set_mintable(from._internal_mintable());
  }
  if (from._internal_burnable() != 0) {
    _internal_set_burnable(from._internal_burnable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTokenData::CopyFrom(const CreateTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CreateTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTokenData::IsInitialized() const {
  return true;
}

void CreateTokenData::InternalSwap(CreateTokenData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_amount_, GetArenaForAllocation(),
      &other->initial_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_supply_, GetArenaForAllocation(),
      &other->max_supply_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTokenData, burnable_)
      + sizeof(CreateTokenData::burnable_)
      - PROTOBUF_FIELD_OFFSET(CreateTokenData, mintable_)>(
          reinterpret_cast<char*>(&mintable_),
          reinterpret_cast<char*>(&other->mintable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTokenData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[28]);
}

// ===================================================================

class RecreateTokenData::_Internal {
 public:
};

RecreateTokenData::RecreateTokenData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RecreateTokenData)
}
RecreateTokenData::RecreateTokenData(const RecreateTokenData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_initial_amount().empty()) {
    initial_amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_initial_amount(), 
      GetArenaForAllocation());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_supply().empty()) {
    max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_supply(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mintable_, &from.mintable_,
    static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&mintable_)) + sizeof(burnable_));
  // @@protoc_insertion_point(copy_constructor:api_pb.RecreateTokenData)
}

inline void RecreateTokenData::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
initial_amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mintable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&mintable_)) + sizeof(burnable_));
}

RecreateTokenData::~RecreateTokenData() {
  // @@protoc_insertion_point(destructor:api_pb.RecreateTokenData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RecreateTokenData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  initial_amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecreateTokenData::ArenaDtor(void* object) {
  RecreateTokenData* _this = reinterpret_cast< RecreateTokenData* >(object);
  (void)_this;
}
void RecreateTokenData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecreateTokenData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecreateTokenData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RecreateTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  initial_amount_.ClearToEmpty();
  max_supply_.ClearToEmpty();
  ::memset(&mintable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burnable_) -
      reinterpret_cast<char*>(&mintable_)) + sizeof(burnable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecreateTokenData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateTokenData.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateTokenData.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string initial_amount = 3 [json_name = "initialAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_initial_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateTokenData.initial_amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_supply = 4 [json_name = "maxSupply"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RecreateTokenData.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mintable = 5 [json_name = "mintable"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mintable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool burnable = 6 [json_name = "burnable"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          burnable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecreateTokenData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RecreateTokenData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateTokenData.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateTokenData.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_amount().data(), static_cast<int>(this->_internal_initial_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateTokenData.initial_amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_initial_amount(), target);
  }

  // string max_supply = 4 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RecreateTokenData.max_supply");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_max_supply(), target);
  }

  // bool mintable = 5 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_mintable(), target);
  }

  // bool burnable = 6 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_burnable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RecreateTokenData)
  return target;
}

size_t RecreateTokenData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RecreateTokenData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string initial_amount = 3 [json_name = "initialAmount"];
  if (!this->_internal_initial_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_amount());
  }

  // string max_supply = 4 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // bool mintable = 5 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    total_size += 1 + 1;
  }

  // bool burnable = 6 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecreateTokenData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RecreateTokenData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecreateTokenData::GetClassData() const { return &_class_data_; }

void RecreateTokenData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RecreateTokenData *>(to)->MergeFrom(
      static_cast<const RecreateTokenData &>(from));
}


void RecreateTokenData::MergeFrom(const RecreateTokenData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RecreateTokenData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_initial_amount().empty()) {
    _internal_set_initial_amount(from._internal_initial_amount());
  }
  if (!from._internal_max_supply().empty()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from._internal_mintable() != 0) {
    _internal_set_mintable(from._internal_mintable());
  }
  if (from._internal_burnable() != 0) {
    _internal_set_burnable(from._internal_burnable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecreateTokenData::CopyFrom(const RecreateTokenData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RecreateTokenData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecreateTokenData::IsInitialized() const {
  return true;
}

void RecreateTokenData::InternalSwap(RecreateTokenData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &initial_amount_, GetArenaForAllocation(),
      &other->initial_amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_supply_, GetArenaForAllocation(),
      &other->max_supply_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecreateTokenData, burnable_)
      + sizeof(RecreateTokenData::burnable_)
      - PROTOBUF_FIELD_OFFSET(RecreateTokenData, mintable_)>(
          reinterpret_cast<char*>(&mintable_),
          reinterpret_cast<char*>(&other->mintable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecreateTokenData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[29]);
}

// ===================================================================

class VoteCommissionData::_Internal {
 public:
  static const ::api_pb::Coin& coin(const VoteCommissionData* msg);
};

const ::api_pb::Coin&
VoteCommissionData::_Internal::coin(const VoteCommissionData* msg) {
  return *msg->coin_;
}
void VoteCommissionData::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
VoteCommissionData::VoteCommissionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.VoteCommissionData)
}
VoteCommissionData::VoteCommissionData(const VoteCommissionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload_byte().empty()) {
    payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_byte(), 
      GetArenaForAllocation());
  }
  send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_send().empty()) {
    send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_send(), 
      GetArenaForAllocation());
  }
  create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker3().empty()) {
    create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker3(), 
      GetArenaForAllocation());
  }
  create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker4().empty()) {
    create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker4(), 
      GetArenaForAllocation());
  }
  create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker5().empty()) {
    create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker5(), 
      GetArenaForAllocation());
  }
  create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker6().empty()) {
    create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker6(), 
      GetArenaForAllocation());
  }
  create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker7_10().empty()) {
    create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker7_10(), 
      GetArenaForAllocation());
  }
  declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_declare_candidacy().empty()) {
    declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_declare_candidacy(), 
      GetArenaForAllocation());
  }
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegate().empty()) {
    delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate(), 
      GetArenaForAllocation());
  }
  unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unbond().empty()) {
    unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unbond(), 
      GetArenaForAllocation());
  }
  redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redeem_check().empty()) {
    redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redeem_check(), 
      GetArenaForAllocation());
  }
  create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_multisig().empty()) {
    create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate().empty()) {
    edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate(), 
      GetArenaForAllocation());
  }
  set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_halt_block().empty()) {
    set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_halt_block(), 
      GetArenaForAllocation());
  }
  edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_ticker_owner().empty()) {
    edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_ticker_owner(), 
      GetArenaForAllocation());
  }
  edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_multisig().empty()) {
    edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_public_key().empty()) {
    edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_public_key(), 
      GetArenaForAllocation());
  }
  edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_commission().empty()) {
    edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_commission(), 
      GetArenaForAllocation());
  }
  vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_commission().empty()) {
    vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_commission(), 
      GetArenaForAllocation());
  }
  vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_update().empty()) {
    vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_update(), 
      GetArenaForAllocation());
  }
  create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_coin().empty()) {
    create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_coin(), 
      GetArenaForAllocation());
  }
  create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_token().empty()) {
    create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_token(), 
      GetArenaForAllocation());
  }
  recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_coin().empty()) {
    recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_coin(), 
      GetArenaForAllocation());
  }
  recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_token().empty()) {
    recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_token(), 
      GetArenaForAllocation());
  }
  buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_bancor().empty()) {
    buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_bancor(), 
      GetArenaForAllocation());
  }
  sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_bancor().empty()) {
    sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_bancor(), 
      GetArenaForAllocation());
  }
  sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_bancor().empty()) {
    sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_bancor(), 
      GetArenaForAllocation());
  }
  buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_base().empty()) {
    buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_base(), 
      GetArenaForAllocation());
  }
  sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_base().empty()) {
    sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_base(), 
      GetArenaForAllocation());
  }
  sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_base().empty()) {
    sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_base(), 
      GetArenaForAllocation());
  }
  set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_on().empty()) {
    set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_on(), 
      GetArenaForAllocation());
  }
  set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_off().empty()) {
    set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_off(), 
      GetArenaForAllocation());
  }
  mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mint_token().empty()) {
    mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mint_token(), 
      GetArenaForAllocation());
  }
  burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn_token().empty()) {
    burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_burn_token(), 
      GetArenaForAllocation());
  }
  create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_swap_pool().empty()) {
    create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_swap_pool(), 
      GetArenaForAllocation());
  }
  add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_liquidity().empty()) {
    add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_liquidity(), 
      GetArenaForAllocation());
  }
  remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_liquidity().empty()) {
    remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_liquidity(), 
      GetArenaForAllocation());
  }
  multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_base().empty()) {
    multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_base(), 
      GetArenaForAllocation());
  }
  multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_delta().empty()) {
    multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_delta(), 
      GetArenaForAllocation());
  }
  buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_delta().empty()) {
    buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_delta().empty()) {
    sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_delta().empty()) {
    sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_delta(), 
      GetArenaForAllocation());
  }
  failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failed_tx().empty()) {
    failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failed_tx(), 
      GetArenaForAllocation());
  }
  add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_limit_order().empty()) {
    add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_limit_order(), 
      GetArenaForAllocation());
  }
  remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_limit_order().empty()) {
    remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_limit_order(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.VoteCommissionData)
}

inline void VoteCommissionData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(height_));
}

VoteCommissionData::~VoteCommissionData() {
  // @@protoc_insertion_point(destructor:api_pb.VoteCommissionData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteCommissionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_byte_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  send_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker7_10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  declare_candidacy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unbond_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redeem_check_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_halt_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_ticker_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_on_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_off_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mint_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_swap_pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failed_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void VoteCommissionData::ArenaDtor(void* object) {
  VoteCommissionData* _this = reinterpret_cast< VoteCommissionData* >(object);
  (void)_this;
}
void VoteCommissionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteCommissionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteCommissionData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.VoteCommissionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  payload_byte_.ClearToEmpty();
  send_.ClearToEmpty();
  create_ticker3_.ClearToEmpty();
  create_ticker4_.ClearToEmpty();
  create_ticker5_.ClearToEmpty();
  create_ticker6_.ClearToEmpty();
  create_ticker7_10_.ClearToEmpty();
  declare_candidacy_.ClearToEmpty();
  delegate_.ClearToEmpty();
  unbond_.ClearToEmpty();
  redeem_check_.ClearToEmpty();
  create_multisig_.ClearToEmpty();
  edit_candidate_.ClearToEmpty();
  set_halt_block_.ClearToEmpty();
  edit_ticker_owner_.ClearToEmpty();
  edit_multisig_.ClearToEmpty();
  edit_candidate_public_key_.ClearToEmpty();
  edit_candidate_commission_.ClearToEmpty();
  vote_commission_.ClearToEmpty();
  vote_update_.ClearToEmpty();
  create_coin_.ClearToEmpty();
  create_token_.ClearToEmpty();
  recreate_coin_.ClearToEmpty();
  recreate_token_.ClearToEmpty();
  buy_bancor_.ClearToEmpty();
  sell_bancor_.ClearToEmpty();
  sell_all_bancor_.ClearToEmpty();
  buy_pool_base_.ClearToEmpty();
  sell_pool_base_.ClearToEmpty();
  sell_all_pool_base_.ClearToEmpty();
  set_candidate_on_.ClearToEmpty();
  set_candidate_off_.ClearToEmpty();
  mint_token_.ClearToEmpty();
  burn_token_.ClearToEmpty();
  create_swap_pool_.ClearToEmpty();
  add_liquidity_.ClearToEmpty();
  remove_liquidity_.ClearToEmpty();
  multisend_base_.ClearToEmpty();
  multisend_delta_.ClearToEmpty();
  buy_pool_delta_.ClearToEmpty();
  sell_pool_delta_.ClearToEmpty();
  sell_all_pool_delta_.ClearToEmpty();
  failed_tx_.ClearToEmpty();
  add_limit_order_.ClearToEmpty();
  remove_limit_order_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteCommissionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload_byte = 4 [json_name = "payloadByte"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload_byte();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.payload_byte"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string send = 5 [json_name = "send"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_send();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.send"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker3 = 7 [json_name = "createTicker3"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_create_ticker3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_ticker3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker4 = 8 [json_name = "createTicker4"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_create_ticker4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_ticker4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker5 = 9 [json_name = "createTicker5"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_create_ticker5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_ticker5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker6 = 10 [json_name = "createTicker6"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_create_ticker6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_ticker6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker7_10 = 11 [json_name = "createTicker710"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_create_ticker7_10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_ticker7_10"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string declare_candidacy = 13 [json_name = "declareCandidacy"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_declare_candidacy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.declare_candidacy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delegate = 14 [json_name = "delegate"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.delegate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unbond = 15 [json_name = "unbond"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_unbond();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.unbond"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string redeem_check = 16 [json_name = "redeemCheck"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_redeem_check();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.redeem_check"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_multisig = 18 [json_name = "createMultisig"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_create_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate = 20 [json_name = "editCandidate"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_edit_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.edit_candidate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_halt_block = 21 [json_name = "setHaltBlock"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_set_halt_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.set_halt_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_edit_ticker_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.edit_ticker_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_multisig = 23 [json_name = "editMultisig"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_edit_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.edit_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_edit_candidate_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.edit_candidate_public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_edit_candidate_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.edit_candidate_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_commission = 31 [json_name = "voteCommission"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_vote_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.vote_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_update = 32 [json_name = "voteUpdate"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_vote_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.vote_update"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_coin = 34 [json_name = "createCoin"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_create_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_token = 35 [json_name = "createToken"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_create_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_coin = 36 [json_name = "recreateCoin"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recreate_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.recreate_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_token = 37 [json_name = "recreateToken"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_recreate_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.recreate_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_bancor = 38 [json_name = "buyBancor"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buy_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.buy_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_bancor = 39 [json_name = "sellBancor"];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sell_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.sell_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sell_all_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.sell_all_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_base = 41 [json_name = "buyPoolBase"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_buy_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.buy_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_base = 42 [json_name = "sellPoolBase"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sell_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.sell_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sell_all_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.sell_all_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_on = 44 [json_name = "setCandidateOn"];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_set_candidate_on();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.set_candidate_on"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_off = 45 [json_name = "setCandidateOff"];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_set_candidate_off();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.set_candidate_off"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mint_token = 46 [json_name = "mintToken"];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_mint_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.mint_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string burn_token = 47 [json_name = "burnToken"];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_burn_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.burn_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_swap_pool = 48 [json_name = "createSwapPool"];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_create_swap_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.create_swap_pool"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_liquidity = 49 [json_name = "addLiquidity"];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_add_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.add_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_liquidity = 50 [json_name = "removeLiquidity"];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_remove_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.remove_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_base = 51 [json_name = "multisendBase"];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_multisend_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.multisend_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_delta = 52 [json_name = "multisendDelta"];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_multisend_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.multisend_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_buy_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.buy_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sell_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.sell_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_sell_all_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.sell_all_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failed_tx = 56 [json_name = "failedTx"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_failed_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.failed_tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_limit_order = 57 [json_name = "addLimitOrder"];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_add_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.add_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_remove_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteCommissionData.remove_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteCommissionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.VoteCommissionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // .api_pb.Coin coin = 3 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coin(this), target, stream);
  }

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_byte().data(), static_cast<int>(this->_internal_payload_byte().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.payload_byte");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload_byte(), target);
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send().data(), static_cast<int>(this->_internal_send().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.send");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_send(), target);
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker3().data(), static_cast<int>(this->_internal_create_ticker3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_ticker3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_create_ticker3(), target);
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker4().data(), static_cast<int>(this->_internal_create_ticker4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_ticker4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_create_ticker4(), target);
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker5().data(), static_cast<int>(this->_internal_create_ticker5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_ticker5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_ticker5(), target);
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker6().data(), static_cast<int>(this->_internal_create_ticker6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_ticker6");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_create_ticker6(), target);
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker7_10().data(), static_cast<int>(this->_internal_create_ticker7_10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_ticker7_10");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_create_ticker7_10(), target);
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_declare_candidacy().data(), static_cast<int>(this->_internal_declare_candidacy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.declare_candidacy");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_declare_candidacy(), target);
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate().data(), static_cast<int>(this->_internal_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.delegate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_delegate(), target);
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unbond().data(), static_cast<int>(this->_internal_unbond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.unbond");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unbond(), target);
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redeem_check().data(), static_cast<int>(this->_internal_redeem_check().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.redeem_check");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_redeem_check(), target);
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_multisig().data(), static_cast<int>(this->_internal_create_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_multisig");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_create_multisig(), target);
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate().data(), static_cast<int>(this->_internal_edit_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.edit_candidate");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_edit_candidate(), target);
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_halt_block().data(), static_cast<int>(this->_internal_set_halt_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.set_halt_block");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_set_halt_block(), target);
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_ticker_owner().data(), static_cast<int>(this->_internal_edit_ticker_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.edit_ticker_owner");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_edit_ticker_owner(), target);
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_multisig().data(), static_cast<int>(this->_internal_edit_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.edit_multisig");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_edit_multisig(), target);
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_public_key().data(), static_cast<int>(this->_internal_edit_candidate_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.edit_candidate_public_key");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_edit_candidate_public_key(), target);
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_commission().data(), static_cast<int>(this->_internal_edit_candidate_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.edit_candidate_commission");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_edit_candidate_commission(), target);
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_commission().data(), static_cast<int>(this->_internal_vote_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.vote_commission");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_vote_commission(), target);
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_update().data(), static_cast<int>(this->_internal_vote_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.vote_update");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_vote_update(), target);
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_coin().data(), static_cast<int>(this->_internal_create_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_coin");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_create_coin(), target);
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_token().data(), static_cast<int>(this->_internal_create_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_token");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_create_token(), target);
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_coin().data(), static_cast<int>(this->_internal_recreate_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.recreate_coin");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_recreate_coin(), target);
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_token().data(), static_cast<int>(this->_internal_recreate_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.recreate_token");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_recreate_token(), target);
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_bancor().data(), static_cast<int>(this->_internal_buy_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.buy_bancor");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_buy_bancor(), target);
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_bancor().data(), static_cast<int>(this->_internal_sell_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.sell_bancor");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_sell_bancor(), target);
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_bancor().data(), static_cast<int>(this->_internal_sell_all_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.sell_all_bancor");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_sell_all_bancor(), target);
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_base().data(), static_cast<int>(this->_internal_buy_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.buy_pool_base");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_buy_pool_base(), target);
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_base().data(), static_cast<int>(this->_internal_sell_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.sell_pool_base");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_sell_pool_base(), target);
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_base().data(), static_cast<int>(this->_internal_sell_all_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.sell_all_pool_base");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_sell_all_pool_base(), target);
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_on().data(), static_cast<int>(this->_internal_set_candidate_on().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.set_candidate_on");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_set_candidate_on(), target);
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_off().data(), static_cast<int>(this->_internal_set_candidate_off().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.set_candidate_off");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_set_candidate_off(), target);
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_token().data(), static_cast<int>(this->_internal_mint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.mint_token");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_mint_token(), target);
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_burn_token().data(), static_cast<int>(this->_internal_burn_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.burn_token");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_burn_token(), target);
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_swap_pool().data(), static_cast<int>(this->_internal_create_swap_pool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.create_swap_pool");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_create_swap_pool(), target);
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_liquidity().data(), static_cast<int>(this->_internal_add_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.add_liquidity");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_add_liquidity(), target);
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_liquidity().data(), static_cast<int>(this->_internal_remove_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.remove_liquidity");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_remove_liquidity(), target);
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_base().data(), static_cast<int>(this->_internal_multisend_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.multisend_base");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_multisend_base(), target);
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_delta().data(), static_cast<int>(this->_internal_multisend_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.multisend_delta");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_multisend_delta(), target);
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_delta().data(), static_cast<int>(this->_internal_buy_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.buy_pool_delta");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_buy_pool_delta(), target);
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_delta().data(), static_cast<int>(this->_internal_sell_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.sell_pool_delta");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_sell_pool_delta(), target);
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_delta().data(), static_cast<int>(this->_internal_sell_all_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.sell_all_pool_delta");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_sell_all_pool_delta(), target);
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failed_tx().data(), static_cast<int>(this->_internal_failed_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.failed_tx");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_failed_tx(), target);
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_limit_order().data(), static_cast<int>(this->_internal_add_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.add_limit_order");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_add_limit_order(), target);
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_limit_order().data(), static_cast<int>(this->_internal_remove_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteCommissionData.remove_limit_order");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_remove_limit_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.VoteCommissionData)
  return target;
}

size_t VoteCommissionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.VoteCommissionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_byte());
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send());
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker3());
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker4());
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker5());
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker6());
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker7_10());
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_declare_candidacy());
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate());
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unbond());
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redeem_check());
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_multisig());
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate());
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_halt_block());
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_ticker_owner());
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_multisig());
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_public_key());
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_commission());
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_commission());
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_update());
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_coin());
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_token());
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_coin());
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_token());
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_bancor());
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_bancor());
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_bancor());
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_base());
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_base());
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_base());
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_on());
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_off());
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_token());
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_burn_token());
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_swap_pool());
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_liquidity());
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_liquidity());
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_base());
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_delta());
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_delta());
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_delta());
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_delta());
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failed_tx());
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_limit_order());
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_limit_order());
  }

  // .api_pb.Coin coin = 3 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteCommissionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteCommissionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteCommissionData::GetClassData() const { return &_class_data_; }

void VoteCommissionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VoteCommissionData *>(to)->MergeFrom(
      static_cast<const VoteCommissionData &>(from));
}


void VoteCommissionData::MergeFrom(const VoteCommissionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.VoteCommissionData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_payload_byte().empty()) {
    _internal_set_payload_byte(from._internal_payload_byte());
  }
  if (!from._internal_send().empty()) {
    _internal_set_send(from._internal_send());
  }
  if (!from._internal_create_ticker3().empty()) {
    _internal_set_create_ticker3(from._internal_create_ticker3());
  }
  if (!from._internal_create_ticker4().empty()) {
    _internal_set_create_ticker4(from._internal_create_ticker4());
  }
  if (!from._internal_create_ticker5().empty()) {
    _internal_set_create_ticker5(from._internal_create_ticker5());
  }
  if (!from._internal_create_ticker6().empty()) {
    _internal_set_create_ticker6(from._internal_create_ticker6());
  }
  if (!from._internal_create_ticker7_10().empty()) {
    _internal_set_create_ticker7_10(from._internal_create_ticker7_10());
  }
  if (!from._internal_declare_candidacy().empty()) {
    _internal_set_declare_candidacy(from._internal_declare_candidacy());
  }
  if (!from._internal_delegate().empty()) {
    _internal_set_delegate(from._internal_delegate());
  }
  if (!from._internal_unbond().empty()) {
    _internal_set_unbond(from._internal_unbond());
  }
  if (!from._internal_redeem_check().empty()) {
    _internal_set_redeem_check(from._internal_redeem_check());
  }
  if (!from._internal_create_multisig().empty()) {
    _internal_set_create_multisig(from._internal_create_multisig());
  }
  if (!from._internal_edit_candidate().empty()) {
    _internal_set_edit_candidate(from._internal_edit_candidate());
  }
  if (!from._internal_set_halt_block().empty()) {
    _internal_set_set_halt_block(from._internal_set_halt_block());
  }
  if (!from._internal_edit_ticker_owner().empty()) {
    _internal_set_edit_ticker_owner(from._internal_edit_ticker_owner());
  }
  if (!from._internal_edit_multisig().empty()) {
    _internal_set_edit_multisig(from._internal_edit_multisig());
  }
  if (!from._internal_edit_candidate_public_key().empty()) {
    _internal_set_edit_candidate_public_key(from._internal_edit_candidate_public_key());
  }
  if (!from._internal_edit_candidate_commission().empty()) {
    _internal_set_edit_candidate_commission(from._internal_edit_candidate_commission());
  }
  if (!from._internal_vote_commission().empty()) {
    _internal_set_vote_commission(from._internal_vote_commission());
  }
  if (!from._internal_vote_update().empty()) {
    _internal_set_vote_update(from._internal_vote_update());
  }
  if (!from._internal_create_coin().empty()) {
    _internal_set_create_coin(from._internal_create_coin());
  }
  if (!from._internal_create_token().empty()) {
    _internal_set_create_token(from._internal_create_token());
  }
  if (!from._internal_recreate_coin().empty()) {
    _internal_set_recreate_coin(from._internal_recreate_coin());
  }
  if (!from._internal_recreate_token().empty()) {
    _internal_set_recreate_token(from._internal_recreate_token());
  }
  if (!from._internal_buy_bancor().empty()) {
    _internal_set_buy_bancor(from._internal_buy_bancor());
  }
  if (!from._internal_sell_bancor().empty()) {
    _internal_set_sell_bancor(from._internal_sell_bancor());
  }
  if (!from._internal_sell_all_bancor().empty()) {
    _internal_set_sell_all_bancor(from._internal_sell_all_bancor());
  }
  if (!from._internal_buy_pool_base().empty()) {
    _internal_set_buy_pool_base(from._internal_buy_pool_base());
  }
  if (!from._internal_sell_pool_base().empty()) {
    _internal_set_sell_pool_base(from._internal_sell_pool_base());
  }
  if (!from._internal_sell_all_pool_base().empty()) {
    _internal_set_sell_all_pool_base(from._internal_sell_all_pool_base());
  }
  if (!from._internal_set_candidate_on().empty()) {
    _internal_set_set_candidate_on(from._internal_set_candidate_on());
  }
  if (!from._internal_set_candidate_off().empty()) {
    _internal_set_set_candidate_off(from._internal_set_candidate_off());
  }
  if (!from._internal_mint_token().empty()) {
    _internal_set_mint_token(from._internal_mint_token());
  }
  if (!from._internal_burn_token().empty()) {
    _internal_set_burn_token(from._internal_burn_token());
  }
  if (!from._internal_create_swap_pool().empty()) {
    _internal_set_create_swap_pool(from._internal_create_swap_pool());
  }
  if (!from._internal_add_liquidity().empty()) {
    _internal_set_add_liquidity(from._internal_add_liquidity());
  }
  if (!from._internal_remove_liquidity().empty()) {
    _internal_set_remove_liquidity(from._internal_remove_liquidity());
  }
  if (!from._internal_multisend_base().empty()) {
    _internal_set_multisend_base(from._internal_multisend_base());
  }
  if (!from._internal_multisend_delta().empty()) {
    _internal_set_multisend_delta(from._internal_multisend_delta());
  }
  if (!from._internal_buy_pool_delta().empty()) {
    _internal_set_buy_pool_delta(from._internal_buy_pool_delta());
  }
  if (!from._internal_sell_pool_delta().empty()) {
    _internal_set_sell_pool_delta(from._internal_sell_pool_delta());
  }
  if (!from._internal_sell_all_pool_delta().empty()) {
    _internal_set_sell_all_pool_delta(from._internal_sell_all_pool_delta());
  }
  if (!from._internal_failed_tx().empty()) {
    _internal_set_failed_tx(from._internal_failed_tx());
  }
  if (!from._internal_add_limit_order().empty()) {
    _internal_set_add_limit_order(from._internal_add_limit_order());
  }
  if (!from._internal_remove_limit_order().empty()) {
    _internal_set_remove_limit_order(from._internal_remove_limit_order());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteCommissionData::CopyFrom(const VoteCommissionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.VoteCommissionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteCommissionData::IsInitialized() const {
  return true;
}

void VoteCommissionData::InternalSwap(VoteCommissionData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_byte_, GetArenaForAllocation(),
      &other->payload_byte_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &send_, GetArenaForAllocation(),
      &other->send_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker3_, GetArenaForAllocation(),
      &other->create_ticker3_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker4_, GetArenaForAllocation(),
      &other->create_ticker4_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker5_, GetArenaForAllocation(),
      &other->create_ticker5_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker6_, GetArenaForAllocation(),
      &other->create_ticker6_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker7_10_, GetArenaForAllocation(),
      &other->create_ticker7_10_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &declare_candidacy_, GetArenaForAllocation(),
      &other->declare_candidacy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delegate_, GetArenaForAllocation(),
      &other->delegate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unbond_, GetArenaForAllocation(),
      &other->unbond_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redeem_check_, GetArenaForAllocation(),
      &other->redeem_check_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_multisig_, GetArenaForAllocation(),
      &other->create_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_, GetArenaForAllocation(),
      &other->edit_candidate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_halt_block_, GetArenaForAllocation(),
      &other->set_halt_block_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_ticker_owner_, GetArenaForAllocation(),
      &other->edit_ticker_owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_multisig_, GetArenaForAllocation(),
      &other->edit_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_public_key_, GetArenaForAllocation(),
      &other->edit_candidate_public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_commission_, GetArenaForAllocation(),
      &other->edit_candidate_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_commission_, GetArenaForAllocation(),
      &other->vote_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_update_, GetArenaForAllocation(),
      &other->vote_update_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_coin_, GetArenaForAllocation(),
      &other->create_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_token_, GetArenaForAllocation(),
      &other->create_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_coin_, GetArenaForAllocation(),
      &other->recreate_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_token_, GetArenaForAllocation(),
      &other->recreate_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_bancor_, GetArenaForAllocation(),
      &other->buy_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_bancor_, GetArenaForAllocation(),
      &other->sell_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_bancor_, GetArenaForAllocation(),
      &other->sell_all_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_base_, GetArenaForAllocation(),
      &other->buy_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_base_, GetArenaForAllocation(),
      &other->sell_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_base_, GetArenaForAllocation(),
      &other->sell_all_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_on_, GetArenaForAllocation(),
      &other->set_candidate_on_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_off_, GetArenaForAllocation(),
      &other->set_candidate_off_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mint_token_, GetArenaForAllocation(),
      &other->mint_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &burn_token_, GetArenaForAllocation(),
      &other->burn_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_swap_pool_, GetArenaForAllocation(),
      &other->create_swap_pool_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_liquidity_, GetArenaForAllocation(),
      &other->add_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_liquidity_, GetArenaForAllocation(),
      &other->remove_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_base_, GetArenaForAllocation(),
      &other->multisend_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_delta_, GetArenaForAllocation(),
      &other->multisend_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_delta_, GetArenaForAllocation(),
      &other->buy_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_delta_, GetArenaForAllocation(),
      &other->sell_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_delta_, GetArenaForAllocation(),
      &other->sell_all_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &failed_tx_, GetArenaForAllocation(),
      &other->failed_tx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_limit_order_, GetArenaForAllocation(),
      &other->add_limit_order_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_limit_order_, GetArenaForAllocation(),
      &other->remove_limit_order_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteCommissionData, height_)
      + sizeof(VoteCommissionData::height_)
      - PROTOBUF_FIELD_OFFSET(VoteCommissionData, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteCommissionData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[30]);
}

// ===================================================================

class VoteUpdateData::_Internal {
 public:
};

VoteUpdateData::VoteUpdateData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.VoteUpdateData)
}
VoteUpdateData::VoteUpdateData(const VoteUpdateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pub_key(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.VoteUpdateData)
}

inline void VoteUpdateData::SharedCtor() {
pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

VoteUpdateData::~VoteUpdateData() {
  // @@protoc_insertion_point(destructor:api_pb.VoteUpdateData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VoteUpdateData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteUpdateData::ArenaDtor(void* object) {
  VoteUpdateData* _this = reinterpret_cast< VoteUpdateData* >(object);
  (void)_this;
}
void VoteUpdateData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteUpdateData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteUpdateData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.VoteUpdateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmpty();
  version_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteUpdateData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pub_key = 1 [json_name = "pubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteUpdateData.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VoteUpdateData.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteUpdateData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.VoteUpdateData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteUpdateData.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // string version = 3 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VoteUpdateData.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.VoteUpdateData)
  return target;
}

size_t VoteUpdateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.VoteUpdateData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1 [json_name = "pubKey"];
  if (!this->_internal_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string version = 3 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteUpdateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteUpdateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteUpdateData::GetClassData() const { return &_class_data_; }

void VoteUpdateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VoteUpdateData *>(to)->MergeFrom(
      static_cast<const VoteUpdateData &>(from));
}


void VoteUpdateData::MergeFrom(const VoteUpdateData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.VoteUpdateData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pub_key().empty()) {
    _internal_set_pub_key(from._internal_pub_key());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteUpdateData::CopyFrom(const VoteUpdateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.VoteUpdateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteUpdateData::IsInitialized() const {
  return true;
}

void VoteUpdateData::InternalSwap(VoteUpdateData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pub_key_, GetArenaForAllocation(),
      &other->pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteUpdateData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[31]);
}

// ===================================================================

class AddLimitOrderData::_Internal {
 public:
  static const ::api_pb::Coin& coin_to_sell(const AddLimitOrderData* msg);
  static const ::api_pb::Coin& coin_to_buy(const AddLimitOrderData* msg);
};

const ::api_pb::Coin&
AddLimitOrderData::_Internal::coin_to_sell(const AddLimitOrderData* msg) {
  return *msg->coin_to_sell_;
}
const ::api_pb::Coin&
AddLimitOrderData::_Internal::coin_to_buy(const AddLimitOrderData* msg) {
  return *msg->coin_to_buy_;
}
void AddLimitOrderData::clear_coin_to_sell() {
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
}
void AddLimitOrderData::clear_coin_to_buy() {
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
}
AddLimitOrderData::AddLimitOrderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddLimitOrderData)
}
AddLimitOrderData::AddLimitOrderData(const AddLimitOrderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_sell().empty()) {
    value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_sell(), 
      GetArenaForAllocation());
  }
  value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_buy().empty()) {
    value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_buy(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin_to_sell()) {
    coin_to_sell_ = new ::api_pb::Coin(*from.coin_to_sell_);
  } else {
    coin_to_sell_ = nullptr;
  }
  if (from._internal_has_coin_to_buy()) {
    coin_to_buy_ = new ::api_pb::Coin(*from.coin_to_buy_);
  } else {
    coin_to_buy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.AddLimitOrderData)
}

inline void AddLimitOrderData::SharedCtor() {
value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_to_sell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_to_buy_) -
    reinterpret_cast<char*>(&coin_to_sell_)) + sizeof(coin_to_buy_));
}

AddLimitOrderData::~AddLimitOrderData() {
  // @@protoc_insertion_point(destructor:api_pb.AddLimitOrderData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddLimitOrderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_to_sell_;
  if (this != internal_default_instance()) delete coin_to_buy_;
}

void AddLimitOrderData::ArenaDtor(void* object) {
  AddLimitOrderData* _this = reinterpret_cast< AddLimitOrderData* >(object);
  (void)_this;
}
void AddLimitOrderData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLimitOrderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddLimitOrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddLimitOrderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_to_sell_.ClearToEmpty();
  value_to_buy_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_to_sell_ != nullptr) {
    delete coin_to_sell_;
  }
  coin_to_sell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin_to_buy_ != nullptr) {
    delete coin_to_buy_;
  }
  coin_to_buy_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLimitOrderData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_sell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_sell = 2 [json_name = "valueToSell"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddLimitOrderData.value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin_to_buy = 3 [json_name = "coinToBuy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_to_buy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_buy = 4 [json_name = "valueToBuy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddLimitOrderData.value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLimitOrderData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddLimitOrderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin_to_sell(this), target, stream);
  }

  // string value_to_sell = 2 [json_name = "valueToSell"];
  if (!this->_internal_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_sell().data(), static_cast<int>(this->_internal_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddLimitOrderData.value_to_sell");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value_to_sell(), target);
  }

  // .api_pb.Coin coin_to_buy = 3 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coin_to_buy(this), target, stream);
  }

  // string value_to_buy = 4 [json_name = "valueToBuy"];
  if (!this->_internal_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_buy().data(), static_cast<int>(this->_internal_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddLimitOrderData.value_to_buy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value_to_buy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddLimitOrderData)
  return target;
}

size_t AddLimitOrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddLimitOrderData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value_to_sell = 2 [json_name = "valueToSell"];
  if (!this->_internal_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_sell());
  }

  // string value_to_buy = 4 [json_name = "valueToBuy"];
  if (!this->_internal_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_buy());
  }

  // .api_pb.Coin coin_to_sell = 1 [json_name = "coinToSell"];
  if (this->_internal_has_coin_to_sell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_sell_);
  }

  // .api_pb.Coin coin_to_buy = 3 [json_name = "coinToBuy"];
  if (this->_internal_has_coin_to_buy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_to_buy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddLimitOrderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddLimitOrderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddLimitOrderData::GetClassData() const { return &_class_data_; }

void AddLimitOrderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddLimitOrderData *>(to)->MergeFrom(
      static_cast<const AddLimitOrderData &>(from));
}


void AddLimitOrderData::MergeFrom(const AddLimitOrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddLimitOrderData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value_to_sell().empty()) {
    _internal_set_value_to_sell(from._internal_value_to_sell());
  }
  if (!from._internal_value_to_buy().empty()) {
    _internal_set_value_to_buy(from._internal_value_to_buy());
  }
  if (from._internal_has_coin_to_sell()) {
    _internal_mutable_coin_to_sell()->::api_pb::Coin::MergeFrom(from._internal_coin_to_sell());
  }
  if (from._internal_has_coin_to_buy()) {
    _internal_mutable_coin_to_buy()->::api_pb::Coin::MergeFrom(from._internal_coin_to_buy());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddLimitOrderData::CopyFrom(const AddLimitOrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddLimitOrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLimitOrderData::IsInitialized() const {
  return true;
}

void AddLimitOrderData::InternalSwap(AddLimitOrderData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_sell_, GetArenaForAllocation(),
      &other->value_to_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_buy_, GetArenaForAllocation(),
      &other->value_to_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLimitOrderData, coin_to_buy_)
      + sizeof(AddLimitOrderData::coin_to_buy_)
      - PROTOBUF_FIELD_OFFSET(AddLimitOrderData, coin_to_sell_)>(
          reinterpret_cast<char*>(&coin_to_sell_),
          reinterpret_cast<char*>(&other->coin_to_sell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLimitOrderData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[32]);
}

// ===================================================================

class RemoveLimitOrderData::_Internal {
 public:
};

RemoveLimitOrderData::RemoveLimitOrderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RemoveLimitOrderData)
}
RemoveLimitOrderData::RemoveLimitOrderData(const RemoveLimitOrderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:api_pb.RemoveLimitOrderData)
}

inline void RemoveLimitOrderData::SharedCtor() {
id_ = uint64_t{0u};
}

RemoveLimitOrderData::~RemoveLimitOrderData() {
  // @@protoc_insertion_point(destructor:api_pb.RemoveLimitOrderData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveLimitOrderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveLimitOrderData::ArenaDtor(void* object) {
  RemoveLimitOrderData* _this = reinterpret_cast< RemoveLimitOrderData* >(object);
  (void)_this;
}
void RemoveLimitOrderData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveLimitOrderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveLimitOrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RemoveLimitOrderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveLimitOrderData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveLimitOrderData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RemoveLimitOrderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RemoveLimitOrderData)
  return target;
}

size_t RemoveLimitOrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RemoveLimitOrderData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveLimitOrderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveLimitOrderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveLimitOrderData::GetClassData() const { return &_class_data_; }

void RemoveLimitOrderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RemoveLimitOrderData *>(to)->MergeFrom(
      static_cast<const RemoveLimitOrderData &>(from));
}


void RemoveLimitOrderData::MergeFrom(const RemoveLimitOrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RemoveLimitOrderData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveLimitOrderData::CopyFrom(const RemoveLimitOrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RemoveLimitOrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLimitOrderData::IsInitialized() const {
  return true;
}

void RemoveLimitOrderData::InternalSwap(RemoveLimitOrderData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveLimitOrderData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_data_2eproto_getter, &descriptor_table_data_2eproto_once,
      file_level_metadata_data_2eproto[33]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api_pb::SendData* Arena::CreateMaybeMessage< ::api_pb::SendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SendData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SellCoinData* Arena::CreateMaybeMessage< ::api_pb::SellCoinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SellCoinData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SellAllCoinData* Arena::CreateMaybeMessage< ::api_pb::SellAllCoinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SellAllCoinData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BuyCoinData* Arena::CreateMaybeMessage< ::api_pb::BuyCoinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BuyCoinData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CreateCoinData* Arena::CreateMaybeMessage< ::api_pb::CreateCoinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CreateCoinData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::DeclareCandidacyData* Arena::CreateMaybeMessage< ::api_pb::DeclareCandidacyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::DeclareCandidacyData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::DelegateData* Arena::CreateMaybeMessage< ::api_pb::DelegateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::DelegateData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UnbondData* Arena::CreateMaybeMessage< ::api_pb::UnbondData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UnbondData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RedeemCheckData* Arena::CreateMaybeMessage< ::api_pb::RedeemCheckData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RedeemCheckData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SetCandidateOnData* Arena::CreateMaybeMessage< ::api_pb::SetCandidateOnData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SetCandidateOnData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SetCandidateOffData* Arena::CreateMaybeMessage< ::api_pb::SetCandidateOffData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SetCandidateOffData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CreateMultisigData* Arena::CreateMaybeMessage< ::api_pb::CreateMultisigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CreateMultisigData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MultiSendData* Arena::CreateMaybeMessage< ::api_pb::MultiSendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MultiSendData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EditCandidateData* Arena::CreateMaybeMessage< ::api_pb::EditCandidateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EditCandidateData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SetHaltBlockData* Arena::CreateMaybeMessage< ::api_pb::SetHaltBlockData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SetHaltBlockData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RecreateCoinData* Arena::CreateMaybeMessage< ::api_pb::RecreateCoinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RecreateCoinData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EditCoinOwnerData* Arena::CreateMaybeMessage< ::api_pb::EditCoinOwnerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EditCoinOwnerData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EditMultisigData* Arena::CreateMaybeMessage< ::api_pb::EditMultisigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EditMultisigData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EditCandidatePublicKeyData* Arena::CreateMaybeMessage< ::api_pb::EditCandidatePublicKeyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EditCandidatePublicKeyData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CreateSwapPoolData* Arena::CreateMaybeMessage< ::api_pb::CreateSwapPoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CreateSwapPoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddLiquidityData* Arena::CreateMaybeMessage< ::api_pb::AddLiquidityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddLiquidityData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RemoveLiquidityData* Arena::CreateMaybeMessage< ::api_pb::RemoveLiquidityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RemoveLiquidityData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SellSwapPoolData* Arena::CreateMaybeMessage< ::api_pb::SellSwapPoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SellSwapPoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SellAllSwapPoolData* Arena::CreateMaybeMessage< ::api_pb::SellAllSwapPoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SellAllSwapPoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BuySwapPoolData* Arena::CreateMaybeMessage< ::api_pb::BuySwapPoolData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BuySwapPoolData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EditCandidateCommission* Arena::CreateMaybeMessage< ::api_pb::EditCandidateCommission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EditCandidateCommission >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MintTokenData* Arena::CreateMaybeMessage< ::api_pb::MintTokenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MintTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BurnTokenData* Arena::CreateMaybeMessage< ::api_pb::BurnTokenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BurnTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CreateTokenData* Arena::CreateMaybeMessage< ::api_pb::CreateTokenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CreateTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RecreateTokenData* Arena::CreateMaybeMessage< ::api_pb::RecreateTokenData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RecreateTokenData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::VoteCommissionData* Arena::CreateMaybeMessage< ::api_pb::VoteCommissionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::VoteCommissionData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::VoteUpdateData* Arena::CreateMaybeMessage< ::api_pb::VoteUpdateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::VoteUpdateData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddLimitOrderData* Arena::CreateMaybeMessage< ::api_pb::AddLimitOrderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddLimitOrderData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RemoveLimitOrderData* Arena::CreateMaybeMessage< ::api_pb::RemoveLimitOrderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RemoveLimitOrderData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
