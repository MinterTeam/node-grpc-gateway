// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources.proto

#include "resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace api_pb {
constexpr Coin::Coin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u}){}
struct CoinDefaultTypeInternal {
  constexpr CoinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoinDefaultTypeInternal() {}
  union {
    Coin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoinDefaultTypeInternal _Coin_default_instance_;
constexpr BlocksRequest::BlocksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , _fields_cached_byte_size_(0)
  , from_height_(uint64_t{0u})
  , to_height_(uint64_t{0u})
  , failed_txs_(false)
  , events_(false){}
struct BlocksRequestDefaultTypeInternal {
  constexpr BlocksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlocksRequestDefaultTypeInternal() {}
  union {
    BlocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlocksRequestDefaultTypeInternal _BlocksRequest_default_instance_;
constexpr BlocksResponse::BlocksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocks_(){}
struct BlocksResponseDefaultTypeInternal {
  constexpr BlocksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlocksResponseDefaultTypeInternal() {}
  union {
    BlocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlocksResponseDefaultTypeInternal _BlocksResponse_default_instance_;
constexpr CommissionVotesRequest::CommissionVotesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_version_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct CommissionVotesRequestDefaultTypeInternal {
  constexpr CommissionVotesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommissionVotesRequestDefaultTypeInternal() {}
  union {
    CommissionVotesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommissionVotesRequestDefaultTypeInternal _CommissionVotesRequest_default_instance_;
constexpr CommissionVotesResponse_Vote::CommissionVotesResponse_Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_keys_()
  , price_(nullptr){}
struct CommissionVotesResponse_VoteDefaultTypeInternal {
  constexpr CommissionVotesResponse_VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommissionVotesResponse_VoteDefaultTypeInternal() {}
  union {
    CommissionVotesResponse_Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommissionVotesResponse_VoteDefaultTypeInternal _CommissionVotesResponse_Vote_default_instance_;
constexpr CommissionVotesResponse::CommissionVotesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_(){}
struct CommissionVotesResponseDefaultTypeInternal {
  constexpr CommissionVotesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommissionVotesResponseDefaultTypeInternal() {}
  union {
    CommissionVotesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommissionVotesResponseDefaultTypeInternal _CommissionVotesResponse_default_instance_;
constexpr LimitOrderRequest::LimitOrderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : order_id_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct LimitOrderRequestDefaultTypeInternal {
  constexpr LimitOrderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitOrderRequestDefaultTypeInternal() {}
  union {
    LimitOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitOrderRequestDefaultTypeInternal _LimitOrderRequest_default_instance_;
constexpr LimitOrderResponse::LimitOrderResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : want_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , want_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_sell_(nullptr)
  , coin_buy_(nullptr)
  , height_(uint64_t{0u})
  , id_(uint64_t{0u}){}
struct LimitOrderResponseDefaultTypeInternal {
  constexpr LimitOrderResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitOrderResponseDefaultTypeInternal() {}
  union {
    LimitOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitOrderResponseDefaultTypeInternal _LimitOrderResponse_default_instance_;
constexpr LimitOrdersOfPoolRequest::LimitOrdersOfPoolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sell_coin_(uint64_t{0u})
  , buy_coin_(uint64_t{0u})
  , height_(uint64_t{0u})
  , limit_(0){}
struct LimitOrdersOfPoolRequestDefaultTypeInternal {
  constexpr LimitOrdersOfPoolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitOrdersOfPoolRequestDefaultTypeInternal() {}
  union {
    LimitOrdersOfPoolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitOrdersOfPoolRequestDefaultTypeInternal _LimitOrdersOfPoolRequest_default_instance_;
constexpr LimitOrdersOfPoolResponse::LimitOrdersOfPoolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_()
  , pool_price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LimitOrdersOfPoolResponseDefaultTypeInternal {
  constexpr LimitOrdersOfPoolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitOrdersOfPoolResponseDefaultTypeInternal() {}
  union {
    LimitOrdersOfPoolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitOrdersOfPoolResponseDefaultTypeInternal _LimitOrdersOfPoolResponse_default_instance_;
constexpr LimitOrdersRequest::LimitOrdersRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ids_()
  , _ids_cached_byte_size_(0)
  , height_(uint64_t{0u}){}
struct LimitOrdersRequestDefaultTypeInternal {
  constexpr LimitOrdersRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitOrdersRequestDefaultTypeInternal() {}
  union {
    LimitOrdersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitOrdersRequestDefaultTypeInternal _LimitOrdersRequest_default_instance_;
constexpr LimitOrdersResponse::LimitOrdersResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : orders_(){}
struct LimitOrdersResponseDefaultTypeInternal {
  constexpr LimitOrdersResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitOrdersResponseDefaultTypeInternal() {}
  union {
    LimitOrdersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitOrdersResponseDefaultTypeInternal _LimitOrdersResponse_default_instance_;
constexpr UpdateVotesRequest::UpdateVotesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_version_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct UpdateVotesRequestDefaultTypeInternal {
  constexpr UpdateVotesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVotesRequestDefaultTypeInternal() {}
  union {
    UpdateVotesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVotesRequestDefaultTypeInternal _UpdateVotesRequest_default_instance_;
constexpr UpdateVotesResponse_Vote::UpdateVotesResponse_Vote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_keys_()
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateVotesResponse_VoteDefaultTypeInternal {
  constexpr UpdateVotesResponse_VoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVotesResponse_VoteDefaultTypeInternal() {}
  union {
    UpdateVotesResponse_Vote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVotesResponse_VoteDefaultTypeInternal _UpdateVotesResponse_Vote_default_instance_;
constexpr UpdateVotesResponse::UpdateVotesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_(){}
struct UpdateVotesResponseDefaultTypeInternal {
  constexpr UpdateVotesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateVotesResponseDefaultTypeInternal() {}
  union {
    UpdateVotesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateVotesResponseDefaultTypeInternal _UpdateVotesResponse_default_instance_;
constexpr VersionNetworkRequest::VersionNetworkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VersionNetworkRequestDefaultTypeInternal {
  constexpr VersionNetworkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionNetworkRequestDefaultTypeInternal() {}
  union {
    VersionNetworkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionNetworkRequestDefaultTypeInternal _VersionNetworkRequest_default_instance_;
constexpr VersionNetworkResponse_Version::VersionNetworkResponse_Version(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct VersionNetworkResponse_VersionDefaultTypeInternal {
  constexpr VersionNetworkResponse_VersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionNetworkResponse_VersionDefaultTypeInternal() {}
  union {
    VersionNetworkResponse_Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionNetworkResponse_VersionDefaultTypeInternal _VersionNetworkResponse_Version_default_instance_;
constexpr VersionNetworkResponse::VersionNetworkResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : versions_()
  , current_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VersionNetworkResponseDefaultTypeInternal {
  constexpr VersionNetworkResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionNetworkResponseDefaultTypeInternal() {}
  union {
    VersionNetworkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionNetworkResponseDefaultTypeInternal _VersionNetworkResponse_default_instance_;
constexpr PriceCommissionRequest::PriceCommissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u}){}
struct PriceCommissionRequestDefaultTypeInternal {
  constexpr PriceCommissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PriceCommissionRequestDefaultTypeInternal() {}
  union {
    PriceCommissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PriceCommissionRequestDefaultTypeInternal _PriceCommissionRequest_default_instance_;
constexpr PriceCommissionResponse::PriceCommissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_byte_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker7_10_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , declare_candidacy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delegate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unbond_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redeem_check_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_halt_block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_ticker_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_update_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_on_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_off_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mint_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , burn_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_swap_pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , failed_tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct PriceCommissionResponseDefaultTypeInternal {
  constexpr PriceCommissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PriceCommissionResponseDefaultTypeInternal() {}
  union {
    PriceCommissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PriceCommissionResponseDefaultTypeInternal _PriceCommissionResponse_default_instance_;
constexpr SwapPoolRequest::SwapPoolRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coin0_(uint64_t{0u})
  , coin1_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct SwapPoolRequestDefaultTypeInternal {
  constexpr SwapPoolRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwapPoolRequestDefaultTypeInternal() {}
  union {
    SwapPoolRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwapPoolRequestDefaultTypeInternal _SwapPoolRequest_default_instance_;
constexpr SwapPoolResponse::SwapPoolResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amount0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SwapPoolResponseDefaultTypeInternal {
  constexpr SwapPoolResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwapPoolResponseDefaultTypeInternal() {}
  union {
    SwapPoolResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwapPoolResponseDefaultTypeInternal _SwapPoolResponse_default_instance_;
constexpr SwapPoolProviderRequest::SwapPoolProviderRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : provider_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin0_(uint64_t{0u})
  , coin1_(uint64_t{0u})
  , height_(uint64_t{0u}){}
struct SwapPoolProviderRequestDefaultTypeInternal {
  constexpr SwapPoolProviderRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SwapPoolProviderRequestDefaultTypeInternal() {}
  union {
    SwapPoolProviderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SwapPoolProviderRequestDefaultTypeInternal _SwapPoolProviderRequest_default_instance_;
constexpr NodeInfo_ProtocolVersion::NodeInfo_ProtocolVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(uint64_t{0u})
  , app_(uint64_t{0u})
  , p2p_(uint64_t{0u}){}
struct NodeInfo_ProtocolVersionDefaultTypeInternal {
  constexpr NodeInfo_ProtocolVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_ProtocolVersionDefaultTypeInternal() {}
  union {
    NodeInfo_ProtocolVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_ProtocolVersionDefaultTypeInternal _NodeInfo_ProtocolVersion_default_instance_;
constexpr NodeInfo_Other::NodeInfo_Other(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rpc_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tx_index_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeInfo_OtherDefaultTypeInternal {
  constexpr NodeInfo_OtherDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfo_OtherDefaultTypeInternal() {}
  union {
    NodeInfo_Other _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfo_OtherDefaultTypeInternal _NodeInfo_Other_default_instance_;
constexpr NodeInfo::NodeInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , listen_addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , channels_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , moniker_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , other_(nullptr)
  , protocol_version_(nullptr){}
struct NodeInfoDefaultTypeInternal {
  constexpr NodeInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeInfoDefaultTypeInternal() {}
  union {
    NodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
constexpr NetInfoResponse_Peer_ConnectionStatus_Monitor::NetInfoResponse_Peer_ConnectionStatus_Monitor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , duration_(int64_t{0})
  , idle_(int64_t{0})
  , bytes_(int64_t{0})
  , samples_(int64_t{0})
  , inst_rate_(int64_t{0})
  , cur_rate_(int64_t{0})
  , avg_rate_(int64_t{0})
  , peak_rate_(int64_t{0})
  , bytes_rem_(int64_t{0})
  , time_rem_(int64_t{0})
  , progress_(uint64_t{0u})
  , active_(false){}
struct NetInfoResponse_Peer_ConnectionStatus_MonitorDefaultTypeInternal {
  constexpr NetInfoResponse_Peer_ConnectionStatus_MonitorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInfoResponse_Peer_ConnectionStatus_MonitorDefaultTypeInternal() {}
  union {
    NetInfoResponse_Peer_ConnectionStatus_Monitor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInfoResponse_Peer_ConnectionStatus_MonitorDefaultTypeInternal _NetInfoResponse_Peer_ConnectionStatus_Monitor_default_instance_;
constexpr NetInfoResponse_Peer_ConnectionStatus_Channel::NetInfoResponse_Peer_ConnectionStatus_Channel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : send_queue_capacity_(int64_t{0})
  , send_queue_size_(int64_t{0})
  , priority_(int64_t{0})
  , recently_sent_(int64_t{0})
  , id_(int64_t{0}){}
struct NetInfoResponse_Peer_ConnectionStatus_ChannelDefaultTypeInternal {
  constexpr NetInfoResponse_Peer_ConnectionStatus_ChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInfoResponse_Peer_ConnectionStatus_ChannelDefaultTypeInternal() {}
  union {
    NetInfoResponse_Peer_ConnectionStatus_Channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInfoResponse_Peer_ConnectionStatus_ChannelDefaultTypeInternal _NetInfoResponse_Peer_ConnectionStatus_Channel_default_instance_;
constexpr NetInfoResponse_Peer_ConnectionStatus::NetInfoResponse_Peer_ConnectionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , sendmonitor_(nullptr)
  , recvmonitor_(nullptr)
  , duration_(uint64_t{0u}){}
struct NetInfoResponse_Peer_ConnectionStatusDefaultTypeInternal {
  constexpr NetInfoResponse_Peer_ConnectionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInfoResponse_Peer_ConnectionStatusDefaultTypeInternal() {}
  union {
    NetInfoResponse_Peer_ConnectionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInfoResponse_Peer_ConnectionStatusDefaultTypeInternal _NetInfoResponse_Peer_ConnectionStatus_default_instance_;
constexpr NetInfoResponse_Peer::NetInfoResponse_Peer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remote_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_status_(nullptr)
  , node_info_(nullptr)
  , latest_block_height_(nullptr)
  , is_outbound_(false){}
struct NetInfoResponse_PeerDefaultTypeInternal {
  constexpr NetInfoResponse_PeerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInfoResponse_PeerDefaultTypeInternal() {}
  union {
    NetInfoResponse_Peer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInfoResponse_PeerDefaultTypeInternal _NetInfoResponse_Peer_default_instance_;
constexpr NetInfoResponse::NetInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : listeners_()
  , peers_()
  , count_peers_(int64_t{0})
  , listening_(false){}
struct NetInfoResponseDefaultTypeInternal {
  constexpr NetInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetInfoResponseDefaultTypeInternal() {}
  union {
    NetInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetInfoResponseDefaultTypeInternal _NetInfoResponse_default_instance_;
constexpr StatusResponse::StatusResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latest_block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latest_app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latest_block_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_slashed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , network_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , moniker_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latest_block_height_(uint64_t{0u})
  , keep_last_states_(uint64_t{0u})
  , initial_height_(uint64_t{0u})
  , catching_up_(false){}
struct StatusResponseDefaultTypeInternal {
  constexpr StatusResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
constexpr GenesisResponse_ConsensusParams_Block::GenesisResponse_ConsensusParams_Block(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_bytes_(int64_t{0})
  , max_gas_(int64_t{0})
  , time_iota_ms_(int64_t{0}){}
struct GenesisResponse_ConsensusParams_BlockDefaultTypeInternal {
  constexpr GenesisResponse_ConsensusParams_BlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_ConsensusParams_BlockDefaultTypeInternal() {}
  union {
    GenesisResponse_ConsensusParams_Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_ConsensusParams_BlockDefaultTypeInternal _GenesisResponse_ConsensusParams_Block_default_instance_;
constexpr GenesisResponse_ConsensusParams_Evidence::GenesisResponse_ConsensusParams_Evidence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_age_num_blocks_(int64_t{0})
  , max_age_duration_(int64_t{0}){}
struct GenesisResponse_ConsensusParams_EvidenceDefaultTypeInternal {
  constexpr GenesisResponse_ConsensusParams_EvidenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_ConsensusParams_EvidenceDefaultTypeInternal() {}
  union {
    GenesisResponse_ConsensusParams_Evidence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_ConsensusParams_EvidenceDefaultTypeInternal _GenesisResponse_ConsensusParams_Evidence_default_instance_;
constexpr GenesisResponse_ConsensusParams_Validator::GenesisResponse_ConsensusParams_Validator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pub_key_types_(){}
struct GenesisResponse_ConsensusParams_ValidatorDefaultTypeInternal {
  constexpr GenesisResponse_ConsensusParams_ValidatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_ConsensusParams_ValidatorDefaultTypeInternal() {}
  union {
    GenesisResponse_ConsensusParams_Validator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_ConsensusParams_ValidatorDefaultTypeInternal _GenesisResponse_ConsensusParams_Validator_default_instance_;
constexpr GenesisResponse_ConsensusParams::GenesisResponse_ConsensusParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : block_(nullptr)
  , evidence_(nullptr)
  , validator_(nullptr){}
struct GenesisResponse_ConsensusParamsDefaultTypeInternal {
  constexpr GenesisResponse_ConsensusParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_ConsensusParamsDefaultTypeInternal() {}
  union {
    GenesisResponse_ConsensusParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_ConsensusParamsDefaultTypeInternal _GenesisResponse_ConsensusParams_default_instance_;
constexpr GenesisResponse_AppState_Validators::GenesisResponse_AppState_Validators(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accum_reward_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , absent_times_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_bip_stake_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GenesisResponse_AppState_ValidatorsDefaultTypeInternal {
  constexpr GenesisResponse_AppState_ValidatorsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_ValidatorsDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Validators _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_ValidatorsDefaultTypeInternal _GenesisResponse_AppState_Validators_default_instance_;
constexpr GenesisResponse_AppState_Candidate_Stake::GenesisResponse_AppState_Candidate_Stake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct GenesisResponse_AppState_Candidate_StakeDefaultTypeInternal {
  constexpr GenesisResponse_AppState_Candidate_StakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_Candidate_StakeDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Candidate_Stake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_Candidate_StakeDefaultTypeInternal _GenesisResponse_AppState_Candidate_Stake_default_instance_;
constexpr GenesisResponse_AppState_Candidate::GenesisResponse_AppState_Candidate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stakes_()
  , updates_()
  , reward_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_bip_stake_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commission_(uint64_t{0u})
  , status_(int64_t{0})
  , id_(uint64_t{0u})
  , jailed_until_(int64_t{0})
  , last_edit_commission_height_(int64_t{0}){}
struct GenesisResponse_AppState_CandidateDefaultTypeInternal {
  constexpr GenesisResponse_AppState_CandidateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_CandidateDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Candidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_CandidateDefaultTypeInternal _GenesisResponse_AppState_Candidate_default_instance_;
constexpr GenesisResponse_AppState_Coin::GenesisResponse_AppState_Coin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_supply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(nullptr)
  , crr_(uint64_t{0u})
  , version_(uint64_t{0u})
  , id_(uint64_t{0u})
  , mintable_(false)
  , burnable_(false){}
struct GenesisResponse_AppState_CoinDefaultTypeInternal {
  constexpr GenesisResponse_AppState_CoinDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_CoinDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Coin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_CoinDefaultTypeInternal _GenesisResponse_AppState_Coin_default_instance_;
constexpr GenesisResponse_AppState_FrozenFund::GenesisResponse_AppState_FrozenFund(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , candidate_key_(nullptr)
  , coin_(uint64_t{0u})
  , height_(uint64_t{0u})
  , candidate_id_(uint64_t{0u}){}
struct GenesisResponse_AppState_FrozenFundDefaultTypeInternal {
  constexpr GenesisResponse_AppState_FrozenFundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_FrozenFundDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_FrozenFund _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_FrozenFundDefaultTypeInternal _GenesisResponse_AppState_FrozenFund_default_instance_;
constexpr GenesisResponse_AppState_Waitlist::GenesisResponse_AppState_Waitlist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , candidate_id_(uint64_t{0u})
  , coin_(uint64_t{0u}){}
struct GenesisResponse_AppState_WaitlistDefaultTypeInternal {
  constexpr GenesisResponse_AppState_WaitlistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_WaitlistDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Waitlist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_WaitlistDefaultTypeInternal _GenesisResponse_AppState_Waitlist_default_instance_;
constexpr GenesisResponse_AppState_Account_Balance::GenesisResponse_AppState_Account_Balance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct GenesisResponse_AppState_Account_BalanceDefaultTypeInternal {
  constexpr GenesisResponse_AppState_Account_BalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_Account_BalanceDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Account_Balance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_Account_BalanceDefaultTypeInternal _GenesisResponse_AppState_Account_Balance_default_instance_;
constexpr GenesisResponse_AppState_Account_MultisigData::GenesisResponse_AppState_Account_MultisigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weights_()
  , _weights_cached_byte_size_(0)
  , addresses_()
  , threshold_(uint64_t{0u}){}
struct GenesisResponse_AppState_Account_MultisigDataDefaultTypeInternal {
  constexpr GenesisResponse_AppState_Account_MultisigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_Account_MultisigDataDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Account_MultisigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_Account_MultisigDataDefaultTypeInternal _GenesisResponse_AppState_Account_MultisigData_default_instance_;
constexpr GenesisResponse_AppState_Account::GenesisResponse_AppState_Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_()
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisig_data_(nullptr)
  , nonce_(uint64_t{0u}){}
struct GenesisResponse_AppState_AccountDefaultTypeInternal {
  constexpr GenesisResponse_AppState_AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_AccountDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_AccountDefaultTypeInternal _GenesisResponse_AppState_Account_default_instance_;
constexpr GenesisResponse_AppState_HaltBlock::GenesisResponse_AppState_HaltBlock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct GenesisResponse_AppState_HaltBlockDefaultTypeInternal {
  constexpr GenesisResponse_AppState_HaltBlockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_HaltBlockDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_HaltBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_HaltBlockDefaultTypeInternal _GenesisResponse_AppState_HaltBlock_default_instance_;
constexpr GenesisResponse_AppState_Pool::GenesisResponse_AppState_Pool(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reserve0_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve1_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin0_(uint64_t{0u})
  , coin1_(uint64_t{0u})
  , id_(uint64_t{0u}){}
struct GenesisResponse_AppState_PoolDefaultTypeInternal {
  constexpr GenesisResponse_AppState_PoolDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_PoolDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Pool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_PoolDefaultTypeInternal _GenesisResponse_AppState_Pool_default_instance_;
constexpr GenesisResponse_AppState_Commission::GenesisResponse_AppState_Commission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_byte_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker7_10_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , declare_candidacy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delegate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unbond_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redeem_check_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_halt_block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_ticker_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_update_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_on_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_off_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mint_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , burn_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_swap_pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , failed_tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct GenesisResponse_AppState_CommissionDefaultTypeInternal {
  constexpr GenesisResponse_AppState_CommissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_CommissionDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_Commission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_CommissionDefaultTypeInternal _GenesisResponse_AppState_Commission_default_instance_;
constexpr GenesisResponse_AppState_CommissionVote::GenesisResponse_AppState_CommissionVote(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : votes_()
  , commission_(nullptr)
  , height_(uint64_t{0u}){}
struct GenesisResponse_AppState_CommissionVoteDefaultTypeInternal {
  constexpr GenesisResponse_AppState_CommissionVoteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppState_CommissionVoteDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState_CommissionVote _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppState_CommissionVoteDefaultTypeInternal _GenesisResponse_AppState_CommissionVote_default_instance_;
constexpr GenesisResponse_AppState::GenesisResponse_AppState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validators_()
  , candidates_()
  , coins_()
  , frozen_funds_()
  , used_checks_()
  , halt_blocks_()
  , waitlist_()
  , accounts_()
  , pools_()
  , commission_votes_()
  , block_list_candidates_()
  , total_slashed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , note_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commission_(nullptr)
  , max_gas_(uint64_t{0u}){}
struct GenesisResponse_AppStateDefaultTypeInternal {
  constexpr GenesisResponse_AppStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponse_AppStateDefaultTypeInternal() {}
  union {
    GenesisResponse_AppState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponse_AppStateDefaultTypeInternal _GenesisResponse_AppState_default_instance_;
constexpr GenesisResponse::GenesisResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : genesis_time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chain_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consensus_params_(nullptr)
  , app_state_(nullptr)
  , initial_height_(uint64_t{0u}){}
struct GenesisResponseDefaultTypeInternal {
  constexpr GenesisResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenesisResponseDefaultTypeInternal() {}
  union {
    GenesisResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenesisResponseDefaultTypeInternal _GenesisResponse_default_instance_;
constexpr MinGasPriceResponse::MinGasPriceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_gas_price_(uint64_t{0u}){}
struct MinGasPriceResponseDefaultTypeInternal {
  constexpr MinGasPriceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MinGasPriceResponseDefaultTypeInternal() {}
  union {
    MinGasPriceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MinGasPriceResponseDefaultTypeInternal _MinGasPriceResponse_default_instance_;
constexpr BlockRequest::BlockRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , _fields_cached_byte_size_(0)
  , height_(uint64_t{0u})
  , failed_txs_(false)
  , events_(false){}
struct BlockRequestDefaultTypeInternal {
  constexpr BlockRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockRequestDefaultTypeInternal() {}
  union {
    BlockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
constexpr BlockResponse_Validator::BlockResponse_Validator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signed__(false){}
struct BlockResponse_ValidatorDefaultTypeInternal {
  constexpr BlockResponse_ValidatorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponse_ValidatorDefaultTypeInternal() {}
  union {
    BlockResponse_Validator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponse_ValidatorDefaultTypeInternal _BlockResponse_Validator_default_instance_;
constexpr BlockResponse_Evidence::BlockResponse_Evidence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : evidence_(){}
struct BlockResponse_EvidenceDefaultTypeInternal {
  constexpr BlockResponse_EvidenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponse_EvidenceDefaultTypeInternal() {}
  union {
    BlockResponse_Evidence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponse_EvidenceDefaultTypeInternal _BlockResponse_Evidence_default_instance_;
constexpr BlockResponse::BlockResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , validators_()
  , missed_()
  , events_()
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , block_reward_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , proposer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , evidence_(nullptr)
  , height_(uint64_t{0u})
  , transaction_count_(uint64_t{0u})
  , size_(uint64_t{0u}){}
struct BlockResponseDefaultTypeInternal {
  constexpr BlockResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockResponseDefaultTypeInternal() {}
  union {
    BlockResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
constexpr MaxGasPriceRequest::MaxGasPriceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u}){}
struct MaxGasPriceRequestDefaultTypeInternal {
  constexpr MaxGasPriceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaxGasPriceRequestDefaultTypeInternal() {}
  union {
    MaxGasPriceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaxGasPriceRequestDefaultTypeInternal _MaxGasPriceRequest_default_instance_;
constexpr MaxGasPriceResponse::MaxGasPriceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_gas_price_(uint64_t{0u}){}
struct MaxGasPriceResponseDefaultTypeInternal {
  constexpr MaxGasPriceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MaxGasPriceResponseDefaultTypeInternal() {}
  union {
    MaxGasPriceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MaxGasPriceResponseDefaultTypeInternal _MaxGasPriceResponse_default_instance_;
constexpr AddressRequest::AddressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , delegated_(false){}
struct AddressRequestDefaultTypeInternal {
  constexpr AddressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressRequestDefaultTypeInternal() {}
  union {
    AddressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressRequestDefaultTypeInternal _AddressRequest_default_instance_;
constexpr AddressBalance::AddressBalance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct AddressBalanceDefaultTypeInternal {
  constexpr AddressBalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressBalanceDefaultTypeInternal() {}
  union {
    AddressBalance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressBalanceDefaultTypeInternal _AddressBalance_default_instance_;
constexpr AddressDelegatedBalance::AddressDelegatedBalance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delegate_bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct AddressDelegatedBalanceDefaultTypeInternal {
  constexpr AddressDelegatedBalanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressDelegatedBalanceDefaultTypeInternal() {}
  union {
    AddressDelegatedBalance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressDelegatedBalanceDefaultTypeInternal _AddressDelegatedBalance_default_instance_;
constexpr AddressResponse::AddressResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_()
  , delegated_()
  , total_()
  , bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisig_(nullptr)
  , transaction_count_(uint64_t{0u}){}
struct AddressResponseDefaultTypeInternal {
  constexpr AddressResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressResponseDefaultTypeInternal() {}
  union {
    AddressResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressResponseDefaultTypeInternal _AddressResponse_default_instance_;
constexpr Multisig::Multisig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weights_()
  , _weights_cached_byte_size_(0)
  , addresses_()
  , threshold_(uint64_t{0u}){}
struct MultisigDefaultTypeInternal {
  constexpr MultisigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultisigDefaultTypeInternal() {}
  union {
    Multisig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultisigDefaultTypeInternal _Multisig_default_instance_;
constexpr AddressesRequest::AddressesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addresses_()
  , height_(uint64_t{0u})
  , delegated_(false){}
struct AddressesRequestDefaultTypeInternal {
  constexpr AddressesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressesRequestDefaultTypeInternal() {}
  union {
    AddressesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressesRequestDefaultTypeInternal _AddressesRequest_default_instance_;
constexpr AddressesResponse_Result::AddressesResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : balance_()
  , total_()
  , delegated_()
  , bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisig_(nullptr)
  , transaction_count_(uint64_t{0u}){}
struct AddressesResponse_ResultDefaultTypeInternal {
  constexpr AddressesResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressesResponse_ResultDefaultTypeInternal() {}
  union {
    AddressesResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressesResponse_ResultDefaultTypeInternal _AddressesResponse_Result_default_instance_;
constexpr AddressesResponse_AddressesEntry_DoNotUse::AddressesResponse_AddressesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AddressesResponse_AddressesEntry_DoNotUseDefaultTypeInternal {
  constexpr AddressesResponse_AddressesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressesResponse_AddressesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AddressesResponse_AddressesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressesResponse_AddressesEntry_DoNotUseDefaultTypeInternal _AddressesResponse_AddressesEntry_DoNotUse_default_instance_;
constexpr AddressesResponse::AddressesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addresses_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct AddressesResponseDefaultTypeInternal {
  constexpr AddressesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddressesResponseDefaultTypeInternal() {}
  union {
    AddressesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddressesResponseDefaultTypeInternal _AddressesResponse_default_instance_;
constexpr CandidateRequest::CandidateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , not_show_stakes_(false){}
struct CandidateRequestDefaultTypeInternal {
  constexpr CandidateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateRequestDefaultTypeInternal() {}
  union {
    CandidateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateRequestDefaultTypeInternal _CandidateRequest_default_instance_;
constexpr CandidateResponse_Stake::CandidateResponse_Stake(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bip_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct CandidateResponse_StakeDefaultTypeInternal {
  constexpr CandidateResponse_StakeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateResponse_StakeDefaultTypeInternal() {}
  union {
    CandidateResponse_Stake _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateResponse_StakeDefaultTypeInternal _CandidateResponse_Stake_default_instance_;
constexpr CandidateResponse::CandidateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stakes_()
  , reward_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , total_stake_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , used_slots_(nullptr)
  , uniq_users_(nullptr)
  , min_stake_(nullptr)
  , commission_(uint64_t{0u})
  , status_(uint64_t{0u})
  , jailed_until_(uint64_t{0u})
  , id_(uint64_t{0u})
  , validator_(false){}
struct CandidateResponseDefaultTypeInternal {
  constexpr CandidateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidateResponseDefaultTypeInternal() {}
  union {
    CandidateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidateResponseDefaultTypeInternal _CandidateResponse_default_instance_;
constexpr CandidatesRequest::CandidatesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u})
  , status_(0)

  , include_stakes_(false)
  , not_show_stakes_(false){}
struct CandidatesRequestDefaultTypeInternal {
  constexpr CandidatesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidatesRequestDefaultTypeInternal() {}
  union {
    CandidatesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidatesRequestDefaultTypeInternal _CandidatesRequest_default_instance_;
constexpr CandidatesResponse::CandidatesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidates_(){}
struct CandidatesResponseDefaultTypeInternal {
  constexpr CandidatesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CandidatesResponseDefaultTypeInternal() {}
  union {
    CandidatesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CandidatesResponseDefaultTypeInternal _CandidatesResponse_default_instance_;
constexpr CoinIdRequest::CoinIdRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u})
  , id_(uint64_t{0u}){}
struct CoinIdRequestDefaultTypeInternal {
  constexpr CoinIdRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoinIdRequestDefaultTypeInternal() {}
  union {
    CoinIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoinIdRequestDefaultTypeInternal _CoinIdRequest_default_instance_;
constexpr CoinInfoRequest::CoinInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct CoinInfoRequestDefaultTypeInternal {
  constexpr CoinInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoinInfoRequestDefaultTypeInternal() {}
  union {
    CoinInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoinInfoRequestDefaultTypeInternal _CoinInfoRequest_default_instance_;
constexpr CoinInfoResponse::CoinInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reserve_balance_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_supply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owner_address_(nullptr)
  , crr_(uint64_t{0u})
  , id_(uint64_t{0u})
  , mintable_(false)
  , burnable_(false){}
struct CoinInfoResponseDefaultTypeInternal {
  constexpr CoinInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoinInfoResponseDefaultTypeInternal() {}
  union {
    CoinInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoinInfoResponseDefaultTypeInternal _CoinInfoResponse_default_instance_;
constexpr SendTransactionResponse::SendTransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(uint64_t{0u}){}
struct SendTransactionResponseDefaultTypeInternal {
  constexpr SendTransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTransactionResponseDefaultTypeInternal() {}
  union {
    SendTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTransactionResponseDefaultTypeInternal _SendTransactionResponse_default_instance_;
constexpr SendTransactionRequest::SendTransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SendTransactionRequestDefaultTypeInternal {
  constexpr SendTransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendTransactionRequestDefaultTypeInternal() {}
  union {
    SendTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendTransactionRequestDefaultTypeInternal _SendTransactionRequest_default_instance_;
constexpr TransactionResponse_TagsEntry_DoNotUse::TransactionResponse_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TransactionResponse_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr TransactionResponse_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResponse_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TransactionResponse_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResponse_TagsEntry_DoNotUseDefaultTypeInternal _TransactionResponse_TagsEntry_DoNotUse_default_instance_;
constexpr TransactionResponse::TransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , raw_tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , log_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_hex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_coin_(nullptr)
  , data_(nullptr)
  , height_(uint64_t{0u})
  , index_(uint64_t{0u})
  , nonce_(uint64_t{0u})
  , gas_(uint64_t{0u})
  , gas_price_(uint64_t{0u})
  , type_(uint64_t{0u})
  , code_(uint64_t{0u}){}
struct TransactionResponseDefaultTypeInternal {
  constexpr TransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionResponseDefaultTypeInternal() {}
  union {
    TransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
constexpr TransactionRequest::TransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionRequestDefaultTypeInternal {
  constexpr TransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionRequestDefaultTypeInternal() {}
  union {
    TransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionRequestDefaultTypeInternal _TransactionRequest_default_instance_;
constexpr TransactionsResponse::TransactionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_(){}
struct TransactionsResponseDefaultTypeInternal {
  constexpr TransactionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionsResponseDefaultTypeInternal() {}
  union {
    TransactionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionsResponseDefaultTypeInternal _TransactionsResponse_default_instance_;
constexpr TransactionsRequest::TransactionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0)
  , per_page_(0){}
struct TransactionsRequestDefaultTypeInternal {
  constexpr TransactionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionsRequestDefaultTypeInternal() {}
  union {
    TransactionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionsRequestDefaultTypeInternal _TransactionsRequest_default_instance_;
constexpr EstimateCoinBuyRequest::EstimateCoinBuyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_()
  , _route_cached_byte_size_(0)
  , value_to_buy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , swap_from_(0)

  , _oneof_case_{}{}
struct EstimateCoinBuyRequestDefaultTypeInternal {
  constexpr EstimateCoinBuyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateCoinBuyRequestDefaultTypeInternal() {}
  union {
    EstimateCoinBuyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateCoinBuyRequestDefaultTypeInternal _EstimateCoinBuyRequest_default_instance_;
constexpr EstimateCoinBuyResponse::EstimateCoinBuyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : will_pay_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , swap_from_(0)
{}
struct EstimateCoinBuyResponseDefaultTypeInternal {
  constexpr EstimateCoinBuyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateCoinBuyResponseDefaultTypeInternal() {}
  union {
    EstimateCoinBuyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateCoinBuyResponseDefaultTypeInternal _EstimateCoinBuyResponse_default_instance_;
constexpr EstimateCoinSellRequest::EstimateCoinSellRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_()
  , _route_cached_byte_size_(0)
  , value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u})
  , swap_from_(0)

  , _oneof_case_{}{}
struct EstimateCoinSellRequestDefaultTypeInternal {
  constexpr EstimateCoinSellRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateCoinSellRequestDefaultTypeInternal() {}
  union {
    EstimateCoinSellRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateCoinSellRequestDefaultTypeInternal _EstimateCoinSellRequest_default_instance_;
constexpr EstimateCoinSellResponse::EstimateCoinSellResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : will_get_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , swap_from_(0)
{}
struct EstimateCoinSellResponseDefaultTypeInternal {
  constexpr EstimateCoinSellResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateCoinSellResponseDefaultTypeInternal() {}
  union {
    EstimateCoinSellResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateCoinSellResponseDefaultTypeInternal _EstimateCoinSellResponse_default_instance_;
constexpr EstimateCoinSellAllRequest::EstimateCoinSellAllRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : route_()
  , _route_cached_byte_size_(0)
  , value_to_sell_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gas_price_(uint64_t{0u})
  , height_(uint64_t{0u})
  , swap_from_(0)

  , _oneof_case_{}{}
struct EstimateCoinSellAllRequestDefaultTypeInternal {
  constexpr EstimateCoinSellAllRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateCoinSellAllRequestDefaultTypeInternal() {}
  union {
    EstimateCoinSellAllRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateCoinSellAllRequestDefaultTypeInternal _EstimateCoinSellAllRequest_default_instance_;
constexpr EstimateCoinSellAllResponse::EstimateCoinSellAllResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : will_get_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , swap_from_(0)
{}
struct EstimateCoinSellAllResponseDefaultTypeInternal {
  constexpr EstimateCoinSellAllResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateCoinSellAllResponseDefaultTypeInternal() {}
  union {
    EstimateCoinSellAllResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateCoinSellAllResponseDefaultTypeInternal _EstimateCoinSellAllResponse_default_instance_;
constexpr EstimateTxCommissionRequest::EstimateTxCommissionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct EstimateTxCommissionRequestDefaultTypeInternal {
  constexpr EstimateTxCommissionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateTxCommissionRequestDefaultTypeInternal() {}
  union {
    EstimateTxCommissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateTxCommissionRequestDefaultTypeInternal _EstimateTxCommissionRequest_default_instance_;
constexpr EstimateTxCommissionResponse::EstimateTxCommissionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EstimateTxCommissionResponseDefaultTypeInternal {
  constexpr EstimateTxCommissionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EstimateTxCommissionResponseDefaultTypeInternal() {}
  union {
    EstimateTxCommissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EstimateTxCommissionResponseDefaultTypeInternal _EstimateTxCommissionResponse_default_instance_;
constexpr EventsRequest::EventsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_()
  , height_(uint64_t{0u}){}
struct EventsRequestDefaultTypeInternal {
  constexpr EventsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventsRequestDefaultTypeInternal() {}
  union {
    EventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventsRequestDefaultTypeInternal _EventsRequest_default_instance_;
constexpr EventsResponse::EventsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct EventsResponseDefaultTypeInternal {
  constexpr EventsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventsResponseDefaultTypeInternal() {}
  union {
    EventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;
constexpr MissedBlocksRequest::MissedBlocksRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct MissedBlocksRequestDefaultTypeInternal {
  constexpr MissedBlocksRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissedBlocksRequestDefaultTypeInternal() {}
  union {
    MissedBlocksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissedBlocksRequestDefaultTypeInternal _MissedBlocksRequest_default_instance_;
constexpr MissedBlocksResponse::MissedBlocksResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : missed_blocks_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , missed_blocks_count_(int64_t{0}){}
struct MissedBlocksResponseDefaultTypeInternal {
  constexpr MissedBlocksResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MissedBlocksResponseDefaultTypeInternal() {}
  union {
    MissedBlocksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MissedBlocksResponseDefaultTypeInternal _MissedBlocksResponse_default_instance_;
constexpr UnconfirmedTxsResponse::UnconfirmedTxsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , transaction_count_(uint64_t{0u})
  , total_transactions_(uint64_t{0u})
  , total_bytes_(uint64_t{0u}){}
struct UnconfirmedTxsResponseDefaultTypeInternal {
  constexpr UnconfirmedTxsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnconfirmedTxsResponseDefaultTypeInternal() {}
  union {
    UnconfirmedTxsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnconfirmedTxsResponseDefaultTypeInternal _UnconfirmedTxsResponse_default_instance_;
constexpr UnconfirmedTxsRequest::UnconfirmedTxsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limit_(0){}
struct UnconfirmedTxsRequestDefaultTypeInternal {
  constexpr UnconfirmedTxsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnconfirmedTxsRequestDefaultTypeInternal() {}
  union {
    UnconfirmedTxsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnconfirmedTxsRequestDefaultTypeInternal _UnconfirmedTxsRequest_default_instance_;
constexpr ValidatorsRequest::ValidatorsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u}){}
struct ValidatorsRequestDefaultTypeInternal {
  constexpr ValidatorsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorsRequestDefaultTypeInternal() {}
  union {
    ValidatorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorsRequestDefaultTypeInternal _ValidatorsRequest_default_instance_;
constexpr ValidatorsResponse_Result::ValidatorsResponse_Result(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , voting_power_(uint64_t{0u}){}
struct ValidatorsResponse_ResultDefaultTypeInternal {
  constexpr ValidatorsResponse_ResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorsResponse_ResultDefaultTypeInternal() {}
  union {
    ValidatorsResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorsResponse_ResultDefaultTypeInternal _ValidatorsResponse_Result_default_instance_;
constexpr ValidatorsResponse::ValidatorsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validators_(){}
struct ValidatorsResponseDefaultTypeInternal {
  constexpr ValidatorsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidatorsResponseDefaultTypeInternal() {}
  union {
    ValidatorsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidatorsResponseDefaultTypeInternal _ValidatorsResponse_default_instance_;
constexpr SubscribeRequest::SubscribeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubscribeRequestDefaultTypeInternal {
  constexpr SubscribeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
constexpr SubscribeResponse_Event::SubscribeResponse_Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SubscribeResponse_EventDefaultTypeInternal {
  constexpr SubscribeResponse_EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeResponse_EventDefaultTypeInternal() {}
  union {
    SubscribeResponse_Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeResponse_EventDefaultTypeInternal _SubscribeResponse_Event_default_instance_;
constexpr SubscribeResponse::SubscribeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_()
  , query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr){}
struct SubscribeResponseDefaultTypeInternal {
  constexpr SubscribeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeResponseDefaultTypeInternal() {}
  union {
    SubscribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
constexpr HaltsRequest::HaltsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(uint64_t{0u}){}
struct HaltsRequestDefaultTypeInternal {
  constexpr HaltsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HaltsRequestDefaultTypeInternal() {}
  union {
    HaltsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HaltsRequestDefaultTypeInternal _HaltsRequest_default_instance_;
constexpr HaltsResponse::HaltsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_keys_(){}
struct HaltsResponseDefaultTypeInternal {
  constexpr HaltsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HaltsResponseDefaultTypeInternal() {}
  union {
    HaltsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HaltsResponseDefaultTypeInternal _HaltsResponse_default_instance_;
constexpr FrozenRequest::FrozenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_id_(nullptr)
  , height_(uint64_t{0u}){}
struct FrozenRequestDefaultTypeInternal {
  constexpr FrozenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrozenRequestDefaultTypeInternal() {}
  union {
    FrozenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrozenRequestDefaultTypeInternal _FrozenRequest_default_instance_;
constexpr FrozenResponse_Frozen::FrozenResponse_Frozen(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , candidate_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr)
  , height_(uint64_t{0u}){}
struct FrozenResponse_FrozenDefaultTypeInternal {
  constexpr FrozenResponse_FrozenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrozenResponse_FrozenDefaultTypeInternal() {}
  union {
    FrozenResponse_Frozen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrozenResponse_FrozenDefaultTypeInternal _FrozenResponse_Frozen_default_instance_;
constexpr FrozenResponse::FrozenResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frozen_(){}
struct FrozenResponseDefaultTypeInternal {
  constexpr FrozenResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FrozenResponseDefaultTypeInternal() {}
  union {
    FrozenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FrozenResponseDefaultTypeInternal _FrozenResponse_default_instance_;
constexpr WaitListRequest::WaitListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(uint64_t{0u}){}
struct WaitListRequestDefaultTypeInternal {
  constexpr WaitListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitListRequestDefaultTypeInternal() {}
  union {
    WaitListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitListRequestDefaultTypeInternal _WaitListRequest_default_instance_;
constexpr WaitListResponse_Wait::WaitListResponse_Wait(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(nullptr){}
struct WaitListResponse_WaitDefaultTypeInternal {
  constexpr WaitListResponse_WaitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitListResponse_WaitDefaultTypeInternal() {}
  union {
    WaitListResponse_Wait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitListResponse_WaitDefaultTypeInternal _WaitListResponse_Wait_default_instance_;
constexpr WaitListResponse::WaitListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct WaitListResponseDefaultTypeInternal {
  constexpr WaitListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaitListResponseDefaultTypeInternal() {}
  union {
    WaitListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaitListResponseDefaultTypeInternal _WaitListResponse_default_instance_;
}  // namespace api_pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_resources_2eproto[110];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_resources_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_resources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_resources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::Coin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::Coin, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::Coin, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksRequest, from_height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksRequest, to_height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksRequest, fields_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksRequest, failed_txs_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksRequest, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlocksResponse, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesRequest, target_version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesResponse_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesResponse_Vote, price_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesResponse_Vote, public_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CommissionVotesResponse, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderRequest, order_id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, coin_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, coin_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, want_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, want_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, price_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrderResponse, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolRequest, sell_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolRequest, buy_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolResponse, pool_price_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersOfPoolResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::LimitOrdersResponse, orders_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesRequest, target_version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesResponse_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesResponse_Vote, version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesResponse_Vote, public_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateVotesResponse, votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkResponse_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkResponse_Version, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkResponse_Version, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkResponse, current_),
  PROTOBUF_FIELD_OFFSET(::api_pb::VersionNetworkResponse, versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, payload_byte_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, send_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, buy_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, sell_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, sell_all_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, buy_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, buy_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, sell_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, sell_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, sell_all_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, sell_all_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_ticker3_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_ticker4_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_ticker5_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_ticker6_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_ticker7_10_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, recreate_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, recreate_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, declare_candidacy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, delegate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, unbond_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, redeem_check_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, set_candidate_on_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, set_candidate_off_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, multisend_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, multisend_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, edit_candidate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, set_halt_block_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, edit_ticker_owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, edit_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, edit_candidate_public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, create_swap_pool_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, add_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, remove_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, edit_candidate_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, mint_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, burn_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, vote_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, vote_update_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, failed_tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, add_limit_order_),
  PROTOBUF_FIELD_OFFSET(::api_pb::PriceCommissionResponse, remove_limit_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolRequest, coin0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolRequest, coin1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolResponse, price_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolResponse, amount0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolResponse, amount1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolResponse, liquidity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolProviderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolProviderRequest, coin0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolProviderRequest, coin1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolProviderRequest, provider_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SwapPoolProviderRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_ProtocolVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_ProtocolVersion, p2p_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_ProtocolVersion, block_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_ProtocolVersion, app_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_Other, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_Other, tx_index_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo_Other, rpc_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, listen_addr_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, network_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, channels_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, moniker_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NodeInfo, other_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, active_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, start_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, duration_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, idle_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, bytes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, samples_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, inst_rate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, cur_rate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, avg_rate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, peak_rate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, bytes_rem_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, time_rem_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel, send_queue_capacity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel, send_queue_size_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel, priority_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel, recently_sent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus, duration_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus, sendmonitor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus, recvmonitor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer_ConnectionStatus, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer, latest_block_height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer, node_info_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer, is_outbound_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer, connection_status_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse_Peer, remote_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse, listening_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse, listeners_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse, count_peers_),
  PROTOBUF_FIELD_OFFSET(::api_pb::NetInfoResponse, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, network_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, initial_height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, latest_block_hash_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, latest_app_hash_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, latest_block_height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, latest_block_time_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, keep_last_states_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, total_slashed_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, catching_up_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, node_id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StatusResponse, moniker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Block, max_bytes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Block, max_gas_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Block, time_iota_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Evidence, max_age_num_blocks_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Evidence, max_age_duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams_Validator, pub_key_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams, block_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams, evidence_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_ConsensusParams, validator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Validators, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Validators, total_bip_stake_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Validators, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Validators, accum_reward_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Validators, absent_times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate_Stake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate_Stake, owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate_Stake, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate_Stake, value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate_Stake, bip_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, reward_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, owner_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, control_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, total_bip_stake_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, stakes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, updates_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, status_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, jailed_until_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Candidate, last_edit_commission_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, volume_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, crr_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, reserve_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, max_supply_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, owner_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, mintable_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Coin, burnable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, candidate_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, candidate_id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_FrozenFund, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Waitlist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Waitlist, candidate_id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Waitlist, owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Waitlist, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Waitlist, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_Balance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_Balance, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_Balance, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_MultisigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_MultisigData, threshold_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_MultisigData, weights_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account_MultisigData, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account, balance_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account, nonce_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Account, multisig_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_HaltBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_HaltBlock, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_HaltBlock, candidate_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Pool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Pool, coin0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Pool, coin1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Pool, reserve0_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Pool, reserve1_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Pool, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, payload_byte_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, send_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, buy_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, sell_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, sell_all_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, buy_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, buy_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, sell_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, sell_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, sell_all_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, sell_all_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_ticker3_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_ticker4_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_ticker5_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_ticker6_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_ticker7_10_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, recreate_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, recreate_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, declare_candidacy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, delegate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, unbond_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, redeem_check_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, set_candidate_on_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, set_candidate_off_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, multisend_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, multisend_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, edit_candidate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, set_halt_block_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, edit_ticker_owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, edit_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, edit_candidate_public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, create_swap_pool_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, add_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, remove_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, edit_candidate_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, mint_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, burn_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, vote_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, vote_update_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, failed_tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, add_limit_order_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_Commission, remove_limit_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_CommissionVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_CommissionVote, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_CommissionVote, votes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState_CommissionVote, commission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, version_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, note_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, validators_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, candidates_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, coins_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, frozen_funds_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, block_list_candidates_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, waitlist_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, accounts_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, halt_blocks_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, pools_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, commission_votes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, used_checks_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, max_gas_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse_AppState, total_slashed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, genesis_time_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, chain_id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, initial_height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, consensus_params_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, app_hash_),
  PROTOBUF_FIELD_OFFSET(::api_pb::GenesisResponse, app_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MinGasPriceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MinGasPriceResponse, min_gas_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockRequest, fields_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockRequest, failed_txs_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockRequest, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse_Validator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse_Validator, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse_Validator, signed__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse_Evidence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse_Evidence, evidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, hash_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, time_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, transaction_count_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, transactions_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, block_reward_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, size_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, proposer_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, validators_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, evidence_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, missed_),
  PROTOBUF_FIELD_OFFSET(::api_pb::BlockResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MaxGasPriceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MaxGasPriceRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MaxGasPriceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MaxGasPriceResponse, max_gas_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressRequest, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressRequest, delegated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressBalance, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressBalance, value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressBalance, bip_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressDelegatedBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressDelegatedBalance, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressDelegatedBalance, value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressDelegatedBalance, bip_value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressDelegatedBalance, delegate_bip_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, balance_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, delegated_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, total_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, transaction_count_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, bip_value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressResponse, multisig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::Multisig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::Multisig, threshold_),
  PROTOBUF_FIELD_OFFSET(::api_pb::Multisig, weights_),
  PROTOBUF_FIELD_OFFSET(::api_pb::Multisig, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesRequest, addresses_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesRequest, delegated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, balance_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, delegated_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, total_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, transaction_count_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, bip_value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_Result, multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_AddressesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_AddressesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_AddressesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse_AddressesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::AddressesResponse, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateRequest, not_show_stakes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse_Stake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse_Stake, owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse_Stake, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse_Stake, value_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse_Stake, bip_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, reward_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, owner_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, control_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, total_stake_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, used_slots_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, uniq_users_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, min_stake_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, stakes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, status_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, validator_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidateResponse, jailed_until_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesRequest, include_stakes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesRequest, not_show_stakes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CandidatesResponse, candidates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinIdRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinIdRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoRequest, symbol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, name_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, symbol_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, volume_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, crr_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, reserve_balance_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, max_supply_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, owner_address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, mintable_),
  PROTOBUF_FIELD_OFFSET(::api_pb::CoinInfoResponse, burnable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SendTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SendTransactionResponse, code_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SendTransactionResponse, log_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SendTransactionResponse, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SendTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SendTransactionRequest, tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, hash_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, raw_tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, index_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, from_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, nonce_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, gas_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, gas_price_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, gas_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, type_hex_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, type_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, data_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, payload_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, service_data_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, tags_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, code_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionResponse, log_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionRequest, hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionsResponse, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionsRequest, query_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionsRequest, page_),
  PROTOBUF_FIELD_OFFSET(::api_pb::TransactionsRequest, per_page_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, value_to_buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, height_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, swap_from_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, route_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyRequest, commission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyResponse, will_pay_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyResponse, commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinBuyResponse, swap_from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, value_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, height_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, swap_from_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, route_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellRequest, commission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellResponse, will_get_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellResponse, commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellResponse, swap_from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, value_to_sell_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, gas_price_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, swap_from_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, route_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, buy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllRequest, sell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllResponse, will_get_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateCoinSellAllResponse, swap_from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateTxCommissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateTxCommissionRequest, tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateTxCommissionRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateTxCommissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EstimateTxCommissionResponse, commission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EventsRequest, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::EventsRequest, search_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::EventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::EventsResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MissedBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MissedBlocksRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::MissedBlocksRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::MissedBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::MissedBlocksResponse, missed_blocks_),
  PROTOBUF_FIELD_OFFSET(::api_pb::MissedBlocksResponse, missed_blocks_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsResponse, transaction_count_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsResponse, total_transactions_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsResponse, total_bytes_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsResponse, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnconfirmedTxsRequest, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsResponse_Result, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsResponse_Result, voting_power_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::ValidatorsResponse, validators_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeRequest, query_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse_Event, key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse_Event, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse, query_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse, data_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SubscribeResponse, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::HaltsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::HaltsRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::HaltsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::HaltsResponse, public_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenRequest, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenRequest, coin_id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse_Frozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse_Frozen, height_),
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse_Frozen, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse_Frozen, candidate_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse_Frozen, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse_Frozen, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::FrozenResponse, frozen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListRequest, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListRequest, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListRequest, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListResponse_Wait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListResponse_Wait, public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListResponse_Wait, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListResponse_Wait, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::WaitListResponse, list_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api_pb::Coin)},
  { 7, -1, sizeof(::api_pb::BlocksRequest)},
  { 17, -1, sizeof(::api_pb::BlocksResponse)},
  { 23, -1, sizeof(::api_pb::CommissionVotesRequest)},
  { 30, -1, sizeof(::api_pb::CommissionVotesResponse_Vote)},
  { 37, -1, sizeof(::api_pb::CommissionVotesResponse)},
  { 43, -1, sizeof(::api_pb::LimitOrderRequest)},
  { 50, -1, sizeof(::api_pb::LimitOrderResponse)},
  { 63, -1, sizeof(::api_pb::LimitOrdersOfPoolRequest)},
  { 72, -1, sizeof(::api_pb::LimitOrdersOfPoolResponse)},
  { 79, -1, sizeof(::api_pb::LimitOrdersRequest)},
  { 86, -1, sizeof(::api_pb::LimitOrdersResponse)},
  { 92, -1, sizeof(::api_pb::UpdateVotesRequest)},
  { 99, -1, sizeof(::api_pb::UpdateVotesResponse_Vote)},
  { 106, -1, sizeof(::api_pb::UpdateVotesResponse)},
  { 112, -1, sizeof(::api_pb::VersionNetworkRequest)},
  { 117, -1, sizeof(::api_pb::VersionNetworkResponse_Version)},
  { 124, -1, sizeof(::api_pb::VersionNetworkResponse)},
  { 131, -1, sizeof(::api_pb::PriceCommissionRequest)},
  { 137, -1, sizeof(::api_pb::PriceCommissionResponse)},
  { 188, -1, sizeof(::api_pb::SwapPoolRequest)},
  { 196, -1, sizeof(::api_pb::SwapPoolResponse)},
  { 205, -1, sizeof(::api_pb::SwapPoolProviderRequest)},
  { 214, -1, sizeof(::api_pb::NodeInfo_ProtocolVersion)},
  { 222, -1, sizeof(::api_pb::NodeInfo_Other)},
  { 229, -1, sizeof(::api_pb::NodeInfo)},
  { 242, -1, sizeof(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor)},
  { 260, -1, sizeof(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel)},
  { 270, -1, sizeof(::api_pb::NetInfoResponse_Peer_ConnectionStatus)},
  { 279, -1, sizeof(::api_pb::NetInfoResponse_Peer)},
  { 289, -1, sizeof(::api_pb::NetInfoResponse)},
  { 298, -1, sizeof(::api_pb::StatusResponse)},
  { 316, -1, sizeof(::api_pb::GenesisResponse_ConsensusParams_Block)},
  { 324, -1, sizeof(::api_pb::GenesisResponse_ConsensusParams_Evidence)},
  { 331, -1, sizeof(::api_pb::GenesisResponse_ConsensusParams_Validator)},
  { 337, -1, sizeof(::api_pb::GenesisResponse_ConsensusParams)},
  { 345, -1, sizeof(::api_pb::GenesisResponse_AppState_Validators)},
  { 354, -1, sizeof(::api_pb::GenesisResponse_AppState_Candidate_Stake)},
  { 363, -1, sizeof(::api_pb::GenesisResponse_AppState_Candidate)},
  { 380, -1, sizeof(::api_pb::GenesisResponse_AppState_Coin)},
  { 396, -1, sizeof(::api_pb::GenesisResponse_AppState_FrozenFund)},
  { 407, -1, sizeof(::api_pb::GenesisResponse_AppState_Waitlist)},
  { 416, -1, sizeof(::api_pb::GenesisResponse_AppState_Account_Balance)},
  { 423, -1, sizeof(::api_pb::GenesisResponse_AppState_Account_MultisigData)},
  { 431, -1, sizeof(::api_pb::GenesisResponse_AppState_Account)},
  { 440, -1, sizeof(::api_pb::GenesisResponse_AppState_HaltBlock)},
  { 447, -1, sizeof(::api_pb::GenesisResponse_AppState_Pool)},
  { 457, -1, sizeof(::api_pb::GenesisResponse_AppState_Commission)},
  { 508, -1, sizeof(::api_pb::GenesisResponse_AppState_CommissionVote)},
  { 516, -1, sizeof(::api_pb::GenesisResponse_AppState)},
  { 537, -1, sizeof(::api_pb::GenesisResponse)},
  { 548, -1, sizeof(::api_pb::MinGasPriceResponse)},
  { 554, -1, sizeof(::api_pb::BlockRequest)},
  { 563, -1, sizeof(::api_pb::BlockResponse_Validator)},
  { 570, -1, sizeof(::api_pb::BlockResponse_Evidence)},
  { 576, -1, sizeof(::api_pb::BlockResponse)},
  { 593, -1, sizeof(::api_pb::MaxGasPriceRequest)},
  { 599, -1, sizeof(::api_pb::MaxGasPriceResponse)},
  { 605, -1, sizeof(::api_pb::AddressRequest)},
  { 613, -1, sizeof(::api_pb::AddressBalance)},
  { 621, -1, sizeof(::api_pb::AddressDelegatedBalance)},
  { 630, -1, sizeof(::api_pb::AddressResponse)},
  { 641, -1, sizeof(::api_pb::Multisig)},
  { 649, -1, sizeof(::api_pb::AddressesRequest)},
  { 657, -1, sizeof(::api_pb::AddressesResponse_Result)},
  { 668, 675, sizeof(::api_pb::AddressesResponse_AddressesEntry_DoNotUse)},
  { 677, -1, sizeof(::api_pb::AddressesResponse)},
  { 683, -1, sizeof(::api_pb::CandidateRequest)},
  { 691, -1, sizeof(::api_pb::CandidateResponse_Stake)},
  { 700, -1, sizeof(::api_pb::CandidateResponse)},
  { 719, -1, sizeof(::api_pb::CandidatesRequest)},
  { 728, -1, sizeof(::api_pb::CandidatesResponse)},
  { 734, -1, sizeof(::api_pb::CoinIdRequest)},
  { 741, -1, sizeof(::api_pb::CoinInfoRequest)},
  { 748, -1, sizeof(::api_pb::CoinInfoResponse)},
  { 763, -1, sizeof(::api_pb::SendTransactionResponse)},
  { 771, -1, sizeof(::api_pb::SendTransactionRequest)},
  { 777, 784, sizeof(::api_pb::TransactionResponse_TagsEntry_DoNotUse)},
  { 786, -1, sizeof(::api_pb::TransactionResponse)},
  { 808, -1, sizeof(::api_pb::TransactionRequest)},
  { 814, -1, sizeof(::api_pb::TransactionsResponse)},
  { 820, -1, sizeof(::api_pb::TransactionsRequest)},
  { 828, -1, sizeof(::api_pb::EstimateCoinBuyRequest)},
  { 846, -1, sizeof(::api_pb::EstimateCoinBuyResponse)},
  { 854, -1, sizeof(::api_pb::EstimateCoinSellRequest)},
  { 872, -1, sizeof(::api_pb::EstimateCoinSellResponse)},
  { 880, -1, sizeof(::api_pb::EstimateCoinSellAllRequest)},
  { 896, -1, sizeof(::api_pb::EstimateCoinSellAllResponse)},
  { 903, -1, sizeof(::api_pb::EstimateTxCommissionRequest)},
  { 910, -1, sizeof(::api_pb::EstimateTxCommissionResponse)},
  { 916, -1, sizeof(::api_pb::EventsRequest)},
  { 923, -1, sizeof(::api_pb::EventsResponse)},
  { 929, -1, sizeof(::api_pb::MissedBlocksRequest)},
  { 936, -1, sizeof(::api_pb::MissedBlocksResponse)},
  { 943, -1, sizeof(::api_pb::UnconfirmedTxsResponse)},
  { 952, -1, sizeof(::api_pb::UnconfirmedTxsRequest)},
  { 958, -1, sizeof(::api_pb::ValidatorsRequest)},
  { 964, -1, sizeof(::api_pb::ValidatorsResponse_Result)},
  { 971, -1, sizeof(::api_pb::ValidatorsResponse)},
  { 977, -1, sizeof(::api_pb::SubscribeRequest)},
  { 983, -1, sizeof(::api_pb::SubscribeResponse_Event)},
  { 990, -1, sizeof(::api_pb::SubscribeResponse)},
  { 998, -1, sizeof(::api_pb::HaltsRequest)},
  { 1004, -1, sizeof(::api_pb::HaltsResponse)},
  { 1010, -1, sizeof(::api_pb::FrozenRequest)},
  { 1018, -1, sizeof(::api_pb::FrozenResponse_Frozen)},
  { 1028, -1, sizeof(::api_pb::FrozenResponse)},
  { 1034, -1, sizeof(::api_pb::WaitListRequest)},
  { 1042, -1, sizeof(::api_pb::WaitListResponse_Wait)},
  { 1050, -1, sizeof(::api_pb::WaitListResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_Coin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CommissionVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CommissionVotesResponse_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CommissionVotesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_LimitOrderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_LimitOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_LimitOrdersOfPoolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_LimitOrdersOfPoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_LimitOrdersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_LimitOrdersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UpdateVotesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UpdateVotesResponse_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UpdateVotesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_VersionNetworkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_VersionNetworkResponse_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_VersionNetworkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_PriceCommissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_PriceCommissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SwapPoolRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SwapPoolResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SwapPoolProviderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NodeInfo_ProtocolVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NodeInfo_Other_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NetInfoResponse_Peer_ConnectionStatus_Monitor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NetInfoResponse_Peer_ConnectionStatus_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NetInfoResponse_Peer_ConnectionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NetInfoResponse_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_NetInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_StatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_ConsensusParams_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_ConsensusParams_Evidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_ConsensusParams_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_ConsensusParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Validators_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Candidate_Stake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Candidate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Coin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_FrozenFund_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Waitlist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Account_Balance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Account_MultisigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_HaltBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Pool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_Commission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_CommissionVote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_AppState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_GenesisResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MinGasPriceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BlockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BlockResponse_Validator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BlockResponse_Evidence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_BlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MaxGasPriceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MaxGasPriceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressDelegatedBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_Multisig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressesResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressesResponse_AddressesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_AddressesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CandidateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CandidateResponse_Stake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CandidateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CandidatesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CandidatesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CoinIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CoinInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_CoinInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SendTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SendTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_TransactionResponse_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_TransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_TransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_TransactionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_TransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateCoinBuyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateCoinBuyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateCoinSellRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateCoinSellResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateCoinSellAllRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateCoinSellAllResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateTxCommissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EstimateTxCommissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_EventsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MissedBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_MissedBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UnconfirmedTxsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UnconfirmedTxsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_ValidatorsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_ValidatorsResponse_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_ValidatorsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SubscribeResponse_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_HaltsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_HaltsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_FrozenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_FrozenResponse_Frozen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_FrozenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_WaitListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_WaitListResponse_Wait_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_WaitListResponse_default_instance_),
};

const char descriptor_table_protodef_resources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017resources.proto\022\006api_pb\032\034google/protob"
  "uf/struct.proto\032\031google/protobuf/any.pro"
  "to\032\036google/protobuf/wrappers.proto\032.prot"
  "oc-gen-openapiv2/options/annotations.pro"
  "to\"Q\n\004Coin\022\016\n\002id\030\001 \001(\004R\002id\022\026\n\006symbol\030\002 \001"
  "(\tR\006symbol:!\222A\0362\034{\"id\": \"0\", \"symbol\": \""
  "BIP\"}\"\364\001\n\rBlocksRequest\0226\n\013from_height\030\001"
  " \001(\004B\025\222A\022\322\001\013from_height\232\002\001\003R\nfromHeight\022"
  "0\n\tto_height\030\002 \001(\004B\023\222A\020\322\001\tto_height\232\002\001\003R"
  "\010toHeight\022*\n\006fields\030\003 \003(\0162\022.api_pb.Block"
  "FieldR\006fields\022)\n\nfailed_txs\030\004 \001(\010B\n\222A\007:\005"
  "falseR\tfailedTxs\022\"\n\006events\030\005 \001(\010B\n\222A\007:\005f"
  "alseR\006events\"\?\n\016BlocksResponse\022-\n\006blocks"
  "\030\001 \003(\0132\025.api_pb.BlockResponseR\006blocks\"i\n"
  "\026CommissionVotesRequest\022.\n\016target_versio"
  "n\030\001 \001(\004B\007\222A\004\232\002\001\003R\rtargetVersion\022\037\n\006heigh"
  "t\030\002 \001(\004B\007\222A\004\232\002\001\003R\006height\"\265\001\n\027CommissionV"
  "otesResponse\022:\n\005votes\030\001 \003(\0132$.api_pb.Com"
  "missionVotesResponse.VoteR\005votes\032^\n\004Vote"
  "\0225\n\005price\030\002 \001(\0132\037.api_pb.PriceCommission"
  "ResponseR\005price\022\037\n\013public_keys\030\001 \003(\tR\npu"
  "blicKeys\"X\n\021LimitOrderRequest\022\"\n\010order_i"
  "d\030\001 \001(\004B\007\222A\004\232\002\001\003R\007orderId\022\037\n\006height\030\002 \001("
  "\004B\007\222A\004\232\002\001\003R\006height\"\364\001\n\022LimitOrderRespons"
  "e\022\016\n\002id\030\007 \001(\004R\002id\022)\n\tcoin_sell\030\001 \001(\0132\014.a"
  "pi_pb.CoinR\010coinSell\022\'\n\010coin_buy\030\002 \001(\0132\014"
  ".api_pb.CoinR\007coinBuy\022\033\n\twant_sell\030\003 \001(\t"
  "R\010wantSell\022\031\n\010want_buy\030\004 \001(\tR\007wantBuy\022\024\n"
  "\005price\030\010 \001(\tR\005price\022\024\n\005owner\030\005 \001(\tR\005owne"
  "r\022\026\n\006height\030\006 \001(\004R\006height\"\243\001\n\030LimitOrder"
  "sOfPoolRequest\022$\n\tsell_coin\030\001 \001(\004B\007\222A\004\232\002"
  "\001\003R\010sellCoin\022\"\n\010buy_coin\030\002 \001(\004B\007\222A\004\232\002\001\003R"
  "\007buyCoin\022\034\n\005limit\030\003 \001(\005B\006\222A\003:\0013R\005limit\022\037"
  "\n\006height\030\004 \001(\004B\007\222A\004\232\002\001\003R\006height\"n\n\031Limit"
  "OrdersOfPoolResponse\022\035\n\npool_price\030\002 \001(\t"
  "R\tpoolPrice\0222\n\006orders\030\001 \003(\0132\032.api_pb.Lim"
  "itOrderResponseR\006orders\"G\n\022LimitOrdersRe"
  "quest\022\020\n\003ids\030\001 \003(\004R\003ids\022\037\n\006height\030\002 \001(\004B"
  "\007\222A\004\232\002\001\003R\006height\"I\n\023LimitOrdersResponse\022"
  "2\n\006orders\030\001 \003(\0132\032.api_pb.LimitOrderRespo"
  "nseR\006orders\"e\n\022UpdateVotesRequest\022.\n\016tar"
  "get_version\030\001 \001(\004B\007\222A\004\232\002\001\003R\rtargetVersio"
  "n\022\037\n\006height\030\002 \001(\004B\007\222A\004\232\002\001\003R\006height\"\220\001\n\023U"
  "pdateVotesResponse\0226\n\005votes\030\001 \003(\0132 .api_"
  "pb.UpdateVotesResponse.VoteR\005votes\032A\n\004Vo"
  "te\022\030\n\007version\030\002 \001(\tR\007version\022\037\n\013public_k"
  "eys\030\001 \003(\tR\npublicKeys\"\027\n\025VersionNetworkR"
  "equest\"\255\001\n\026VersionNetworkResponse\022\030\n\007cur"
  "rent\030\001 \001(\tR\007current\022B\n\010versions\030\003 \003(\0132&."
  "api_pb.VersionNetworkResponse.VersionR\010v"
  "ersions\0325\n\007Version\022\022\n\004name\030\001 \001(\tR\004name\022\026"
  "\n\006height\030\002 \001(\004R\006height\"9\n\026PriceCommissio"
  "nRequest\022\037\n\006height\030\001 \001(\004B\007\222A\004\232\002\001\003R\006heigh"
  "t\"\203\016\n\027PriceCommissionResponse\022 \n\004coin\030\003 "
  "\001(\0132\014.api_pb.CoinR\004coin\022!\n\014payload_byte\030"
  "\004 \001(\tR\013payloadByte\022\022\n\004send\030\005 \001(\tR\004send\022\035"
  "\n\nbuy_bancor\030& \001(\tR\tbuyBancor\022\037\n\013sell_ba"
  "ncor\030\' \001(\tR\nsellBancor\022&\n\017sell_all_banco"
  "r\030( \001(\tR\rsellAllBancor\022\"\n\rbuy_pool_base\030"
  ") \001(\tR\013buyPoolBase\022$\n\016buy_pool_delta\0305 \001"
  "(\tR\014buyPoolDelta\022$\n\016sell_pool_base\030* \001(\t"
  "R\014sellPoolBase\022&\n\017sell_pool_delta\0306 \001(\tR"
  "\rsellPoolDelta\022+\n\022sell_all_pool_base\030+ \001"
  "(\tR\017sellAllPoolBase\022-\n\023sell_all_pool_del"
  "ta\0307 \001(\tR\020sellAllPoolDelta\022%\n\016create_tic"
  "ker3\030\007 \001(\tR\rcreateTicker3\022%\n\016create_tick"
  "er4\030\010 \001(\tR\rcreateTicker4\022%\n\016create_ticke"
  "r5\030\t \001(\tR\rcreateTicker5\022%\n\016create_ticker"
  "6\030\n \001(\tR\rcreateTicker6\022*\n\021create_ticker7"
  "_10\030\013 \001(\tR\017createTicker710\022\037\n\013create_coi"
  "n\030\" \001(\tR\ncreateCoin\022!\n\014create_token\030# \001("
  "\tR\013createToken\022#\n\rrecreate_coin\030$ \001(\tR\014r"
  "ecreateCoin\022%\n\016recreate_token\030% \001(\tR\rrec"
  "reateToken\022+\n\021declare_candidacy\030\r \001(\tR\020d"
  "eclareCandidacy\022\032\n\010delegate\030\016 \001(\tR\010deleg"
  "ate\022\026\n\006unbond\030\017 \001(\tR\006unbond\022!\n\014redeem_ch"
  "eck\030\020 \001(\tR\013redeemCheck\022(\n\020set_candidate_"
  "on\030, \001(\tR\016setCandidateOn\022*\n\021set_candidat"
  "e_off\030- \001(\tR\017setCandidateOff\022\'\n\017create_m"
  "ultisig\030\022 \001(\tR\016createMultisig\022%\n\016multise"
  "nd_base\0303 \001(\tR\rmultisendBase\022\'\n\017multisen"
  "d_delta\0304 \001(\tR\016multisendDelta\022%\n\016edit_ca"
  "ndidate\030\024 \001(\tR\reditCandidate\022$\n\016set_halt"
  "_block\030\025 \001(\tR\014setHaltBlock\022*\n\021edit_ticke"
  "r_owner\030\026 \001(\tR\017editTickerOwner\022#\n\redit_m"
  "ultisig\030\027 \001(\tR\014editMultisig\0229\n\031edit_cand"
  "idate_public_key\030\031 \001(\tR\026editCandidatePub"
  "licKey\022(\n\020create_swap_pool\0300 \001(\tR\016create"
  "SwapPool\022#\n\radd_liquidity\0301 \001(\tR\014addLiqu"
  "idity\022)\n\020remove_liquidity\0302 \001(\tR\017removeL"
  "iquidity\022:\n\031edit_candidate_commission\030\034 "
  "\001(\tR\027editCandidateCommission\022\035\n\nmint_tok"
  "en\030. \001(\tR\tmintToken\022\035\n\nburn_token\030/ \001(\tR"
  "\tburnToken\022\'\n\017vote_commission\030\037 \001(\tR\016vot"
  "eCommission\022\037\n\013vote_update\030  \001(\tR\nvoteUp"
  "date\022\033\n\tfailed_tx\0308 \001(\tR\010failedTx\022&\n\017add"
  "_limit_order\0309 \001(\tR\raddLimitOrder\022,\n\022rem"
  "ove_limit_order\030: \001(\tR\020removeLimitOrder\""
  "p\n\017SwapPoolRequest\022\035\n\005coin0\030\001 \001(\004B\007\222A\004\232\002"
  "\001\003R\005coin0\022\035\n\005coin1\030\002 \001(\004B\007\222A\004\232\002\001\003R\005coin1"
  "\022\037\n\006height\030\004 \001(\004B\007\222A\004\232\002\001\003R\006height\"z\n\020Swa"
  "pPoolResponse\022\024\n\005price\030\004 \001(\tR\005price\022\030\n\007a"
  "mount0\030\001 \001(\tR\007amount0\022\030\n\007amount1\030\002 \001(\tR\007"
  "amount1\022\034\n\tliquidity\030\003 \001(\tR\tliquidity\"\224\001"
  "\n\027SwapPoolProviderRequest\022\035\n\005coin0\030\001 \001(\004"
  "B\007\222A\004\232\002\001\003R\005coin0\022\035\n\005coin1\030\002 \001(\004B\007\222A\004\232\002\001\003"
  "R\005coin1\022\032\n\010provider\030\003 \001(\tR\010provider\022\037\n\006h"
  "eight\030\004 \001(\004B\007\222A\004\232\002\001\003R\006height\"\262\003\n\010NodeInf"
  "o\022K\n\020protocol_version\030\010 \001(\0132 .api_pb.Nod"
  "eInfo.ProtocolVersionR\017protocolVersion\022\016"
  "\n\002id\030\001 \001(\tR\002id\022\037\n\013listen_addr\030\002 \001(\tR\nlis"
  "tenAddr\022\030\n\007network\030\003 \001(\tR\007network\022\030\n\007ver"
  "sion\030\004 \001(\tR\007version\022\032\n\010channels\030\005 \001(\tR\010c"
  "hannels\022\030\n\007moniker\030\006 \001(\tR\007moniker\022,\n\005oth"
  "er\030\007 \001(\0132\026.api_pb.NodeInfo.OtherR\005other\032"
  "K\n\017ProtocolVersion\022\020\n\003p2p\030\003 \001(\004R\003p2p\022\024\n\005"
  "block\030\001 \001(\004R\005block\022\020\n\003app\030\002 \001(\004R\003app\032C\n\005"
  "Other\022\031\n\010tx_index\030\002 \001(\tR\007txIndex\022\037\n\013rpc_"
  "address\030\001 \001(\tR\nrpcAddress\"\224\n\n\017NetInfoRes"
  "ponse\022\034\n\tlistening\030\004 \001(\010R\tlistening\022\034\n\tl"
  "isteners\030\001 \003(\tR\tlisteners\022\037\n\013count_peers"
  "\030\002 \001(\003R\ncountPeers\0222\n\005peers\030\003 \003(\0132\034.api_"
  "pb.NetInfoResponse.PeerR\005peers\032\357\010\n\004Peer\022"
  "U\n\023latest_block_height\030\005 \001(\0132\034.google.pr"
  "otobuf.UInt64ValueB\007\222A\004\232\002\001\003R\021latestBlock"
  "Height\022-\n\tnode_info\030\004 \001(\0132\020.api_pb.NodeI"
  "nfoR\010nodeInfo\022\037\n\013is_outbound\030\001 \001(\010R\nisOu"
  "tbound\022Z\n\021connection_status\030\002 \001(\0132-.api_"
  "pb.NetInfoResponse.Peer.ConnectionStatus"
  "R\020connectionStatus\022\033\n\tremote_ip\030\003 \001(\tR\010r"
  "emoteIp\032\306\006\n\020ConnectionStatus\022\032\n\010duration"
  "\030\004 \001(\004R\010duration\022W\n\013SendMonitor\030\001 \001(\01325."
  "api_pb.NetInfoResponse.Peer.ConnectionSt"
  "atus.MonitorR\013SendMonitor\022W\n\013RecvMonitor"
  "\030\002 \001(\01325.api_pb.NetInfoResponse.Peer.Con"
  "nectionStatus.MonitorR\013RecvMonitor\022Q\n\010ch"
  "annels\030\003 \003(\01325.api_pb.NetInfoResponse.Pe"
  "er.ConnectionStatus.ChannelR\010channels\032\333\002"
  "\n\007Monitor\022\026\n\006active\030\r \001(\010R\006active\022\024\n\005sta"
  "rt\030\001 \001(\tR\005start\022\032\n\010duration\030\002 \001(\003R\010durat"
  "ion\022\022\n\004idle\030\003 \001(\003R\004idle\022\024\n\005bytes\030\004 \001(\003R\005"
  "bytes\022\030\n\007samples\030\005 \001(\003R\007samples\022\033\n\tinst_"
  "rate\030\006 \001(\003R\010instRate\022\031\n\010cur_rate\030\007 \001(\003R\007"
  "curRate\022\031\n\010avg_rate\030\010 \001(\003R\007avgRate\022\033\n\tpe"
  "ak_rate\030\t \001(\003R\010peakRate\022\033\n\tbytes_rem\030\n \001"
  "(\003R\010bytesRem\022\031\n\010time_rem\030\013 \001(\003R\007timeRem\022"
  "\032\n\010progress\030\014 \001(\004R\010progress\032\262\001\n\007Channel\022"
  "\016\n\002id\030\005 \001(\003R\002id\022.\n\023send_queue_capacity\030\001"
  " \001(\003R\021sendQueueCapacity\022&\n\017send_queue_si"
  "ze\030\002 \001(\003R\rsendQueueSize\022\032\n\010priority\030\003 \001("
  "\003R\010priority\022#\n\rrecently_sent\030\004 \001(\003R\014rece"
  "ntlySent\"\335\003\n\016StatusResponse\022\030\n\007version\030\010"
  " \001(\tR\007version\022\030\n\007network\030\013 \001(\tR\007network\022"
  "%\n\016initial_height\030\014 \001(\004R\rinitialHeight\022*"
  "\n\021latest_block_hash\030\001 \001(\tR\017latestBlockHa"
  "sh\022&\n\017latest_app_hash\030\002 \001(\tR\rlatestAppHa"
  "sh\022.\n\023latest_block_height\030\003 \001(\004R\021latestB"
  "lockHeight\022*\n\021latest_block_time\030\004 \001(\tR\017l"
  "atestBlockTime\022(\n\020keep_last_states\030\005 \001(\004"
  "R\016keepLastStates\022#\n\rtotal_slashed\030\n \001(\tR"
  "\014totalSlashed\022\037\n\013catching_up\030\006 \001(\010R\ncatc"
  "hingUp\022\035\n\npublic_key\030\007 \001(\tR\tpublicKey\022\027\n"
  "\007node_id\030\t \001(\tR\006nodeId\022\030\n\007moniker\030\r \001(\tR"
  "\007moniker\"\214,\n\017GenesisResponse\022!\n\014genesis_"
  "time\030\001 \001(\tR\013genesisTime\022\031\n\010chain_id\030\002 \001("
  "\tR\007chainId\022%\n\016initial_height\030\006 \001(\004R\rinit"
  "ialHeight\022R\n\020consensus_params\030\003 \001(\0132\'.ap"
  "i_pb.GenesisResponse.ConsensusParamsR\017co"
  "nsensusParams\022\031\n\010app_hash\030\004 \001(\tR\007appHash"
  "\022=\n\tapp_state\030\005 \001(\0132 .api_pb.GenesisResp"
  "onse.AppStateR\010appState\032\352\003\n\017ConsensusPar"
  "ams\022C\n\005block\030\001 \001(\0132-.api_pb.GenesisRespo"
  "nse.ConsensusParams.BlockR\005block\022L\n\010evid"
  "ence\030\002 \001(\01320.api_pb.GenesisResponse.Cons"
  "ensusParams.EvidenceR\010evidence\022O\n\tvalida"
  "tor\030\003 \001(\01321.api_pb.GenesisResponse.Conse"
  "nsusParams.ValidatorR\tvalidator\032_\n\005Block"
  "\022\033\n\tmax_bytes\030\001 \001(\003R\010maxBytes\022\027\n\007max_gas"
  "\030\002 \001(\003R\006maxGas\022 \n\014time_iota_ms\030\003 \001(\003R\nti"
  "meIotaMs\032a\n\010Evidence\022+\n\022max_age_num_bloc"
  "ks\030\001 \001(\003R\017maxAgeNumBlocks\022(\n\020max_age_dur"
  "ation\030\002 \001(\003R\016maxAgeDuration\032/\n\tValidator"
  "\022\"\n\rpub_key_types\030\001 \003(\tR\013pubKeyTypes\032\370%\n"
  "\010AppState\022\030\n\007version\030\023 \001(\tR\007version\022\022\n\004n"
  "ote\030\n \001(\tR\004note\022K\n\nvalidators\030\002 \003(\0132+.ap"
  "i_pb.GenesisResponse.AppState.Validators"
  "R\nvalidators\022J\n\ncandidates\030\003 \003(\0132*.api_p"
  "b.GenesisResponse.AppState.CandidateR\nca"
  "ndidates\022;\n\005coins\030\005 \003(\0132%.api_pb.Genesis"
  "Response.AppState.CoinR\005coins\022N\n\014frozen_"
  "funds\030\006 \003(\0132+.api_pb.GenesisResponse.App"
  "State.FrozenFundR\013frozenFunds\0222\n\025block_l"
  "ist_candidates\030\022 \003(\tR\023blockListCandidate"
  "s\022E\n\010waitlist\030\r \003(\0132).api_pb.GenesisResp"
  "onse.AppState.WaitlistR\010waitlist\022D\n\010acco"
  "unts\030\016 \003(\0132(.api_pb.GenesisResponse.AppS"
  "tate.AccountR\010accounts\022K\n\013halt_blocks\030\014 "
  "\003(\0132*.api_pb.GenesisResponse.AppState.Ha"
  "ltBlockR\nhaltBlocks\022;\n\005pools\030\017 \003(\0132%.api"
  "_pb.GenesisResponse.AppState.PoolR\005pools"
  "\022K\n\ncommission\030\020 \001(\0132+.api_pb.GenesisRes"
  "ponse.AppState.CommissionR\ncommission\022Z\n"
  "\020commission_votes\030\021 \003(\0132/.api_pb.Genesis"
  "Response.AppState.CommissionVoteR\017commis"
  "sionVotes\022\037\n\013used_checks\030\013 \003(\tR\nusedChec"
  "ks\022\027\n\007max_gas\030\007 \001(\004R\006maxGas\022#\n\rtotal_sla"
  "shed\030\010 \001(\tR\014totalSlashed\032\231\001\n\nValidators\022"
  "&\n\017total_bip_stake\030\004 \001(\tR\rtotalBipStake\022"
  "\035\n\npublic_key\030\001 \001(\tR\tpublicKey\022!\n\014accum_"
  "reward\030\002 \001(\tR\013accumReward\022!\n\014absent_time"
  "s\030\003 \001(\tR\013absentTimes\032\355\004\n\tCandidate\022\016\n\002id"
  "\030\n \001(\004R\002id\022%\n\016reward_address\030\001 \001(\tR\rrewa"
  "rdAddress\022#\n\rowner_address\030\002 \001(\tR\014ownerA"
  "ddress\022\'\n\017control_address\030\003 \001(\tR\016control"
  "Address\022&\n\017total_bip_stake\030\004 \001(\tR\rtotalB"
  "ipStake\022\035\n\npublic_key\030\005 \001(\tR\tpublicKey\022\036"
  "\n\ncommission\030\006 \001(\004R\ncommission\022H\n\006stakes"
  "\030\007 \003(\01320.api_pb.GenesisResponse.AppState"
  ".Candidate.StakeR\006stakes\022J\n\007updates\030\010 \003("
  "\01320.api_pb.GenesisResponse.AppState.Cand"
  "idate.StakeR\007updates\022\026\n\006status\030\t \001(\003R\006st"
  "atus\022!\n\014jailed_until\030\013 \001(\003R\013jailedUntil\022"
  "=\n\033last_edit_commission_height\030\014 \001(\003R\030la"
  "stEditCommissionHeight\032d\n\005Stake\022\024\n\005owner"
  "\030\004 \001(\tR\005owner\022\022\n\004coin\030\001 \001(\004R\004coin\022\024\n\005val"
  "ue\030\002 \001(\tR\005value\022\033\n\tbip_value\030\003 \001(\tR\010bipV"
  "alue\032\272\002\n\004Coin\022\016\n\002id\030\t \001(\004R\002id\022\022\n\004name\030\001 "
  "\001(\tR\004name\022\026\n\006symbol\030\002 \001(\tR\006symbol\022\026\n\006vol"
  "ume\030\003 \001(\tR\006volume\022\020\n\003crr\030\004 \001(\004R\003crr\022\030\n\007r"
  "eserve\030\005 \001(\tR\007reserve\022\035\n\nmax_supply\030\006 \001("
  "\tR\tmaxSupply\022\030\n\007version\030\007 \001(\004R\007version\022A"
  "\n\rowner_address\030\010 \001(\0132\034.google.protobuf."
  "StringValueR\014ownerAddress\022\032\n\010mintable\030\n "
  "\001(\010R\010mintable\022\032\n\010burnable\030\013 \001(\010R\010burnabl"
  "e\032\316\001\n\nFrozenFund\022\026\n\006height\030\005 \001(\004R\006height"
  "\022\030\n\007address\030\001 \001(\tR\007address\022A\n\rcandidate_"
  "key\030\002 \001(\0132\034.google.protobuf.StringValueR"
  "\014candidateKey\022!\n\014candidate_id\030\006 \001(\004R\013can"
  "didateId\022\022\n\004coin\030\003 \001(\004R\004coin\022\024\n\005value\030\004 "
  "\001(\tR\005value\032m\n\010Waitlist\022!\n\014candidate_id\030\001"
  " \001(\004R\013candidateId\022\024\n\005owner\030\002 \001(\tR\005owner\022"
  "\022\n\004coin\030\003 \001(\004R\004coin\022\024\n\005value\030\004 \001(\tR\005valu"
  "e\032\374\002\n\007Account\022\030\n\007address\030\001 \001(\tR\007address\022"
  "J\n\007balance\030\002 \003(\01320.api_pb.GenesisRespons"
  "e.AppState.Account.BalanceR\007balance\022\024\n\005n"
  "once\030\003 \001(\004R\005nonce\022Z\n\rmultisig_data\030\004 \001(\013"
  "25.api_pb.GenesisResponse.AppState.Accou"
  "nt.MultisigDataR\014multisigData\0323\n\007Balance"
  "\022\022\n\004coin\030\001 \001(\004R\004coin\022\024\n\005value\030\002 \001(\tR\005val"
  "ue\032d\n\014MultisigData\022\034\n\tthreshold\030\001 \001(\004R\tt"
  "hreshold\022\030\n\007weights\030\002 \003(\004R\007weights\022\034\n\tad"
  "dresses\030\003 \003(\tR\taddresses\032H\n\tHaltBlock\022\026\n"
  "\006height\030\001 \001(\004R\006height\022#\n\rcandidate_key\030\002"
  " \001(\tR\014candidateKey\032z\n\004Pool\022\024\n\005coin0\030\001 \001("
  "\004R\005coin0\022\024\n\005coin1\030\002 \001(\004R\005coin1\022\032\n\010reserv"
  "e0\030\003 \001(\tR\010reserve0\022\032\n\010reserve1\030\004 \001(\tR\010re"
  "serve1\022\016\n\002id\030\005 \001(\004R\002id\032\350\r\n\nCommission\022\022\n"
  "\004coin\030\003 \001(\004R\004coin\022!\n\014payload_byte\030\004 \001(\tR"
  "\013payloadByte\022\022\n\004send\030\005 \001(\tR\004send\022\035\n\nbuy_"
  "bancor\030& \001(\tR\tbuyBancor\022\037\n\013sell_bancor\030\'"
  " \001(\tR\nsellBancor\022&\n\017sell_all_bancor\030( \001("
  "\tR\rsellAllBancor\022\"\n\rbuy_pool_base\030) \001(\tR"
  "\013buyPoolBase\022$\n\016buy_pool_delta\0305 \001(\tR\014bu"
  "yPoolDelta\022$\n\016sell_pool_base\030* \001(\tR\014sell"
  "PoolBase\022&\n\017sell_pool_delta\0306 \001(\tR\rsellP"
  "oolDelta\022+\n\022sell_all_pool_base\030+ \001(\tR\017se"
  "llAllPoolBase\022-\n\023sell_all_pool_delta\0307 \001"
  "(\tR\020sellAllPoolDelta\022%\n\016create_ticker3\030\007"
  " \001(\tR\rcreateTicker3\022%\n\016create_ticker4\030\010 "
  "\001(\tR\rcreateTicker4\022%\n\016create_ticker5\030\t \001"
  "(\tR\rcreateTicker5\022%\n\016create_ticker6\030\n \001("
  "\tR\rcreateTicker6\022*\n\021create_ticker7_10\030\013 "
  "\001(\tR\017createTicker710\022\037\n\013create_coin\030\" \001("
  "\tR\ncreateCoin\022!\n\014create_token\030# \001(\tR\013cre"
  "ateToken\022#\n\rrecreate_coin\030$ \001(\tR\014recreat"
  "eCoin\022%\n\016recreate_token\030% \001(\tR\rrecreateT"
  "oken\022+\n\021declare_candidacy\030\r \001(\tR\020declare"
  "Candidacy\022\032\n\010delegate\030\016 \001(\tR\010delegate\022\026\n"
  "\006unbond\030\017 \001(\tR\006unbond\022!\n\014redeem_check\030\020 "
  "\001(\tR\013redeemCheck\022(\n\020set_candidate_on\030, \001"
  "(\tR\016setCandidateOn\022*\n\021set_candidate_off\030"
  "- \001(\tR\017setCandidateOff\022\'\n\017create_multisi"
  "g\030\022 \001(\tR\016createMultisig\022%\n\016multisend_bas"
  "e\0303 \001(\tR\rmultisendBase\022\'\n\017multisend_delt"
  "a\0304 \001(\tR\016multisendDelta\022%\n\016edit_candidat"
  "e\030\024 \001(\tR\reditCandidate\022$\n\016set_halt_block"
  "\030\025 \001(\tR\014setHaltBlock\022*\n\021edit_ticker_owne"
  "r\030\026 \001(\tR\017editTickerOwner\022#\n\redit_multisi"
  "g\030\027 \001(\tR\014editMultisig\0229\n\031edit_candidate_"
  "public_key\030\031 \001(\tR\026editCandidatePublicKey"
  "\022(\n\020create_swap_pool\0300 \001(\tR\016createSwapPo"
  "ol\022#\n\radd_liquidity\0301 \001(\tR\014addLiquidity\022"
  ")\n\020remove_liquidity\0302 \001(\tR\017removeLiquidi"
  "ty\022:\n\031edit_candidate_commission\030\034 \001(\tR\027e"
  "ditCandidateCommission\022\035\n\nmint_token\030. \001"
  "(\tR\tmintToken\022\035\n\nburn_token\030/ \001(\tR\tburnT"
  "oken\022\'\n\017vote_commission\030\037 \001(\tR\016voteCommi"
  "ssion\022\037\n\013vote_update\030  \001(\tR\nvoteUpdate\022\033"
  "\n\tfailed_tx\0308 \001(\tR\010failedTx\022&\n\017add_limit"
  "_order\0309 \001(\tR\raddLimitOrder\022,\n\022remove_li"
  "mit_order\030: \001(\tR\020removeLimitOrder\032\213\001\n\016Co"
  "mmissionVote\022\026\n\006height\030\001 \001(\004R\006height\022\024\n\005"
  "votes\030\002 \003(\tR\005votes\022K\n\ncommission\030\003 \001(\0132+"
  ".api_pb.GenesisResponse.AppState.Commiss"
  "ionR\ncommission\"9\n\023MinGasPriceResponse\022\""
  "\n\rmin_gas_price\030\003 \001(\004R\013minGasPrice\"\252\001\n\014B"
  "lockRequest\022\037\n\006height\030\001 \001(\004B\007\222A\004\232\002\001\003R\006he"
  "ight\022*\n\006fields\030\002 \003(\0162\022.api_pb.BlockField"
  "R\006fields\022)\n\nfailed_txs\030\003 \001(\010B\n\222A\007:\005false"
  "R\tfailedTxs\022\"\n\006events\030\004 \001(\010B\n\222A\007:\005falseR"
  "\006events\"\330\004\n\rBlockResponse\022\022\n\004hash\030\001 \001(\tR"
  "\004hash\022\026\n\006height\030\002 \001(\004R\006height\022\022\n\004time\030\003 "
  "\001(\tR\004time\022+\n\021transaction_count\030\004 \001(\004R\020tr"
  "ansactionCount\022\?\n\014transactions\030\006 \003(\0132\033.a"
  "pi_pb.TransactionResponseR\014transactions\022"
  "!\n\014block_reward\030\007 \001(\tR\013blockReward\022\022\n\004si"
  "ze\030\010 \001(\004R\004size\022\032\n\010proposer\030\t \001(\tR\010propos"
  "er\022\?\n\nvalidators\030\n \003(\0132\037.api_pb.BlockRes"
  "ponse.ValidatorR\nvalidators\022:\n\010evidence\030"
  "\r \001(\0132\036.api_pb.BlockResponse.EvidenceR\010e"
  "vidence\022\026\n\006missed\030\014 \003(\tR\006missed\022,\n\006event"
  "s\030\016 \003(\0132\024.google.protobuf.AnyR\006events\032B\n"
  "\tValidator\022\035\n\npublic_key\030\001 \001(\tR\tpublicKe"
  "y\022\026\n\006signed\030\002 \001(\010R\006signed\032\?\n\010Evidence\0223\n"
  "\010evidence\030\001 \003(\0132\027.google.protobuf.Struct"
  "R\010evidence\"5\n\022MaxGasPriceRequest\022\037\n\006heig"
  "ht\030\001 \001(\004B\007\222A\004\232\002\001\003R\006height\"9\n\023MaxGasPrice"
  "Response\022\"\n\rmax_gas_price\030\003 \001(\004R\013maxGasP"
  "rice\"u\n\016AddressRequest\022\030\n\007address\030\001 \001(\tR"
  "\007address\022\037\n\006height\030\002 \001(\004B\007\222A\004\232\002\001\003R\006heigh"
  "t\022(\n\tdelegated\030\004 \001(\010B\n\222A\007:\005falseR\tdelega"
  "ted\"e\n\016AddressBalance\022 \n\004coin\030\001 \001(\0132\014.ap"
  "i_pb.CoinR\004coin\022\024\n\005value\030\002 \001(\tR\005value\022\033\n"
  "\tbip_value\030\003 \001(\tR\010bipValue\"\234\001\n\027AddressDe"
  "legatedBalance\022 \n\004coin\030\001 \001(\0132\014.api_pb.Co"
  "inR\004coin\022\024\n\005value\030\002 \001(\tR\005value\022\033\n\tbip_va"
  "lue\030\003 \001(\tR\010bipValue\022,\n\022delegate_bip_valu"
  "e\030\004 \001(\tR\020delegateBipValue\"\250\002\n\017AddressRes"
  "ponse\0220\n\007balance\030\001 \003(\0132\026.api_pb.AddressB"
  "alanceR\007balance\022=\n\tdelegated\030\003 \003(\0132\037.api"
  "_pb.AddressDelegatedBalanceR\tdelegated\022,"
  "\n\005total\030\004 \003(\0132\026.api_pb.AddressBalanceR\005t"
  "otal\022+\n\021transaction_count\030\002 \001(\004R\020transac"
  "tionCount\022\033\n\tbip_value\030\005 \001(\tR\010bipValue\022,"
  "\n\010multisig\030\006 \001(\0132\020.api_pb.MultisigR\010mult"
  "isig\"`\n\010Multisig\022\034\n\tthreshold\030\001 \001(\004R\tthr"
  "eshold\022\030\n\007weights\030\002 \003(\004R\007weights\022\034\n\taddr"
  "esses\030\003 \003(\tR\taddresses\"\214\001\n\020AddressesRequ"
  "est\022-\n\taddresses\030\001 \003(\tB\017\222A\014\322\001\taddressesR"
  "\taddresses\022\037\n\006height\030\002 \001(\004B\007\222A\004\232\002\001\003R\006hei"
  "ght\022(\n\tdelegated\030\004 \001(\010B\n\222A\007:\005falseR\tdele"
  "gated\"\335\003\n\021AddressesResponse\022F\n\taddresses"
  "\030\003 \003(\0132(.api_pb.AddressesResponse.Addres"
  "sesEntryR\taddresses\032\237\002\n\006Result\0220\n\007balanc"
  "e\030\002 \003(\0132\026.api_pb.AddressBalanceR\007balance"
  "\022=\n\tdelegated\030\006 \003(\0132\037.api_pb.AddressDele"
  "gatedBalanceR\tdelegated\022,\n\005total\030\004 \003(\0132\026"
  ".api_pb.AddressBalanceR\005total\022+\n\021transac"
  "tion_count\030\003 \001(\004R\020transactionCount\022\033\n\tbi"
  "p_value\030\005 \001(\tR\010bipValue\022,\n\010multisig\030\007 \001("
  "\0132\020.api_pb.MultisigR\010multisig\032^\n\016Address"
  "esEntry\022\020\n\003key\030\001 \001(\tR\003key\0226\n\005value\030\002 \001(\013"
  "2 .api_pb.AddressesResponse.ResultR\005valu"
  "e:\0028\001\"\206\001\n\020CandidateRequest\022\035\n\npublic_key"
  "\030\001 \001(\tR\tpublicKey\022\037\n\006height\030\002 \001(\004B\007\222A\004\232\002"
  "\001\003R\006height\0222\n\017not_show_stakes\030\004 \001(\010B\n\222A\007"
  ":\005falseR\rnotShowStakes\"\263\005\n\021CandidateResp"
  "onse\022\016\n\002id\030\016 \001(\004R\002id\022%\n\016reward_address\030\001"
  " \001(\tR\rrewardAddress\022#\n\rowner_address\030\n \001"
  "(\tR\014ownerAddress\022\'\n\017control_address\030\013 \001("
  "\tR\016controlAddress\022\037\n\013total_stake\030\002 \001(\tR\n"
  "totalStake\022\035\n\npublic_key\030\003 \001(\tR\tpublicKe"
  "y\022\036\n\ncommission\030\004 \001(\004R\ncommission\022;\n\nuse"
  "d_slots\030\007 \001(\0132\034.google.protobuf.UInt64Va"
  "lueR\tusedSlots\022;\n\nuniq_users\030\010 \001(\0132\034.goo"
  "gle.protobuf.UInt64ValueR\tuniqUsers\0229\n\tm"
  "in_stake\030\t \001(\0132\034.google.protobuf.StringV"
  "alueR\010minStake\0227\n\006stakes\030\005 \003(\0132\037.api_pb."
  "CandidateResponse.StakeR\006stakes\022\026\n\006statu"
  "s\030\006 \001(\004R\006status\022\034\n\tvalidator\030\014 \001(\010R\tvali"
  "dator\022!\n\014jailed_until\030\r \001(\004R\013jailedUntil"
  "\032r\n\005Stake\022\024\n\005owner\030\001 \001(\tR\005owner\022 \n\004coin\030"
  "\002 \001(\0132\014.api_pb.CoinR\004coin\022\024\n\005value\030\003 \001(\t"
  "R\005value\022\033\n\tbip_value\030\004 \001(\tR\010bipValue\"\232\002\n"
  "\021CandidatesRequest\022\037\n\006height\030\001 \001(\004B\007\222A\004\232"
  "\002\001\003R\006height\0221\n\016include_stakes\030\002 \001(\010B\n\222A\007"
  ":\005falseR\rincludeStakes\0222\n\017not_show_stake"
  "s\030\004 \001(\010B\n\222A\007:\005falseR\rnotShowStakes\022A\n\006st"
  "atus\030\003 \001(\0162).api_pb.CandidatesRequest.Ca"
  "ndidateStatusR\006status\":\n\017CandidateStatus"
  "\022\007\n\003all\020\000\022\007\n\003off\020\001\022\006\n\002on\020\002\022\r\n\tvalidator\020"
  "\003\"O\n\022CandidatesResponse\0229\n\ncandidates\030\003 "
  "\003(\0132\031.api_pb.CandidateResponseR\ncandidat"
  "es\"Q\n\rCoinIdRequest\022\037\n\006height\030\001 \001(\004B\007\222A\004"
  "\232\002\001\003R\006height\022\016\n\002id\030\002 \001(\004R\002id:\017\222A\0142\n{\"id\""
  ":\"0\"}\"J\n\017CoinInfoRequest\022\037\n\006height\030\001 \001(\004"
  "B\007\222A\004\232\002\001\003R\006height\022\026\n\006symbol\030\002 \001(\tR\006symbo"
  "l\"\327\003\n\020CoinInfoResponse\022\016\n\002id\030\006 \001(\004R\002id\022\022"
  "\n\004name\030\001 \001(\tR\004name\022\026\n\006symbol\030\002 \001(\tR\006symb"
  "ol\022\026\n\006volume\030\003 \001(\tR\006volume\022\020\n\003crr\030\004 \001(\004R"
  "\003crr\022\'\n\017reserve_balance\030\005 \001(\tR\016reserveBa"
  "lance\022\035\n\nmax_supply\030\010 \001(\tR\tmaxSupply\022A\n\r"
  "owner_address\030\007 \001(\0132\034.google.protobuf.St"
  "ringValueR\014ownerAddress\022\032\n\010mintable\030\t \001("
  "\010R\010mintable\022\032\n\010burnable\030\n \001(\010R\010burnable:"
  "\231\001\222A\225\0012\222\001{\"id\":\"0\",\"name\":\"\",\"symbol\":\"B"
  "IP\",\"volume\":\"0\",\"crr\":\"0\",\"reserve_bala"
  "nce\":\"0\",\"max_supply\":\"10000000000000000"
  "000000000000\",\"owner_address\":null}\"\274\001\n\027"
  "SendTransactionResponse\022\022\n\004code\030\001 \001(\004R\004c"
  "ode\022\020\n\003log\030\003 \001(\tR\003log\022\022\n\004hash\030\004 \001(\tR\004has"
  "h:g\222Ad2b{\"code\":\"0\",\"log\":\"\", \"hash\":\"Mt"
  "6019f740983dc43b53ea9c37891af0c9ce725139"
  "9ebaafc4ea56d68d665adfcb\"}\"(\n\026SendTransa"
  "ctionRequest\022\016\n\002tx\030\001 \001(\tR\002tx\"\306\t\n\023Transac"
  "tionResponse\022\022\n\004hash\030\001 \001(\tR\004hash\022\025\n\006raw_"
  "tx\030\002 \001(\tR\005rawTx\022\026\n\006height\030\003 \001(\004R\006height\022"
  "\024\n\005index\030\004 \001(\004R\005index\022\022\n\004from\030\005 \001(\tR\004fro"
  "m\022\024\n\005nonce\030\006 \001(\004R\005nonce\022\020\n\003gas\030\007 \001(\004R\003ga"
  "s\022\033\n\tgas_price\030\010 \001(\004R\010gasPrice\022\'\n\010gas_co"
  "in\030\t \001(\0132\014.api_pb.CoinR\007gasCoin\022\031\n\010type_"
  "hex\030\021 \001(\tR\007typeHex\022\022\n\004type\030\n \001(\004R\004type\022("
  "\n\004data\030\013 \001(\0132\024.google.protobuf.AnyR\004data"
  "\022\030\n\007payload\030\014 \001(\014R\007payload\022!\n\014service_da"
  "ta\030\020 \001(\014R\013serviceData\0229\n\004tags\030\r \003(\0132%.ap"
  "i_pb.TransactionResponse.TagsEntryR\004tags"
  "\022\022\n\004code\030\016 \001(\004R\004code\022\020\n\003log\030\017 \001(\tR\003log\0327"
  "\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002"
  " \001(\tR\005value:\0028\001\"\243\005\n\004Type\022\013\n\007unknown\020\000\022\010\n"
  "\004Send\020\001\022\014\n\010SellCoin\020\002\022\017\n\013SellAllCoin\020\003\022\013"
  "\n\007BuyCoin\020\004\022\016\n\nCreateCoin\020\005\022\024\n\020DeclareCa"
  "ndidacy\020\006\022\014\n\010Delegate\020\007\022\n\n\006Unbond\020\010\022\017\n\013R"
  "edeemCheck\020\t\022\026\n\022SetCandidateOnline\020\n\022\027\n\023"
  "SetCandidateOffline\020\013\022\022\n\016CreateMultisig\020"
  "\014\022\r\n\tMultisend\020\r\022\021\n\rEditCandidate\020\016\022\020\n\014S"
  "etHaltBlock\020\017\022\020\n\014RecreateCoin\020\020\022\021\n\rEditC"
  "oinOwner\020\021\022\020\n\014EditMultisig\020\022\022\r\n\tPriceVot"
  "e\020\023\022\032\n\026EditCandidatePublicKey\020\024\022\020\n\014AddLi"
  "quidity\020\025\022\023\n\017RemoveLiquidity\020\026\022\020\n\014SellSw"
  "apPool\020\027\022\017\n\013BuySwapPool\020\030\022\023\n\017SellAllSwap"
  "Pool\020\031\022\033\n\027EditCommissionCandidate\020\032\022\r\n\tM"
  "oveStake\020\033\022\r\n\tMintToken\020\034\022\r\n\tBurnToken\020\035"
  "\022\017\n\013CreateToken\020\036\022\021\n\rRecreateToken\020\037\022\022\n\016"
  "VoteCommission\020 \022\016\n\nVoteUpdate\020!\022\022\n\016Crea"
  "teSwapPool\020\"\022\021\n\rAddLimitOrder\020#\022\024\n\020Remov"
  "eLimitOrder\020$\"(\n\022TransactionRequest\022\022\n\004h"
  "ash\030\001 \001(\tR\004hash\"W\n\024TransactionsResponse\022"
  "\?\n\014transactions\030\003 \003(\0132\033.api_pb.Transacti"
  "onResponseR\014transactions\"|\n\023Transactions"
  "Request\022!\n\005query\030\001 \001(\tB\013\222A\010\322\001\005queryR\005que"
  "ry\022\036\n\004page\030\002 \001(\005B\n\222A\007:\0011\232\002\001\003R\004page\022\"\n\010pe"
  "r_page\030\003 \001(\005B\007\222A\004:\00230R\007perPage\"\335\003\n\026Estim"
  "ateCoinBuyRequest\022.\n\016coin_id_to_buy\030\001 \001("
  "\004B\007\222A\004\232\002\001\003H\000R\013coinIdToBuy\022 \n\013coin_to_buy"
  "\030\005 \001(\tH\000R\tcoinToBuy\0220\n\017coin_id_to_sell\030\002"
  " \001(\004B\007\222A\004\232\002\001\003H\001R\014coinIdToSell\022\"\n\014coin_to"
  "_sell\030\006 \001(\tH\001R\ncoinToSell\0224\n\014value_to_bu"
  "y\030\003 \001(\tB\022\222A\017\322\001\014value_to_buyR\nvalueToBuy\022"
  "\037\n\006height\030\004 \001(\004B\007\222A\004\232\002\001\003R\006height\0227\n\022coin"
  "_id_commission\030\t \001(\004B\007\222A\004\232\002\001\003H\002R\020coinIdC"
  "ommission\022)\n\017coin_commission\030\n \001(\tH\002R\016co"
  "inCommission\022-\n\tswap_from\030\010 \001(\0162\020.api_pb"
  ".SwapFromR\010swapFrom\022\024\n\005route\030\013 \003(\004R\005rout"
  "eB\005\n\003buyB\006\n\004sellB\014\n\ncommission\"\203\001\n\027Estim"
  "ateCoinBuyResponse\022\031\n\010will_pay\030\001 \001(\tR\007wi"
  "llPay\022\036\n\ncommission\030\002 \001(\tR\ncommission\022-\n"
  "\tswap_from\030\003 \001(\0162\020.api_pb.SwapFromR\010swap"
  "From\"\341\003\n\027EstimateCoinSellRequest\022.\n\016coin"
  "_id_to_buy\030\001 \001(\004B\007\222A\004\232\002\001\003H\000R\013coinIdToBuy"
  "\022 \n\013coin_to_buy\030\005 \001(\tH\000R\tcoinToBuy\0220\n\017co"
  "in_id_to_sell\030\002 \001(\004B\007\222A\004\232\002\001\003H\001R\014coinIdTo"
  "Sell\022\"\n\014coin_to_sell\030\006 \001(\tH\001R\ncoinToSell"
  "\0227\n\rvalue_to_sell\030\003 \001(\tB\023\222A\020\322\001\rvalue_to_"
  "sellR\013valueToSell\022\037\n\006height\030\004 \001(\004B\007\222A\004\232\002"
  "\001\003R\006height\0227\n\022coin_id_commission\030\t \001(\004B\007"
  "\222A\004\232\002\001\003H\002R\020coinIdCommission\022)\n\017coin_comm"
  "ission\030\n \001(\tH\002R\016coinCommission\022-\n\tswap_f"
  "rom\030\010 \001(\0162\020.api_pb.SwapFromR\010swapFrom\022\024\n"
  "\005route\030\013 \003(\004R\005routeB\005\n\003buyB\006\n\004sellB\014\n\nco"
  "mmission\"\204\001\n\030EstimateCoinSellResponse\022\031\n"
  "\010will_get\030\001 \001(\tR\007willGet\022\036\n\ncommission\030\002"
  " \001(\tR\ncommission\022-\n\tswap_from\030\003 \001(\0162\020.ap"
  "i_pb.SwapFromR\010swapFrom\"\233\003\n\032EstimateCoin"
  "SellAllRequest\022.\n\016coin_id_to_buy\030\001 \001(\004B\007"
  "\222A\004\232\002\001\003H\000R\013coinIdToBuy\022 \n\013coin_to_buy\030\007 "
  "\001(\tH\000R\tcoinToBuy\0220\n\017coin_id_to_sell\030\002 \001("
  "\004B\007\222A\004\232\002\001\003H\001R\014coinIdToSell\022\"\n\014coin_to_se"
  "ll\030\006 \001(\tH\001R\ncoinToSell\0227\n\rvalue_to_sell\030"
  "\003 \001(\tB\023\222A\020\322\001\rvalue_to_sellR\013valueToSell\022"
  "\'\n\tgas_price\030\004 \001(\004B\n\222A\007:\0011\232\002\001\003R\010gasPrice"
  "\022\037\n\006height\030\005 \001(\004B\007\222A\004\232\002\001\003R\006height\022-\n\tswa"
  "p_from\030\010 \001(\0162\020.api_pb.SwapFromR\010swapFrom"
  "\022\024\n\005route\030\013 \003(\004R\005routeB\005\n\003buyB\006\n\004sell\"g\n"
  "\033EstimateCoinSellAllResponse\022\031\n\010will_get"
  "\030\001 \001(\tR\007willGet\022-\n\tswap_from\030\002 \001(\0162\020.api"
  "_pb.SwapFromR\010swapFrom\"X\n\033EstimateTxComm"
  "issionRequest\022\030\n\002tx\030\001 \001(\tB\010\222A\005\322\001\002txR\002tx\022"
  "\037\n\006height\030\002 \001(\004B\007\222A\004\232\002\001\003R\006height\">\n\034Esti"
  "mateTxCommissionResponse\022\036\n\ncommission\030\001"
  " \001(\tR\ncommission\"H\n\rEventsRequest\022\037\n\006hei"
  "ght\030\001 \001(\004B\007\222A\004\232\002\001\003R\006height\022\026\n\006search\030\002 \003"
  "(\tR\006search\"A\n\016EventsResponse\022/\n\006events\030\001"
  " \003(\0132\027.google.protobuf.StructR\006events\"U\n"
  "\023MissedBlocksRequest\022\035\n\npublic_key\030\001 \001(\t"
  "R\tpublicKey\022\037\n\006height\030\002 \001(\004B\007\222A\004\232\002\001\003R\006he"
  "ight\"k\n\024MissedBlocksResponse\022#\n\rmissed_b"
  "locks\030\001 \001(\tR\014missedBlocks\022.\n\023missed_bloc"
  "ks_count\030\002 \001(\003R\021missedBlocksCount\"\271\001\n\026Un"
  "confirmedTxsResponse\022+\n\021transaction_coun"
  "t\030\001 \001(\004R\020transactionCount\022-\n\022total_trans"
  "actions\030\002 \001(\004R\021totalTransactions\022\037\n\013tota"
  "l_bytes\030\003 \001(\004R\ntotalBytes\022\"\n\014transaction"
  "s\030\004 \003(\tR\014transactions\"6\n\025UnconfirmedTxsR"
  "equest\022\035\n\005limit\030\001 \001(\005B\007\222A\004:\00230R\005limit\"4\n"
  "\021ValidatorsRequest\022\037\n\006height\030\001 \001(\004B\007\222A\004\232"
  "\002\001\003R\006height\"\243\001\n\022ValidatorsResponse\022A\n\nva"
  "lidators\030\003 \003(\0132!.api_pb.ValidatorsRespon"
  "se.ResultR\nvalidators\032J\n\006Result\022\035\n\npubli"
  "c_key\030\001 \001(\tR\tpublicKey\022!\n\014voting_power\030\002"
  " \001(\004R\013votingPower\"_\n\020SubscribeRequest\022K\n"
  "\005query\030\001 \001(\tB5\222A22(tm.event = \'NewBlock\'"
  " or tm.event = \'Tx\'\322\001\005queryR\005query\"\302\001\n\021S"
  "ubscribeResponse\022\024\n\005query\030\001 \001(\tR\005query\022+"
  "\n\004data\030\002 \001(\0132\027.google.protobuf.StructR\004d"
  "ata\0227\n\006events\030\003 \003(\0132\037.api_pb.SubscribeRe"
  "sponse.EventR\006events\0321\n\005Event\022\020\n\003key\030\001 \001"
  "(\tR\003key\022\026\n\006events\030\002 \003(\tR\006events\"/\n\014Halts"
  "Request\022\037\n\006height\030\001 \001(\004B\007\222A\004\232\002\001\003R\006height"
  "\"0\n\rHaltsResponse\022\037\n\013public_keys\030\001 \003(\tR\n"
  "publicKeys\"\212\001\n\rFrozenRequest\022\030\n\007address\030"
  "\001 \001(\tR\007address\022>\n\007coin_id\030\002 \001(\0132\034.google"
  ".protobuf.UInt64ValueB\007\222A\004\232\002\001\003R\006coinId\022\037"
  "\n\006height\030\003 \001(\004B\007\222A\004\232\002\001\003R\006height\"\341\001\n\016Froz"
  "enResponse\0225\n\006frozen\030\001 \003(\0132\035.api_pb.Froz"
  "enResponse.FrozenR\006frozen\032\227\001\n\006Frozen\022\026\n\006"
  "height\030\001 \001(\004R\006height\022\030\n\007address\030\002 \001(\tR\007a"
  "ddress\022#\n\rcandidate_key\030\003 \001(\tR\014candidate"
  "Key\022 \n\004coin\030\004 \001(\0132\014.api_pb.CoinR\004coin\022\024\n"
  "\005value\030\005 \001(\tR\005value\"k\n\017WaitListRequest\022\035"
  "\n\npublic_key\030\001 \001(\tR\tpublicKey\022\030\n\007address"
  "\030\002 \001(\tR\007address\022\037\n\006height\030\003 \001(\004B\007\222A\004\232\002\001\003"
  "R\006height\"\244\001\n\020WaitListResponse\0221\n\004list\030\001 "
  "\003(\0132\035.api_pb.WaitListResponse.WaitR\004list"
  "\032]\n\004Wait\022\035\n\npublic_key\030\003 \001(\tR\tpublicKey\022"
  " \n\004coin\030\001 \001(\0132\014.api_pb.CoinR\004coin\022\024\n\005val"
  "ue\030\002 \001(\tR\005value*r\n\nBlockField\022\020\n\014transac"
  "tions\020\000\022\n\n\006missed\020\001\022\020\n\014block_reward\020\002\022\010\n"
  "\004size\020\003\022\014\n\010proposer\020\004\022\016\n\nvalidators\020\005\022\014\n"
  "\010evidence\020\006*-\n\010SwapFrom\022\013\n\007optimal\020\000\022\n\n\006"
  "bancor\020\001\022\010\n\004pool\020\002BW\n\023network.minter.grp"
  "cP\001Z5github.com/MinterTeam/node-grpc-gat"
  "eway/gen/go;api_pb\272\002\006Minterb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_resources_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_resources_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resources_2eproto = {
  false, false, 22075, descriptor_table_protodef_resources_2eproto, "resources.proto", 
  &descriptor_table_resources_2eproto_once, descriptor_table_resources_2eproto_deps, 4, 110,
  schemas, file_default_instances, TableStruct_resources_2eproto::offsets,
  file_level_metadata_resources_2eproto, file_level_enum_descriptors_resources_2eproto, file_level_service_descriptors_resources_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_resources_2eproto_getter() {
  return &descriptor_table_resources_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_resources_2eproto(&descriptor_table_resources_2eproto);
namespace api_pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandidatesRequest_CandidateStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resources_2eproto);
  return file_level_enum_descriptors_resources_2eproto[0];
}
bool CandidatesRequest_CandidateStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CandidatesRequest_CandidateStatus CandidatesRequest::all;
constexpr CandidatesRequest_CandidateStatus CandidatesRequest::off;
constexpr CandidatesRequest_CandidateStatus CandidatesRequest::on;
constexpr CandidatesRequest_CandidateStatus CandidatesRequest::validator;
constexpr CandidatesRequest_CandidateStatus CandidatesRequest::CandidateStatus_MIN;
constexpr CandidatesRequest_CandidateStatus CandidatesRequest::CandidateStatus_MAX;
constexpr int CandidatesRequest::CandidateStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResponse_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resources_2eproto);
  return file_level_enum_descriptors_resources_2eproto[1];
}
bool TransactionResponse_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionResponse_Type TransactionResponse::unknown;
constexpr TransactionResponse_Type TransactionResponse::Send;
constexpr TransactionResponse_Type TransactionResponse::SellCoin;
constexpr TransactionResponse_Type TransactionResponse::SellAllCoin;
constexpr TransactionResponse_Type TransactionResponse::BuyCoin;
constexpr TransactionResponse_Type TransactionResponse::CreateCoin;
constexpr TransactionResponse_Type TransactionResponse::DeclareCandidacy;
constexpr TransactionResponse_Type TransactionResponse::Delegate;
constexpr TransactionResponse_Type TransactionResponse::Unbond;
constexpr TransactionResponse_Type TransactionResponse::RedeemCheck;
constexpr TransactionResponse_Type TransactionResponse::SetCandidateOnline;
constexpr TransactionResponse_Type TransactionResponse::SetCandidateOffline;
constexpr TransactionResponse_Type TransactionResponse::CreateMultisig;
constexpr TransactionResponse_Type TransactionResponse::Multisend;
constexpr TransactionResponse_Type TransactionResponse::EditCandidate;
constexpr TransactionResponse_Type TransactionResponse::SetHaltBlock;
constexpr TransactionResponse_Type TransactionResponse::RecreateCoin;
constexpr TransactionResponse_Type TransactionResponse::EditCoinOwner;
constexpr TransactionResponse_Type TransactionResponse::EditMultisig;
constexpr TransactionResponse_Type TransactionResponse::PriceVote;
constexpr TransactionResponse_Type TransactionResponse::EditCandidatePublicKey;
constexpr TransactionResponse_Type TransactionResponse::AddLiquidity;
constexpr TransactionResponse_Type TransactionResponse::RemoveLiquidity;
constexpr TransactionResponse_Type TransactionResponse::SellSwapPool;
constexpr TransactionResponse_Type TransactionResponse::BuySwapPool;
constexpr TransactionResponse_Type TransactionResponse::SellAllSwapPool;
constexpr TransactionResponse_Type TransactionResponse::EditCommissionCandidate;
constexpr TransactionResponse_Type TransactionResponse::MoveStake;
constexpr TransactionResponse_Type TransactionResponse::MintToken;
constexpr TransactionResponse_Type TransactionResponse::BurnToken;
constexpr TransactionResponse_Type TransactionResponse::CreateToken;
constexpr TransactionResponse_Type TransactionResponse::RecreateToken;
constexpr TransactionResponse_Type TransactionResponse::VoteCommission;
constexpr TransactionResponse_Type TransactionResponse::VoteUpdate;
constexpr TransactionResponse_Type TransactionResponse::CreateSwapPool;
constexpr TransactionResponse_Type TransactionResponse::AddLimitOrder;
constexpr TransactionResponse_Type TransactionResponse::RemoveLimitOrder;
constexpr TransactionResponse_Type TransactionResponse::Type_MIN;
constexpr TransactionResponse_Type TransactionResponse::Type_MAX;
constexpr int TransactionResponse::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockField_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resources_2eproto);
  return file_level_enum_descriptors_resources_2eproto[2];
}
bool BlockField_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwapFrom_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_resources_2eproto);
  return file_level_enum_descriptors_resources_2eproto[3];
}
bool SwapFrom_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Coin::_Internal {
 public:
};

Coin::Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.Coin)
}
Coin::Coin(const Coin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:api_pb.Coin)
}

inline void Coin::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = uint64_t{0u};
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:api_pb.Coin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Coin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Coin::ArenaDtor(void* object) {
  Coin* _this = reinterpret_cast< Coin* >(object);
  (void)_this;
}
void Coin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.Coin.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.Coin.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.Coin)
  return target;
}

size_t Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.Coin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Coin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coin::GetClassData() const { return &_class_data_; }

void Coin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Coin *>(to)->MergeFrom(
      static_cast<const Coin &>(from));
}


void Coin::MergeFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.Coin)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coin::CopyFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coin::IsInitialized() const {
  return true;
}

void Coin::InternalSwap(Coin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[0]);
}

// ===================================================================

class BlocksRequest::_Internal {
 public:
};

BlocksRequest::BlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BlocksRequest)
}
BlocksRequest::BlocksRequest(const BlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_height_, &from.from_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_) -
    reinterpret_cast<char*>(&from_height_)) + sizeof(events_));
  // @@protoc_insertion_point(copy_constructor:api_pb.BlocksRequest)
}

inline void BlocksRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&events_) -
    reinterpret_cast<char*>(&from_height_)) + sizeof(events_));
}

BlocksRequest::~BlocksRequest() {
  // @@protoc_insertion_point(destructor:api_pb.BlocksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlocksRequest::ArenaDtor(void* object) {
  BlocksRequest* _this = reinterpret_cast< BlocksRequest* >(object);
  (void)_this;
}
void BlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  ::memset(&from_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_) -
      reinterpret_cast<char*>(&from_height_)) + sizeof(events_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 from_height = 1 [json_name = "fromHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to_height = 2 [json_name = "toHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.BlockField fields = 3 [json_name = "fields"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_fields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_fields(static_cast<::api_pb::BlockField>(val));
        } else goto handle_unusual;
        continue;
      // bool failed_txs = 4 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          failed_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool events = 5 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_height = 1 [json_name = "fromHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_from_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_height(), target);
  }

  // uint64 to_height = 2 [json_name = "toHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_to_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to_height(), target);
  }

  // repeated .api_pb.BlockField fields = 3 [json_name = "fields"];
  {
    int byte_size = _fields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, fields_, byte_size, target);
    }
  }

  // bool failed_txs = 4 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_failed_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_failed_txs(), target);
  }

  // bool events = 5 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BlocksRequest)
  return target;
}

size_t BlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.BlockField fields = 3 [json_name = "fields"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_fields_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_fields(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 from_height = 1 [json_name = "fromHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_from_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_height());
  }

  // uint64 to_height = 2 [json_name = "toHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_to_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_to_height());
  }

  // bool failed_txs = 4 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_failed_txs() != 0) {
    total_size += 1 + 1;
  }

  // bool events = 5 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_events() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlocksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlocksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlocksRequest::GetClassData() const { return &_class_data_; }

void BlocksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlocksRequest *>(to)->MergeFrom(
      static_cast<const BlocksRequest &>(from));
}


void BlocksRequest::MergeFrom(const BlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from._internal_from_height() != 0) {
    _internal_set_from_height(from._internal_from_height());
  }
  if (from._internal_to_height() != 0) {
    _internal_set_to_height(from._internal_to_height());
  }
  if (from._internal_failed_txs() != 0) {
    _internal_set_failed_txs(from._internal_failed_txs());
  }
  if (from._internal_events() != 0) {
    _internal_set_events(from._internal_events());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlocksRequest::CopyFrom(const BlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlocksRequest::IsInitialized() const {
  return true;
}

void BlocksRequest::InternalSwap(BlocksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlocksRequest, events_)
      + sizeof(BlocksRequest::events_)
      - PROTOBUF_FIELD_OFFSET(BlocksRequest, from_height_)>(
          reinterpret_cast<char*>(&from_height_),
          reinterpret_cast<char*>(&other->from_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlocksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[1]);
}

// ===================================================================

class BlocksResponse::_Internal {
 public:
};

BlocksResponse::BlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blocks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BlocksResponse)
}
BlocksResponse::BlocksResponse(const BlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.BlocksResponse)
}

inline void BlocksResponse::SharedCtor() {
}

BlocksResponse::~BlocksResponse() {
  // @@protoc_insertion_point(destructor:api_pb.BlocksResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlocksResponse::ArenaDtor(void* object) {
  BlocksResponse* _this = reinterpret_cast< BlocksResponse* >(object);
  (void)_this;
}
void BlocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.BlockResponse blocks = 1 [json_name = "blocks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.BlockResponse blocks = 1 [json_name = "blocks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BlocksResponse)
  return target;
}

size_t BlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.BlockResponse blocks = 1 [json_name = "blocks"];
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlocksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlocksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlocksResponse::GetClassData() const { return &_class_data_; }

void BlocksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlocksResponse *>(to)->MergeFrom(
      static_cast<const BlocksResponse &>(from));
}


void BlocksResponse::MergeFrom(const BlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlocksResponse::CopyFrom(const BlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlocksResponse::IsInitialized() const {
  return true;
}

void BlocksResponse::InternalSwap(BlocksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlocksResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[2]);
}

// ===================================================================

class CommissionVotesRequest::_Internal {
 public:
};

CommissionVotesRequest::CommissionVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CommissionVotesRequest)
}
CommissionVotesRequest::CommissionVotesRequest(const CommissionVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_version_, &from.target_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&target_version_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CommissionVotesRequest)
}

inline void CommissionVotesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&target_version_)) + sizeof(height_));
}

CommissionVotesRequest::~CommissionVotesRequest() {
  // @@protoc_insertion_point(destructor:api_pb.CommissionVotesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommissionVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommissionVotesRequest::ArenaDtor(void* object) {
  CommissionVotesRequest* _this = reinterpret_cast< CommissionVotesRequest* >(object);
  (void)_this;
}
void CommissionVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommissionVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommissionVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CommissionVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&target_version_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommissionVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommissionVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CommissionVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_target_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_target_version(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CommissionVotesRequest)
  return target;
}

size_t CommissionVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CommissionVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_target_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_version());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommissionVotesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommissionVotesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommissionVotesRequest::GetClassData() const { return &_class_data_; }

void CommissionVotesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommissionVotesRequest *>(to)->MergeFrom(
      static_cast<const CommissionVotesRequest &>(from));
}


void CommissionVotesRequest::MergeFrom(const CommissionVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CommissionVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_version() != 0) {
    _internal_set_target_version(from._internal_target_version());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommissionVotesRequest::CopyFrom(const CommissionVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CommissionVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionVotesRequest::IsInitialized() const {
  return true;
}

void CommissionVotesRequest::InternalSwap(CommissionVotesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommissionVotesRequest, height_)
      + sizeof(CommissionVotesRequest::height_)
      - PROTOBUF_FIELD_OFFSET(CommissionVotesRequest, target_version_)>(
          reinterpret_cast<char*>(&target_version_),
          reinterpret_cast<char*>(&other->target_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommissionVotesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[3]);
}

// ===================================================================

class CommissionVotesResponse_Vote::_Internal {
 public:
  static const ::api_pb::PriceCommissionResponse& price(const CommissionVotesResponse_Vote* msg);
};

const ::api_pb::PriceCommissionResponse&
CommissionVotesResponse_Vote::_Internal::price(const CommissionVotesResponse_Vote* msg) {
  return *msg->price_;
}
CommissionVotesResponse_Vote::CommissionVotesResponse_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  public_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CommissionVotesResponse.Vote)
}
CommissionVotesResponse_Vote::CommissionVotesResponse_Vote(const CommissionVotesResponse_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_price()) {
    price_ = new ::api_pb::PriceCommissionResponse(*from.price_);
  } else {
    price_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.CommissionVotesResponse.Vote)
}

inline void CommissionVotesResponse_Vote::SharedCtor() {
price_ = nullptr;
}

CommissionVotesResponse_Vote::~CommissionVotesResponse_Vote() {
  // @@protoc_insertion_point(destructor:api_pb.CommissionVotesResponse.Vote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommissionVotesResponse_Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete price_;
}

void CommissionVotesResponse_Vote::ArenaDtor(void* object) {
  CommissionVotesResponse_Vote* _this = reinterpret_cast< CommissionVotesResponse_Vote* >(object);
  (void)_this;
}
void CommissionVotesResponse_Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommissionVotesResponse_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommissionVotesResponse_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CommissionVotesResponse.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  if (GetArenaForAllocation() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommissionVotesResponse_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string public_keys = 1 [json_name = "publicKeys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CommissionVotesResponse.Vote.public_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .api_pb.PriceCommissionResponse price = 2 [json_name = "price"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommissionVotesResponse_Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CommissionVotesResponse.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string public_keys = 1 [json_name = "publicKeys"];
  for (int i = 0, n = this->_internal_public_keys_size(); i < n; i++) {
    const auto& s = this->_internal_public_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CommissionVotesResponse.Vote.public_keys");
    target = stream->WriteString(1, s, target);
  }

  // .api_pb.PriceCommissionResponse price = 2 [json_name = "price"];
  if (this->_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::price(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CommissionVotesResponse.Vote)
  return target;
}

size_t CommissionVotesResponse_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CommissionVotesResponse.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string public_keys = 1 [json_name = "publicKeys"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(public_keys_.size());
  for (int i = 0, n = public_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      public_keys_.Get(i));
  }

  // .api_pb.PriceCommissionResponse price = 2 [json_name = "price"];
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommissionVotesResponse_Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommissionVotesResponse_Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommissionVotesResponse_Vote::GetClassData() const { return &_class_data_; }

void CommissionVotesResponse_Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommissionVotesResponse_Vote *>(to)->MergeFrom(
      static_cast<const CommissionVotesResponse_Vote &>(from));
}


void CommissionVotesResponse_Vote::MergeFrom(const CommissionVotesResponse_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CommissionVotesResponse.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
  if (from._internal_has_price()) {
    _internal_mutable_price()->::api_pb::PriceCommissionResponse::MergeFrom(from._internal_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommissionVotesResponse_Vote::CopyFrom(const CommissionVotesResponse_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CommissionVotesResponse.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionVotesResponse_Vote::IsInitialized() const {
  return true;
}

void CommissionVotesResponse_Vote::InternalSwap(CommissionVotesResponse_Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommissionVotesResponse_Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[4]);
}

// ===================================================================

class CommissionVotesResponse::_Internal {
 public:
};

CommissionVotesResponse::CommissionVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  votes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CommissionVotesResponse)
}
CommissionVotesResponse::CommissionVotesResponse(const CommissionVotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.CommissionVotesResponse)
}

inline void CommissionVotesResponse::SharedCtor() {
}

CommissionVotesResponse::~CommissionVotesResponse() {
  // @@protoc_insertion_point(destructor:api_pb.CommissionVotesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommissionVotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommissionVotesResponse::ArenaDtor(void* object) {
  CommissionVotesResponse* _this = reinterpret_cast< CommissionVotesResponse* >(object);
  (void)_this;
}
void CommissionVotesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommissionVotesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommissionVotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CommissionVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommissionVotesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.CommissionVotesResponse.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommissionVotesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CommissionVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.CommissionVotesResponse.Vote votes = 1 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CommissionVotesResponse)
  return target;
}

size_t CommissionVotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CommissionVotesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.CommissionVotesResponse.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommissionVotesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommissionVotesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommissionVotesResponse::GetClassData() const { return &_class_data_; }

void CommissionVotesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CommissionVotesResponse *>(to)->MergeFrom(
      static_cast<const CommissionVotesResponse &>(from));
}


void CommissionVotesResponse::MergeFrom(const CommissionVotesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CommissionVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommissionVotesResponse::CopyFrom(const CommissionVotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CommissionVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionVotesResponse::IsInitialized() const {
  return true;
}

void CommissionVotesResponse::InternalSwap(CommissionVotesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommissionVotesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[5]);
}

// ===================================================================

class LimitOrderRequest::_Internal {
 public:
};

LimitOrderRequest::LimitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.LimitOrderRequest)
}
LimitOrderRequest::LimitOrderRequest(const LimitOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&order_id_, &from.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:api_pb.LimitOrderRequest)
}

inline void LimitOrderRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&order_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&order_id_)) + sizeof(height_));
}

LimitOrderRequest::~LimitOrderRequest() {
  // @@protoc_insertion_point(destructor:api_pb.LimitOrderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LimitOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LimitOrderRequest::ArenaDtor(void* object) {
  LimitOrderRequest* _this = reinterpret_cast< LimitOrderRequest* >(object);
  (void)_this;
}
void LimitOrderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitOrderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LimitOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.LimitOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&order_id_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitOrderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 order_id = 1 [json_name = "orderId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitOrderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.LimitOrderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 order_id = 1 [json_name = "orderId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_order_id(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.LimitOrderRequest)
  return target;
}

size_t LimitOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.LimitOrderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 order_id = 1 [json_name = "orderId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_order_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_order_id());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LimitOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LimitOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LimitOrderRequest::GetClassData() const { return &_class_data_; }

void LimitOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LimitOrderRequest *>(to)->MergeFrom(
      static_cast<const LimitOrderRequest &>(from));
}


void LimitOrderRequest::MergeFrom(const LimitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.LimitOrderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_order_id() != 0) {
    _internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LimitOrderRequest::CopyFrom(const LimitOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.LimitOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitOrderRequest::IsInitialized() const {
  return true;
}

void LimitOrderRequest::InternalSwap(LimitOrderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitOrderRequest, height_)
      + sizeof(LimitOrderRequest::height_)
      - PROTOBUF_FIELD_OFFSET(LimitOrderRequest, order_id_)>(
          reinterpret_cast<char*>(&order_id_),
          reinterpret_cast<char*>(&other->order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitOrderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[6]);
}

// ===================================================================

class LimitOrderResponse::_Internal {
 public:
  static const ::api_pb::Coin& coin_sell(const LimitOrderResponse* msg);
  static const ::api_pb::Coin& coin_buy(const LimitOrderResponse* msg);
};

const ::api_pb::Coin&
LimitOrderResponse::_Internal::coin_sell(const LimitOrderResponse* msg) {
  return *msg->coin_sell_;
}
const ::api_pb::Coin&
LimitOrderResponse::_Internal::coin_buy(const LimitOrderResponse* msg) {
  return *msg->coin_buy_;
}
LimitOrderResponse::LimitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.LimitOrderResponse)
}
LimitOrderResponse::LimitOrderResponse(const LimitOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  want_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_want_sell().empty()) {
    want_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_want_sell(), 
      GetArenaForAllocation());
  }
  want_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_want_buy().empty()) {
    want_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_want_buy(), 
      GetArenaForAllocation());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin_sell()) {
    coin_sell_ = new ::api_pb::Coin(*from.coin_sell_);
  } else {
    coin_sell_ = nullptr;
  }
  if (from._internal_has_coin_buy()) {
    coin_buy_ = new ::api_pb::Coin(*from.coin_buy_);
  } else {
    coin_buy_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&height_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:api_pb.LimitOrderResponse)
}

inline void LimitOrderResponse::SharedCtor() {
want_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
want_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_sell_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&coin_sell_)) + sizeof(id_));
}

LimitOrderResponse::~LimitOrderResponse() {
  // @@protoc_insertion_point(destructor:api_pb.LimitOrderResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LimitOrderResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  want_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  want_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_sell_;
  if (this != internal_default_instance()) delete coin_buy_;
}

void LimitOrderResponse::ArenaDtor(void* object) {
  LimitOrderResponse* _this = reinterpret_cast< LimitOrderResponse* >(object);
  (void)_this;
}
void LimitOrderResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LimitOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.LimitOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  want_sell_.ClearToEmpty();
  want_buy_.ClearToEmpty();
  owner_.ClearToEmpty();
  price_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_sell_ != nullptr) {
    delete coin_sell_;
  }
  coin_sell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && coin_buy_ != nullptr) {
    delete coin_buy_;
  }
  coin_buy_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&height_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin_sell = 1 [json_name = "coinSell"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_sell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin_buy = 2 [json_name = "coinBuy"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_buy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string want_sell = 3 [json_name = "wantSell"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_want_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.LimitOrderResponse.want_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string want_buy = 4 [json_name = "wantBuy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_want_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.LimitOrderResponse.want_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 5 [json_name = "owner"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.LimitOrderResponse.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 6 [json_name = "height"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 7 [json_name = "id"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price = 8 [json_name = "price"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.LimitOrderResponse.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.LimitOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin_sell = 1 [json_name = "coinSell"];
  if (this->_internal_has_coin_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin_sell(this), target, stream);
  }

  // .api_pb.Coin coin_buy = 2 [json_name = "coinBuy"];
  if (this->_internal_has_coin_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin_buy(this), target, stream);
  }

  // string want_sell = 3 [json_name = "wantSell"];
  if (!this->_internal_want_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_want_sell().data(), static_cast<int>(this->_internal_want_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.LimitOrderResponse.want_sell");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_want_sell(), target);
  }

  // string want_buy = 4 [json_name = "wantBuy"];
  if (!this->_internal_want_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_want_buy().data(), static_cast<int>(this->_internal_want_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.LimitOrderResponse.want_buy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_want_buy(), target);
  }

  // string owner = 5 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.LimitOrderResponse.owner");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_owner(), target);
  }

  // uint64 height = 6 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_height(), target);
  }

  // uint64 id = 7 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_id(), target);
  }

  // string price = 8 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.LimitOrderResponse.price");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.LimitOrderResponse)
  return target;
}

size_t LimitOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.LimitOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string want_sell = 3 [json_name = "wantSell"];
  if (!this->_internal_want_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_want_sell());
  }

  // string want_buy = 4 [json_name = "wantBuy"];
  if (!this->_internal_want_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_want_buy());
  }

  // string owner = 5 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string price = 8 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // .api_pb.Coin coin_sell = 1 [json_name = "coinSell"];
  if (this->_internal_has_coin_sell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_sell_);
  }

  // .api_pb.Coin coin_buy = 2 [json_name = "coinBuy"];
  if (this->_internal_has_coin_buy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_buy_);
  }

  // uint64 height = 6 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 id = 7 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LimitOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LimitOrderResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LimitOrderResponse::GetClassData() const { return &_class_data_; }

void LimitOrderResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LimitOrderResponse *>(to)->MergeFrom(
      static_cast<const LimitOrderResponse &>(from));
}


void LimitOrderResponse::MergeFrom(const LimitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.LimitOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_want_sell().empty()) {
    _internal_set_want_sell(from._internal_want_sell());
  }
  if (!from._internal_want_buy().empty()) {
    _internal_set_want_buy(from._internal_want_buy());
  }
  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_price().empty()) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_has_coin_sell()) {
    _internal_mutable_coin_sell()->::api_pb::Coin::MergeFrom(from._internal_coin_sell());
  }
  if (from._internal_has_coin_buy()) {
    _internal_mutable_coin_buy()->::api_pb::Coin::MergeFrom(from._internal_coin_buy());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LimitOrderResponse::CopyFrom(const LimitOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.LimitOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitOrderResponse::IsInitialized() const {
  return true;
}

void LimitOrderResponse::InternalSwap(LimitOrderResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &want_sell_, GetArenaForAllocation(),
      &other->want_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &want_buy_, GetArenaForAllocation(),
      &other->want_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_, GetArenaForAllocation(),
      &other->price_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitOrderResponse, id_)
      + sizeof(LimitOrderResponse::id_)
      - PROTOBUF_FIELD_OFFSET(LimitOrderResponse, coin_sell_)>(
          reinterpret_cast<char*>(&coin_sell_),
          reinterpret_cast<char*>(&other->coin_sell_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitOrderResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[7]);
}

// ===================================================================

class LimitOrdersOfPoolRequest::_Internal {
 public:
};

LimitOrdersOfPoolRequest::LimitOrdersOfPoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.LimitOrdersOfPoolRequest)
}
LimitOrdersOfPoolRequest::LimitOrdersOfPoolRequest(const LimitOrdersOfPoolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sell_coin_, &from.sell_coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&sell_coin_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:api_pb.LimitOrdersOfPoolRequest)
}

inline void LimitOrdersOfPoolRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sell_coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&sell_coin_)) + sizeof(limit_));
}

LimitOrdersOfPoolRequest::~LimitOrdersOfPoolRequest() {
  // @@protoc_insertion_point(destructor:api_pb.LimitOrdersOfPoolRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LimitOrdersOfPoolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LimitOrdersOfPoolRequest::ArenaDtor(void* object) {
  LimitOrdersOfPoolRequest* _this = reinterpret_cast< LimitOrdersOfPoolRequest* >(object);
  (void)_this;
}
void LimitOrdersOfPoolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitOrdersOfPoolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LimitOrdersOfPoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.LimitOrdersOfPoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sell_coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&sell_coin_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitOrdersOfPoolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sell_coin = 1 [json_name = "sellCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sell_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 buy_coin = 2 [json_name = "buyCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          buy_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 3 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitOrdersOfPoolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.LimitOrdersOfPoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sell_coin = 1 [json_name = "sellCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_sell_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sell_coin(), target);
  }

  // uint64 buy_coin = 2 [json_name = "buyCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_buy_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_buy_coin(), target);
  }

  // int32 limit = 3 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_limit(), target);
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.LimitOrdersOfPoolRequest)
  return target;
}

size_t LimitOrdersOfPoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.LimitOrdersOfPoolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sell_coin = 1 [json_name = "sellCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_sell_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sell_coin());
  }

  // uint64 buy_coin = 2 [json_name = "buyCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_buy_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_buy_coin());
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // int32 limit = 3 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LimitOrdersOfPoolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LimitOrdersOfPoolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LimitOrdersOfPoolRequest::GetClassData() const { return &_class_data_; }

void LimitOrdersOfPoolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LimitOrdersOfPoolRequest *>(to)->MergeFrom(
      static_cast<const LimitOrdersOfPoolRequest &>(from));
}


void LimitOrdersOfPoolRequest::MergeFrom(const LimitOrdersOfPoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.LimitOrdersOfPoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sell_coin() != 0) {
    _internal_set_sell_coin(from._internal_sell_coin());
  }
  if (from._internal_buy_coin() != 0) {
    _internal_set_buy_coin(from._internal_buy_coin());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LimitOrdersOfPoolRequest::CopyFrom(const LimitOrdersOfPoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.LimitOrdersOfPoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitOrdersOfPoolRequest::IsInitialized() const {
  return true;
}

void LimitOrdersOfPoolRequest::InternalSwap(LimitOrdersOfPoolRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LimitOrdersOfPoolRequest, limit_)
      + sizeof(LimitOrdersOfPoolRequest::limit_)
      - PROTOBUF_FIELD_OFFSET(LimitOrdersOfPoolRequest, sell_coin_)>(
          reinterpret_cast<char*>(&sell_coin_),
          reinterpret_cast<char*>(&other->sell_coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitOrdersOfPoolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[8]);
}

// ===================================================================

class LimitOrdersOfPoolResponse::_Internal {
 public:
};

LimitOrdersOfPoolResponse::LimitOrdersOfPoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.LimitOrdersOfPoolResponse)
}
LimitOrdersOfPoolResponse::LimitOrdersOfPoolResponse(const LimitOrdersOfPoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pool_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pool_price().empty()) {
    pool_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pool_price(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.LimitOrdersOfPoolResponse)
}

inline void LimitOrdersOfPoolResponse::SharedCtor() {
pool_price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LimitOrdersOfPoolResponse::~LimitOrdersOfPoolResponse() {
  // @@protoc_insertion_point(destructor:api_pb.LimitOrdersOfPoolResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LimitOrdersOfPoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pool_price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LimitOrdersOfPoolResponse::ArenaDtor(void* object) {
  LimitOrdersOfPoolResponse* _this = reinterpret_cast< LimitOrdersOfPoolResponse* >(object);
  (void)_this;
}
void LimitOrdersOfPoolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitOrdersOfPoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LimitOrdersOfPoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.LimitOrdersOfPoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  pool_price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitOrdersOfPoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string pool_price = 2 [json_name = "poolPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pool_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.LimitOrdersOfPoolResponse.pool_price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitOrdersOfPoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.LimitOrdersOfPoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  // string pool_price = 2 [json_name = "poolPrice"];
  if (!this->_internal_pool_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pool_price().data(), static_cast<int>(this->_internal_pool_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.LimitOrdersOfPoolResponse.pool_price");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pool_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.LimitOrdersOfPoolResponse)
  return target;
}

size_t LimitOrdersOfPoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.LimitOrdersOfPoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pool_price = 2 [json_name = "poolPrice"];
  if (!this->_internal_pool_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pool_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LimitOrdersOfPoolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LimitOrdersOfPoolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LimitOrdersOfPoolResponse::GetClassData() const { return &_class_data_; }

void LimitOrdersOfPoolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LimitOrdersOfPoolResponse *>(to)->MergeFrom(
      static_cast<const LimitOrdersOfPoolResponse &>(from));
}


void LimitOrdersOfPoolResponse::MergeFrom(const LimitOrdersOfPoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.LimitOrdersOfPoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  if (!from._internal_pool_price().empty()) {
    _internal_set_pool_price(from._internal_pool_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LimitOrdersOfPoolResponse::CopyFrom(const LimitOrdersOfPoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.LimitOrdersOfPoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitOrdersOfPoolResponse::IsInitialized() const {
  return true;
}

void LimitOrdersOfPoolResponse::InternalSwap(LimitOrdersOfPoolResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pool_price_, GetArenaForAllocation(),
      &other->pool_price_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitOrdersOfPoolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[9]);
}

// ===================================================================

class LimitOrdersRequest::_Internal {
 public:
};

LimitOrdersRequest::LimitOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.LimitOrdersRequest)
}
LimitOrdersRequest::LimitOrdersRequest(const LimitOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.LimitOrdersRequest)
}

inline void LimitOrdersRequest::SharedCtor() {
height_ = uint64_t{0u};
}

LimitOrdersRequest::~LimitOrdersRequest() {
  // @@protoc_insertion_point(destructor:api_pb.LimitOrdersRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LimitOrdersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LimitOrdersRequest::ArenaDtor(void* object) {
  LimitOrdersRequest* _this = reinterpret_cast< LimitOrdersRequest* >(object);
  (void)_this;
}
void LimitOrdersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitOrdersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LimitOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.LimitOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitOrdersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 ids = 1 [json_name = "ids"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitOrdersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.LimitOrdersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1 [json_name = "ids"];
  {
    int byte_size = _ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.LimitOrdersRequest)
  return target;
}

size_t LimitOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.LimitOrdersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 1 [json_name = "ids"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LimitOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LimitOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LimitOrdersRequest::GetClassData() const { return &_class_data_; }

void LimitOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LimitOrdersRequest *>(to)->MergeFrom(
      static_cast<const LimitOrdersRequest &>(from));
}


void LimitOrdersRequest::MergeFrom(const LimitOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.LimitOrdersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LimitOrdersRequest::CopyFrom(const LimitOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.LimitOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitOrdersRequest::IsInitialized() const {
  return true;
}

void LimitOrdersRequest::InternalSwap(LimitOrdersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitOrdersRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[10]);
}

// ===================================================================

class LimitOrdersResponse::_Internal {
 public:
};

LimitOrdersResponse::LimitOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  orders_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.LimitOrdersResponse)
}
LimitOrdersResponse::LimitOrdersResponse(const LimitOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orders_(from.orders_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.LimitOrdersResponse)
}

inline void LimitOrdersResponse::SharedCtor() {
}

LimitOrdersResponse::~LimitOrdersResponse() {
  // @@protoc_insertion_point(destructor:api_pb.LimitOrdersResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LimitOrdersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LimitOrdersResponse::ArenaDtor(void* object) {
  LimitOrdersResponse* _this = reinterpret_cast< LimitOrdersResponse* >(object);
  (void)_this;
}
void LimitOrdersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LimitOrdersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LimitOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.LimitOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LimitOrdersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LimitOrdersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.LimitOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_orders_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_orders(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.LimitOrdersResponse)
  return target;
}

size_t LimitOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.LimitOrdersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LimitOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LimitOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LimitOrdersResponse::GetClassData() const { return &_class_data_; }

void LimitOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LimitOrdersResponse *>(to)->MergeFrom(
      static_cast<const LimitOrdersResponse &>(from));
}


void LimitOrdersResponse::MergeFrom(const LimitOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.LimitOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LimitOrdersResponse::CopyFrom(const LimitOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.LimitOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitOrdersResponse::IsInitialized() const {
  return true;
}

void LimitOrdersResponse::InternalSwap(LimitOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  orders_.InternalSwap(&other->orders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LimitOrdersResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[11]);
}

// ===================================================================

class UpdateVotesRequest::_Internal {
 public:
};

UpdateVotesRequest::UpdateVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UpdateVotesRequest)
}
UpdateVotesRequest::UpdateVotesRequest(const UpdateVotesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_version_, &from.target_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&target_version_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:api_pb.UpdateVotesRequest)
}

inline void UpdateVotesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&target_version_)) + sizeof(height_));
}

UpdateVotesRequest::~UpdateVotesRequest() {
  // @@protoc_insertion_point(destructor:api_pb.UpdateVotesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateVotesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateVotesRequest::ArenaDtor(void* object) {
  UpdateVotesRequest* _this = reinterpret_cast< UpdateVotesRequest* >(object);
  (void)_this;
}
void UpdateVotesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVotesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UpdateVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&target_version_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVotesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          target_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateVotesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UpdateVotesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_target_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_target_version(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UpdateVotesRequest)
  return target;
}

size_t UpdateVotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UpdateVotesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_target_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_version());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVotesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVotesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVotesRequest::GetClassData() const { return &_class_data_; }

void UpdateVotesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateVotesRequest *>(to)->MergeFrom(
      static_cast<const UpdateVotesRequest &>(from));
}


void UpdateVotesRequest::MergeFrom(const UpdateVotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UpdateVotesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_version() != 0) {
    _internal_set_target_version(from._internal_target_version());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVotesRequest::CopyFrom(const UpdateVotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UpdateVotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVotesRequest::IsInitialized() const {
  return true;
}

void UpdateVotesRequest::InternalSwap(UpdateVotesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateVotesRequest, height_)
      + sizeof(UpdateVotesRequest::height_)
      - PROTOBUF_FIELD_OFFSET(UpdateVotesRequest, target_version_)>(
          reinterpret_cast<char*>(&target_version_),
          reinterpret_cast<char*>(&other->target_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVotesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[12]);
}

// ===================================================================

class UpdateVotesResponse_Vote::_Internal {
 public:
};

UpdateVotesResponse_Vote::UpdateVotesResponse_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  public_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UpdateVotesResponse.Vote)
}
UpdateVotesResponse_Vote::UpdateVotesResponse_Vote(const UpdateVotesResponse_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.UpdateVotesResponse.Vote)
}

inline void UpdateVotesResponse_Vote::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateVotesResponse_Vote::~UpdateVotesResponse_Vote() {
  // @@protoc_insertion_point(destructor:api_pb.UpdateVotesResponse.Vote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateVotesResponse_Vote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateVotesResponse_Vote::ArenaDtor(void* object) {
  UpdateVotesResponse_Vote* _this = reinterpret_cast< UpdateVotesResponse_Vote* >(object);
  (void)_this;
}
void UpdateVotesResponse_Vote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVotesResponse_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVotesResponse_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UpdateVotesResponse.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVotesResponse_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string public_keys = 1 [json_name = "publicKeys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateVotesResponse.Vote.public_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateVotesResponse.Vote.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateVotesResponse_Vote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UpdateVotesResponse.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string public_keys = 1 [json_name = "publicKeys"];
  for (int i = 0, n = this->_internal_public_keys_size(); i < n; i++) {
    const auto& s = this->_internal_public_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateVotesResponse.Vote.public_keys");
    target = stream->WriteString(1, s, target);
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateVotesResponse.Vote.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UpdateVotesResponse.Vote)
  return target;
}

size_t UpdateVotesResponse_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UpdateVotesResponse.Vote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string public_keys = 1 [json_name = "publicKeys"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(public_keys_.size());
  for (int i = 0, n = public_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      public_keys_.Get(i));
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVotesResponse_Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVotesResponse_Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVotesResponse_Vote::GetClassData() const { return &_class_data_; }

void UpdateVotesResponse_Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateVotesResponse_Vote *>(to)->MergeFrom(
      static_cast<const UpdateVotesResponse_Vote &>(from));
}


void UpdateVotesResponse_Vote::MergeFrom(const UpdateVotesResponse_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UpdateVotesResponse.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVotesResponse_Vote::CopyFrom(const UpdateVotesResponse_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UpdateVotesResponse.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVotesResponse_Vote::IsInitialized() const {
  return true;
}

void UpdateVotesResponse_Vote::InternalSwap(UpdateVotesResponse_Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVotesResponse_Vote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[13]);
}

// ===================================================================

class UpdateVotesResponse::_Internal {
 public:
};

UpdateVotesResponse::UpdateVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  votes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UpdateVotesResponse)
}
UpdateVotesResponse::UpdateVotesResponse(const UpdateVotesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.UpdateVotesResponse)
}

inline void UpdateVotesResponse::SharedCtor() {
}

UpdateVotesResponse::~UpdateVotesResponse() {
  // @@protoc_insertion_point(destructor:api_pb.UpdateVotesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateVotesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UpdateVotesResponse::ArenaDtor(void* object) {
  UpdateVotesResponse* _this = reinterpret_cast< UpdateVotesResponse* >(object);
  (void)_this;
}
void UpdateVotesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateVotesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateVotesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UpdateVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateVotesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.UpdateVotesResponse.Vote votes = 1 [json_name = "votes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateVotesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UpdateVotesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.UpdateVotesResponse.Vote votes = 1 [json_name = "votes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_votes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UpdateVotesResponse)
  return target;
}

size_t UpdateVotesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UpdateVotesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.UpdateVotesResponse.Vote votes = 1 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateVotesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateVotesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateVotesResponse::GetClassData() const { return &_class_data_; }

void UpdateVotesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateVotesResponse *>(to)->MergeFrom(
      static_cast<const UpdateVotesResponse &>(from));
}


void UpdateVotesResponse::MergeFrom(const UpdateVotesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UpdateVotesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateVotesResponse::CopyFrom(const UpdateVotesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UpdateVotesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateVotesResponse::IsInitialized() const {
  return true;
}

void UpdateVotesResponse::InternalSwap(UpdateVotesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateVotesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[14]);
}

// ===================================================================

class VersionNetworkRequest::_Internal {
 public:
};

VersionNetworkRequest::VersionNetworkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.VersionNetworkRequest)
}
VersionNetworkRequest::VersionNetworkRequest(const VersionNetworkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.VersionNetworkRequest)
}

inline void VersionNetworkRequest::SharedCtor() {
}

VersionNetworkRequest::~VersionNetworkRequest() {
  // @@protoc_insertion_point(destructor:api_pb.VersionNetworkRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionNetworkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VersionNetworkRequest::ArenaDtor(void* object) {
  VersionNetworkRequest* _this = reinterpret_cast< VersionNetworkRequest* >(object);
  (void)_this;
}
void VersionNetworkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionNetworkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionNetworkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.VersionNetworkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionNetworkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionNetworkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.VersionNetworkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.VersionNetworkRequest)
  return target;
}

size_t VersionNetworkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.VersionNetworkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionNetworkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionNetworkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionNetworkRequest::GetClassData() const { return &_class_data_; }

void VersionNetworkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VersionNetworkRequest *>(to)->MergeFrom(
      static_cast<const VersionNetworkRequest &>(from));
}


void VersionNetworkRequest::MergeFrom(const VersionNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.VersionNetworkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionNetworkRequest::CopyFrom(const VersionNetworkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.VersionNetworkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionNetworkRequest::IsInitialized() const {
  return true;
}

void VersionNetworkRequest::InternalSwap(VersionNetworkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionNetworkRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[15]);
}

// ===================================================================

class VersionNetworkResponse_Version::_Internal {
 public:
};

VersionNetworkResponse_Version::VersionNetworkResponse_Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.VersionNetworkResponse.Version)
}
VersionNetworkResponse_Version::VersionNetworkResponse_Version(const VersionNetworkResponse_Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.VersionNetworkResponse.Version)
}

inline void VersionNetworkResponse_Version::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

VersionNetworkResponse_Version::~VersionNetworkResponse_Version() {
  // @@protoc_insertion_point(destructor:api_pb.VersionNetworkResponse.Version)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionNetworkResponse_Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionNetworkResponse_Version::ArenaDtor(void* object) {
  VersionNetworkResponse_Version* _this = reinterpret_cast< VersionNetworkResponse_Version* >(object);
  (void)_this;
}
void VersionNetworkResponse_Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionNetworkResponse_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionNetworkResponse_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.VersionNetworkResponse.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionNetworkResponse_Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VersionNetworkResponse.Version.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionNetworkResponse_Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.VersionNetworkResponse.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VersionNetworkResponse.Version.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.VersionNetworkResponse.Version)
  return target;
}

size_t VersionNetworkResponse_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.VersionNetworkResponse.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionNetworkResponse_Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionNetworkResponse_Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionNetworkResponse_Version::GetClassData() const { return &_class_data_; }

void VersionNetworkResponse_Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VersionNetworkResponse_Version *>(to)->MergeFrom(
      static_cast<const VersionNetworkResponse_Version &>(from));
}


void VersionNetworkResponse_Version::MergeFrom(const VersionNetworkResponse_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.VersionNetworkResponse.Version)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionNetworkResponse_Version::CopyFrom(const VersionNetworkResponse_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.VersionNetworkResponse.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionNetworkResponse_Version::IsInitialized() const {
  return true;
}

void VersionNetworkResponse_Version::InternalSwap(VersionNetworkResponse_Version* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionNetworkResponse_Version::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[16]);
}

// ===================================================================

class VersionNetworkResponse::_Internal {
 public:
};

VersionNetworkResponse::VersionNetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  versions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.VersionNetworkResponse)
}
VersionNetworkResponse::VersionNetworkResponse(const VersionNetworkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current().empty()) {
    current_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.VersionNetworkResponse)
}

inline void VersionNetworkResponse::SharedCtor() {
current_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VersionNetworkResponse::~VersionNetworkResponse() {
  // @@protoc_insertion_point(destructor:api_pb.VersionNetworkResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionNetworkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  current_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionNetworkResponse::ArenaDtor(void* object) {
  VersionNetworkResponse* _this = reinterpret_cast< VersionNetworkResponse* >(object);
  (void)_this;
}
void VersionNetworkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionNetworkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionNetworkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.VersionNetworkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  current_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionNetworkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string current = 1 [json_name = "current"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.VersionNetworkResponse.current"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.VersionNetworkResponse.Version versions = 3 [json_name = "versions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionNetworkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.VersionNetworkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string current = 1 [json_name = "current"];
  if (!this->_internal_current().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current().data(), static_cast<int>(this->_internal_current().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.VersionNetworkResponse.current");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current(), target);
  }

  // repeated .api_pb.VersionNetworkResponse.Version versions = 3 [json_name = "versions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_versions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_versions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.VersionNetworkResponse)
  return target;
}

size_t VersionNetworkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.VersionNetworkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.VersionNetworkResponse.Version versions = 3 [json_name = "versions"];
  total_size += 1UL * this->_internal_versions_size();
  for (const auto& msg : this->versions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string current = 1 [json_name = "current"];
  if (!this->_internal_current().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionNetworkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionNetworkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionNetworkResponse::GetClassData() const { return &_class_data_; }

void VersionNetworkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<VersionNetworkResponse *>(to)->MergeFrom(
      static_cast<const VersionNetworkResponse &>(from));
}


void VersionNetworkResponse::MergeFrom(const VersionNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.VersionNetworkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
  if (!from._internal_current().empty()) {
    _internal_set_current(from._internal_current());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionNetworkResponse::CopyFrom(const VersionNetworkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.VersionNetworkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionNetworkResponse::IsInitialized() const {
  return true;
}

void VersionNetworkResponse::InternalSwap(VersionNetworkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  versions_.InternalSwap(&other->versions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_, GetArenaForAllocation(),
      &other->current_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionNetworkResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[17]);
}

// ===================================================================

class PriceCommissionRequest::_Internal {
 public:
};

PriceCommissionRequest::PriceCommissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.PriceCommissionRequest)
}
PriceCommissionRequest::PriceCommissionRequest(const PriceCommissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.PriceCommissionRequest)
}

inline void PriceCommissionRequest::SharedCtor() {
height_ = uint64_t{0u};
}

PriceCommissionRequest::~PriceCommissionRequest() {
  // @@protoc_insertion_point(destructor:api_pb.PriceCommissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PriceCommissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PriceCommissionRequest::ArenaDtor(void* object) {
  PriceCommissionRequest* _this = reinterpret_cast< PriceCommissionRequest* >(object);
  (void)_this;
}
void PriceCommissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceCommissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PriceCommissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.PriceCommissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceCommissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceCommissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.PriceCommissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.PriceCommissionRequest)
  return target;
}

size_t PriceCommissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.PriceCommissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceCommissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PriceCommissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceCommissionRequest::GetClassData() const { return &_class_data_; }

void PriceCommissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PriceCommissionRequest *>(to)->MergeFrom(
      static_cast<const PriceCommissionRequest &>(from));
}


void PriceCommissionRequest::MergeFrom(const PriceCommissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.PriceCommissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceCommissionRequest::CopyFrom(const PriceCommissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.PriceCommissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceCommissionRequest::IsInitialized() const {
  return true;
}

void PriceCommissionRequest::InternalSwap(PriceCommissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceCommissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[18]);
}

// ===================================================================

class PriceCommissionResponse::_Internal {
 public:
  static const ::api_pb::Coin& coin(const PriceCommissionResponse* msg);
};

const ::api_pb::Coin&
PriceCommissionResponse::_Internal::coin(const PriceCommissionResponse* msg) {
  return *msg->coin_;
}
PriceCommissionResponse::PriceCommissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.PriceCommissionResponse)
}
PriceCommissionResponse::PriceCommissionResponse(const PriceCommissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload_byte().empty()) {
    payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_byte(), 
      GetArenaForAllocation());
  }
  send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_send().empty()) {
    send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_send(), 
      GetArenaForAllocation());
  }
  create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker3().empty()) {
    create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker3(), 
      GetArenaForAllocation());
  }
  create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker4().empty()) {
    create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker4(), 
      GetArenaForAllocation());
  }
  create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker5().empty()) {
    create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker5(), 
      GetArenaForAllocation());
  }
  create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker6().empty()) {
    create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker6(), 
      GetArenaForAllocation());
  }
  create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker7_10().empty()) {
    create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker7_10(), 
      GetArenaForAllocation());
  }
  declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_declare_candidacy().empty()) {
    declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_declare_candidacy(), 
      GetArenaForAllocation());
  }
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegate().empty()) {
    delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate(), 
      GetArenaForAllocation());
  }
  unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unbond().empty()) {
    unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unbond(), 
      GetArenaForAllocation());
  }
  redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redeem_check().empty()) {
    redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redeem_check(), 
      GetArenaForAllocation());
  }
  create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_multisig().empty()) {
    create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate().empty()) {
    edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate(), 
      GetArenaForAllocation());
  }
  set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_halt_block().empty()) {
    set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_halt_block(), 
      GetArenaForAllocation());
  }
  edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_ticker_owner().empty()) {
    edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_ticker_owner(), 
      GetArenaForAllocation());
  }
  edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_multisig().empty()) {
    edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_public_key().empty()) {
    edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_public_key(), 
      GetArenaForAllocation());
  }
  edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_commission().empty()) {
    edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_commission(), 
      GetArenaForAllocation());
  }
  vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_commission().empty()) {
    vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_commission(), 
      GetArenaForAllocation());
  }
  vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_update().empty()) {
    vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_update(), 
      GetArenaForAllocation());
  }
  create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_coin().empty()) {
    create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_coin(), 
      GetArenaForAllocation());
  }
  create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_token().empty()) {
    create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_token(), 
      GetArenaForAllocation());
  }
  recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_coin().empty()) {
    recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_coin(), 
      GetArenaForAllocation());
  }
  recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_token().empty()) {
    recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_token(), 
      GetArenaForAllocation());
  }
  buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_bancor().empty()) {
    buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_bancor(), 
      GetArenaForAllocation());
  }
  sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_bancor().empty()) {
    sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_bancor(), 
      GetArenaForAllocation());
  }
  sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_bancor().empty()) {
    sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_bancor(), 
      GetArenaForAllocation());
  }
  buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_base().empty()) {
    buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_base(), 
      GetArenaForAllocation());
  }
  sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_base().empty()) {
    sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_base(), 
      GetArenaForAllocation());
  }
  sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_base().empty()) {
    sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_base(), 
      GetArenaForAllocation());
  }
  set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_on().empty()) {
    set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_on(), 
      GetArenaForAllocation());
  }
  set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_off().empty()) {
    set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_off(), 
      GetArenaForAllocation());
  }
  mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mint_token().empty()) {
    mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mint_token(), 
      GetArenaForAllocation());
  }
  burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn_token().empty()) {
    burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_burn_token(), 
      GetArenaForAllocation());
  }
  create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_swap_pool().empty()) {
    create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_swap_pool(), 
      GetArenaForAllocation());
  }
  add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_liquidity().empty()) {
    add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_liquidity(), 
      GetArenaForAllocation());
  }
  remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_liquidity().empty()) {
    remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_liquidity(), 
      GetArenaForAllocation());
  }
  multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_base().empty()) {
    multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_base(), 
      GetArenaForAllocation());
  }
  multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_delta().empty()) {
    multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_delta(), 
      GetArenaForAllocation());
  }
  buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_delta().empty()) {
    buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_delta().empty()) {
    sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_delta().empty()) {
    sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_delta(), 
      GetArenaForAllocation());
  }
  failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failed_tx().empty()) {
    failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failed_tx(), 
      GetArenaForAllocation());
  }
  add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_limit_order().empty()) {
    add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_limit_order(), 
      GetArenaForAllocation());
  }
  remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_limit_order().empty()) {
    remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_limit_order(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.PriceCommissionResponse)
}

inline void PriceCommissionResponse::SharedCtor() {
payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

PriceCommissionResponse::~PriceCommissionResponse() {
  // @@protoc_insertion_point(destructor:api_pb.PriceCommissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PriceCommissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_byte_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  send_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker7_10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  declare_candidacy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unbond_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redeem_check_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_halt_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_ticker_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_on_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_off_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mint_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_swap_pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failed_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void PriceCommissionResponse::ArenaDtor(void* object) {
  PriceCommissionResponse* _this = reinterpret_cast< PriceCommissionResponse* >(object);
  (void)_this;
}
void PriceCommissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceCommissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PriceCommissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.PriceCommissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_byte_.ClearToEmpty();
  send_.ClearToEmpty();
  create_ticker3_.ClearToEmpty();
  create_ticker4_.ClearToEmpty();
  create_ticker5_.ClearToEmpty();
  create_ticker6_.ClearToEmpty();
  create_ticker7_10_.ClearToEmpty();
  declare_candidacy_.ClearToEmpty();
  delegate_.ClearToEmpty();
  unbond_.ClearToEmpty();
  redeem_check_.ClearToEmpty();
  create_multisig_.ClearToEmpty();
  edit_candidate_.ClearToEmpty();
  set_halt_block_.ClearToEmpty();
  edit_ticker_owner_.ClearToEmpty();
  edit_multisig_.ClearToEmpty();
  edit_candidate_public_key_.ClearToEmpty();
  edit_candidate_commission_.ClearToEmpty();
  vote_commission_.ClearToEmpty();
  vote_update_.ClearToEmpty();
  create_coin_.ClearToEmpty();
  create_token_.ClearToEmpty();
  recreate_coin_.ClearToEmpty();
  recreate_token_.ClearToEmpty();
  buy_bancor_.ClearToEmpty();
  sell_bancor_.ClearToEmpty();
  sell_all_bancor_.ClearToEmpty();
  buy_pool_base_.ClearToEmpty();
  sell_pool_base_.ClearToEmpty();
  sell_all_pool_base_.ClearToEmpty();
  set_candidate_on_.ClearToEmpty();
  set_candidate_off_.ClearToEmpty();
  mint_token_.ClearToEmpty();
  burn_token_.ClearToEmpty();
  create_swap_pool_.ClearToEmpty();
  add_liquidity_.ClearToEmpty();
  remove_liquidity_.ClearToEmpty();
  multisend_base_.ClearToEmpty();
  multisend_delta_.ClearToEmpty();
  buy_pool_delta_.ClearToEmpty();
  sell_pool_delta_.ClearToEmpty();
  sell_all_pool_delta_.ClearToEmpty();
  failed_tx_.ClearToEmpty();
  add_limit_order_.ClearToEmpty();
  remove_limit_order_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceCommissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload_byte = 4 [json_name = "payloadByte"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload_byte();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.payload_byte"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string send = 5 [json_name = "send"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_send();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.send"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker3 = 7 [json_name = "createTicker3"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_create_ticker3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_ticker3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker4 = 8 [json_name = "createTicker4"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_create_ticker4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_ticker4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker5 = 9 [json_name = "createTicker5"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_create_ticker5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_ticker5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker6 = 10 [json_name = "createTicker6"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_create_ticker6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_ticker6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker7_10 = 11 [json_name = "createTicker710"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_create_ticker7_10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_ticker7_10"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string declare_candidacy = 13 [json_name = "declareCandidacy"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_declare_candidacy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.declare_candidacy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delegate = 14 [json_name = "delegate"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.delegate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unbond = 15 [json_name = "unbond"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_unbond();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.unbond"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string redeem_check = 16 [json_name = "redeemCheck"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_redeem_check();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.redeem_check"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_multisig = 18 [json_name = "createMultisig"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_create_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate = 20 [json_name = "editCandidate"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_edit_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.edit_candidate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_halt_block = 21 [json_name = "setHaltBlock"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_set_halt_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.set_halt_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_edit_ticker_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.edit_ticker_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_multisig = 23 [json_name = "editMultisig"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_edit_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.edit_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_edit_candidate_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.edit_candidate_public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_edit_candidate_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.edit_candidate_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_commission = 31 [json_name = "voteCommission"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_vote_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.vote_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_update = 32 [json_name = "voteUpdate"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_vote_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.vote_update"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_coin = 34 [json_name = "createCoin"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_create_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_token = 35 [json_name = "createToken"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_create_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_coin = 36 [json_name = "recreateCoin"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recreate_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.recreate_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_token = 37 [json_name = "recreateToken"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_recreate_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.recreate_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_bancor = 38 [json_name = "buyBancor"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buy_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.buy_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_bancor = 39 [json_name = "sellBancor"];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sell_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.sell_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sell_all_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.sell_all_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_base = 41 [json_name = "buyPoolBase"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_buy_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.buy_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_base = 42 [json_name = "sellPoolBase"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sell_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.sell_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sell_all_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.sell_all_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_on = 44 [json_name = "setCandidateOn"];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_set_candidate_on();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.set_candidate_on"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_off = 45 [json_name = "setCandidateOff"];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_set_candidate_off();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.set_candidate_off"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mint_token = 46 [json_name = "mintToken"];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_mint_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.mint_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string burn_token = 47 [json_name = "burnToken"];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_burn_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.burn_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_swap_pool = 48 [json_name = "createSwapPool"];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_create_swap_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.create_swap_pool"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_liquidity = 49 [json_name = "addLiquidity"];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_add_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.add_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_liquidity = 50 [json_name = "removeLiquidity"];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_remove_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.remove_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_base = 51 [json_name = "multisendBase"];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_multisend_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.multisend_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_delta = 52 [json_name = "multisendDelta"];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_multisend_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.multisend_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_buy_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.buy_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sell_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.sell_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_sell_all_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.sell_all_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failed_tx = 56 [json_name = "failedTx"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_failed_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.failed_tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_limit_order = 57 [json_name = "addLimitOrder"];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_add_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.add_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_remove_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.PriceCommissionResponse.remove_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceCommissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.PriceCommissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 3 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::coin(this), target, stream);
  }

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_byte().data(), static_cast<int>(this->_internal_payload_byte().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.payload_byte");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload_byte(), target);
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send().data(), static_cast<int>(this->_internal_send().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.send");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_send(), target);
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker3().data(), static_cast<int>(this->_internal_create_ticker3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_ticker3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_create_ticker3(), target);
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker4().data(), static_cast<int>(this->_internal_create_ticker4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_ticker4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_create_ticker4(), target);
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker5().data(), static_cast<int>(this->_internal_create_ticker5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_ticker5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_ticker5(), target);
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker6().data(), static_cast<int>(this->_internal_create_ticker6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_ticker6");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_create_ticker6(), target);
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker7_10().data(), static_cast<int>(this->_internal_create_ticker7_10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_ticker7_10");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_create_ticker7_10(), target);
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_declare_candidacy().data(), static_cast<int>(this->_internal_declare_candidacy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.declare_candidacy");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_declare_candidacy(), target);
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate().data(), static_cast<int>(this->_internal_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.delegate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_delegate(), target);
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unbond().data(), static_cast<int>(this->_internal_unbond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.unbond");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unbond(), target);
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redeem_check().data(), static_cast<int>(this->_internal_redeem_check().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.redeem_check");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_redeem_check(), target);
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_multisig().data(), static_cast<int>(this->_internal_create_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_multisig");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_create_multisig(), target);
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate().data(), static_cast<int>(this->_internal_edit_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.edit_candidate");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_edit_candidate(), target);
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_halt_block().data(), static_cast<int>(this->_internal_set_halt_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.set_halt_block");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_set_halt_block(), target);
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_ticker_owner().data(), static_cast<int>(this->_internal_edit_ticker_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.edit_ticker_owner");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_edit_ticker_owner(), target);
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_multisig().data(), static_cast<int>(this->_internal_edit_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.edit_multisig");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_edit_multisig(), target);
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_public_key().data(), static_cast<int>(this->_internal_edit_candidate_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.edit_candidate_public_key");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_edit_candidate_public_key(), target);
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_commission().data(), static_cast<int>(this->_internal_edit_candidate_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.edit_candidate_commission");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_edit_candidate_commission(), target);
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_commission().data(), static_cast<int>(this->_internal_vote_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.vote_commission");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_vote_commission(), target);
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_update().data(), static_cast<int>(this->_internal_vote_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.vote_update");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_vote_update(), target);
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_coin().data(), static_cast<int>(this->_internal_create_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_coin");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_create_coin(), target);
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_token().data(), static_cast<int>(this->_internal_create_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_token");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_create_token(), target);
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_coin().data(), static_cast<int>(this->_internal_recreate_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.recreate_coin");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_recreate_coin(), target);
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_token().data(), static_cast<int>(this->_internal_recreate_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.recreate_token");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_recreate_token(), target);
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_bancor().data(), static_cast<int>(this->_internal_buy_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.buy_bancor");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_buy_bancor(), target);
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_bancor().data(), static_cast<int>(this->_internal_sell_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.sell_bancor");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_sell_bancor(), target);
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_bancor().data(), static_cast<int>(this->_internal_sell_all_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.sell_all_bancor");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_sell_all_bancor(), target);
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_base().data(), static_cast<int>(this->_internal_buy_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.buy_pool_base");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_buy_pool_base(), target);
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_base().data(), static_cast<int>(this->_internal_sell_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.sell_pool_base");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_sell_pool_base(), target);
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_base().data(), static_cast<int>(this->_internal_sell_all_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.sell_all_pool_base");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_sell_all_pool_base(), target);
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_on().data(), static_cast<int>(this->_internal_set_candidate_on().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.set_candidate_on");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_set_candidate_on(), target);
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_off().data(), static_cast<int>(this->_internal_set_candidate_off().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.set_candidate_off");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_set_candidate_off(), target);
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_token().data(), static_cast<int>(this->_internal_mint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.mint_token");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_mint_token(), target);
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_burn_token().data(), static_cast<int>(this->_internal_burn_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.burn_token");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_burn_token(), target);
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_swap_pool().data(), static_cast<int>(this->_internal_create_swap_pool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.create_swap_pool");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_create_swap_pool(), target);
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_liquidity().data(), static_cast<int>(this->_internal_add_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.add_liquidity");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_add_liquidity(), target);
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_liquidity().data(), static_cast<int>(this->_internal_remove_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.remove_liquidity");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_remove_liquidity(), target);
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_base().data(), static_cast<int>(this->_internal_multisend_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.multisend_base");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_multisend_base(), target);
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_delta().data(), static_cast<int>(this->_internal_multisend_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.multisend_delta");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_multisend_delta(), target);
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_delta().data(), static_cast<int>(this->_internal_buy_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.buy_pool_delta");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_buy_pool_delta(), target);
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_delta().data(), static_cast<int>(this->_internal_sell_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.sell_pool_delta");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_sell_pool_delta(), target);
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_delta().data(), static_cast<int>(this->_internal_sell_all_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.sell_all_pool_delta");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_sell_all_pool_delta(), target);
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failed_tx().data(), static_cast<int>(this->_internal_failed_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.failed_tx");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_failed_tx(), target);
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_limit_order().data(), static_cast<int>(this->_internal_add_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.add_limit_order");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_add_limit_order(), target);
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_limit_order().data(), static_cast<int>(this->_internal_remove_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.PriceCommissionResponse.remove_limit_order");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_remove_limit_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.PriceCommissionResponse)
  return target;
}

size_t PriceCommissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.PriceCommissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_byte());
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send());
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker3());
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker4());
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker5());
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker6());
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker7_10());
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_declare_candidacy());
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate());
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unbond());
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redeem_check());
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_multisig());
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate());
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_halt_block());
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_ticker_owner());
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_multisig());
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_public_key());
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_commission());
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_commission());
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_update());
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_coin());
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_token());
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_coin());
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_token());
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_bancor());
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_bancor());
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_bancor());
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_base());
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_base());
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_base());
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_on());
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_off());
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_token());
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_burn_token());
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_swap_pool());
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_liquidity());
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_liquidity());
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_base());
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_delta());
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_delta());
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_delta());
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_delta());
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failed_tx());
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_limit_order());
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_limit_order());
  }

  // .api_pb.Coin coin = 3 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceCommissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PriceCommissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceCommissionResponse::GetClassData() const { return &_class_data_; }

void PriceCommissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PriceCommissionResponse *>(to)->MergeFrom(
      static_cast<const PriceCommissionResponse &>(from));
}


void PriceCommissionResponse::MergeFrom(const PriceCommissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.PriceCommissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload_byte().empty()) {
    _internal_set_payload_byte(from._internal_payload_byte());
  }
  if (!from._internal_send().empty()) {
    _internal_set_send(from._internal_send());
  }
  if (!from._internal_create_ticker3().empty()) {
    _internal_set_create_ticker3(from._internal_create_ticker3());
  }
  if (!from._internal_create_ticker4().empty()) {
    _internal_set_create_ticker4(from._internal_create_ticker4());
  }
  if (!from._internal_create_ticker5().empty()) {
    _internal_set_create_ticker5(from._internal_create_ticker5());
  }
  if (!from._internal_create_ticker6().empty()) {
    _internal_set_create_ticker6(from._internal_create_ticker6());
  }
  if (!from._internal_create_ticker7_10().empty()) {
    _internal_set_create_ticker7_10(from._internal_create_ticker7_10());
  }
  if (!from._internal_declare_candidacy().empty()) {
    _internal_set_declare_candidacy(from._internal_declare_candidacy());
  }
  if (!from._internal_delegate().empty()) {
    _internal_set_delegate(from._internal_delegate());
  }
  if (!from._internal_unbond().empty()) {
    _internal_set_unbond(from._internal_unbond());
  }
  if (!from._internal_redeem_check().empty()) {
    _internal_set_redeem_check(from._internal_redeem_check());
  }
  if (!from._internal_create_multisig().empty()) {
    _internal_set_create_multisig(from._internal_create_multisig());
  }
  if (!from._internal_edit_candidate().empty()) {
    _internal_set_edit_candidate(from._internal_edit_candidate());
  }
  if (!from._internal_set_halt_block().empty()) {
    _internal_set_set_halt_block(from._internal_set_halt_block());
  }
  if (!from._internal_edit_ticker_owner().empty()) {
    _internal_set_edit_ticker_owner(from._internal_edit_ticker_owner());
  }
  if (!from._internal_edit_multisig().empty()) {
    _internal_set_edit_multisig(from._internal_edit_multisig());
  }
  if (!from._internal_edit_candidate_public_key().empty()) {
    _internal_set_edit_candidate_public_key(from._internal_edit_candidate_public_key());
  }
  if (!from._internal_edit_candidate_commission().empty()) {
    _internal_set_edit_candidate_commission(from._internal_edit_candidate_commission());
  }
  if (!from._internal_vote_commission().empty()) {
    _internal_set_vote_commission(from._internal_vote_commission());
  }
  if (!from._internal_vote_update().empty()) {
    _internal_set_vote_update(from._internal_vote_update());
  }
  if (!from._internal_create_coin().empty()) {
    _internal_set_create_coin(from._internal_create_coin());
  }
  if (!from._internal_create_token().empty()) {
    _internal_set_create_token(from._internal_create_token());
  }
  if (!from._internal_recreate_coin().empty()) {
    _internal_set_recreate_coin(from._internal_recreate_coin());
  }
  if (!from._internal_recreate_token().empty()) {
    _internal_set_recreate_token(from._internal_recreate_token());
  }
  if (!from._internal_buy_bancor().empty()) {
    _internal_set_buy_bancor(from._internal_buy_bancor());
  }
  if (!from._internal_sell_bancor().empty()) {
    _internal_set_sell_bancor(from._internal_sell_bancor());
  }
  if (!from._internal_sell_all_bancor().empty()) {
    _internal_set_sell_all_bancor(from._internal_sell_all_bancor());
  }
  if (!from._internal_buy_pool_base().empty()) {
    _internal_set_buy_pool_base(from._internal_buy_pool_base());
  }
  if (!from._internal_sell_pool_base().empty()) {
    _internal_set_sell_pool_base(from._internal_sell_pool_base());
  }
  if (!from._internal_sell_all_pool_base().empty()) {
    _internal_set_sell_all_pool_base(from._internal_sell_all_pool_base());
  }
  if (!from._internal_set_candidate_on().empty()) {
    _internal_set_set_candidate_on(from._internal_set_candidate_on());
  }
  if (!from._internal_set_candidate_off().empty()) {
    _internal_set_set_candidate_off(from._internal_set_candidate_off());
  }
  if (!from._internal_mint_token().empty()) {
    _internal_set_mint_token(from._internal_mint_token());
  }
  if (!from._internal_burn_token().empty()) {
    _internal_set_burn_token(from._internal_burn_token());
  }
  if (!from._internal_create_swap_pool().empty()) {
    _internal_set_create_swap_pool(from._internal_create_swap_pool());
  }
  if (!from._internal_add_liquidity().empty()) {
    _internal_set_add_liquidity(from._internal_add_liquidity());
  }
  if (!from._internal_remove_liquidity().empty()) {
    _internal_set_remove_liquidity(from._internal_remove_liquidity());
  }
  if (!from._internal_multisend_base().empty()) {
    _internal_set_multisend_base(from._internal_multisend_base());
  }
  if (!from._internal_multisend_delta().empty()) {
    _internal_set_multisend_delta(from._internal_multisend_delta());
  }
  if (!from._internal_buy_pool_delta().empty()) {
    _internal_set_buy_pool_delta(from._internal_buy_pool_delta());
  }
  if (!from._internal_sell_pool_delta().empty()) {
    _internal_set_sell_pool_delta(from._internal_sell_pool_delta());
  }
  if (!from._internal_sell_all_pool_delta().empty()) {
    _internal_set_sell_all_pool_delta(from._internal_sell_all_pool_delta());
  }
  if (!from._internal_failed_tx().empty()) {
    _internal_set_failed_tx(from._internal_failed_tx());
  }
  if (!from._internal_add_limit_order().empty()) {
    _internal_set_add_limit_order(from._internal_add_limit_order());
  }
  if (!from._internal_remove_limit_order().empty()) {
    _internal_set_remove_limit_order(from._internal_remove_limit_order());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceCommissionResponse::CopyFrom(const PriceCommissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.PriceCommissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceCommissionResponse::IsInitialized() const {
  return true;
}

void PriceCommissionResponse::InternalSwap(PriceCommissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_byte_, GetArenaForAllocation(),
      &other->payload_byte_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &send_, GetArenaForAllocation(),
      &other->send_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker3_, GetArenaForAllocation(),
      &other->create_ticker3_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker4_, GetArenaForAllocation(),
      &other->create_ticker4_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker5_, GetArenaForAllocation(),
      &other->create_ticker5_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker6_, GetArenaForAllocation(),
      &other->create_ticker6_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker7_10_, GetArenaForAllocation(),
      &other->create_ticker7_10_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &declare_candidacy_, GetArenaForAllocation(),
      &other->declare_candidacy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delegate_, GetArenaForAllocation(),
      &other->delegate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unbond_, GetArenaForAllocation(),
      &other->unbond_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redeem_check_, GetArenaForAllocation(),
      &other->redeem_check_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_multisig_, GetArenaForAllocation(),
      &other->create_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_, GetArenaForAllocation(),
      &other->edit_candidate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_halt_block_, GetArenaForAllocation(),
      &other->set_halt_block_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_ticker_owner_, GetArenaForAllocation(),
      &other->edit_ticker_owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_multisig_, GetArenaForAllocation(),
      &other->edit_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_public_key_, GetArenaForAllocation(),
      &other->edit_candidate_public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_commission_, GetArenaForAllocation(),
      &other->edit_candidate_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_commission_, GetArenaForAllocation(),
      &other->vote_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_update_, GetArenaForAllocation(),
      &other->vote_update_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_coin_, GetArenaForAllocation(),
      &other->create_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_token_, GetArenaForAllocation(),
      &other->create_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_coin_, GetArenaForAllocation(),
      &other->recreate_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_token_, GetArenaForAllocation(),
      &other->recreate_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_bancor_, GetArenaForAllocation(),
      &other->buy_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_bancor_, GetArenaForAllocation(),
      &other->sell_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_bancor_, GetArenaForAllocation(),
      &other->sell_all_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_base_, GetArenaForAllocation(),
      &other->buy_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_base_, GetArenaForAllocation(),
      &other->sell_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_base_, GetArenaForAllocation(),
      &other->sell_all_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_on_, GetArenaForAllocation(),
      &other->set_candidate_on_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_off_, GetArenaForAllocation(),
      &other->set_candidate_off_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mint_token_, GetArenaForAllocation(),
      &other->mint_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &burn_token_, GetArenaForAllocation(),
      &other->burn_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_swap_pool_, GetArenaForAllocation(),
      &other->create_swap_pool_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_liquidity_, GetArenaForAllocation(),
      &other->add_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_liquidity_, GetArenaForAllocation(),
      &other->remove_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_base_, GetArenaForAllocation(),
      &other->multisend_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_delta_, GetArenaForAllocation(),
      &other->multisend_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_delta_, GetArenaForAllocation(),
      &other->buy_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_delta_, GetArenaForAllocation(),
      &other->sell_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_delta_, GetArenaForAllocation(),
      &other->sell_all_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &failed_tx_, GetArenaForAllocation(),
      &other->failed_tx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_limit_order_, GetArenaForAllocation(),
      &other->add_limit_order_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_limit_order_, GetArenaForAllocation(),
      &other->remove_limit_order_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceCommissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[19]);
}

// ===================================================================

class SwapPoolRequest::_Internal {
 public:
};

SwapPoolRequest::SwapPoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SwapPoolRequest)
}
SwapPoolRequest::SwapPoolRequest(const SwapPoolRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coin0_, &from.coin0_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:api_pb.SwapPoolRequest)
}

inline void SwapPoolRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(height_));
}

SwapPoolRequest::~SwapPoolRequest() {
  // @@protoc_insertion_point(destructor:api_pb.SwapPoolRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SwapPoolRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwapPoolRequest::ArenaDtor(void* object) {
  SwapPoolRequest* _this = reinterpret_cast< SwapPoolRequest* >(object);
  (void)_this;
}
void SwapPoolRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapPoolRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwapPoolRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SwapPoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&coin0_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapPoolRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coin0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapPoolRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SwapPoolRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin0(), target);
  }

  // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coin1(), target);
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SwapPoolRequest)
  return target;
}

size_t SwapPoolRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SwapPoolRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin0());
  }

  // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin1());
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapPoolRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwapPoolRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapPoolRequest::GetClassData() const { return &_class_data_; }

void SwapPoolRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SwapPoolRequest *>(to)->MergeFrom(
      static_cast<const SwapPoolRequest &>(from));
}


void SwapPoolRequest::MergeFrom(const SwapPoolRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SwapPoolRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_coin0() != 0) {
    _internal_set_coin0(from._internal_coin0());
  }
  if (from._internal_coin1() != 0) {
    _internal_set_coin1(from._internal_coin1());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapPoolRequest::CopyFrom(const SwapPoolRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SwapPoolRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapPoolRequest::IsInitialized() const {
  return true;
}

void SwapPoolRequest::InternalSwap(SwapPoolRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapPoolRequest, height_)
      + sizeof(SwapPoolRequest::height_)
      - PROTOBUF_FIELD_OFFSET(SwapPoolRequest, coin0_)>(
          reinterpret_cast<char*>(&coin0_),
          reinterpret_cast<char*>(&other->coin0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapPoolRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[20]);
}

// ===================================================================

class SwapPoolResponse::_Internal {
 public:
};

SwapPoolResponse::SwapPoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SwapPoolResponse)
}
SwapPoolResponse::SwapPoolResponse(const SwapPoolResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  amount0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount0().empty()) {
    amount0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount0(), 
      GetArenaForAllocation());
  }
  amount1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount1().empty()) {
    amount1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount1(), 
      GetArenaForAllocation());
  }
  liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_liquidity().empty()) {
    liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_liquidity(), 
      GetArenaForAllocation());
  }
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_price().empty()) {
    price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SwapPoolResponse)
}

inline void SwapPoolResponse::SharedCtor() {
amount0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SwapPoolResponse::~SwapPoolResponse() {
  // @@protoc_insertion_point(destructor:api_pb.SwapPoolResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SwapPoolResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  amount0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapPoolResponse::ArenaDtor(void* object) {
  SwapPoolResponse* _this = reinterpret_cast< SwapPoolResponse* >(object);
  (void)_this;
}
void SwapPoolResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapPoolResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwapPoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SwapPoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount0_.ClearToEmpty();
  amount1_.ClearToEmpty();
  liquidity_.ClearToEmpty();
  price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapPoolResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string amount0 = 1 [json_name = "amount0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_amount0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SwapPoolResponse.amount0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount1 = 2 [json_name = "amount1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SwapPoolResponse.amount1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string liquidity = 3 [json_name = "liquidity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SwapPoolResponse.liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string price = 4 [json_name = "price"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SwapPoolResponse.price"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapPoolResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SwapPoolResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string amount0 = 1 [json_name = "amount0"];
  if (!this->_internal_amount0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount0().data(), static_cast<int>(this->_internal_amount0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SwapPoolResponse.amount0");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_amount0(), target);
  }

  // string amount1 = 2 [json_name = "amount1"];
  if (!this->_internal_amount1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount1().data(), static_cast<int>(this->_internal_amount1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SwapPoolResponse.amount1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount1(), target);
  }

  // string liquidity = 3 [json_name = "liquidity"];
  if (!this->_internal_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_liquidity().data(), static_cast<int>(this->_internal_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SwapPoolResponse.liquidity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_liquidity(), target);
  }

  // string price = 4 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SwapPoolResponse.price");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SwapPoolResponse)
  return target;
}

size_t SwapPoolResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SwapPoolResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string amount0 = 1 [json_name = "amount0"];
  if (!this->_internal_amount0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount0());
  }

  // string amount1 = 2 [json_name = "amount1"];
  if (!this->_internal_amount1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount1());
  }

  // string liquidity = 3 [json_name = "liquidity"];
  if (!this->_internal_liquidity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_liquidity());
  }

  // string price = 4 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapPoolResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwapPoolResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapPoolResponse::GetClassData() const { return &_class_data_; }

void SwapPoolResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SwapPoolResponse *>(to)->MergeFrom(
      static_cast<const SwapPoolResponse &>(from));
}


void SwapPoolResponse::MergeFrom(const SwapPoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SwapPoolResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_amount0().empty()) {
    _internal_set_amount0(from._internal_amount0());
  }
  if (!from._internal_amount1().empty()) {
    _internal_set_amount1(from._internal_amount1());
  }
  if (!from._internal_liquidity().empty()) {
    _internal_set_liquidity(from._internal_liquidity());
  }
  if (!from._internal_price().empty()) {
    _internal_set_price(from._internal_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapPoolResponse::CopyFrom(const SwapPoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SwapPoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapPoolResponse::IsInitialized() const {
  return true;
}

void SwapPoolResponse::InternalSwap(SwapPoolResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount0_, GetArenaForAllocation(),
      &other->amount0_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount1_, GetArenaForAllocation(),
      &other->amount1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &liquidity_, GetArenaForAllocation(),
      &other->liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_, GetArenaForAllocation(),
      &other->price_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapPoolResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[21]);
}

// ===================================================================

class SwapPoolProviderRequest::_Internal {
 public:
};

SwapPoolProviderRequest::SwapPoolProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SwapPoolProviderRequest)
}
SwapPoolProviderRequest::SwapPoolProviderRequest(const SwapPoolProviderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider().empty()) {
    provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider(), 
      GetArenaForAllocation());
  }
  ::memcpy(&coin0_, &from.coin0_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:api_pb.SwapPoolProviderRequest)
}

inline void SwapPoolProviderRequest::SharedCtor() {
provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(height_));
}

SwapPoolProviderRequest::~SwapPoolProviderRequest() {
  // @@protoc_insertion_point(destructor:api_pb.SwapPoolProviderRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SwapPoolProviderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapPoolProviderRequest::ArenaDtor(void* object) {
  SwapPoolProviderRequest* _this = reinterpret_cast< SwapPoolProviderRequest* >(object);
  (void)_this;
}
void SwapPoolProviderRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SwapPoolProviderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SwapPoolProviderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SwapPoolProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_.ClearToEmpty();
  ::memset(&coin0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&coin0_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapPoolProviderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coin0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider = 3 [json_name = "provider"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SwapPoolProviderRequest.provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapPoolProviderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SwapPoolProviderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin0(), target);
  }

  // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coin1(), target);
  }

  // string provider = 3 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider().data(), static_cast<int>(this->_internal_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SwapPoolProviderRequest.provider");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_provider(), target);
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SwapPoolProviderRequest)
  return target;
}

size_t SwapPoolProviderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SwapPoolProviderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider = 3 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider());
  }

  // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin0());
  }

  // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_coin1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin1());
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapPoolProviderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SwapPoolProviderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapPoolProviderRequest::GetClassData() const { return &_class_data_; }

void SwapPoolProviderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SwapPoolProviderRequest *>(to)->MergeFrom(
      static_cast<const SwapPoolProviderRequest &>(from));
}


void SwapPoolProviderRequest::MergeFrom(const SwapPoolProviderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SwapPoolProviderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_provider().empty()) {
    _internal_set_provider(from._internal_provider());
  }
  if (from._internal_coin0() != 0) {
    _internal_set_coin0(from._internal_coin0());
  }
  if (from._internal_coin1() != 0) {
    _internal_set_coin1(from._internal_coin1());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapPoolProviderRequest::CopyFrom(const SwapPoolProviderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SwapPoolProviderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapPoolProviderRequest::IsInitialized() const {
  return true;
}

void SwapPoolProviderRequest::InternalSwap(SwapPoolProviderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_, GetArenaForAllocation(),
      &other->provider_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapPoolProviderRequest, height_)
      + sizeof(SwapPoolProviderRequest::height_)
      - PROTOBUF_FIELD_OFFSET(SwapPoolProviderRequest, coin0_)>(
          reinterpret_cast<char*>(&coin0_),
          reinterpret_cast<char*>(&other->coin0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapPoolProviderRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[22]);
}

// ===================================================================

class NodeInfo_ProtocolVersion::_Internal {
 public:
};

NodeInfo_ProtocolVersion::NodeInfo_ProtocolVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NodeInfo.ProtocolVersion)
}
NodeInfo_ProtocolVersion::NodeInfo_ProtocolVersion(const NodeInfo_ProtocolVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&block_, &from.block_,
    static_cast<size_t>(reinterpret_cast<char*>(&p2p_) -
    reinterpret_cast<char*>(&block_)) + sizeof(p2p_));
  // @@protoc_insertion_point(copy_constructor:api_pb.NodeInfo.ProtocolVersion)
}

inline void NodeInfo_ProtocolVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p2p_) -
    reinterpret_cast<char*>(&block_)) + sizeof(p2p_));
}

NodeInfo_ProtocolVersion::~NodeInfo_ProtocolVersion() {
  // @@protoc_insertion_point(destructor:api_pb.NodeInfo.ProtocolVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_ProtocolVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NodeInfo_ProtocolVersion::ArenaDtor(void* object) {
  NodeInfo_ProtocolVersion* _this = reinterpret_cast< NodeInfo_ProtocolVersion* >(object);
  (void)_this;
}
void NodeInfo_ProtocolVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_ProtocolVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_ProtocolVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NodeInfo.ProtocolVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p2p_) -
      reinterpret_cast<char*>(&block_)) + sizeof(p2p_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_ProtocolVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block = 1 [json_name = "block"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 app = 2 [json_name = "app"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          app_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 p2p = 3 [json_name = "p2p"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          p2p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_ProtocolVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NodeInfo.ProtocolVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block = 1 [json_name = "block"];
  if (this->_internal_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_block(), target);
  }

  // uint64 app = 2 [json_name = "app"];
  if (this->_internal_app() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_app(), target);
  }

  // uint64 p2p = 3 [json_name = "p2p"];
  if (this->_internal_p2p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_p2p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NodeInfo.ProtocolVersion)
  return target;
}

size_t NodeInfo_ProtocolVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NodeInfo.ProtocolVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 block = 1 [json_name = "block"];
  if (this->_internal_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block());
  }

  // uint64 app = 2 [json_name = "app"];
  if (this->_internal_app() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_app());
  }

  // uint64 p2p = 3 [json_name = "p2p"];
  if (this->_internal_p2p() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_p2p());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_ProtocolVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_ProtocolVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_ProtocolVersion::GetClassData() const { return &_class_data_; }

void NodeInfo_ProtocolVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_ProtocolVersion *>(to)->MergeFrom(
      static_cast<const NodeInfo_ProtocolVersion &>(from));
}


void NodeInfo_ProtocolVersion::MergeFrom(const NodeInfo_ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NodeInfo.ProtocolVersion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_block() != 0) {
    _internal_set_block(from._internal_block());
  }
  if (from._internal_app() != 0) {
    _internal_set_app(from._internal_app());
  }
  if (from._internal_p2p() != 0) {
    _internal_set_p2p(from._internal_p2p());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_ProtocolVersion::CopyFrom(const NodeInfo_ProtocolVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NodeInfo.ProtocolVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_ProtocolVersion::IsInitialized() const {
  return true;
}

void NodeInfo_ProtocolVersion::InternalSwap(NodeInfo_ProtocolVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo_ProtocolVersion, p2p_)
      + sizeof(NodeInfo_ProtocolVersion::p2p_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo_ProtocolVersion, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_ProtocolVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[23]);
}

// ===================================================================

class NodeInfo_Other::_Internal {
 public:
};

NodeInfo_Other::NodeInfo_Other(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NodeInfo.Other)
}
NodeInfo_Other::NodeInfo_Other(const NodeInfo_Other& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rpc_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rpc_address().empty()) {
    rpc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rpc_address(), 
      GetArenaForAllocation());
  }
  tx_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_index().empty()) {
    tx_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx_index(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.NodeInfo.Other)
}

inline void NodeInfo_Other::SharedCtor() {
rpc_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tx_index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeInfo_Other::~NodeInfo_Other() {
  // @@protoc_insertion_point(destructor:api_pb.NodeInfo.Other)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo_Other::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rpc_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tx_index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_Other::ArenaDtor(void* object) {
  NodeInfo_Other* _this = reinterpret_cast< NodeInfo_Other* >(object);
  (void)_this;
}
void NodeInfo_Other::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo_Other::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo_Other::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NodeInfo.Other)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rpc_address_.ClearToEmpty();
  tx_index_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo_Other::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rpc_address = 1 [json_name = "rpcAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rpc_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.Other.rpc_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_index = 2 [json_name = "txIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tx_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.Other.tx_index"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_Other::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NodeInfo.Other)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rpc_address = 1 [json_name = "rpcAddress"];
  if (!this->_internal_rpc_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rpc_address().data(), static_cast<int>(this->_internal_rpc_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.Other.rpc_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rpc_address(), target);
  }

  // string tx_index = 2 [json_name = "txIndex"];
  if (!this->_internal_tx_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_index().data(), static_cast<int>(this->_internal_tx_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.Other.tx_index");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tx_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NodeInfo.Other)
  return target;
}

size_t NodeInfo_Other::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NodeInfo.Other)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rpc_address = 1 [json_name = "rpcAddress"];
  if (!this->_internal_rpc_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rpc_address());
  }

  // string tx_index = 2 [json_name = "txIndex"];
  if (!this->_internal_tx_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo_Other::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo_Other::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo_Other::GetClassData() const { return &_class_data_; }

void NodeInfo_Other::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo_Other *>(to)->MergeFrom(
      static_cast<const NodeInfo_Other &>(from));
}


void NodeInfo_Other::MergeFrom(const NodeInfo_Other& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NodeInfo.Other)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rpc_address().empty()) {
    _internal_set_rpc_address(from._internal_rpc_address());
  }
  if (!from._internal_tx_index().empty()) {
    _internal_set_tx_index(from._internal_tx_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo_Other::CopyFrom(const NodeInfo_Other& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NodeInfo.Other)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_Other::IsInitialized() const {
  return true;
}

void NodeInfo_Other::InternalSwap(NodeInfo_Other* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rpc_address_, GetArenaForAllocation(),
      &other->rpc_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_index_, GetArenaForAllocation(),
      &other->tx_index_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_Other::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[24]);
}

// ===================================================================

class NodeInfo::_Internal {
 public:
  static const ::api_pb::NodeInfo_ProtocolVersion& protocol_version(const NodeInfo* msg);
  static const ::api_pb::NodeInfo_Other& other(const NodeInfo* msg);
};

const ::api_pb::NodeInfo_ProtocolVersion&
NodeInfo::_Internal::protocol_version(const NodeInfo* msg) {
  return *msg->protocol_version_;
}
const ::api_pb::NodeInfo_Other&
NodeInfo::_Internal::other(const NodeInfo* msg) {
  return *msg->other_;
}
NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  listen_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_listen_addr().empty()) {
    listen_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_listen_addr(), 
      GetArenaForAllocation());
  }
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network().empty()) {
    network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  channels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channels().empty()) {
    channels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channels(), 
      GetArenaForAllocation());
  }
  moniker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_moniker().empty()) {
    moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_moniker(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_other()) {
    other_ = new ::api_pb::NodeInfo_Other(*from.other_);
  } else {
    other_ = nullptr;
  }
  if (from._internal_has_protocol_version()) {
    protocol_version_ = new ::api_pb::NodeInfo_ProtocolVersion(*from.protocol_version_);
  } else {
    protocol_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.NodeInfo)
}

inline void NodeInfo::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
listen_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
channels_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
moniker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&other_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protocol_version_) -
    reinterpret_cast<char*>(&other_)) + sizeof(protocol_version_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:api_pb.NodeInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  listen_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channels_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moniker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete other_;
  if (this != internal_default_instance()) delete protocol_version_;
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  listen_addr_.ClearToEmpty();
  network_.ClearToEmpty();
  version_.ClearToEmpty();
  channels_.ClearToEmpty();
  moniker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && other_ != nullptr) {
    delete other_;
  }
  other_ = nullptr;
  if (GetArenaForAllocation() == nullptr && protocol_version_ != nullptr) {
    delete protocol_version_;
  }
  protocol_version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string listen_addr = 2 [json_name = "listenAddr"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_listen_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.listen_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network = 3 [json_name = "network"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.network"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channels = 5 [json_name = "channels"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_channels();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.channels"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string moniker = 6 [json_name = "moniker"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_moniker();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NodeInfo.moniker"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.NodeInfo.Other other = 7 [json_name = "other"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_other(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_protocol_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string listen_addr = 2 [json_name = "listenAddr"];
  if (!this->_internal_listen_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_listen_addr().data(), static_cast<int>(this->_internal_listen_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.listen_addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_listen_addr(), target);
  }

  // string network = 3 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.network");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_network(), target);
  }

  // string version = 4 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // string channels = 5 [json_name = "channels"];
  if (!this->_internal_channels().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channels().data(), static_cast<int>(this->_internal_channels().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.channels");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_channels(), target);
  }

  // string moniker = 6 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_moniker().data(), static_cast<int>(this->_internal_moniker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NodeInfo.moniker");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_moniker(), target);
  }

  // .api_pb.NodeInfo.Other other = 7 [json_name = "other"];
  if (this->_internal_has_other()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::other(this), target, stream);
  }

  // .api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];
  if (this->_internal_has_protocol_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::protocol_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string listen_addr = 2 [json_name = "listenAddr"];
  if (!this->_internal_listen_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_listen_addr());
  }

  // string network = 3 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string version = 4 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string channels = 5 [json_name = "channels"];
  if (!this->_internal_channels().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channels());
  }

  // string moniker = 6 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_moniker());
  }

  // .api_pb.NodeInfo.Other other = 7 [json_name = "other"];
  if (this->_internal_has_other()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_);
  }

  // .api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];
  if (this->_internal_has_protocol_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *protocol_version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeInfo::GetClassData() const { return &_class_data_; }

void NodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NodeInfo *>(to)->MergeFrom(
      static_cast<const NodeInfo &>(from));
}


void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_listen_addr().empty()) {
    _internal_set_listen_addr(from._internal_listen_addr());
  }
  if (!from._internal_network().empty()) {
    _internal_set_network(from._internal_network());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_channels().empty()) {
    _internal_set_channels(from._internal_channels());
  }
  if (!from._internal_moniker().empty()) {
    _internal_set_moniker(from._internal_moniker());
  }
  if (from._internal_has_other()) {
    _internal_mutable_other()->::api_pb::NodeInfo_Other::MergeFrom(from._internal_other());
  }
  if (from._internal_has_protocol_version()) {
    _internal_mutable_protocol_version()->::api_pb::NodeInfo_ProtocolVersion::MergeFrom(from._internal_protocol_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &listen_addr_, GetArenaForAllocation(),
      &other->listen_addr_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &network_, GetArenaForAllocation(),
      &other->network_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &channels_, GetArenaForAllocation(),
      &other->channels_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &moniker_, GetArenaForAllocation(),
      &other->moniker_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, protocol_version_)
      + sizeof(NodeInfo::protocol_version_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, other_)>(
          reinterpret_cast<char*>(&other_),
          reinterpret_cast<char*>(&other->other_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[25]);
}

// ===================================================================

class NetInfoResponse_Peer_ConnectionStatus_Monitor::_Internal {
 public:
};

NetInfoResponse_Peer_ConnectionStatus_Monitor::NetInfoResponse_Peer_ConnectionStatus_Monitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
}
NetInfoResponse_Peer_ConnectionStatus_Monitor::NetInfoResponse_Peer_ConnectionStatus_Monitor(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start().empty()) {
    start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_start(), 
      GetArenaForAllocation());
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
}

inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::SharedCtor() {
start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&duration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(active_));
}

NetInfoResponse_Peer_ConnectionStatus_Monitor::~NetInfoResponse_Peer_ConnectionStatus_Monitor() {
  // @@protoc_insertion_point(destructor:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetInfoResponse_Peer_ConnectionStatus_Monitor::ArenaDtor(void* object) {
  NetInfoResponse_Peer_ConnectionStatus_Monitor* _this = reinterpret_cast< NetInfoResponse_Peer_ConnectionStatus_Monitor* >(object);
  (void)_this;
}
void NetInfoResponse_Peer_ConnectionStatus_Monitor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInfoResponse_Peer_ConnectionStatus_Monitor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInfoResponse_Peer_ConnectionStatus_Monitor::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_.ClearToEmpty();
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfoResponse_Peer_ConnectionStatus_Monitor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string start = 1 [json_name = "start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 duration = 2 [json_name = "duration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 idle = 3 [json_name = "idle"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bytes = 4 [json_name = "bytes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 samples = 5 [json_name = "samples"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inst_rate = 6 [json_name = "instRate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          inst_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cur_rate = 7 [json_name = "curRate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cur_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 avg_rate = 8 [json_name = "avgRate"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          avg_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 peak_rate = 9 [json_name = "peakRate"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          peak_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bytes_rem = 10 [json_name = "bytesRem"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bytes_rem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_rem = 11 [json_name = "timeRem"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          time_rem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 progress = 12 [json_name = "progress"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 13 [json_name = "active"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetInfoResponse_Peer_ConnectionStatus_Monitor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string start = 1 [json_name = "start"];
  if (!this->_internal_start().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start().data(), static_cast<int>(this->_internal_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_start(), target);
  }

  // int64 duration = 2 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  // int64 idle = 3 [json_name = "idle"];
  if (this->_internal_idle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_idle(), target);
  }

  // int64 bytes = 4 [json_name = "bytes"];
  if (this->_internal_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_bytes(), target);
  }

  // int64 samples = 5 [json_name = "samples"];
  if (this->_internal_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_samples(), target);
  }

  // int64 inst_rate = 6 [json_name = "instRate"];
  if (this->_internal_inst_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_inst_rate(), target);
  }

  // int64 cur_rate = 7 [json_name = "curRate"];
  if (this->_internal_cur_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_cur_rate(), target);
  }

  // int64 avg_rate = 8 [json_name = "avgRate"];
  if (this->_internal_avg_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_avg_rate(), target);
  }

  // int64 peak_rate = 9 [json_name = "peakRate"];
  if (this->_internal_peak_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_peak_rate(), target);
  }

  // int64 bytes_rem = 10 [json_name = "bytesRem"];
  if (this->_internal_bytes_rem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_bytes_rem(), target);
  }

  // int64 time_rem = 11 [json_name = "timeRem"];
  if (this->_internal_time_rem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_time_rem(), target);
  }

  // uint64 progress = 12 [json_name = "progress"];
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_progress(), target);
  }

  // bool active = 13 [json_name = "active"];
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  return target;
}

size_t NetInfoResponse_Peer_ConnectionStatus_Monitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string start = 1 [json_name = "start"];
  if (!this->_internal_start().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start());
  }

  // int64 duration = 2 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_duration());
  }

  // int64 idle = 3 [json_name = "idle"];
  if (this->_internal_idle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_idle());
  }

  // int64 bytes = 4 [json_name = "bytes"];
  if (this->_internal_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bytes());
  }

  // int64 samples = 5 [json_name = "samples"];
  if (this->_internal_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_samples());
  }

  // int64 inst_rate = 6 [json_name = "instRate"];
  if (this->_internal_inst_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_inst_rate());
  }

  // int64 cur_rate = 7 [json_name = "curRate"];
  if (this->_internal_cur_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_rate());
  }

  // int64 avg_rate = 8 [json_name = "avgRate"];
  if (this->_internal_avg_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_avg_rate());
  }

  // int64 peak_rate = 9 [json_name = "peakRate"];
  if (this->_internal_peak_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_peak_rate());
  }

  // int64 bytes_rem = 10 [json_name = "bytesRem"];
  if (this->_internal_bytes_rem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bytes_rem());
  }

  // int64 time_rem = 11 [json_name = "timeRem"];
  if (this->_internal_time_rem() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_rem());
  }

  // uint64 progress = 12 [json_name = "progress"];
  if (this->_internal_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_progress());
  }

  // bool active = 13 [json_name = "active"];
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfoResponse_Peer_ConnectionStatus_Monitor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInfoResponse_Peer_ConnectionStatus_Monitor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfoResponse_Peer_ConnectionStatus_Monitor::GetClassData() const { return &_class_data_; }

void NetInfoResponse_Peer_ConnectionStatus_Monitor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NetInfoResponse_Peer_ConnectionStatus_Monitor *>(to)->MergeFrom(
      static_cast<const NetInfoResponse_Peer_ConnectionStatus_Monitor &>(from));
}


void NetInfoResponse_Peer_ConnectionStatus_Monitor::MergeFrom(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_start().empty()) {
    _internal_set_start(from._internal_start());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  if (from._internal_idle() != 0) {
    _internal_set_idle(from._internal_idle());
  }
  if (from._internal_bytes() != 0) {
    _internal_set_bytes(from._internal_bytes());
  }
  if (from._internal_samples() != 0) {
    _internal_set_samples(from._internal_samples());
  }
  if (from._internal_inst_rate() != 0) {
    _internal_set_inst_rate(from._internal_inst_rate());
  }
  if (from._internal_cur_rate() != 0) {
    _internal_set_cur_rate(from._internal_cur_rate());
  }
  if (from._internal_avg_rate() != 0) {
    _internal_set_avg_rate(from._internal_avg_rate());
  }
  if (from._internal_peak_rate() != 0) {
    _internal_set_peak_rate(from._internal_peak_rate());
  }
  if (from._internal_bytes_rem() != 0) {
    _internal_set_bytes_rem(from._internal_bytes_rem());
  }
  if (from._internal_time_rem() != 0) {
    _internal_set_time_rem(from._internal_time_rem());
  }
  if (from._internal_progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfoResponse_Peer_ConnectionStatus_Monitor::CopyFrom(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfoResponse_Peer_ConnectionStatus_Monitor::IsInitialized() const {
  return true;
}

void NetInfoResponse_Peer_ConnectionStatus_Monitor::InternalSwap(NetInfoResponse_Peer_ConnectionStatus_Monitor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &start_, GetArenaForAllocation(),
      &other->start_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer_ConnectionStatus_Monitor, active_)
      + sizeof(NetInfoResponse_Peer_ConnectionStatus_Monitor::active_)
      - PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer_ConnectionStatus_Monitor, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfoResponse_Peer_ConnectionStatus_Monitor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[26]);
}

// ===================================================================

class NetInfoResponse_Peer_ConnectionStatus_Channel::_Internal {
 public:
};

NetInfoResponse_Peer_ConnectionStatus_Channel::NetInfoResponse_Peer_ConnectionStatus_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
}
NetInfoResponse_Peer_ConnectionStatus_Channel::NetInfoResponse_Peer_ConnectionStatus_Channel(const NetInfoResponse_Peer_ConnectionStatus_Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&send_queue_capacity_, &from.send_queue_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&send_queue_capacity_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
}

inline void NetInfoResponse_Peer_ConnectionStatus_Channel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_queue_capacity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&send_queue_capacity_)) + sizeof(id_));
}

NetInfoResponse_Peer_ConnectionStatus_Channel::~NetInfoResponse_Peer_ConnectionStatus_Channel() {
  // @@protoc_insertion_point(destructor:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInfoResponse_Peer_ConnectionStatus_Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInfoResponse_Peer_ConnectionStatus_Channel::ArenaDtor(void* object) {
  NetInfoResponse_Peer_ConnectionStatus_Channel* _this = reinterpret_cast< NetInfoResponse_Peer_ConnectionStatus_Channel* >(object);
  (void)_this;
}
void NetInfoResponse_Peer_ConnectionStatus_Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInfoResponse_Peer_ConnectionStatus_Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInfoResponse_Peer_ConnectionStatus_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&send_queue_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&send_queue_capacity_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfoResponse_Peer_ConnectionStatus_Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 send_queue_capacity = 1 [json_name = "sendQueueCapacity"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          send_queue_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 send_queue_size = 2 [json_name = "sendQueueSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          send_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 priority = 3 [json_name = "priority"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 recently_sent = 4 [json_name = "recentlySent"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          recently_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 5 [json_name = "id"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetInfoResponse_Peer_ConnectionStatus_Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 send_queue_capacity = 1 [json_name = "sendQueueCapacity"];
  if (this->_internal_send_queue_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_send_queue_capacity(), target);
  }

  // int64 send_queue_size = 2 [json_name = "sendQueueSize"];
  if (this->_internal_send_queue_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_send_queue_size(), target);
  }

  // int64 priority = 3 [json_name = "priority"];
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_priority(), target);
  }

  // int64 recently_sent = 4 [json_name = "recentlySent"];
  if (this->_internal_recently_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_recently_sent(), target);
  }

  // int64 id = 5 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  return target;
}

size_t NetInfoResponse_Peer_ConnectionStatus_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 send_queue_capacity = 1 [json_name = "sendQueueCapacity"];
  if (this->_internal_send_queue_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_send_queue_capacity());
  }

  // int64 send_queue_size = 2 [json_name = "sendQueueSize"];
  if (this->_internal_send_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_send_queue_size());
  }

  // int64 priority = 3 [json_name = "priority"];
  if (this->_internal_priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_priority());
  }

  // int64 recently_sent = 4 [json_name = "recentlySent"];
  if (this->_internal_recently_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_recently_sent());
  }

  // int64 id = 5 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfoResponse_Peer_ConnectionStatus_Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInfoResponse_Peer_ConnectionStatus_Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfoResponse_Peer_ConnectionStatus_Channel::GetClassData() const { return &_class_data_; }

void NetInfoResponse_Peer_ConnectionStatus_Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NetInfoResponse_Peer_ConnectionStatus_Channel *>(to)->MergeFrom(
      static_cast<const NetInfoResponse_Peer_ConnectionStatus_Channel &>(from));
}


void NetInfoResponse_Peer_ConnectionStatus_Channel::MergeFrom(const NetInfoResponse_Peer_ConnectionStatus_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_send_queue_capacity() != 0) {
    _internal_set_send_queue_capacity(from._internal_send_queue_capacity());
  }
  if (from._internal_send_queue_size() != 0) {
    _internal_set_send_queue_size(from._internal_send_queue_size());
  }
  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from._internal_recently_sent() != 0) {
    _internal_set_recently_sent(from._internal_recently_sent());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfoResponse_Peer_ConnectionStatus_Channel::CopyFrom(const NetInfoResponse_Peer_ConnectionStatus_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfoResponse_Peer_ConnectionStatus_Channel::IsInitialized() const {
  return true;
}

void NetInfoResponse_Peer_ConnectionStatus_Channel::InternalSwap(NetInfoResponse_Peer_ConnectionStatus_Channel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer_ConnectionStatus_Channel, id_)
      + sizeof(NetInfoResponse_Peer_ConnectionStatus_Channel::id_)
      - PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer_ConnectionStatus_Channel, send_queue_capacity_)>(
          reinterpret_cast<char*>(&send_queue_capacity_),
          reinterpret_cast<char*>(&other->send_queue_capacity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfoResponse_Peer_ConnectionStatus_Channel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[27]);
}

// ===================================================================

class NetInfoResponse_Peer_ConnectionStatus::_Internal {
 public:
  static const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& sendmonitor(const NetInfoResponse_Peer_ConnectionStatus* msg);
  static const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& recvmonitor(const NetInfoResponse_Peer_ConnectionStatus* msg);
};

const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor&
NetInfoResponse_Peer_ConnectionStatus::_Internal::sendmonitor(const NetInfoResponse_Peer_ConnectionStatus* msg) {
  return *msg->sendmonitor_;
}
const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor&
NetInfoResponse_Peer_ConnectionStatus::_Internal::recvmonitor(const NetInfoResponse_Peer_ConnectionStatus* msg) {
  return *msg->recvmonitor_;
}
NetInfoResponse_Peer_ConnectionStatus::NetInfoResponse_Peer_ConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NetInfoResponse.Peer.ConnectionStatus)
}
NetInfoResponse_Peer_ConnectionStatus::NetInfoResponse_Peer_ConnectionStatus(const NetInfoResponse_Peer_ConnectionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sendmonitor()) {
    sendmonitor_ = new ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor(*from.sendmonitor_);
  } else {
    sendmonitor_ = nullptr;
  }
  if (from._internal_has_recvmonitor()) {
    recvmonitor_ = new ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor(*from.recvmonitor_);
  } else {
    recvmonitor_ = nullptr;
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:api_pb.NetInfoResponse.Peer.ConnectionStatus)
}

inline void NetInfoResponse_Peer_ConnectionStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sendmonitor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&sendmonitor_)) + sizeof(duration_));
}

NetInfoResponse_Peer_ConnectionStatus::~NetInfoResponse_Peer_ConnectionStatus() {
  // @@protoc_insertion_point(destructor:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInfoResponse_Peer_ConnectionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sendmonitor_;
  if (this != internal_default_instance()) delete recvmonitor_;
}

void NetInfoResponse_Peer_ConnectionStatus::ArenaDtor(void* object) {
  NetInfoResponse_Peer_ConnectionStatus* _this = reinterpret_cast< NetInfoResponse_Peer_ConnectionStatus* >(object);
  (void)_this;
}
void NetInfoResponse_Peer_ConnectionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInfoResponse_Peer_ConnectionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInfoResponse_Peer_ConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  if (GetArenaForAllocation() == nullptr && sendmonitor_ != nullptr) {
    delete sendmonitor_;
  }
  sendmonitor_ = nullptr;
  if (GetArenaForAllocation() == nullptr && recvmonitor_ != nullptr) {
    delete recvmonitor_;
  }
  recvmonitor_ = nullptr;
  duration_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfoResponse_Peer_ConnectionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1 [json_name = "SendMonitor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendmonitor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2 [json_name = "RecvMonitor"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_recvmonitor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3 [json_name = "channels"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 duration = 4 [json_name = "duration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetInfoResponse_Peer_ConnectionStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1 [json_name = "SendMonitor"];
  if (this->_internal_has_sendmonitor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sendmonitor(this), target, stream);
  }

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2 [json_name = "RecvMonitor"];
  if (this->_internal_has_recvmonitor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::recvmonitor(this), target, stream);
  }

  // repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3 [json_name = "channels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_channels(i), target, stream);
  }

  // uint64 duration = 4 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  return target;
}

size_t NetInfoResponse_Peer_ConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3 [json_name = "channels"];
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1 [json_name = "SendMonitor"];
  if (this->_internal_has_sendmonitor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sendmonitor_);
  }

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2 [json_name = "RecvMonitor"];
  if (this->_internal_has_recvmonitor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recvmonitor_);
  }

  // uint64 duration = 4 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfoResponse_Peer_ConnectionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInfoResponse_Peer_ConnectionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfoResponse_Peer_ConnectionStatus::GetClassData() const { return &_class_data_; }

void NetInfoResponse_Peer_ConnectionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NetInfoResponse_Peer_ConnectionStatus *>(to)->MergeFrom(
      static_cast<const NetInfoResponse_Peer_ConnectionStatus &>(from));
}


void NetInfoResponse_Peer_ConnectionStatus::MergeFrom(const NetInfoResponse_Peer_ConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from._internal_has_sendmonitor()) {
    _internal_mutable_sendmonitor()->::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor::MergeFrom(from._internal_sendmonitor());
  }
  if (from._internal_has_recvmonitor()) {
    _internal_mutable_recvmonitor()->::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor::MergeFrom(from._internal_recvmonitor());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfoResponse_Peer_ConnectionStatus::CopyFrom(const NetInfoResponse_Peer_ConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NetInfoResponse.Peer.ConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfoResponse_Peer_ConnectionStatus::IsInitialized() const {
  return true;
}

void NetInfoResponse_Peer_ConnectionStatus::InternalSwap(NetInfoResponse_Peer_ConnectionStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer_ConnectionStatus, duration_)
      + sizeof(NetInfoResponse_Peer_ConnectionStatus::duration_)
      - PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer_ConnectionStatus, sendmonitor_)>(
          reinterpret_cast<char*>(&sendmonitor_),
          reinterpret_cast<char*>(&other->sendmonitor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfoResponse_Peer_ConnectionStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[28]);
}

// ===================================================================

class NetInfoResponse_Peer::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& latest_block_height(const NetInfoResponse_Peer* msg);
  static const ::api_pb::NodeInfo& node_info(const NetInfoResponse_Peer* msg);
  static const ::api_pb::NetInfoResponse_Peer_ConnectionStatus& connection_status(const NetInfoResponse_Peer* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt64Value&
NetInfoResponse_Peer::_Internal::latest_block_height(const NetInfoResponse_Peer* msg) {
  return *msg->latest_block_height_;
}
const ::api_pb::NodeInfo&
NetInfoResponse_Peer::_Internal::node_info(const NetInfoResponse_Peer* msg) {
  return *msg->node_info_;
}
const ::api_pb::NetInfoResponse_Peer_ConnectionStatus&
NetInfoResponse_Peer::_Internal::connection_status(const NetInfoResponse_Peer* msg) {
  return *msg->connection_status_;
}
void NetInfoResponse_Peer::clear_latest_block_height() {
  if (GetArenaForAllocation() == nullptr && latest_block_height_ != nullptr) {
    delete latest_block_height_;
  }
  latest_block_height_ = nullptr;
}
NetInfoResponse_Peer::NetInfoResponse_Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NetInfoResponse.Peer)
}
NetInfoResponse_Peer::NetInfoResponse_Peer(const NetInfoResponse_Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  remote_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_ip().empty()) {
    remote_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remote_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_connection_status()) {
    connection_status_ = new ::api_pb::NetInfoResponse_Peer_ConnectionStatus(*from.connection_status_);
  } else {
    connection_status_ = nullptr;
  }
  if (from._internal_has_node_info()) {
    node_info_ = new ::api_pb::NodeInfo(*from.node_info_);
  } else {
    node_info_ = nullptr;
  }
  if (from._internal_has_latest_block_height()) {
    latest_block_height_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.latest_block_height_);
  } else {
    latest_block_height_ = nullptr;
  }
  is_outbound_ = from.is_outbound_;
  // @@protoc_insertion_point(copy_constructor:api_pb.NetInfoResponse.Peer)
}

inline void NetInfoResponse_Peer::SharedCtor() {
remote_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_outbound_) -
    reinterpret_cast<char*>(&connection_status_)) + sizeof(is_outbound_));
}

NetInfoResponse_Peer::~NetInfoResponse_Peer() {
  // @@protoc_insertion_point(destructor:api_pb.NetInfoResponse.Peer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInfoResponse_Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  remote_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connection_status_;
  if (this != internal_default_instance()) delete node_info_;
  if (this != internal_default_instance()) delete latest_block_height_;
}

void NetInfoResponse_Peer::ArenaDtor(void* object) {
  NetInfoResponse_Peer* _this = reinterpret_cast< NetInfoResponse_Peer* >(object);
  (void)_this;
}
void NetInfoResponse_Peer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInfoResponse_Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInfoResponse_Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NetInfoResponse.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && connection_status_ != nullptr) {
    delete connection_status_;
  }
  connection_status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && node_info_ != nullptr) {
    delete node_info_;
  }
  node_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && latest_block_height_ != nullptr) {
    delete latest_block_height_;
  }
  latest_block_height_ = nullptr;
  is_outbound_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfoResponse_Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_outbound = 1 [json_name = "isOutbound"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_outbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2 [json_name = "connectionStatus"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_ip = 3 [json_name = "remoteIp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_remote_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NetInfoResponse.Peer.remote_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.NodeInfo node_info = 4 [json_name = "nodeInfo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_node_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value latest_block_height = 5 [json_name = "latestBlockHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_block_height(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetInfoResponse_Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NetInfoResponse.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_outbound = 1 [json_name = "isOutbound"];
  if (this->_internal_is_outbound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_outbound(), target);
  }

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2 [json_name = "connectionStatus"];
  if (this->_internal_has_connection_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::connection_status(this), target, stream);
  }

  // string remote_ip = 3 [json_name = "remoteIp"];
  if (!this->_internal_remote_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_ip().data(), static_cast<int>(this->_internal_remote_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NetInfoResponse.Peer.remote_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_ip(), target);
  }

  // .api_pb.NodeInfo node_info = 4 [json_name = "nodeInfo"];
  if (this->_internal_has_node_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::node_info(this), target, stream);
  }

  // .google.protobuf.UInt64Value latest_block_height = 5 [json_name = "latestBlockHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_has_latest_block_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::latest_block_height(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NetInfoResponse.Peer)
  return target;
}

size_t NetInfoResponse_Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NetInfoResponse.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_ip = 3 [json_name = "remoteIp"];
  if (!this->_internal_remote_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_ip());
  }

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2 [json_name = "connectionStatus"];
  if (this->_internal_has_connection_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_status_);
  }

  // .api_pb.NodeInfo node_info = 4 [json_name = "nodeInfo"];
  if (this->_internal_has_node_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_info_);
  }

  // .google.protobuf.UInt64Value latest_block_height = 5 [json_name = "latestBlockHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_has_latest_block_height()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latest_block_height_);
  }

  // bool is_outbound = 1 [json_name = "isOutbound"];
  if (this->_internal_is_outbound() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfoResponse_Peer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInfoResponse_Peer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfoResponse_Peer::GetClassData() const { return &_class_data_; }

void NetInfoResponse_Peer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NetInfoResponse_Peer *>(to)->MergeFrom(
      static_cast<const NetInfoResponse_Peer &>(from));
}


void NetInfoResponse_Peer::MergeFrom(const NetInfoResponse_Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NetInfoResponse.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_remote_ip().empty()) {
    _internal_set_remote_ip(from._internal_remote_ip());
  }
  if (from._internal_has_connection_status()) {
    _internal_mutable_connection_status()->::api_pb::NetInfoResponse_Peer_ConnectionStatus::MergeFrom(from._internal_connection_status());
  }
  if (from._internal_has_node_info()) {
    _internal_mutable_node_info()->::api_pb::NodeInfo::MergeFrom(from._internal_node_info());
  }
  if (from._internal_has_latest_block_height()) {
    _internal_mutable_latest_block_height()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_latest_block_height());
  }
  if (from._internal_is_outbound() != 0) {
    _internal_set_is_outbound(from._internal_is_outbound());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfoResponse_Peer::CopyFrom(const NetInfoResponse_Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NetInfoResponse.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfoResponse_Peer::IsInitialized() const {
  return true;
}

void NetInfoResponse_Peer::InternalSwap(NetInfoResponse_Peer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remote_ip_, GetArenaForAllocation(),
      &other->remote_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer, is_outbound_)
      + sizeof(NetInfoResponse_Peer::is_outbound_)
      - PROTOBUF_FIELD_OFFSET(NetInfoResponse_Peer, connection_status_)>(
          reinterpret_cast<char*>(&connection_status_),
          reinterpret_cast<char*>(&other->connection_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfoResponse_Peer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[29]);
}

// ===================================================================

class NetInfoResponse::_Internal {
 public:
};

NetInfoResponse::NetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  listeners_(arena),
  peers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.NetInfoResponse)
}
NetInfoResponse::NetInfoResponse(const NetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      listeners_(from.listeners_),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&count_peers_, &from.count_peers_,
    static_cast<size_t>(reinterpret_cast<char*>(&listening_) -
    reinterpret_cast<char*>(&count_peers_)) + sizeof(listening_));
  // @@protoc_insertion_point(copy_constructor:api_pb.NetInfoResponse)
}

inline void NetInfoResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_peers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&listening_) -
    reinterpret_cast<char*>(&count_peers_)) + sizeof(listening_));
}

NetInfoResponse::~NetInfoResponse() {
  // @@protoc_insertion_point(destructor:api_pb.NetInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetInfoResponse::ArenaDtor(void* object) {
  NetInfoResponse* _this = reinterpret_cast< NetInfoResponse* >(object);
  (void)_this;
}
void NetInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.NetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  listeners_.Clear();
  peers_.Clear();
  ::memset(&count_peers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&listening_) -
      reinterpret_cast<char*>(&count_peers_)) + sizeof(listening_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string listeners = 1 [json_name = "listeners"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_listeners();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.NetInfoResponse.listeners"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 count_peers = 2 [json_name = "countPeers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.NetInfoResponse.Peer peers = 3 [json_name = "peers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool listening = 4 [json_name = "listening"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          listening_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.NetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string listeners = 1 [json_name = "listeners"];
  for (int i = 0, n = this->_internal_listeners_size(); i < n; i++) {
    const auto& s = this->_internal_listeners(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.NetInfoResponse.listeners");
    target = stream->WriteString(1, s, target);
  }

  // int64 count_peers = 2 [json_name = "countPeers"];
  if (this->_internal_count_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count_peers(), target);
  }

  // repeated .api_pb.NetInfoResponse.Peer peers = 3 [json_name = "peers"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_peers(i), target, stream);
  }

  // bool listening = 4 [json_name = "listening"];
  if (this->_internal_listening() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_listening(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.NetInfoResponse)
  return target;
}

size_t NetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.NetInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string listeners = 1 [json_name = "listeners"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(listeners_.size());
  for (int i = 0, n = listeners_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      listeners_.Get(i));
  }

  // repeated .api_pb.NetInfoResponse.Peer peers = 3 [json_name = "peers"];
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 count_peers = 2 [json_name = "countPeers"];
  if (this->_internal_count_peers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count_peers());
  }

  // bool listening = 4 [json_name = "listening"];
  if (this->_internal_listening() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetInfoResponse::GetClassData() const { return &_class_data_; }

void NetInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NetInfoResponse *>(to)->MergeFrom(
      static_cast<const NetInfoResponse &>(from));
}


void NetInfoResponse::MergeFrom(const NetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.NetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  listeners_.MergeFrom(from.listeners_);
  peers_.MergeFrom(from.peers_);
  if (from._internal_count_peers() != 0) {
    _internal_set_count_peers(from._internal_count_peers());
  }
  if (from._internal_listening() != 0) {
    _internal_set_listening(from._internal_listening());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetInfoResponse::CopyFrom(const NetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.NetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetInfoResponse::IsInitialized() const {
  return true;
}

void NetInfoResponse::InternalSwap(NetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  listeners_.InternalSwap(&other->listeners_);
  peers_.InternalSwap(&other->peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetInfoResponse, listening_)
      + sizeof(NetInfoResponse::listening_)
      - PROTOBUF_FIELD_OFFSET(NetInfoResponse, count_peers_)>(
          reinterpret_cast<char*>(&count_peers_),
          reinterpret_cast<char*>(&other->count_peers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[30]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  latest_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_block_hash().empty()) {
    latest_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latest_block_hash(), 
      GetArenaForAllocation());
  }
  latest_app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_app_hash().empty()) {
    latest_app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latest_app_hash(), 
      GetArenaForAllocation());
  }
  latest_block_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latest_block_time().empty()) {
    latest_block_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_latest_block_time(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  total_slashed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_slashed().empty()) {
    total_slashed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_slashed(), 
      GetArenaForAllocation());
  }
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network().empty()) {
    network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_network(), 
      GetArenaForAllocation());
  }
  moniker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_moniker().empty()) {
    moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_moniker(), 
      GetArenaForAllocation());
  }
  ::memcpy(&latest_block_height_, &from.latest_block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&catching_up_) -
    reinterpret_cast<char*>(&latest_block_height_)) + sizeof(catching_up_));
  // @@protoc_insertion_point(copy_constructor:api_pb.StatusResponse)
}

inline void StatusResponse::SharedCtor() {
latest_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latest_app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
latest_block_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_slashed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
moniker_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latest_block_height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&catching_up_) -
    reinterpret_cast<char*>(&latest_block_height_)) + sizeof(catching_up_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:api_pb.StatusResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  latest_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latest_block_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_slashed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moniker_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusResponse::ArenaDtor(void* object) {
  StatusResponse* _this = reinterpret_cast< StatusResponse* >(object);
  (void)_this;
}
void StatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latest_block_hash_.ClearToEmpty();
  latest_app_hash_.ClearToEmpty();
  latest_block_time_.ClearToEmpty();
  public_key_.ClearToEmpty();
  version_.ClearToEmpty();
  node_id_.ClearToEmpty();
  total_slashed_.ClearToEmpty();
  network_.ClearToEmpty();
  moniker_.ClearToEmpty();
  ::memset(&latest_block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&catching_up_) -
      reinterpret_cast<char*>(&latest_block_height_)) + sizeof(catching_up_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string latest_block_hash = 1 [json_name = "latestBlockHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_latest_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.latest_block_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latest_app_hash = 2 [json_name = "latestAppHash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_latest_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.latest_app_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 latest_block_height = 3 [json_name = "latestBlockHeight"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latest_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latest_block_time = 4 [json_name = "latestBlockTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_latest_block_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.latest_block_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 keep_last_states = 5 [json_name = "keepLastStates"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          keep_last_states_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool catching_up = 6 [json_name = "catchingUp"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          catching_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 7 [json_name = "publicKey"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 8 [json_name = "version"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 9 [json_name = "nodeId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_slashed = 10 [json_name = "totalSlashed"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_total_slashed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.total_slashed"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network = 11 [json_name = "network"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.network"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 initial_height = 12 [json_name = "initialHeight"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string moniker = 13 [json_name = "moniker"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_moniker();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StatusResponse.moniker"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.StatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string latest_block_hash = 1 [json_name = "latestBlockHash"];
  if (!this->_internal_latest_block_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latest_block_hash().data(), static_cast<int>(this->_internal_latest_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.latest_block_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_latest_block_hash(), target);
  }

  // string latest_app_hash = 2 [json_name = "latestAppHash"];
  if (!this->_internal_latest_app_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latest_app_hash().data(), static_cast<int>(this->_internal_latest_app_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.latest_app_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_latest_app_hash(), target);
  }

  // uint64 latest_block_height = 3 [json_name = "latestBlockHeight"];
  if (this->_internal_latest_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_latest_block_height(), target);
  }

  // string latest_block_time = 4 [json_name = "latestBlockTime"];
  if (!this->_internal_latest_block_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latest_block_time().data(), static_cast<int>(this->_internal_latest_block_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.latest_block_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_latest_block_time(), target);
  }

  // uint64 keep_last_states = 5 [json_name = "keepLastStates"];
  if (this->_internal_keep_last_states() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_keep_last_states(), target);
  }

  // bool catching_up = 6 [json_name = "catchingUp"];
  if (this->_internal_catching_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_catching_up(), target);
  }

  // string public_key = 7 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.public_key");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_public_key(), target);
  }

  // string version = 8 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_version(), target);
  }

  // string node_id = 9 [json_name = "nodeId"];
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.node_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_node_id(), target);
  }

  // string total_slashed = 10 [json_name = "totalSlashed"];
  if (!this->_internal_total_slashed().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_slashed().data(), static_cast<int>(this->_internal_total_slashed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.total_slashed");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_total_slashed(), target);
  }

  // string network = 11 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.network");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_network(), target);
  }

  // uint64 initial_height = 12 [json_name = "initialHeight"];
  if (this->_internal_initial_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_initial_height(), target);
  }

  // string moniker = 13 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_moniker().data(), static_cast<int>(this->_internal_moniker().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StatusResponse.moniker");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_moniker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.StatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string latest_block_hash = 1 [json_name = "latestBlockHash"];
  if (!this->_internal_latest_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latest_block_hash());
  }

  // string latest_app_hash = 2 [json_name = "latestAppHash"];
  if (!this->_internal_latest_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latest_app_hash());
  }

  // string latest_block_time = 4 [json_name = "latestBlockTime"];
  if (!this->_internal_latest_block_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latest_block_time());
  }

  // string public_key = 7 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string version = 8 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string node_id = 9 [json_name = "nodeId"];
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // string total_slashed = 10 [json_name = "totalSlashed"];
  if (!this->_internal_total_slashed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_slashed());
  }

  // string network = 11 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string moniker = 13 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_moniker());
  }

  // uint64 latest_block_height = 3 [json_name = "latestBlockHeight"];
  if (this->_internal_latest_block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_block_height());
  }

  // uint64 keep_last_states = 5 [json_name = "keepLastStates"];
  if (this->_internal_keep_last_states() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_keep_last_states());
  }

  // uint64 initial_height = 12 [json_name = "initialHeight"];
  if (this->_internal_initial_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_initial_height());
  }

  // bool catching_up = 6 [json_name = "catchingUp"];
  if (this->_internal_catching_up() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }

void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StatusResponse *>(to)->MergeFrom(
      static_cast<const StatusResponse &>(from));
}


void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.StatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_latest_block_hash().empty()) {
    _internal_set_latest_block_hash(from._internal_latest_block_hash());
  }
  if (!from._internal_latest_app_hash().empty()) {
    _internal_set_latest_app_hash(from._internal_latest_app_hash());
  }
  if (!from._internal_latest_block_time().empty()) {
    _internal_set_latest_block_time(from._internal_latest_block_time());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (!from._internal_total_slashed().empty()) {
    _internal_set_total_slashed(from._internal_total_slashed());
  }
  if (!from._internal_network().empty()) {
    _internal_set_network(from._internal_network());
  }
  if (!from._internal_moniker().empty()) {
    _internal_set_moniker(from._internal_moniker());
  }
  if (from._internal_latest_block_height() != 0) {
    _internal_set_latest_block_height(from._internal_latest_block_height());
  }
  if (from._internal_keep_last_states() != 0) {
    _internal_set_keep_last_states(from._internal_keep_last_states());
  }
  if (from._internal_initial_height() != 0) {
    _internal_set_initial_height(from._internal_initial_height());
  }
  if (from._internal_catching_up() != 0) {
    _internal_set_catching_up(from._internal_catching_up());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &latest_block_hash_, GetArenaForAllocation(),
      &other->latest_block_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &latest_app_hash_, GetArenaForAllocation(),
      &other->latest_app_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &latest_block_time_, GetArenaForAllocation(),
      &other->latest_block_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, GetArenaForAllocation(),
      &other->node_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &total_slashed_, GetArenaForAllocation(),
      &other->total_slashed_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &network_, GetArenaForAllocation(),
      &other->network_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &moniker_, GetArenaForAllocation(),
      &other->moniker_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusResponse, catching_up_)
      + sizeof(StatusResponse::catching_up_)
      - PROTOBUF_FIELD_OFFSET(StatusResponse, latest_block_height_)>(
          reinterpret_cast<char*>(&latest_block_height_),
          reinterpret_cast<char*>(&other->latest_block_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[31]);
}

// ===================================================================

class GenesisResponse_ConsensusParams_Block::_Internal {
 public:
};

GenesisResponse_ConsensusParams_Block::GenesisResponse_ConsensusParams_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.ConsensusParams.Block)
}
GenesisResponse_ConsensusParams_Block::GenesisResponse_ConsensusParams_Block(const GenesisResponse_ConsensusParams_Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_bytes_, &from.max_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_iota_ms_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(time_iota_ms_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.ConsensusParams.Block)
}

inline void GenesisResponse_ConsensusParams_Block::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_iota_ms_) -
    reinterpret_cast<char*>(&max_bytes_)) + sizeof(time_iota_ms_));
}

GenesisResponse_ConsensusParams_Block::~GenesisResponse_ConsensusParams_Block() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.ConsensusParams.Block)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_ConsensusParams_Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GenesisResponse_ConsensusParams_Block::ArenaDtor(void* object) {
  GenesisResponse_ConsensusParams_Block* _this = reinterpret_cast< GenesisResponse_ConsensusParams_Block* >(object);
  (void)_this;
}
void GenesisResponse_ConsensusParams_Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_ConsensusParams_Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_ConsensusParams_Block::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.ConsensusParams.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_iota_ms_) -
      reinterpret_cast<char*>(&max_bytes_)) + sizeof(time_iota_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_ConsensusParams_Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_bytes = 1 [json_name = "maxBytes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_gas = 2 [json_name = "maxGas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_iota_ms = 3 [json_name = "timeIotaMs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_iota_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_ConsensusParams_Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.ConsensusParams.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_bytes = 1 [json_name = "maxBytes"];
  if (this->_internal_max_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_bytes(), target);
  }

  // int64 max_gas = 2 [json_name = "maxGas"];
  if (this->_internal_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_gas(), target);
  }

  // int64 time_iota_ms = 3 [json_name = "timeIotaMs"];
  if (this->_internal_time_iota_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_iota_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.ConsensusParams.Block)
  return target;
}

size_t GenesisResponse_ConsensusParams_Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.ConsensusParams.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_bytes = 1 [json_name = "maxBytes"];
  if (this->_internal_max_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_bytes());
  }

  // int64 max_gas = 2 [json_name = "maxGas"];
  if (this->_internal_max_gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_gas());
  }

  // int64 time_iota_ms = 3 [json_name = "timeIotaMs"];
  if (this->_internal_time_iota_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_iota_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_ConsensusParams_Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_ConsensusParams_Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_ConsensusParams_Block::GetClassData() const { return &_class_data_; }

void GenesisResponse_ConsensusParams_Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_ConsensusParams_Block *>(to)->MergeFrom(
      static_cast<const GenesisResponse_ConsensusParams_Block &>(from));
}


void GenesisResponse_ConsensusParams_Block::MergeFrom(const GenesisResponse_ConsensusParams_Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.ConsensusParams.Block)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_bytes() != 0) {
    _internal_set_max_bytes(from._internal_max_bytes());
  }
  if (from._internal_max_gas() != 0) {
    _internal_set_max_gas(from._internal_max_gas());
  }
  if (from._internal_time_iota_ms() != 0) {
    _internal_set_time_iota_ms(from._internal_time_iota_ms());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_ConsensusParams_Block::CopyFrom(const GenesisResponse_ConsensusParams_Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.ConsensusParams.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_ConsensusParams_Block::IsInitialized() const {
  return true;
}

void GenesisResponse_ConsensusParams_Block::InternalSwap(GenesisResponse_ConsensusParams_Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_ConsensusParams_Block, time_iota_ms_)
      + sizeof(GenesisResponse_ConsensusParams_Block::time_iota_ms_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_ConsensusParams_Block, max_bytes_)>(
          reinterpret_cast<char*>(&max_bytes_),
          reinterpret_cast<char*>(&other->max_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_ConsensusParams_Block::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[32]);
}

// ===================================================================

class GenesisResponse_ConsensusParams_Evidence::_Internal {
 public:
};

GenesisResponse_ConsensusParams_Evidence::GenesisResponse_ConsensusParams_Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.ConsensusParams.Evidence)
}
GenesisResponse_ConsensusParams_Evidence::GenesisResponse_ConsensusParams_Evidence(const GenesisResponse_ConsensusParams_Evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_age_num_blocks_, &from.max_age_num_blocks_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_age_duration_) -
    reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_age_duration_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.ConsensusParams.Evidence)
}

inline void GenesisResponse_ConsensusParams_Evidence::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_age_num_blocks_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_age_duration_) -
    reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_age_duration_));
}

GenesisResponse_ConsensusParams_Evidence::~GenesisResponse_ConsensusParams_Evidence() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.ConsensusParams.Evidence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_ConsensusParams_Evidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GenesisResponse_ConsensusParams_Evidence::ArenaDtor(void* object) {
  GenesisResponse_ConsensusParams_Evidence* _this = reinterpret_cast< GenesisResponse_ConsensusParams_Evidence* >(object);
  (void)_this;
}
void GenesisResponse_ConsensusParams_Evidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_ConsensusParams_Evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_ConsensusParams_Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.ConsensusParams.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_age_num_blocks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_age_duration_) -
      reinterpret_cast<char*>(&max_age_num_blocks_)) + sizeof(max_age_duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_ConsensusParams_Evidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_age_num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_age_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_ConsensusParams_Evidence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.ConsensusParams.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  if (this->_internal_max_age_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_age_num_blocks(), target);
  }

  // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
  if (this->_internal_max_age_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_max_age_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.ConsensusParams.Evidence)
  return target;
}

size_t GenesisResponse_ConsensusParams_Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.ConsensusParams.Evidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  if (this->_internal_max_age_num_blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_age_num_blocks());
  }

  // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
  if (this->_internal_max_age_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_age_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_ConsensusParams_Evidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_ConsensusParams_Evidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_ConsensusParams_Evidence::GetClassData() const { return &_class_data_; }

void GenesisResponse_ConsensusParams_Evidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_ConsensusParams_Evidence *>(to)->MergeFrom(
      static_cast<const GenesisResponse_ConsensusParams_Evidence &>(from));
}


void GenesisResponse_ConsensusParams_Evidence::MergeFrom(const GenesisResponse_ConsensusParams_Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.ConsensusParams.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_age_num_blocks() != 0) {
    _internal_set_max_age_num_blocks(from._internal_max_age_num_blocks());
  }
  if (from._internal_max_age_duration() != 0) {
    _internal_set_max_age_duration(from._internal_max_age_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_ConsensusParams_Evidence::CopyFrom(const GenesisResponse_ConsensusParams_Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.ConsensusParams.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_ConsensusParams_Evidence::IsInitialized() const {
  return true;
}

void GenesisResponse_ConsensusParams_Evidence::InternalSwap(GenesisResponse_ConsensusParams_Evidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_ConsensusParams_Evidence, max_age_duration_)
      + sizeof(GenesisResponse_ConsensusParams_Evidence::max_age_duration_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_ConsensusParams_Evidence, max_age_num_blocks_)>(
          reinterpret_cast<char*>(&max_age_num_blocks_),
          reinterpret_cast<char*>(&other->max_age_num_blocks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_ConsensusParams_Evidence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[33]);
}

// ===================================================================

class GenesisResponse_ConsensusParams_Validator::_Internal {
 public:
};

GenesisResponse_ConsensusParams_Validator::GenesisResponse_ConsensusParams_Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pub_key_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.ConsensusParams.Validator)
}
GenesisResponse_ConsensusParams_Validator::GenesisResponse_ConsensusParams_Validator(const GenesisResponse_ConsensusParams_Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pub_key_types_(from.pub_key_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.ConsensusParams.Validator)
}

inline void GenesisResponse_ConsensusParams_Validator::SharedCtor() {
}

GenesisResponse_ConsensusParams_Validator::~GenesisResponse_ConsensusParams_Validator() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.ConsensusParams.Validator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_ConsensusParams_Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GenesisResponse_ConsensusParams_Validator::ArenaDtor(void* object) {
  GenesisResponse_ConsensusParams_Validator* _this = reinterpret_cast< GenesisResponse_ConsensusParams_Validator* >(object);
  (void)_this;
}
void GenesisResponse_ConsensusParams_Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_ConsensusParams_Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_ConsensusParams_Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.ConsensusParams.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_ConsensusParams_Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_pub_key_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_ConsensusParams_Validator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.ConsensusParams.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  for (int i = 0, n = this->_internal_pub_key_types_size(); i < n; i++) {
    const auto& s = this->_internal_pub_key_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.ConsensusParams.Validator)
  return target;
}

size_t GenesisResponse_ConsensusParams_Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.ConsensusParams.Validator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(pub_key_types_.size());
  for (int i = 0, n = pub_key_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      pub_key_types_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_ConsensusParams_Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_ConsensusParams_Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_ConsensusParams_Validator::GetClassData() const { return &_class_data_; }

void GenesisResponse_ConsensusParams_Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_ConsensusParams_Validator *>(to)->MergeFrom(
      static_cast<const GenesisResponse_ConsensusParams_Validator &>(from));
}


void GenesisResponse_ConsensusParams_Validator::MergeFrom(const GenesisResponse_ConsensusParams_Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.ConsensusParams.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pub_key_types_.MergeFrom(from.pub_key_types_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_ConsensusParams_Validator::CopyFrom(const GenesisResponse_ConsensusParams_Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.ConsensusParams.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_ConsensusParams_Validator::IsInitialized() const {
  return true;
}

void GenesisResponse_ConsensusParams_Validator::InternalSwap(GenesisResponse_ConsensusParams_Validator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pub_key_types_.InternalSwap(&other->pub_key_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_ConsensusParams_Validator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[34]);
}

// ===================================================================

class GenesisResponse_ConsensusParams::_Internal {
 public:
  static const ::api_pb::GenesisResponse_ConsensusParams_Block& block(const GenesisResponse_ConsensusParams* msg);
  static const ::api_pb::GenesisResponse_ConsensusParams_Evidence& evidence(const GenesisResponse_ConsensusParams* msg);
  static const ::api_pb::GenesisResponse_ConsensusParams_Validator& validator(const GenesisResponse_ConsensusParams* msg);
};

const ::api_pb::GenesisResponse_ConsensusParams_Block&
GenesisResponse_ConsensusParams::_Internal::block(const GenesisResponse_ConsensusParams* msg) {
  return *msg->block_;
}
const ::api_pb::GenesisResponse_ConsensusParams_Evidence&
GenesisResponse_ConsensusParams::_Internal::evidence(const GenesisResponse_ConsensusParams* msg) {
  return *msg->evidence_;
}
const ::api_pb::GenesisResponse_ConsensusParams_Validator&
GenesisResponse_ConsensusParams::_Internal::validator(const GenesisResponse_ConsensusParams* msg) {
  return *msg->validator_;
}
GenesisResponse_ConsensusParams::GenesisResponse_ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.ConsensusParams)
}
GenesisResponse_ConsensusParams::GenesisResponse_ConsensusParams(const GenesisResponse_ConsensusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::api_pb::GenesisResponse_ConsensusParams_Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::api_pb::GenesisResponse_ConsensusParams_Evidence(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  if (from._internal_has_validator()) {
    validator_ = new ::api_pb::GenesisResponse_ConsensusParams_Validator(*from.validator_);
  } else {
    validator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.ConsensusParams)
}

inline void GenesisResponse_ConsensusParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&block_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validator_) -
    reinterpret_cast<char*>(&block_)) + sizeof(validator_));
}

GenesisResponse_ConsensusParams::~GenesisResponse_ConsensusParams() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.ConsensusParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_ConsensusParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete evidence_;
  if (this != internal_default_instance()) delete validator_;
}

void GenesisResponse_ConsensusParams::ArenaDtor(void* object) {
  GenesisResponse_ConsensusParams* _this = reinterpret_cast< GenesisResponse_ConsensusParams* >(object);
  (void)_this;
}
void GenesisResponse_ConsensusParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_ConsensusParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_ConsensusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.ConsensusParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_ConsensusParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.GenesisResponse.ConsensusParams.Block block = 1 [json_name = "block"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.ConsensusParams.Evidence evidence = 2 [json_name = "evidence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.ConsensusParams.Validator validator = 3 [json_name = "validator"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_ConsensusParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.ConsensusParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.GenesisResponse.ConsensusParams.Block block = 1 [json_name = "block"];
  if (this->_internal_has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::block(this), target, stream);
  }

  // .api_pb.GenesisResponse.ConsensusParams.Evidence evidence = 2 [json_name = "evidence"];
  if (this->_internal_has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::evidence(this), target, stream);
  }

  // .api_pb.GenesisResponse.ConsensusParams.Validator validator = 3 [json_name = "validator"];
  if (this->_internal_has_validator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::validator(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.ConsensusParams)
  return target;
}

size_t GenesisResponse_ConsensusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.ConsensusParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .api_pb.GenesisResponse.ConsensusParams.Block block = 1 [json_name = "block"];
  if (this->_internal_has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .api_pb.GenesisResponse.ConsensusParams.Evidence evidence = 2 [json_name = "evidence"];
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // .api_pb.GenesisResponse.ConsensusParams.Validator validator = 3 [json_name = "validator"];
  if (this->_internal_has_validator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validator_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_ConsensusParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_ConsensusParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_ConsensusParams::GetClassData() const { return &_class_data_; }

void GenesisResponse_ConsensusParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_ConsensusParams *>(to)->MergeFrom(
      static_cast<const GenesisResponse_ConsensusParams &>(from));
}


void GenesisResponse_ConsensusParams::MergeFrom(const GenesisResponse_ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.ConsensusParams)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_block()) {
    _internal_mutable_block()->::api_pb::GenesisResponse_ConsensusParams_Block::MergeFrom(from._internal_block());
  }
  if (from._internal_has_evidence()) {
    _internal_mutable_evidence()->::api_pb::GenesisResponse_ConsensusParams_Evidence::MergeFrom(from._internal_evidence());
  }
  if (from._internal_has_validator()) {
    _internal_mutable_validator()->::api_pb::GenesisResponse_ConsensusParams_Validator::MergeFrom(from._internal_validator());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_ConsensusParams::CopyFrom(const GenesisResponse_ConsensusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.ConsensusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_ConsensusParams::IsInitialized() const {
  return true;
}

void GenesisResponse_ConsensusParams::InternalSwap(GenesisResponse_ConsensusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_ConsensusParams, validator_)
      + sizeof(GenesisResponse_ConsensusParams::validator_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_ConsensusParams, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_ConsensusParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[35]);
}

// ===================================================================

class GenesisResponse_AppState_Validators::_Internal {
 public:
};

GenesisResponse_AppState_Validators::GenesisResponse_AppState_Validators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Validators)
}
GenesisResponse_AppState_Validators::GenesisResponse_AppState_Validators(const GenesisResponse_AppState_Validators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  accum_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accum_reward().empty()) {
    accum_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_accum_reward(), 
      GetArenaForAllocation());
  }
  absent_times_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_absent_times().empty()) {
    absent_times_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_absent_times(), 
      GetArenaForAllocation());
  }
  total_bip_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_bip_stake().empty()) {
    total_bip_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_bip_stake(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Validators)
}

inline void GenesisResponse_AppState_Validators::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
accum_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
absent_times_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_bip_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GenesisResponse_AppState_Validators::~GenesisResponse_AppState_Validators() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Validators)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Validators::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accum_reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  absent_times_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_bip_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Validators::ArenaDtor(void* object) {
  GenesisResponse_AppState_Validators* _this = reinterpret_cast< GenesisResponse_AppState_Validators* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Validators::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Validators::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Validators::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Validators)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  accum_reward_.ClearToEmpty();
  absent_times_.ClearToEmpty();
  total_bip_stake_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Validators::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Validators.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string accum_reward = 2 [json_name = "accumReward"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_accum_reward();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Validators.accum_reward"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string absent_times = 3 [json_name = "absentTimes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_absent_times();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Validators.absent_times"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_bip_stake = 4 [json_name = "totalBipStake"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_total_bip_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Validators.total_bip_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Validators::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Validators)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Validators.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // string accum_reward = 2 [json_name = "accumReward"];
  if (!this->_internal_accum_reward().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accum_reward().data(), static_cast<int>(this->_internal_accum_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Validators.accum_reward");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accum_reward(), target);
  }

  // string absent_times = 3 [json_name = "absentTimes"];
  if (!this->_internal_absent_times().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_absent_times().data(), static_cast<int>(this->_internal_absent_times().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Validators.absent_times");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_absent_times(), target);
  }

  // string total_bip_stake = 4 [json_name = "totalBipStake"];
  if (!this->_internal_total_bip_stake().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_bip_stake().data(), static_cast<int>(this->_internal_total_bip_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Validators.total_bip_stake");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_total_bip_stake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Validators)
  return target;
}

size_t GenesisResponse_AppState_Validators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Validators)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string accum_reward = 2 [json_name = "accumReward"];
  if (!this->_internal_accum_reward().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accum_reward());
  }

  // string absent_times = 3 [json_name = "absentTimes"];
  if (!this->_internal_absent_times().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_absent_times());
  }

  // string total_bip_stake = 4 [json_name = "totalBipStake"];
  if (!this->_internal_total_bip_stake().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_bip_stake());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Validators::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Validators::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Validators::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Validators::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Validators *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Validators &>(from));
}


void GenesisResponse_AppState_Validators::MergeFrom(const GenesisResponse_AppState_Validators& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Validators)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_accum_reward().empty()) {
    _internal_set_accum_reward(from._internal_accum_reward());
  }
  if (!from._internal_absent_times().empty()) {
    _internal_set_absent_times(from._internal_absent_times());
  }
  if (!from._internal_total_bip_stake().empty()) {
    _internal_set_total_bip_stake(from._internal_total_bip_stake());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Validators::CopyFrom(const GenesisResponse_AppState_Validators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Validators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Validators::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Validators::InternalSwap(GenesisResponse_AppState_Validators* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &accum_reward_, GetArenaForAllocation(),
      &other->accum_reward_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &absent_times_, GetArenaForAllocation(),
      &other->absent_times_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &total_bip_stake_, GetArenaForAllocation(),
      &other->total_bip_stake_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Validators::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[36]);
}

// ===================================================================

class GenesisResponse_AppState_Candidate_Stake::_Internal {
 public:
};

GenesisResponse_AppState_Candidate_Stake::GenesisResponse_AppState_Candidate_Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Candidate.Stake)
}
GenesisResponse_AppState_Candidate_Stake::GenesisResponse_AppState_Candidate_Stake(const GenesisResponse_AppState_Candidate_Stake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bip_value().empty()) {
    bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bip_value(), 
      GetArenaForAllocation());
  }
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Candidate.Stake)
}

inline void GenesisResponse_AppState_Candidate_Stake::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

GenesisResponse_AppState_Candidate_Stake::~GenesisResponse_AppState_Candidate_Stake() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Candidate.Stake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Candidate_Stake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Candidate_Stake::ArenaDtor(void* object) {
  GenesisResponse_AppState_Candidate_Stake* _this = reinterpret_cast< GenesisResponse_AppState_Candidate_Stake* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Candidate_Stake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Candidate_Stake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Candidate_Stake::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Candidate.Stake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  bip_value_.ClearToEmpty();
  owner_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Candidate_Stake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.Stake.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bip_value = 3 [json_name = "bipValue"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 4 [json_name = "owner"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.Stake.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Candidate_Stake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Candidate.Stake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin = 1 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin(), target);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.Stake.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string bip_value = 3 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bip_value().data(), static_cast<int>(this->_internal_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bip_value(), target);
  }

  // string owner = 4 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.Stake.owner");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_owner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Candidate.Stake)
  return target;
}

size_t GenesisResponse_AppState_Candidate_Stake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Candidate.Stake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string bip_value = 3 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bip_value());
  }

  // string owner = 4 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // uint64 coin = 1 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Candidate_Stake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Candidate_Stake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Candidate_Stake::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Candidate_Stake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Candidate_Stake *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Candidate_Stake &>(from));
}


void GenesisResponse_AppState_Candidate_Stake::MergeFrom(const GenesisResponse_AppState_Candidate_Stake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Candidate.Stake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_bip_value().empty()) {
    _internal_set_bip_value(from._internal_bip_value());
  }
  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Candidate_Stake::CopyFrom(const GenesisResponse_AppState_Candidate_Stake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Candidate.Stake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Candidate_Stake::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Candidate_Stake::InternalSwap(GenesisResponse_AppState_Candidate_Stake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bip_value_, GetArenaForAllocation(),
      &other->bip_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Candidate_Stake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[37]);
}

// ===================================================================

class GenesisResponse_AppState_Candidate::_Internal {
 public:
};

GenesisResponse_AppState_Candidate::GenesisResponse_AppState_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stakes_(arena),
  updates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Candidate)
}
GenesisResponse_AppState_Candidate::GenesisResponse_AppState_Candidate(const GenesisResponse_AppState_Candidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stakes_(from.stakes_),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_address().empty()) {
    reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_address(), 
      GetArenaForAllocation());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  control_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_control_address().empty()) {
    control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_address(), 
      GetArenaForAllocation());
  }
  total_bip_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_bip_stake().empty()) {
    total_bip_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_bip_stake(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&commission_, &from.commission_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_edit_commission_height_) -
    reinterpret_cast<char*>(&commission_)) + sizeof(last_edit_commission_height_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Candidate)
}

inline void GenesisResponse_AppState_Candidate::SharedCtor() {
reward_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
control_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_bip_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_edit_commission_height_) -
    reinterpret_cast<char*>(&commission_)) + sizeof(last_edit_commission_height_));
}

GenesisResponse_AppState_Candidate::~GenesisResponse_AppState_Candidate() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Candidate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Candidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reward_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_bip_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Candidate::ArenaDtor(void* object) {
  GenesisResponse_AppState_Candidate* _this = reinterpret_cast< GenesisResponse_AppState_Candidate* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Candidate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stakes_.Clear();
  updates_.Clear();
  reward_address_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  control_address_.ClearToEmpty();
  total_bip_stake_.ClearToEmpty();
  public_key_.ClearToEmpty();
  ::memset(&commission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_edit_commission_height_) -
      reinterpret_cast<char*>(&commission_)) + sizeof(last_edit_commission_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Candidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reward_address = 1 [json_name = "rewardAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reward_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.reward_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_address = 2 [json_name = "ownerAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string control_address = 3 [json_name = "controlAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_control_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.control_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_bip_stake = 4 [json_name = "totalBipStake"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_total_bip_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.total_bip_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 5 [json_name = "publicKey"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Candidate.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commission = 6 [json_name = "commission"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake stakes = 7 [json_name = "stakes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stakes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake updates = 8 [json_name = "updates"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 status = 9 [json_name = "status"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 10 [json_name = "id"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 jailed_until = 11 [json_name = "jailedUntil"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          jailed_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_edit_commission_height = 12 [json_name = "lastEditCommissionHeight"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          last_edit_commission_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Candidate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Candidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reward_address = 1 [json_name = "rewardAddress"];
  if (!this->_internal_reward_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward_address().data(), static_cast<int>(this->_internal_reward_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.reward_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reward_address(), target);
  }

  // string owner_address = 2 [json_name = "ownerAddress"];
  if (!this->_internal_owner_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.owner_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner_address(), target);
  }

  // string control_address = 3 [json_name = "controlAddress"];
  if (!this->_internal_control_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_control_address().data(), static_cast<int>(this->_internal_control_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.control_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_control_address(), target);
  }

  // string total_bip_stake = 4 [json_name = "totalBipStake"];
  if (!this->_internal_total_bip_stake().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_bip_stake().data(), static_cast<int>(this->_internal_total_bip_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.total_bip_stake");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_total_bip_stake(), target);
  }

  // string public_key = 5 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Candidate.public_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_public_key(), target);
  }

  // uint64 commission = 6 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_commission(), target);
  }

  // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake stakes = 7 [json_name = "stakes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stakes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_stakes(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake updates = 8 [json_name = "updates"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_updates(i), target, stream);
  }

  // int64 status = 9 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_status(), target);
  }

  // uint64 id = 10 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_id(), target);
  }

  // int64 jailed_until = 11 [json_name = "jailedUntil"];
  if (this->_internal_jailed_until() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_jailed_until(), target);
  }

  // int64 last_edit_commission_height = 12 [json_name = "lastEditCommissionHeight"];
  if (this->_internal_last_edit_commission_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_last_edit_commission_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Candidate)
  return target;
}

size_t GenesisResponse_AppState_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Candidate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake stakes = 7 [json_name = "stakes"];
  total_size += 1UL * this->_internal_stakes_size();
  for (const auto& msg : this->stakes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake updates = 8 [json_name = "updates"];
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reward_address = 1 [json_name = "rewardAddress"];
  if (!this->_internal_reward_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward_address());
  }

  // string owner_address = 2 [json_name = "ownerAddress"];
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string control_address = 3 [json_name = "controlAddress"];
  if (!this->_internal_control_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_control_address());
  }

  // string total_bip_stake = 4 [json_name = "totalBipStake"];
  if (!this->_internal_total_bip_stake().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_bip_stake());
  }

  // string public_key = 5 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // uint64 commission = 6 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commission());
  }

  // int64 status = 9 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_status());
  }

  // uint64 id = 10 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int64 jailed_until = 11 [json_name = "jailedUntil"];
  if (this->_internal_jailed_until() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_jailed_until());
  }

  // int64 last_edit_commission_height = 12 [json_name = "lastEditCommissionHeight"];
  if (this->_internal_last_edit_commission_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_edit_commission_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Candidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Candidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Candidate::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Candidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Candidate *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Candidate &>(from));
}


void GenesisResponse_AppState_Candidate::MergeFrom(const GenesisResponse_AppState_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stakes_.MergeFrom(from.stakes_);
  updates_.MergeFrom(from.updates_);
  if (!from._internal_reward_address().empty()) {
    _internal_set_reward_address(from._internal_reward_address());
  }
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_control_address().empty()) {
    _internal_set_control_address(from._internal_control_address());
  }
  if (!from._internal_total_bip_stake().empty()) {
    _internal_set_total_bip_stake(from._internal_total_bip_stake());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_commission() != 0) {
    _internal_set_commission(from._internal_commission());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_jailed_until() != 0) {
    _internal_set_jailed_until(from._internal_jailed_until());
  }
  if (from._internal_last_edit_commission_height() != 0) {
    _internal_set_last_edit_commission_height(from._internal_last_edit_commission_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Candidate::CopyFrom(const GenesisResponse_AppState_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Candidate::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Candidate::InternalSwap(GenesisResponse_AppState_Candidate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stakes_.InternalSwap(&other->stakes_);
  updates_.InternalSwap(&other->updates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_address_, GetArenaForAllocation(),
      &other->reward_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_address_, GetArenaForAllocation(),
      &other->control_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &total_bip_stake_, GetArenaForAllocation(),
      &other->total_bip_stake_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Candidate, last_edit_commission_height_)
      + sizeof(GenesisResponse_AppState_Candidate::last_edit_commission_height_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Candidate, commission_)>(
          reinterpret_cast<char*>(&commission_),
          reinterpret_cast<char*>(&other->commission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Candidate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[38]);
}

// ===================================================================

class GenesisResponse_AppState_Coin::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& owner_address(const GenesisResponse_AppState_Coin* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
GenesisResponse_AppState_Coin::_Internal::owner_address(const GenesisResponse_AppState_Coin* msg) {
  return *msg->owner_address_;
}
void GenesisResponse_AppState_Coin::clear_owner_address() {
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
}
GenesisResponse_AppState_Coin::GenesisResponse_AppState_Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Coin)
}
GenesisResponse_AppState_Coin::GenesisResponse_AppState_Coin(const GenesisResponse_AppState_Coin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume().empty()) {
    volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume(), 
      GetArenaForAllocation());
  }
  reserve_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reserve().empty()) {
    reserve_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve(), 
      GetArenaForAllocation());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_supply().empty()) {
    max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_supply(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner_address()) {
    owner_address_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.owner_address_);
  } else {
    owner_address_ = nullptr;
  }
  ::memcpy(&crr_, &from.crr_,
    static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&crr_)) + sizeof(burnable_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Coin)
}

inline void GenesisResponse_AppState_Coin::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reserve_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&owner_address_)) + sizeof(burnable_));
}

GenesisResponse_AppState_Coin::~GenesisResponse_AppState_Coin() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Coin)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Coin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_address_;
}

void GenesisResponse_AppState_Coin::ArenaDtor(void* object) {
  GenesisResponse_AppState_Coin* _this = reinterpret_cast< GenesisResponse_AppState_Coin* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Coin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Coin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  volume_.ClearToEmpty();
  reserve_.ClearToEmpty();
  max_supply_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
  ::memset(&crr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burnable_) -
      reinterpret_cast<char*>(&crr_)) + sizeof(burnable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Coin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Coin.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Coin.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume = 3 [json_name = "volume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_volume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Coin.volume"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 crr = 4 [json_name = "crr"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reserve = 5 [json_name = "reserve"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reserve();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Coin.reserve"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_supply = 6 [json_name = "maxSupply"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Coin.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 version = 7 [json_name = "version"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue owner_address = 8 [json_name = "ownerAddress"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 9 [json_name = "id"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mintable = 10 [json_name = "mintable"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mintable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool burnable = 11 [json_name = "burnable"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          burnable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Coin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Coin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Coin.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Coin.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string volume = 3 [json_name = "volume"];
  if (!this->_internal_volume().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume().data(), static_cast<int>(this->_internal_volume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Coin.volume");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_volume(), target);
  }

  // uint64 crr = 4 [json_name = "crr"];
  if (this->_internal_crr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_crr(), target);
  }

  // string reserve = 5 [json_name = "reserve"];
  if (!this->_internal_reserve().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve().data(), static_cast<int>(this->_internal_reserve().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Coin.reserve");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reserve(), target);
  }

  // string max_supply = 6 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Coin.max_supply");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_max_supply(), target);
  }

  // uint64 version = 7 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_version(), target);
  }

  // .google.protobuf.StringValue owner_address = 8 [json_name = "ownerAddress"];
  if (this->_internal_has_owner_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::owner_address(this), target, stream);
  }

  // uint64 id = 9 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_id(), target);
  }

  // bool mintable = 10 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_mintable(), target);
  }

  // bool burnable = 11 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_burnable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Coin)
  return target;
}

size_t GenesisResponse_AppState_Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Coin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string volume = 3 [json_name = "volume"];
  if (!this->_internal_volume().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume());
  }

  // string reserve = 5 [json_name = "reserve"];
  if (!this->_internal_reserve().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve());
  }

  // string max_supply = 6 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // .google.protobuf.StringValue owner_address = 8 [json_name = "ownerAddress"];
  if (this->_internal_has_owner_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_address_);
  }

  // uint64 crr = 4 [json_name = "crr"];
  if (this->_internal_crr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_crr());
  }

  // uint64 version = 7 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // uint64 id = 9 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // bool mintable = 10 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    total_size += 1 + 1;
  }

  // bool burnable = 11 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Coin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Coin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Coin::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Coin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Coin *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Coin &>(from));
}


void GenesisResponse_AppState_Coin::MergeFrom(const GenesisResponse_AppState_Coin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Coin)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_volume().empty()) {
    _internal_set_volume(from._internal_volume());
  }
  if (!from._internal_reserve().empty()) {
    _internal_set_reserve(from._internal_reserve());
  }
  if (!from._internal_max_supply().empty()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from._internal_has_owner_address()) {
    _internal_mutable_owner_address()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_owner_address());
  }
  if (from._internal_crr() != 0) {
    _internal_set_crr(from._internal_crr());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_mintable() != 0) {
    _internal_set_mintable(from._internal_mintable());
  }
  if (from._internal_burnable() != 0) {
    _internal_set_burnable(from._internal_burnable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Coin::CopyFrom(const GenesisResponse_AppState_Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Coin::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Coin::InternalSwap(GenesisResponse_AppState_Coin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &volume_, GetArenaForAllocation(),
      &other->volume_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_, GetArenaForAllocation(),
      &other->reserve_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_supply_, GetArenaForAllocation(),
      &other->max_supply_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Coin, burnable_)
      + sizeof(GenesisResponse_AppState_Coin::burnable_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Coin, owner_address_)>(
          reinterpret_cast<char*>(&owner_address_),
          reinterpret_cast<char*>(&other->owner_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Coin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[39]);
}

// ===================================================================

class GenesisResponse_AppState_FrozenFund::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& candidate_key(const GenesisResponse_AppState_FrozenFund* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
GenesisResponse_AppState_FrozenFund::_Internal::candidate_key(const GenesisResponse_AppState_FrozenFund* msg) {
  return *msg->candidate_key_;
}
void GenesisResponse_AppState_FrozenFund::clear_candidate_key() {
  if (GetArenaForAllocation() == nullptr && candidate_key_ != nullptr) {
    delete candidate_key_;
  }
  candidate_key_ = nullptr;
}
GenesisResponse_AppState_FrozenFund::GenesisResponse_AppState_FrozenFund(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.FrozenFund)
}
GenesisResponse_AppState_FrozenFund::GenesisResponse_AppState_FrozenFund(const GenesisResponse_AppState_FrozenFund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_candidate_key()) {
    candidate_key_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.candidate_key_);
  } else {
    candidate_key_ = nullptr;
  }
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&candidate_id_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(candidate_id_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.FrozenFund)
}

inline void GenesisResponse_AppState_FrozenFund::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&candidate_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&candidate_id_) -
    reinterpret_cast<char*>(&candidate_key_)) + sizeof(candidate_id_));
}

GenesisResponse_AppState_FrozenFund::~GenesisResponse_AppState_FrozenFund() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.FrozenFund)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_FrozenFund::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete candidate_key_;
}

void GenesisResponse_AppState_FrozenFund::ArenaDtor(void* object) {
  GenesisResponse_AppState_FrozenFund* _this = reinterpret_cast< GenesisResponse_AppState_FrozenFund* >(object);
  (void)_this;
}
void GenesisResponse_AppState_FrozenFund::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_FrozenFund::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_FrozenFund::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.FrozenFund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && candidate_key_ != nullptr) {
    delete candidate_key_;
  }
  candidate_key_ = nullptr;
  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&candidate_id_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(candidate_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_FrozenFund::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.FrozenFund.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue candidate_key = 2 [json_name = "candidateKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 4 [json_name = "value"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.FrozenFund.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 5 [json_name = "height"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 candidate_id = 6 [json_name = "candidateId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_FrozenFund::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.FrozenFund)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.FrozenFund.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // .google.protobuf.StringValue candidate_key = 2 [json_name = "candidateKey"];
  if (this->_internal_has_candidate_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::candidate_key(this), target, stream);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string value = 4 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.FrozenFund.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // uint64 height = 5 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_height(), target);
  }

  // uint64 candidate_id = 6 [json_name = "candidateId"];
  if (this->_internal_candidate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_candidate_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.FrozenFund)
  return target;
}

size_t GenesisResponse_AppState_FrozenFund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.FrozenFund)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string value = 4 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .google.protobuf.StringValue candidate_key = 2 [json_name = "candidateKey"];
  if (this->_internal_has_candidate_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *candidate_key_);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  // uint64 height = 5 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 candidate_id = 6 [json_name = "candidateId"];
  if (this->_internal_candidate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_candidate_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_FrozenFund::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_FrozenFund::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_FrozenFund::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_FrozenFund::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_FrozenFund *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_FrozenFund &>(from));
}


void GenesisResponse_AppState_FrozenFund::MergeFrom(const GenesisResponse_AppState_FrozenFund& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.FrozenFund)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_candidate_key()) {
    _internal_mutable_candidate_key()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_candidate_key());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_candidate_id() != 0) {
    _internal_set_candidate_id(from._internal_candidate_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_FrozenFund::CopyFrom(const GenesisResponse_AppState_FrozenFund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.FrozenFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_FrozenFund::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_FrozenFund::InternalSwap(GenesisResponse_AppState_FrozenFund* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_FrozenFund, candidate_id_)
      + sizeof(GenesisResponse_AppState_FrozenFund::candidate_id_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_FrozenFund, candidate_key_)>(
          reinterpret_cast<char*>(&candidate_key_),
          reinterpret_cast<char*>(&other->candidate_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_FrozenFund::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[40]);
}

// ===================================================================

class GenesisResponse_AppState_Waitlist::_Internal {
 public:
};

GenesisResponse_AppState_Waitlist::GenesisResponse_AppState_Waitlist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Waitlist)
}
GenesisResponse_AppState_Waitlist::GenesisResponse_AppState_Waitlist(const GenesisResponse_AppState_Waitlist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&candidate_id_, &from.candidate_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&candidate_id_)) + sizeof(coin_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Waitlist)
}

inline void GenesisResponse_AppState_Waitlist::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&candidate_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&candidate_id_)) + sizeof(coin_));
}

GenesisResponse_AppState_Waitlist::~GenesisResponse_AppState_Waitlist() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Waitlist)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Waitlist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Waitlist::ArenaDtor(void* object) {
  GenesisResponse_AppState_Waitlist* _this = reinterpret_cast< GenesisResponse_AppState_Waitlist* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Waitlist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Waitlist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Waitlist::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Waitlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&candidate_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&candidate_id_)) + sizeof(coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Waitlist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 candidate_id = 1 [json_name = "candidateId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          candidate_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner = 2 [json_name = "owner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Waitlist.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 4 [json_name = "value"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Waitlist.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Waitlist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Waitlist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 candidate_id = 1 [json_name = "candidateId"];
  if (this->_internal_candidate_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_candidate_id(), target);
  }

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Waitlist.owner");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_owner(), target);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string value = 4 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Waitlist.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Waitlist)
  return target;
}

size_t GenesisResponse_AppState_Waitlist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Waitlist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 2 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string value = 4 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint64 candidate_id = 1 [json_name = "candidateId"];
  if (this->_internal_candidate_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_candidate_id());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Waitlist::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Waitlist::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Waitlist::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Waitlist::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Waitlist *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Waitlist &>(from));
}


void GenesisResponse_AppState_Waitlist::MergeFrom(const GenesisResponse_AppState_Waitlist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Waitlist)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_candidate_id() != 0) {
    _internal_set_candidate_id(from._internal_candidate_id());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Waitlist::CopyFrom(const GenesisResponse_AppState_Waitlist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Waitlist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Waitlist::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Waitlist::InternalSwap(GenesisResponse_AppState_Waitlist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Waitlist, coin_)
      + sizeof(GenesisResponse_AppState_Waitlist::coin_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Waitlist, candidate_id_)>(
          reinterpret_cast<char*>(&candidate_id_),
          reinterpret_cast<char*>(&other->candidate_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Waitlist::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[41]);
}

// ===================================================================

class GenesisResponse_AppState_Account_Balance::_Internal {
 public:
};

GenesisResponse_AppState_Account_Balance::GenesisResponse_AppState_Account_Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Account.Balance)
}
GenesisResponse_AppState_Account_Balance::GenesisResponse_AppState_Account_Balance(const GenesisResponse_AppState_Account_Balance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Account.Balance)
}

inline void GenesisResponse_AppState_Account_Balance::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

GenesisResponse_AppState_Account_Balance::~GenesisResponse_AppState_Account_Balance() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Account.Balance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Account_Balance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Account_Balance::ArenaDtor(void* object) {
  GenesisResponse_AppState_Account_Balance* _this = reinterpret_cast< GenesisResponse_AppState_Account_Balance* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Account_Balance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Account_Balance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Account_Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Account.Balance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Account_Balance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Account.Balance.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Account_Balance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Account.Balance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin = 1 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin(), target);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Account.Balance.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Account.Balance)
  return target;
}

size_t GenesisResponse_AppState_Account_Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Account.Balance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // uint64 coin = 1 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Account_Balance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Account_Balance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Account_Balance::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Account_Balance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Account_Balance *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Account_Balance &>(from));
}


void GenesisResponse_AppState_Account_Balance::MergeFrom(const GenesisResponse_AppState_Account_Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Account.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Account_Balance::CopyFrom(const GenesisResponse_AppState_Account_Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Account.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Account_Balance::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Account_Balance::InternalSwap(GenesisResponse_AppState_Account_Balance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Account_Balance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[42]);
}

// ===================================================================

class GenesisResponse_AppState_Account_MultisigData::_Internal {
 public:
};

GenesisResponse_AppState_Account_MultisigData::GenesisResponse_AppState_Account_MultisigData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  weights_(arena),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Account.MultisigData)
}
GenesisResponse_AppState_Account_MultisigData::GenesisResponse_AppState_Account_MultisigData(const GenesisResponse_AppState_Account_MultisigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weights_(from.weights_),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Account.MultisigData)
}

inline void GenesisResponse_AppState_Account_MultisigData::SharedCtor() {
threshold_ = uint64_t{0u};
}

GenesisResponse_AppState_Account_MultisigData::~GenesisResponse_AppState_Account_MultisigData() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Account.MultisigData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Account_MultisigData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GenesisResponse_AppState_Account_MultisigData::ArenaDtor(void* object) {
  GenesisResponse_AppState_Account_MultisigData* _this = reinterpret_cast< GenesisResponse_AppState_Account_MultisigData* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Account_MultisigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Account_MultisigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Account_MultisigData::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Account.MultisigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  addresses_.Clear();
  threshold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Account_MultisigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 threshold = 1 [json_name = "threshold"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 weights = 2 [json_name = "weights"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 3 [json_name = "addresses"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Account.MultisigData.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Account_MultisigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Account.MultisigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_threshold(), target);
  }

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    int byte_size = _weights_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_weights(), byte_size, target);
    }
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Account.MultisigData.addresses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Account.MultisigData)
  return target;
}

size_t GenesisResponse_AppState_Account_MultisigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Account.MultisigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Account_MultisigData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Account_MultisigData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Account_MultisigData::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Account_MultisigData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Account_MultisigData *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Account_MultisigData &>(from));
}


void GenesisResponse_AppState_Account_MultisigData::MergeFrom(const GenesisResponse_AppState_Account_MultisigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Account.MultisigData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  addresses_.MergeFrom(from.addresses_);
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Account_MultisigData::CopyFrom(const GenesisResponse_AppState_Account_MultisigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Account.MultisigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Account_MultisigData::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Account_MultisigData::InternalSwap(GenesisResponse_AppState_Account_MultisigData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  weights_.InternalSwap(&other->weights_);
  addresses_.InternalSwap(&other->addresses_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Account_MultisigData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[43]);
}

// ===================================================================

class GenesisResponse_AppState_Account::_Internal {
 public:
  static const ::api_pb::GenesisResponse_AppState_Account_MultisigData& multisig_data(const GenesisResponse_AppState_Account* msg);
};

const ::api_pb::GenesisResponse_AppState_Account_MultisigData&
GenesisResponse_AppState_Account::_Internal::multisig_data(const GenesisResponse_AppState_Account* msg) {
  return *msg->multisig_data_;
}
GenesisResponse_AppState_Account::GenesisResponse_AppState_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  balance_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Account)
}
GenesisResponse_AppState_Account::GenesisResponse_AppState_Account(const GenesisResponse_AppState_Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      balance_(from.balance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_multisig_data()) {
    multisig_data_ = new ::api_pb::GenesisResponse_AppState_Account_MultisigData(*from.multisig_data_);
  } else {
    multisig_data_ = nullptr;
  }
  nonce_ = from.nonce_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Account)
}

inline void GenesisResponse_AppState_Account::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multisig_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&multisig_data_)) + sizeof(nonce_));
}

GenesisResponse_AppState_Account::~GenesisResponse_AppState_Account() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Account)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Account::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete multisig_data_;
}

void GenesisResponse_AppState_Account::ArenaDtor(void* object) {
  GenesisResponse_AppState_Account* _this = reinterpret_cast< GenesisResponse_AppState_Account* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Account::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_.Clear();
  address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && multisig_data_ != nullptr) {
    delete multisig_data_;
  }
  multisig_data_ = nullptr;
  nonce_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Account.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Account.Balance balance = 2 [json_name = "balance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 3 [json_name = "nonce"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.AppState.Account.MultisigData multisig_data = 4 [json_name = "multisigData"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_multisig_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Account.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // repeated .api_pb.GenesisResponse.AppState.Account.Balance balance = 2 [json_name = "balance"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_balance(i), target, stream);
  }

  // uint64 nonce = 3 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_nonce(), target);
  }

  // .api_pb.GenesisResponse.AppState.Account.MultisigData multisig_data = 4 [json_name = "multisigData"];
  if (this->_internal_has_multisig_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::multisig_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Account)
  return target;
}

size_t GenesisResponse_AppState_Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.GenesisResponse.AppState.Account.Balance balance = 2 [json_name = "balance"];
  total_size += 1UL * this->_internal_balance_size();
  for (const auto& msg : this->balance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .api_pb.GenesisResponse.AppState.Account.MultisigData multisig_data = 4 [json_name = "multisigData"];
  if (this->_internal_has_multisig_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multisig_data_);
  }

  // uint64 nonce = 3 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Account::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Account *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Account &>(from));
}


void GenesisResponse_AppState_Account::MergeFrom(const GenesisResponse_AppState_Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Account)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balance_.MergeFrom(from.balance_);
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_has_multisig_data()) {
    _internal_mutable_multisig_data()->::api_pb::GenesisResponse_AppState_Account_MultisigData::MergeFrom(from._internal_multisig_data());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Account::CopyFrom(const GenesisResponse_AppState_Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Account::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Account::InternalSwap(GenesisResponse_AppState_Account* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  balance_.InternalSwap(&other->balance_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Account, nonce_)
      + sizeof(GenesisResponse_AppState_Account::nonce_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Account, multisig_data_)>(
          reinterpret_cast<char*>(&multisig_data_),
          reinterpret_cast<char*>(&other->multisig_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Account::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[44]);
}

// ===================================================================

class GenesisResponse_AppState_HaltBlock::_Internal {
 public:
};

GenesisResponse_AppState_HaltBlock::GenesisResponse_AppState_HaltBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.HaltBlock)
}
GenesisResponse_AppState_HaltBlock::GenesisResponse_AppState_HaltBlock(const GenesisResponse_AppState_HaltBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidate_key().empty()) {
    candidate_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidate_key(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.HaltBlock)
}

inline void GenesisResponse_AppState_HaltBlock::SharedCtor() {
candidate_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

GenesisResponse_AppState_HaltBlock::~GenesisResponse_AppState_HaltBlock() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.HaltBlock)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_HaltBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  candidate_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_HaltBlock::ArenaDtor(void* object) {
  GenesisResponse_AppState_HaltBlock* _this = reinterpret_cast< GenesisResponse_AppState_HaltBlock* >(object);
  (void)_this;
}
void GenesisResponse_AppState_HaltBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_HaltBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_HaltBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.HaltBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_key_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_HaltBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string candidate_key = 2 [json_name = "candidateKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_candidate_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.HaltBlock.candidate_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_HaltBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.HaltBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // string candidate_key = 2 [json_name = "candidateKey"];
  if (!this->_internal_candidate_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate_key().data(), static_cast<int>(this->_internal_candidate_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.HaltBlock.candidate_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_candidate_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.HaltBlock)
  return target;
}

size_t GenesisResponse_AppState_HaltBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.HaltBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate_key = 2 [json_name = "candidateKey"];
  if (!this->_internal_candidate_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate_key());
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_HaltBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_HaltBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_HaltBlock::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_HaltBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_HaltBlock *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_HaltBlock &>(from));
}


void GenesisResponse_AppState_HaltBlock::MergeFrom(const GenesisResponse_AppState_HaltBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.HaltBlock)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidate_key().empty()) {
    _internal_set_candidate_key(from._internal_candidate_key());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_HaltBlock::CopyFrom(const GenesisResponse_AppState_HaltBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.HaltBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_HaltBlock::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_HaltBlock::InternalSwap(GenesisResponse_AppState_HaltBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &candidate_key_, GetArenaForAllocation(),
      &other->candidate_key_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_HaltBlock::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[45]);
}

// ===================================================================

class GenesisResponse_AppState_Pool::_Internal {
 public:
};

GenesisResponse_AppState_Pool::GenesisResponse_AppState_Pool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Pool)
}
GenesisResponse_AppState_Pool::GenesisResponse_AppState_Pool(const GenesisResponse_AppState_Pool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reserve0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reserve0().empty()) {
    reserve0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve0(), 
      GetArenaForAllocation());
  }
  reserve1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reserve1().empty()) {
    reserve1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve1(), 
      GetArenaForAllocation());
  }
  ::memcpy(&coin0_, &from.coin0_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Pool)
}

inline void GenesisResponse_AppState_Pool::SharedCtor() {
reserve0_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reserve1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&coin0_)) + sizeof(id_));
}

GenesisResponse_AppState_Pool::~GenesisResponse_AppState_Pool() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Pool)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Pool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reserve0_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Pool::ArenaDtor(void* object) {
  GenesisResponse_AppState_Pool* _this = reinterpret_cast< GenesisResponse_AppState_Pool* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Pool::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Pool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Pool::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Pool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reserve0_.ClearToEmpty();
  reserve1_.ClearToEmpty();
  ::memset(&coin0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&coin0_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Pool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin0 = 1 [json_name = "coin0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coin0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin1 = 2 [json_name = "coin1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          coin1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reserve0 = 3 [json_name = "reserve0"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reserve0();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Pool.reserve0"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reserve1 = 4 [json_name = "reserve1"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reserve1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Pool.reserve1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 5 [json_name = "id"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Pool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Pool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin0 = 1 [json_name = "coin0"];
  if (this->_internal_coin0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin0(), target);
  }

  // uint64 coin1 = 2 [json_name = "coin1"];
  if (this->_internal_coin1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coin1(), target);
  }

  // string reserve0 = 3 [json_name = "reserve0"];
  if (!this->_internal_reserve0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve0().data(), static_cast<int>(this->_internal_reserve0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Pool.reserve0");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reserve0(), target);
  }

  // string reserve1 = 4 [json_name = "reserve1"];
  if (!this->_internal_reserve1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve1().data(), static_cast<int>(this->_internal_reserve1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Pool.reserve1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reserve1(), target);
  }

  // uint64 id = 5 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Pool)
  return target;
}

size_t GenesisResponse_AppState_Pool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Pool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reserve0 = 3 [json_name = "reserve0"];
  if (!this->_internal_reserve0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve0());
  }

  // string reserve1 = 4 [json_name = "reserve1"];
  if (!this->_internal_reserve1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve1());
  }

  // uint64 coin0 = 1 [json_name = "coin0"];
  if (this->_internal_coin0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin0());
  }

  // uint64 coin1 = 2 [json_name = "coin1"];
  if (this->_internal_coin1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin1());
  }

  // uint64 id = 5 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Pool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Pool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Pool::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Pool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Pool *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Pool &>(from));
}


void GenesisResponse_AppState_Pool::MergeFrom(const GenesisResponse_AppState_Pool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Pool)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reserve0().empty()) {
    _internal_set_reserve0(from._internal_reserve0());
  }
  if (!from._internal_reserve1().empty()) {
    _internal_set_reserve1(from._internal_reserve1());
  }
  if (from._internal_coin0() != 0) {
    _internal_set_coin0(from._internal_coin0());
  }
  if (from._internal_coin1() != 0) {
    _internal_set_coin1(from._internal_coin1());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Pool::CopyFrom(const GenesisResponse_AppState_Pool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Pool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Pool::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Pool::InternalSwap(GenesisResponse_AppState_Pool* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve0_, GetArenaForAllocation(),
      &other->reserve0_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve1_, GetArenaForAllocation(),
      &other->reserve1_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Pool, id_)
      + sizeof(GenesisResponse_AppState_Pool::id_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_Pool, coin0_)>(
          reinterpret_cast<char*>(&coin0_),
          reinterpret_cast<char*>(&other->coin0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Pool::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[46]);
}

// ===================================================================

class GenesisResponse_AppState_Commission::_Internal {
 public:
};

GenesisResponse_AppState_Commission::GenesisResponse_AppState_Commission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.Commission)
}
GenesisResponse_AppState_Commission::GenesisResponse_AppState_Commission(const GenesisResponse_AppState_Commission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload_byte().empty()) {
    payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_byte(), 
      GetArenaForAllocation());
  }
  send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_send().empty()) {
    send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_send(), 
      GetArenaForAllocation());
  }
  create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker3().empty()) {
    create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker3(), 
      GetArenaForAllocation());
  }
  create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker4().empty()) {
    create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker4(), 
      GetArenaForAllocation());
  }
  create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker5().empty()) {
    create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker5(), 
      GetArenaForAllocation());
  }
  create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker6().empty()) {
    create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker6(), 
      GetArenaForAllocation());
  }
  create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker7_10().empty()) {
    create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker7_10(), 
      GetArenaForAllocation());
  }
  declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_declare_candidacy().empty()) {
    declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_declare_candidacy(), 
      GetArenaForAllocation());
  }
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegate().empty()) {
    delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate(), 
      GetArenaForAllocation());
  }
  unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unbond().empty()) {
    unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unbond(), 
      GetArenaForAllocation());
  }
  redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redeem_check().empty()) {
    redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redeem_check(), 
      GetArenaForAllocation());
  }
  create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_multisig().empty()) {
    create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate().empty()) {
    edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate(), 
      GetArenaForAllocation());
  }
  set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_halt_block().empty()) {
    set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_halt_block(), 
      GetArenaForAllocation());
  }
  edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_ticker_owner().empty()) {
    edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_ticker_owner(), 
      GetArenaForAllocation());
  }
  edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_multisig().empty()) {
    edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_public_key().empty()) {
    edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_public_key(), 
      GetArenaForAllocation());
  }
  edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_commission().empty()) {
    edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_commission(), 
      GetArenaForAllocation());
  }
  vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_commission().empty()) {
    vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_commission(), 
      GetArenaForAllocation());
  }
  vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_update().empty()) {
    vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_update(), 
      GetArenaForAllocation());
  }
  create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_coin().empty()) {
    create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_coin(), 
      GetArenaForAllocation());
  }
  create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_token().empty()) {
    create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_token(), 
      GetArenaForAllocation());
  }
  recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_coin().empty()) {
    recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_coin(), 
      GetArenaForAllocation());
  }
  recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_token().empty()) {
    recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_token(), 
      GetArenaForAllocation());
  }
  buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_bancor().empty()) {
    buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_bancor(), 
      GetArenaForAllocation());
  }
  sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_bancor().empty()) {
    sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_bancor(), 
      GetArenaForAllocation());
  }
  sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_bancor().empty()) {
    sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_bancor(), 
      GetArenaForAllocation());
  }
  buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_base().empty()) {
    buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_base(), 
      GetArenaForAllocation());
  }
  sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_base().empty()) {
    sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_base(), 
      GetArenaForAllocation());
  }
  sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_base().empty()) {
    sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_base(), 
      GetArenaForAllocation());
  }
  set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_on().empty()) {
    set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_on(), 
      GetArenaForAllocation());
  }
  set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_off().empty()) {
    set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_off(), 
      GetArenaForAllocation());
  }
  mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mint_token().empty()) {
    mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mint_token(), 
      GetArenaForAllocation());
  }
  burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn_token().empty()) {
    burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_burn_token(), 
      GetArenaForAllocation());
  }
  create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_swap_pool().empty()) {
    create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_swap_pool(), 
      GetArenaForAllocation());
  }
  add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_liquidity().empty()) {
    add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_liquidity(), 
      GetArenaForAllocation());
  }
  remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_liquidity().empty()) {
    remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_liquidity(), 
      GetArenaForAllocation());
  }
  multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_base().empty()) {
    multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_base(), 
      GetArenaForAllocation());
  }
  multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_delta().empty()) {
    multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_delta(), 
      GetArenaForAllocation());
  }
  buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_delta().empty()) {
    buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_delta().empty()) {
    sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_delta().empty()) {
    sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_delta(), 
      GetArenaForAllocation());
  }
  failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failed_tx().empty()) {
    failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failed_tx(), 
      GetArenaForAllocation());
  }
  add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_limit_order().empty()) {
    add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_limit_order(), 
      GetArenaForAllocation());
  }
  remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_limit_order().empty()) {
    remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_limit_order(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.Commission)
}

inline void GenesisResponse_AppState_Commission::SharedCtor() {
payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

GenesisResponse_AppState_Commission::~GenesisResponse_AppState_Commission() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.Commission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_Commission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_byte_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  send_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker7_10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  declare_candidacy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unbond_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redeem_check_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_halt_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_ticker_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_on_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_off_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mint_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_swap_pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failed_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenesisResponse_AppState_Commission::ArenaDtor(void* object) {
  GenesisResponse_AppState_Commission* _this = reinterpret_cast< GenesisResponse_AppState_Commission* >(object);
  (void)_this;
}
void GenesisResponse_AppState_Commission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_Commission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_Commission::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.Commission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_byte_.ClearToEmpty();
  send_.ClearToEmpty();
  create_ticker3_.ClearToEmpty();
  create_ticker4_.ClearToEmpty();
  create_ticker5_.ClearToEmpty();
  create_ticker6_.ClearToEmpty();
  create_ticker7_10_.ClearToEmpty();
  declare_candidacy_.ClearToEmpty();
  delegate_.ClearToEmpty();
  unbond_.ClearToEmpty();
  redeem_check_.ClearToEmpty();
  create_multisig_.ClearToEmpty();
  edit_candidate_.ClearToEmpty();
  set_halt_block_.ClearToEmpty();
  edit_ticker_owner_.ClearToEmpty();
  edit_multisig_.ClearToEmpty();
  edit_candidate_public_key_.ClearToEmpty();
  edit_candidate_commission_.ClearToEmpty();
  vote_commission_.ClearToEmpty();
  vote_update_.ClearToEmpty();
  create_coin_.ClearToEmpty();
  create_token_.ClearToEmpty();
  recreate_coin_.ClearToEmpty();
  recreate_token_.ClearToEmpty();
  buy_bancor_.ClearToEmpty();
  sell_bancor_.ClearToEmpty();
  sell_all_bancor_.ClearToEmpty();
  buy_pool_base_.ClearToEmpty();
  sell_pool_base_.ClearToEmpty();
  sell_all_pool_base_.ClearToEmpty();
  set_candidate_on_.ClearToEmpty();
  set_candidate_off_.ClearToEmpty();
  mint_token_.ClearToEmpty();
  burn_token_.ClearToEmpty();
  create_swap_pool_.ClearToEmpty();
  add_liquidity_.ClearToEmpty();
  remove_liquidity_.ClearToEmpty();
  multisend_base_.ClearToEmpty();
  multisend_delta_.ClearToEmpty();
  buy_pool_delta_.ClearToEmpty();
  sell_pool_delta_.ClearToEmpty();
  sell_all_pool_delta_.ClearToEmpty();
  failed_tx_.ClearToEmpty();
  add_limit_order_.ClearToEmpty();
  remove_limit_order_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_Commission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload_byte = 4 [json_name = "payloadByte"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload_byte();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.payload_byte"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string send = 5 [json_name = "send"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_send();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.send"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker3 = 7 [json_name = "createTicker3"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_create_ticker3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_ticker3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker4 = 8 [json_name = "createTicker4"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_create_ticker4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_ticker4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker5 = 9 [json_name = "createTicker5"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_create_ticker5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_ticker5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker6 = 10 [json_name = "createTicker6"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_create_ticker6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_ticker6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker7_10 = 11 [json_name = "createTicker710"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_create_ticker7_10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_ticker7_10"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string declare_candidacy = 13 [json_name = "declareCandidacy"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_declare_candidacy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.declare_candidacy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delegate = 14 [json_name = "delegate"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.delegate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unbond = 15 [json_name = "unbond"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_unbond();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.unbond"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string redeem_check = 16 [json_name = "redeemCheck"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_redeem_check();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.redeem_check"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_multisig = 18 [json_name = "createMultisig"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_create_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate = 20 [json_name = "editCandidate"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_edit_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.edit_candidate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_halt_block = 21 [json_name = "setHaltBlock"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_set_halt_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.set_halt_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_edit_ticker_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_multisig = 23 [json_name = "editMultisig"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_edit_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.edit_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_edit_candidate_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_edit_candidate_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_commission = 31 [json_name = "voteCommission"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_vote_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.vote_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_update = 32 [json_name = "voteUpdate"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_vote_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.vote_update"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_coin = 34 [json_name = "createCoin"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_create_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_token = 35 [json_name = "createToken"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_create_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_coin = 36 [json_name = "recreateCoin"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recreate_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.recreate_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_token = 37 [json_name = "recreateToken"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_recreate_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.recreate_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_bancor = 38 [json_name = "buyBancor"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buy_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.buy_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_bancor = 39 [json_name = "sellBancor"];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sell_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.sell_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sell_all_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.sell_all_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_base = 41 [json_name = "buyPoolBase"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_buy_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.buy_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_base = 42 [json_name = "sellPoolBase"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sell_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.sell_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sell_all_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_on = 44 [json_name = "setCandidateOn"];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_set_candidate_on();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.set_candidate_on"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_off = 45 [json_name = "setCandidateOff"];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_set_candidate_off();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.set_candidate_off"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mint_token = 46 [json_name = "mintToken"];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_mint_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.mint_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string burn_token = 47 [json_name = "burnToken"];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_burn_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.burn_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_swap_pool = 48 [json_name = "createSwapPool"];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_create_swap_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.create_swap_pool"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_liquidity = 49 [json_name = "addLiquidity"];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_add_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.add_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_liquidity = 50 [json_name = "removeLiquidity"];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_remove_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.remove_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_base = 51 [json_name = "multisendBase"];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_multisend_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.multisend_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_delta = 52 [json_name = "multisendDelta"];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_multisend_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.multisend_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_buy_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.buy_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sell_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.sell_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_sell_all_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failed_tx = 56 [json_name = "failedTx"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_failed_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.failed_tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_limit_order = 57 [json_name = "addLimitOrder"];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_add_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.add_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_remove_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.Commission.remove_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_Commission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.Commission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_byte().data(), static_cast<int>(this->_internal_payload_byte().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.payload_byte");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload_byte(), target);
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send().data(), static_cast<int>(this->_internal_send().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.send");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_send(), target);
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker3().data(), static_cast<int>(this->_internal_create_ticker3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_ticker3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_create_ticker3(), target);
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker4().data(), static_cast<int>(this->_internal_create_ticker4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_ticker4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_create_ticker4(), target);
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker5().data(), static_cast<int>(this->_internal_create_ticker5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_ticker5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_ticker5(), target);
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker6().data(), static_cast<int>(this->_internal_create_ticker6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_ticker6");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_create_ticker6(), target);
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker7_10().data(), static_cast<int>(this->_internal_create_ticker7_10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_ticker7_10");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_create_ticker7_10(), target);
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_declare_candidacy().data(), static_cast<int>(this->_internal_declare_candidacy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.declare_candidacy");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_declare_candidacy(), target);
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate().data(), static_cast<int>(this->_internal_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.delegate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_delegate(), target);
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unbond().data(), static_cast<int>(this->_internal_unbond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.unbond");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unbond(), target);
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redeem_check().data(), static_cast<int>(this->_internal_redeem_check().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.redeem_check");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_redeem_check(), target);
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_multisig().data(), static_cast<int>(this->_internal_create_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_multisig");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_create_multisig(), target);
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate().data(), static_cast<int>(this->_internal_edit_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.edit_candidate");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_edit_candidate(), target);
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_halt_block().data(), static_cast<int>(this->_internal_set_halt_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.set_halt_block");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_set_halt_block(), target);
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_ticker_owner().data(), static_cast<int>(this->_internal_edit_ticker_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_edit_ticker_owner(), target);
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_multisig().data(), static_cast<int>(this->_internal_edit_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.edit_multisig");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_edit_multisig(), target);
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_public_key().data(), static_cast<int>(this->_internal_edit_candidate_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_edit_candidate_public_key(), target);
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_commission().data(), static_cast<int>(this->_internal_edit_candidate_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_edit_candidate_commission(), target);
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_commission().data(), static_cast<int>(this->_internal_vote_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.vote_commission");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_vote_commission(), target);
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_update().data(), static_cast<int>(this->_internal_vote_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.vote_update");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_vote_update(), target);
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_coin().data(), static_cast<int>(this->_internal_create_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_coin");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_create_coin(), target);
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_token().data(), static_cast<int>(this->_internal_create_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_token");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_create_token(), target);
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_coin().data(), static_cast<int>(this->_internal_recreate_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.recreate_coin");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_recreate_coin(), target);
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_token().data(), static_cast<int>(this->_internal_recreate_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.recreate_token");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_recreate_token(), target);
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_bancor().data(), static_cast<int>(this->_internal_buy_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.buy_bancor");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_buy_bancor(), target);
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_bancor().data(), static_cast<int>(this->_internal_sell_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.sell_bancor");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_sell_bancor(), target);
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_bancor().data(), static_cast<int>(this->_internal_sell_all_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.sell_all_bancor");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_sell_all_bancor(), target);
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_base().data(), static_cast<int>(this->_internal_buy_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.buy_pool_base");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_buy_pool_base(), target);
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_base().data(), static_cast<int>(this->_internal_sell_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.sell_pool_base");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_sell_pool_base(), target);
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_base().data(), static_cast<int>(this->_internal_sell_all_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_sell_all_pool_base(), target);
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_on().data(), static_cast<int>(this->_internal_set_candidate_on().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.set_candidate_on");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_set_candidate_on(), target);
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_off().data(), static_cast<int>(this->_internal_set_candidate_off().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.set_candidate_off");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_set_candidate_off(), target);
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_token().data(), static_cast<int>(this->_internal_mint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.mint_token");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_mint_token(), target);
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_burn_token().data(), static_cast<int>(this->_internal_burn_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.burn_token");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_burn_token(), target);
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_swap_pool().data(), static_cast<int>(this->_internal_create_swap_pool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.create_swap_pool");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_create_swap_pool(), target);
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_liquidity().data(), static_cast<int>(this->_internal_add_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.add_liquidity");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_add_liquidity(), target);
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_liquidity().data(), static_cast<int>(this->_internal_remove_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.remove_liquidity");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_remove_liquidity(), target);
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_base().data(), static_cast<int>(this->_internal_multisend_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.multisend_base");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_multisend_base(), target);
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_delta().data(), static_cast<int>(this->_internal_multisend_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.multisend_delta");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_multisend_delta(), target);
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_delta().data(), static_cast<int>(this->_internal_buy_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.buy_pool_delta");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_buy_pool_delta(), target);
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_delta().data(), static_cast<int>(this->_internal_sell_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.sell_pool_delta");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_sell_pool_delta(), target);
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_delta().data(), static_cast<int>(this->_internal_sell_all_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_sell_all_pool_delta(), target);
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failed_tx().data(), static_cast<int>(this->_internal_failed_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.failed_tx");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_failed_tx(), target);
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_limit_order().data(), static_cast<int>(this->_internal_add_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.add_limit_order");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_add_limit_order(), target);
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_limit_order().data(), static_cast<int>(this->_internal_remove_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.Commission.remove_limit_order");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_remove_limit_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.Commission)
  return target;
}

size_t GenesisResponse_AppState_Commission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.Commission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_byte());
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send());
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker3());
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker4());
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker5());
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker6());
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker7_10());
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_declare_candidacy());
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate());
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unbond());
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redeem_check());
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_multisig());
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate());
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_halt_block());
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_ticker_owner());
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_multisig());
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_public_key());
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_commission());
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_commission());
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_update());
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_coin());
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_token());
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_coin());
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_token());
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_bancor());
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_bancor());
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_bancor());
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_base());
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_base());
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_base());
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_on());
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_off());
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_token());
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_burn_token());
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_swap_pool());
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_liquidity());
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_liquidity());
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_base());
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_delta());
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_delta());
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_delta());
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_delta());
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failed_tx());
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_limit_order());
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_limit_order());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_Commission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_Commission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_Commission::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_Commission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_Commission *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_Commission &>(from));
}


void GenesisResponse_AppState_Commission::MergeFrom(const GenesisResponse_AppState_Commission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.Commission)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload_byte().empty()) {
    _internal_set_payload_byte(from._internal_payload_byte());
  }
  if (!from._internal_send().empty()) {
    _internal_set_send(from._internal_send());
  }
  if (!from._internal_create_ticker3().empty()) {
    _internal_set_create_ticker3(from._internal_create_ticker3());
  }
  if (!from._internal_create_ticker4().empty()) {
    _internal_set_create_ticker4(from._internal_create_ticker4());
  }
  if (!from._internal_create_ticker5().empty()) {
    _internal_set_create_ticker5(from._internal_create_ticker5());
  }
  if (!from._internal_create_ticker6().empty()) {
    _internal_set_create_ticker6(from._internal_create_ticker6());
  }
  if (!from._internal_create_ticker7_10().empty()) {
    _internal_set_create_ticker7_10(from._internal_create_ticker7_10());
  }
  if (!from._internal_declare_candidacy().empty()) {
    _internal_set_declare_candidacy(from._internal_declare_candidacy());
  }
  if (!from._internal_delegate().empty()) {
    _internal_set_delegate(from._internal_delegate());
  }
  if (!from._internal_unbond().empty()) {
    _internal_set_unbond(from._internal_unbond());
  }
  if (!from._internal_redeem_check().empty()) {
    _internal_set_redeem_check(from._internal_redeem_check());
  }
  if (!from._internal_create_multisig().empty()) {
    _internal_set_create_multisig(from._internal_create_multisig());
  }
  if (!from._internal_edit_candidate().empty()) {
    _internal_set_edit_candidate(from._internal_edit_candidate());
  }
  if (!from._internal_set_halt_block().empty()) {
    _internal_set_set_halt_block(from._internal_set_halt_block());
  }
  if (!from._internal_edit_ticker_owner().empty()) {
    _internal_set_edit_ticker_owner(from._internal_edit_ticker_owner());
  }
  if (!from._internal_edit_multisig().empty()) {
    _internal_set_edit_multisig(from._internal_edit_multisig());
  }
  if (!from._internal_edit_candidate_public_key().empty()) {
    _internal_set_edit_candidate_public_key(from._internal_edit_candidate_public_key());
  }
  if (!from._internal_edit_candidate_commission().empty()) {
    _internal_set_edit_candidate_commission(from._internal_edit_candidate_commission());
  }
  if (!from._internal_vote_commission().empty()) {
    _internal_set_vote_commission(from._internal_vote_commission());
  }
  if (!from._internal_vote_update().empty()) {
    _internal_set_vote_update(from._internal_vote_update());
  }
  if (!from._internal_create_coin().empty()) {
    _internal_set_create_coin(from._internal_create_coin());
  }
  if (!from._internal_create_token().empty()) {
    _internal_set_create_token(from._internal_create_token());
  }
  if (!from._internal_recreate_coin().empty()) {
    _internal_set_recreate_coin(from._internal_recreate_coin());
  }
  if (!from._internal_recreate_token().empty()) {
    _internal_set_recreate_token(from._internal_recreate_token());
  }
  if (!from._internal_buy_bancor().empty()) {
    _internal_set_buy_bancor(from._internal_buy_bancor());
  }
  if (!from._internal_sell_bancor().empty()) {
    _internal_set_sell_bancor(from._internal_sell_bancor());
  }
  if (!from._internal_sell_all_bancor().empty()) {
    _internal_set_sell_all_bancor(from._internal_sell_all_bancor());
  }
  if (!from._internal_buy_pool_base().empty()) {
    _internal_set_buy_pool_base(from._internal_buy_pool_base());
  }
  if (!from._internal_sell_pool_base().empty()) {
    _internal_set_sell_pool_base(from._internal_sell_pool_base());
  }
  if (!from._internal_sell_all_pool_base().empty()) {
    _internal_set_sell_all_pool_base(from._internal_sell_all_pool_base());
  }
  if (!from._internal_set_candidate_on().empty()) {
    _internal_set_set_candidate_on(from._internal_set_candidate_on());
  }
  if (!from._internal_set_candidate_off().empty()) {
    _internal_set_set_candidate_off(from._internal_set_candidate_off());
  }
  if (!from._internal_mint_token().empty()) {
    _internal_set_mint_token(from._internal_mint_token());
  }
  if (!from._internal_burn_token().empty()) {
    _internal_set_burn_token(from._internal_burn_token());
  }
  if (!from._internal_create_swap_pool().empty()) {
    _internal_set_create_swap_pool(from._internal_create_swap_pool());
  }
  if (!from._internal_add_liquidity().empty()) {
    _internal_set_add_liquidity(from._internal_add_liquidity());
  }
  if (!from._internal_remove_liquidity().empty()) {
    _internal_set_remove_liquidity(from._internal_remove_liquidity());
  }
  if (!from._internal_multisend_base().empty()) {
    _internal_set_multisend_base(from._internal_multisend_base());
  }
  if (!from._internal_multisend_delta().empty()) {
    _internal_set_multisend_delta(from._internal_multisend_delta());
  }
  if (!from._internal_buy_pool_delta().empty()) {
    _internal_set_buy_pool_delta(from._internal_buy_pool_delta());
  }
  if (!from._internal_sell_pool_delta().empty()) {
    _internal_set_sell_pool_delta(from._internal_sell_pool_delta());
  }
  if (!from._internal_sell_all_pool_delta().empty()) {
    _internal_set_sell_all_pool_delta(from._internal_sell_all_pool_delta());
  }
  if (!from._internal_failed_tx().empty()) {
    _internal_set_failed_tx(from._internal_failed_tx());
  }
  if (!from._internal_add_limit_order().empty()) {
    _internal_set_add_limit_order(from._internal_add_limit_order());
  }
  if (!from._internal_remove_limit_order().empty()) {
    _internal_set_remove_limit_order(from._internal_remove_limit_order());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_Commission::CopyFrom(const GenesisResponse_AppState_Commission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.Commission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_Commission::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_Commission::InternalSwap(GenesisResponse_AppState_Commission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_byte_, GetArenaForAllocation(),
      &other->payload_byte_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &send_, GetArenaForAllocation(),
      &other->send_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker3_, GetArenaForAllocation(),
      &other->create_ticker3_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker4_, GetArenaForAllocation(),
      &other->create_ticker4_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker5_, GetArenaForAllocation(),
      &other->create_ticker5_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker6_, GetArenaForAllocation(),
      &other->create_ticker6_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker7_10_, GetArenaForAllocation(),
      &other->create_ticker7_10_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &declare_candidacy_, GetArenaForAllocation(),
      &other->declare_candidacy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delegate_, GetArenaForAllocation(),
      &other->delegate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unbond_, GetArenaForAllocation(),
      &other->unbond_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redeem_check_, GetArenaForAllocation(),
      &other->redeem_check_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_multisig_, GetArenaForAllocation(),
      &other->create_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_, GetArenaForAllocation(),
      &other->edit_candidate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_halt_block_, GetArenaForAllocation(),
      &other->set_halt_block_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_ticker_owner_, GetArenaForAllocation(),
      &other->edit_ticker_owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_multisig_, GetArenaForAllocation(),
      &other->edit_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_public_key_, GetArenaForAllocation(),
      &other->edit_candidate_public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_commission_, GetArenaForAllocation(),
      &other->edit_candidate_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_commission_, GetArenaForAllocation(),
      &other->vote_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_update_, GetArenaForAllocation(),
      &other->vote_update_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_coin_, GetArenaForAllocation(),
      &other->create_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_token_, GetArenaForAllocation(),
      &other->create_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_coin_, GetArenaForAllocation(),
      &other->recreate_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_token_, GetArenaForAllocation(),
      &other->recreate_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_bancor_, GetArenaForAllocation(),
      &other->buy_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_bancor_, GetArenaForAllocation(),
      &other->sell_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_bancor_, GetArenaForAllocation(),
      &other->sell_all_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_base_, GetArenaForAllocation(),
      &other->buy_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_base_, GetArenaForAllocation(),
      &other->sell_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_base_, GetArenaForAllocation(),
      &other->sell_all_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_on_, GetArenaForAllocation(),
      &other->set_candidate_on_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_off_, GetArenaForAllocation(),
      &other->set_candidate_off_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mint_token_, GetArenaForAllocation(),
      &other->mint_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &burn_token_, GetArenaForAllocation(),
      &other->burn_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_swap_pool_, GetArenaForAllocation(),
      &other->create_swap_pool_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_liquidity_, GetArenaForAllocation(),
      &other->add_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_liquidity_, GetArenaForAllocation(),
      &other->remove_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_base_, GetArenaForAllocation(),
      &other->multisend_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_delta_, GetArenaForAllocation(),
      &other->multisend_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_delta_, GetArenaForAllocation(),
      &other->buy_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_delta_, GetArenaForAllocation(),
      &other->sell_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_delta_, GetArenaForAllocation(),
      &other->sell_all_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &failed_tx_, GetArenaForAllocation(),
      &other->failed_tx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_limit_order_, GetArenaForAllocation(),
      &other->add_limit_order_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_limit_order_, GetArenaForAllocation(),
      &other->remove_limit_order_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_Commission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[47]);
}

// ===================================================================

class GenesisResponse_AppState_CommissionVote::_Internal {
 public:
  static const ::api_pb::GenesisResponse_AppState_Commission& commission(const GenesisResponse_AppState_CommissionVote* msg);
};

const ::api_pb::GenesisResponse_AppState_Commission&
GenesisResponse_AppState_CommissionVote::_Internal::commission(const GenesisResponse_AppState_CommissionVote* msg) {
  return *msg->commission_;
}
GenesisResponse_AppState_CommissionVote::GenesisResponse_AppState_CommissionVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  votes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState.CommissionVote)
}
GenesisResponse_AppState_CommissionVote::GenesisResponse_AppState_CommissionVote(const GenesisResponse_AppState_CommissionVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commission()) {
    commission_ = new ::api_pb::GenesisResponse_AppState_Commission(*from.commission_);
  } else {
    commission_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState.CommissionVote)
}

inline void GenesisResponse_AppState_CommissionVote::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&commission_)) + sizeof(height_));
}

GenesisResponse_AppState_CommissionVote::~GenesisResponse_AppState_CommissionVote() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState.CommissionVote)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState_CommissionVote::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commission_;
}

void GenesisResponse_AppState_CommissionVote::ArenaDtor(void* object) {
  GenesisResponse_AppState_CommissionVote* _this = reinterpret_cast< GenesisResponse_AppState_CommissionVote* >(object);
  (void)_this;
}
void GenesisResponse_AppState_CommissionVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState_CommissionVote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState_CommissionVote::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState.CommissionVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  if (GetArenaForAllocation() == nullptr && commission_ != nullptr) {
    delete commission_;
  }
  commission_ = nullptr;
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState_CommissionVote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string votes = 2 [json_name = "votes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_votes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.CommissionVote.votes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.AppState.Commission commission = 3 [json_name = "commission"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState_CommissionVote::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState.CommissionVote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // repeated string votes = 2 [json_name = "votes"];
  for (int i = 0, n = this->_internal_votes_size(); i < n; i++) {
    const auto& s = this->_internal_votes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.CommissionVote.votes");
    target = stream->WriteString(2, s, target);
  }

  // .api_pb.GenesisResponse.AppState.Commission commission = 3 [json_name = "commission"];
  if (this->_internal_has_commission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::commission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState.CommissionVote)
  return target;
}

size_t GenesisResponse_AppState_CommissionVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState.CommissionVote)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string votes = 2 [json_name = "votes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(votes_.size());
  for (int i = 0, n = votes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      votes_.Get(i));
  }

  // .api_pb.GenesisResponse.AppState.Commission commission = 3 [json_name = "commission"];
  if (this->_internal_has_commission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commission_);
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState_CommissionVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState_CommissionVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState_CommissionVote::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState_CommissionVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState_CommissionVote *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState_CommissionVote &>(from));
}


void GenesisResponse_AppState_CommissionVote::MergeFrom(const GenesisResponse_AppState_CommissionVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState.CommissionVote)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from._internal_has_commission()) {
    _internal_mutable_commission()->::api_pb::GenesisResponse_AppState_Commission::MergeFrom(from._internal_commission());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState_CommissionVote::CopyFrom(const GenesisResponse_AppState_CommissionVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState.CommissionVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState_CommissionVote::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState_CommissionVote::InternalSwap(GenesisResponse_AppState_CommissionVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  votes_.InternalSwap(&other->votes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_CommissionVote, height_)
      + sizeof(GenesisResponse_AppState_CommissionVote::height_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState_CommissionVote, commission_)>(
          reinterpret_cast<char*>(&commission_),
          reinterpret_cast<char*>(&other->commission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState_CommissionVote::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[48]);
}

// ===================================================================

class GenesisResponse_AppState::_Internal {
 public:
  static const ::api_pb::GenesisResponse_AppState_Commission& commission(const GenesisResponse_AppState* msg);
};

const ::api_pb::GenesisResponse_AppState_Commission&
GenesisResponse_AppState::_Internal::commission(const GenesisResponse_AppState* msg) {
  return *msg->commission_;
}
GenesisResponse_AppState::GenesisResponse_AppState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  validators_(arena),
  candidates_(arena),
  coins_(arena),
  frozen_funds_(arena),
  used_checks_(arena),
  halt_blocks_(arena),
  waitlist_(arena),
  accounts_(arena),
  pools_(arena),
  commission_votes_(arena),
  block_list_candidates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse.AppState)
}
GenesisResponse_AppState::GenesisResponse_AppState(const GenesisResponse_AppState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_),
      candidates_(from.candidates_),
      coins_(from.coins_),
      frozen_funds_(from.frozen_funds_),
      used_checks_(from.used_checks_),
      halt_blocks_(from.halt_blocks_),
      waitlist_(from.waitlist_),
      accounts_(from.accounts_),
      pools_(from.pools_),
      commission_votes_(from.commission_votes_),
      block_list_candidates_(from.block_list_candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  total_slashed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_slashed().empty()) {
    total_slashed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_slashed(), 
      GetArenaForAllocation());
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_note(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commission()) {
    commission_ = new ::api_pb::GenesisResponse_AppState_Commission(*from.commission_);
  } else {
    commission_ = nullptr;
  }
  max_gas_ = from.max_gas_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse.AppState)
}

inline void GenesisResponse_AppState::SharedCtor() {
total_slashed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commission_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_gas_) -
    reinterpret_cast<char*>(&commission_)) + sizeof(max_gas_));
}

GenesisResponse_AppState::~GenesisResponse_AppState() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse.AppState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse_AppState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  total_slashed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commission_;
}

void GenesisResponse_AppState::ArenaDtor(void* object) {
  GenesisResponse_AppState* _this = reinterpret_cast< GenesisResponse_AppState* >(object);
  (void)_this;
}
void GenesisResponse_AppState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse_AppState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse_AppState::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse.AppState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  candidates_.Clear();
  coins_.Clear();
  frozen_funds_.Clear();
  used_checks_.Clear();
  halt_blocks_.Clear();
  waitlist_.Clear();
  accounts_.Clear();
  pools_.Clear();
  commission_votes_.Clear();
  block_list_candidates_.Clear();
  total_slashed_.ClearToEmpty();
  note_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && commission_ != nullptr) {
    delete commission_;
  }
  commission_ = nullptr;
  max_gas_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse_AppState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.GenesisResponse.AppState.Validators validators = 2 [json_name = "validators"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Candidate candidates = 3 [json_name = "candidates"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Coin coins = 5 [json_name = "coins"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.FrozenFund frozen_funds = 6 [json_name = "frozenFunds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frozen_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 max_gas = 7 [json_name = "maxGas"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_slashed = 8 [json_name = "totalSlashed"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_total_slashed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.total_slashed"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string note = 10 [json_name = "note"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.note"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string used_checks = 11 [json_name = "usedChecks"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_used_checks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.used_checks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.HaltBlock halt_blocks = 12 [json_name = "haltBlocks"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_halt_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Waitlist waitlist = 13 [json_name = "waitlist"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waitlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Account accounts = 14 [json_name = "accounts"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.Pool pools = 15 [json_name = "pools"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pools(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.AppState.Commission commission = 16 [json_name = "commission"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.GenesisResponse.AppState.CommissionVote commission_votes = 17 [json_name = "commissionVotes"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_commission_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string block_list_candidates = 18 [json_name = "blockListCandidates"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_block_list_candidates();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.block_list_candidates"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // string version = 19 [json_name = "version"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.AppState.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse_AppState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse.AppState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.GenesisResponse.AppState.Validators validators = 2 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_validators(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.Candidate candidates = 3 [json_name = "candidates"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_candidates(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.Coin coins = 5 [json_name = "coins"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coins_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_coins(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.FrozenFund frozen_funds = 6 [json_name = "frozenFunds"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frozen_funds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_frozen_funds(i), target, stream);
  }

  // uint64 max_gas = 7 [json_name = "maxGas"];
  if (this->_internal_max_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_max_gas(), target);
  }

  // string total_slashed = 8 [json_name = "totalSlashed"];
  if (!this->_internal_total_slashed().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_slashed().data(), static_cast<int>(this->_internal_total_slashed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.total_slashed");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_total_slashed(), target);
  }

  // string note = 10 [json_name = "note"];
  if (!this->_internal_note().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.note");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_note(), target);
  }

  // repeated string used_checks = 11 [json_name = "usedChecks"];
  for (int i = 0, n = this->_internal_used_checks_size(); i < n; i++) {
    const auto& s = this->_internal_used_checks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.used_checks");
    target = stream->WriteString(11, s, target);
  }

  // repeated .api_pb.GenesisResponse.AppState.HaltBlock halt_blocks = 12 [json_name = "haltBlocks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_halt_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_halt_blocks(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.Waitlist waitlist = 13 [json_name = "waitlist"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waitlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_waitlist(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.Account accounts = 14 [json_name = "accounts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_accounts(i), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.Pool pools = 15 [json_name = "pools"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pools_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_pools(i), target, stream);
  }

  // .api_pb.GenesisResponse.AppState.Commission commission = 16 [json_name = "commission"];
  if (this->_internal_has_commission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::commission(this), target, stream);
  }

  // repeated .api_pb.GenesisResponse.AppState.CommissionVote commission_votes = 17 [json_name = "commissionVotes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commission_votes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_commission_votes(i), target, stream);
  }

  // repeated string block_list_candidates = 18 [json_name = "blockListCandidates"];
  for (int i = 0, n = this->_internal_block_list_candidates_size(); i < n; i++) {
    const auto& s = this->_internal_block_list_candidates(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.block_list_candidates");
    target = stream->WriteString(18, s, target);
  }

  // string version = 19 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.AppState.version");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse.AppState)
  return target;
}

size_t GenesisResponse_AppState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse.AppState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.GenesisResponse.AppState.Validators validators = 2 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.Candidate candidates = 3 [json_name = "candidates"];
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.Coin coins = 5 [json_name = "coins"];
  total_size += 1UL * this->_internal_coins_size();
  for (const auto& msg : this->coins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.FrozenFund frozen_funds = 6 [json_name = "frozenFunds"];
  total_size += 1UL * this->_internal_frozen_funds_size();
  for (const auto& msg : this->frozen_funds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string used_checks = 11 [json_name = "usedChecks"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(used_checks_.size());
  for (int i = 0, n = used_checks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      used_checks_.Get(i));
  }

  // repeated .api_pb.GenesisResponse.AppState.HaltBlock halt_blocks = 12 [json_name = "haltBlocks"];
  total_size += 1UL * this->_internal_halt_blocks_size();
  for (const auto& msg : this->halt_blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.Waitlist waitlist = 13 [json_name = "waitlist"];
  total_size += 1UL * this->_internal_waitlist_size();
  for (const auto& msg : this->waitlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.Account accounts = 14 [json_name = "accounts"];
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.Pool pools = 15 [json_name = "pools"];
  total_size += 1UL * this->_internal_pools_size();
  for (const auto& msg : this->pools_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.GenesisResponse.AppState.CommissionVote commission_votes = 17 [json_name = "commissionVotes"];
  total_size += 2UL * this->_internal_commission_votes_size();
  for (const auto& msg : this->commission_votes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string block_list_candidates = 18 [json_name = "blockListCandidates"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(block_list_candidates_.size());
  for (int i = 0, n = block_list_candidates_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      block_list_candidates_.Get(i));
  }

  // string total_slashed = 8 [json_name = "totalSlashed"];
  if (!this->_internal_total_slashed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_slashed());
  }

  // string note = 10 [json_name = "note"];
  if (!this->_internal_note().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_note());
  }

  // string version = 19 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .api_pb.GenesisResponse.AppState.Commission commission = 16 [json_name = "commission"];
  if (this->_internal_has_commission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commission_);
  }

  // uint64 max_gas = 7 [json_name = "maxGas"];
  if (this->_internal_max_gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_gas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse_AppState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse_AppState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse_AppState::GetClassData() const { return &_class_data_; }

void GenesisResponse_AppState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse_AppState *>(to)->MergeFrom(
      static_cast<const GenesisResponse_AppState &>(from));
}


void GenesisResponse_AppState::MergeFrom(const GenesisResponse_AppState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse.AppState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  candidates_.MergeFrom(from.candidates_);
  coins_.MergeFrom(from.coins_);
  frozen_funds_.MergeFrom(from.frozen_funds_);
  used_checks_.MergeFrom(from.used_checks_);
  halt_blocks_.MergeFrom(from.halt_blocks_);
  waitlist_.MergeFrom(from.waitlist_);
  accounts_.MergeFrom(from.accounts_);
  pools_.MergeFrom(from.pools_);
  commission_votes_.MergeFrom(from.commission_votes_);
  block_list_candidates_.MergeFrom(from.block_list_candidates_);
  if (!from._internal_total_slashed().empty()) {
    _internal_set_total_slashed(from._internal_total_slashed());
  }
  if (!from._internal_note().empty()) {
    _internal_set_note(from._internal_note());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_commission()) {
    _internal_mutable_commission()->::api_pb::GenesisResponse_AppState_Commission::MergeFrom(from._internal_commission());
  }
  if (from._internal_max_gas() != 0) {
    _internal_set_max_gas(from._internal_max_gas());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse_AppState::CopyFrom(const GenesisResponse_AppState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse.AppState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse_AppState::IsInitialized() const {
  return true;
}

void GenesisResponse_AppState::InternalSwap(GenesisResponse_AppState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
  candidates_.InternalSwap(&other->candidates_);
  coins_.InternalSwap(&other->coins_);
  frozen_funds_.InternalSwap(&other->frozen_funds_);
  used_checks_.InternalSwap(&other->used_checks_);
  halt_blocks_.InternalSwap(&other->halt_blocks_);
  waitlist_.InternalSwap(&other->waitlist_);
  accounts_.InternalSwap(&other->accounts_);
  pools_.InternalSwap(&other->pools_);
  commission_votes_.InternalSwap(&other->commission_votes_);
  block_list_candidates_.InternalSwap(&other->block_list_candidates_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &total_slashed_, GetArenaForAllocation(),
      &other->total_slashed_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &note_, GetArenaForAllocation(),
      &other->note_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState, max_gas_)
      + sizeof(GenesisResponse_AppState::max_gas_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse_AppState, commission_)>(
          reinterpret_cast<char*>(&commission_),
          reinterpret_cast<char*>(&other->commission_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse_AppState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[49]);
}

// ===================================================================

class GenesisResponse::_Internal {
 public:
  static const ::api_pb::GenesisResponse_ConsensusParams& consensus_params(const GenesisResponse* msg);
  static const ::api_pb::GenesisResponse_AppState& app_state(const GenesisResponse* msg);
};

const ::api_pb::GenesisResponse_ConsensusParams&
GenesisResponse::_Internal::consensus_params(const GenesisResponse* msg) {
  return *msg->consensus_params_;
}
const ::api_pb::GenesisResponse_AppState&
GenesisResponse::_Internal::app_state(const GenesisResponse* msg) {
  return *msg->app_state_;
}
GenesisResponse::GenesisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.GenesisResponse)
}
GenesisResponse::GenesisResponse(const GenesisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  genesis_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_genesis_time().empty()) {
    genesis_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_genesis_time(), 
      GetArenaForAllocation());
  }
  chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_id().empty()) {
    chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chain_id(), 
      GetArenaForAllocation());
  }
  app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_hash().empty()) {
    app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_consensus_params()) {
    consensus_params_ = new ::api_pb::GenesisResponse_ConsensusParams(*from.consensus_params_);
  } else {
    consensus_params_ = nullptr;
  }
  if (from._internal_has_app_state()) {
    app_state_ = new ::api_pb::GenesisResponse_AppState(*from.app_state_);
  } else {
    app_state_ = nullptr;
  }
  initial_height_ = from.initial_height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.GenesisResponse)
}

inline void GenesisResponse::SharedCtor() {
genesis_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chain_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&consensus_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&initial_height_) -
    reinterpret_cast<char*>(&consensus_params_)) + sizeof(initial_height_));
}

GenesisResponse::~GenesisResponse() {
  // @@protoc_insertion_point(destructor:api_pb.GenesisResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GenesisResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  genesis_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete consensus_params_;
  if (this != internal_default_instance()) delete app_state_;
}

void GenesisResponse::ArenaDtor(void* object) {
  GenesisResponse* _this = reinterpret_cast< GenesisResponse* >(object);
  (void)_this;
}
void GenesisResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenesisResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenesisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.GenesisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genesis_time_.ClearToEmpty();
  chain_id_.ClearToEmpty();
  app_hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
  if (GetArenaForAllocation() == nullptr && app_state_ != nullptr) {
    delete app_state_;
  }
  app_state_ = nullptr;
  initial_height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string genesis_time = 1 [json_name = "genesisTime"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_genesis_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.genesis_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_id = 2 [json_name = "chainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.chain_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_hash = 4 [json_name = "appHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.GenesisResponse.app_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.GenesisResponse.AppState app_state = 5 [json_name = "appState"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 initial_height = 6 [json_name = "initialHeight"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          initial_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenesisResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.GenesisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string genesis_time = 1 [json_name = "genesisTime"];
  if (!this->_internal_genesis_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_genesis_time().data(), static_cast<int>(this->_internal_genesis_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.genesis_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_genesis_time(), target);
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.chain_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chain_id(), target);
  }

  // .api_pb.GenesisResponse.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  if (this->_internal_has_consensus_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::consensus_params(this), target, stream);
  }

  // string app_hash = 4 [json_name = "appHash"];
  if (!this->_internal_app_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_hash().data(), static_cast<int>(this->_internal_app_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.GenesisResponse.app_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_hash(), target);
  }

  // .api_pb.GenesisResponse.AppState app_state = 5 [json_name = "appState"];
  if (this->_internal_has_app_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::app_state(this), target, stream);
  }

  // uint64 initial_height = 6 [json_name = "initialHeight"];
  if (this->_internal_initial_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_initial_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.GenesisResponse)
  return target;
}

size_t GenesisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.GenesisResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string genesis_time = 1 [json_name = "genesisTime"];
  if (!this->_internal_genesis_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_genesis_time());
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // string app_hash = 4 [json_name = "appHash"];
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_hash());
  }

  // .api_pb.GenesisResponse.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  if (this->_internal_has_consensus_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consensus_params_);
  }

  // .api_pb.GenesisResponse.AppState app_state = 5 [json_name = "appState"];
  if (this->_internal_has_app_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_state_);
  }

  // uint64 initial_height = 6 [json_name = "initialHeight"];
  if (this->_internal_initial_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_initial_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GenesisResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisResponse::GetClassData() const { return &_class_data_; }

void GenesisResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GenesisResponse *>(to)->MergeFrom(
      static_cast<const GenesisResponse &>(from));
}


void GenesisResponse::MergeFrom(const GenesisResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.GenesisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_genesis_time().empty()) {
    _internal_set_genesis_time(from._internal_genesis_time());
  }
  if (!from._internal_chain_id().empty()) {
    _internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_app_hash().empty()) {
    _internal_set_app_hash(from._internal_app_hash());
  }
  if (from._internal_has_consensus_params()) {
    _internal_mutable_consensus_params()->::api_pb::GenesisResponse_ConsensusParams::MergeFrom(from._internal_consensus_params());
  }
  if (from._internal_has_app_state()) {
    _internal_mutable_app_state()->::api_pb::GenesisResponse_AppState::MergeFrom(from._internal_app_state());
  }
  if (from._internal_initial_height() != 0) {
    _internal_set_initial_height(from._internal_initial_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisResponse::CopyFrom(const GenesisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.GenesisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisResponse::IsInitialized() const {
  return true;
}

void GenesisResponse::InternalSwap(GenesisResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &genesis_time_, GetArenaForAllocation(),
      &other->genesis_time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chain_id_, GetArenaForAllocation(),
      &other->chain_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_hash_, GetArenaForAllocation(),
      &other->app_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisResponse, initial_height_)
      + sizeof(GenesisResponse::initial_height_)
      - PROTOBUF_FIELD_OFFSET(GenesisResponse, consensus_params_)>(
          reinterpret_cast<char*>(&consensus_params_),
          reinterpret_cast<char*>(&other->consensus_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[50]);
}

// ===================================================================

class MinGasPriceResponse::_Internal {
 public:
};

MinGasPriceResponse::MinGasPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MinGasPriceResponse)
}
MinGasPriceResponse::MinGasPriceResponse(const MinGasPriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_gas_price_ = from.min_gas_price_;
  // @@protoc_insertion_point(copy_constructor:api_pb.MinGasPriceResponse)
}

inline void MinGasPriceResponse::SharedCtor() {
min_gas_price_ = uint64_t{0u};
}

MinGasPriceResponse::~MinGasPriceResponse() {
  // @@protoc_insertion_point(destructor:api_pb.MinGasPriceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MinGasPriceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MinGasPriceResponse::ArenaDtor(void* object) {
  MinGasPriceResponse* _this = reinterpret_cast< MinGasPriceResponse* >(object);
  (void)_this;
}
void MinGasPriceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MinGasPriceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MinGasPriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MinGasPriceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_gas_price_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinGasPriceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 min_gas_price = 3 [json_name = "minGasPrice"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinGasPriceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MinGasPriceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_gas_price = 3 [json_name = "minGasPrice"];
  if (this->_internal_min_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_min_gas_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MinGasPriceResponse)
  return target;
}

size_t MinGasPriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MinGasPriceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 min_gas_price = 3 [json_name = "minGasPrice"];
  if (this->_internal_min_gas_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_gas_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinGasPriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MinGasPriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinGasPriceResponse::GetClassData() const { return &_class_data_; }

void MinGasPriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MinGasPriceResponse *>(to)->MergeFrom(
      static_cast<const MinGasPriceResponse &>(from));
}


void MinGasPriceResponse::MergeFrom(const MinGasPriceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MinGasPriceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_min_gas_price() != 0) {
    _internal_set_min_gas_price(from._internal_min_gas_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinGasPriceResponse::CopyFrom(const MinGasPriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MinGasPriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinGasPriceResponse::IsInitialized() const {
  return true;
}

void MinGasPriceResponse::InternalSwap(MinGasPriceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(min_gas_price_, other->min_gas_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MinGasPriceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[51]);
}

// ===================================================================

class BlockRequest::_Internal {
 public:
};

BlockRequest::BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BlockRequest)
}
BlockRequest::BlockRequest(const BlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&events_) -
    reinterpret_cast<char*>(&height_)) + sizeof(events_));
  // @@protoc_insertion_point(copy_constructor:api_pb.BlockRequest)
}

inline void BlockRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&events_) -
    reinterpret_cast<char*>(&height_)) + sizeof(events_));
}

BlockRequest::~BlockRequest() {
  // @@protoc_insertion_point(destructor:api_pb.BlockRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockRequest::ArenaDtor(void* object) {
  BlockRequest* _this = reinterpret_cast< BlockRequest* >(object);
  (void)_this;
}
void BlockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&events_) -
      reinterpret_cast<char*>(&height_)) + sizeof(events_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.BlockField fields = 2 [json_name = "fields"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_fields(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_fields(static_cast<::api_pb::BlockField>(val));
        } else goto handle_unusual;
        continue;
      // bool failed_txs = 3 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          failed_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool events = 4 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BlockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // repeated .api_pb.BlockField fields = 2 [json_name = "fields"];
  {
    int byte_size = _fields_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, fields_, byte_size, target);
    }
  }

  // bool failed_txs = 3 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_failed_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_failed_txs(), target);
  }

  // bool events = 4 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BlockRequest)
  return target;
}

size_t BlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BlockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.BlockField fields = 2 [json_name = "fields"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_fields_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_fields(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _fields_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // bool failed_txs = 3 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_failed_txs() != 0) {
    total_size += 1 + 1;
  }

  // bool events = 4 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_events() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRequest::GetClassData() const { return &_class_data_; }

void BlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockRequest *>(to)->MergeFrom(
      static_cast<const BlockRequest &>(from));
}


void BlockRequest::MergeFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BlockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_failed_txs() != 0) {
    _internal_set_failed_txs(from._internal_failed_txs());
  }
  if (from._internal_events() != 0) {
    _internal_set_events(from._internal_events());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRequest::CopyFrom(const BlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRequest::IsInitialized() const {
  return true;
}

void BlockRequest::InternalSwap(BlockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockRequest, events_)
      + sizeof(BlockRequest::events_)
      - PROTOBUF_FIELD_OFFSET(BlockRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[52]);
}

// ===================================================================

class BlockResponse_Validator::_Internal {
 public:
};

BlockResponse_Validator::BlockResponse_Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BlockResponse.Validator)
}
BlockResponse_Validator::BlockResponse_Validator(const BlockResponse_Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  signed__ = from.signed__;
  // @@protoc_insertion_point(copy_constructor:api_pb.BlockResponse.Validator)
}

inline void BlockResponse_Validator::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signed__ = false;
}

BlockResponse_Validator::~BlockResponse_Validator() {
  // @@protoc_insertion_point(destructor:api_pb.BlockResponse.Validator)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockResponse_Validator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockResponse_Validator::ArenaDtor(void* object) {
  BlockResponse_Validator* _this = reinterpret_cast< BlockResponse_Validator* >(object);
  (void)_this;
}
void BlockResponse_Validator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse_Validator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse_Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BlockResponse.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  signed__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse_Validator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BlockResponse.Validator.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool signed = 2 [json_name = "signed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          signed__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse_Validator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BlockResponse.Validator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BlockResponse.Validator.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bool signed = 2 [json_name = "signed"];
  if (this->_internal_signed_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_signed_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BlockResponse.Validator)
  return target;
}

size_t BlockResponse_Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BlockResponse.Validator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // bool signed = 2 [json_name = "signed"];
  if (this->_internal_signed_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockResponse_Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockResponse_Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockResponse_Validator::GetClassData() const { return &_class_data_; }

void BlockResponse_Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockResponse_Validator *>(to)->MergeFrom(
      static_cast<const BlockResponse_Validator &>(from));
}


void BlockResponse_Validator::MergeFrom(const BlockResponse_Validator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BlockResponse.Validator)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_signed_() != 0) {
    _internal_set_signed_(from._internal_signed_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockResponse_Validator::CopyFrom(const BlockResponse_Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BlockResponse.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse_Validator::IsInitialized() const {
  return true;
}

void BlockResponse_Validator::InternalSwap(BlockResponse_Validator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  swap(signed__, other->signed__);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse_Validator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[53]);
}

// ===================================================================

class BlockResponse_Evidence::_Internal {
 public:
};

void BlockResponse_Evidence::clear_evidence() {
  evidence_.Clear();
}
BlockResponse_Evidence::BlockResponse_Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  evidence_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BlockResponse.Evidence)
}
BlockResponse_Evidence::BlockResponse_Evidence(const BlockResponse_Evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      evidence_(from.evidence_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.BlockResponse.Evidence)
}

inline void BlockResponse_Evidence::SharedCtor() {
}

BlockResponse_Evidence::~BlockResponse_Evidence() {
  // @@protoc_insertion_point(destructor:api_pb.BlockResponse.Evidence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockResponse_Evidence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockResponse_Evidence::ArenaDtor(void* object) {
  BlockResponse_Evidence* _this = reinterpret_cast< BlockResponse_Evidence* >(object);
  (void)_this;
}
void BlockResponse_Evidence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse_Evidence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse_Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BlockResponse.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evidence_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse_Evidence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Struct evidence = 1 [json_name = "evidence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evidence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse_Evidence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BlockResponse.Evidence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Struct evidence = 1 [json_name = "evidence"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_evidence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_evidence(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BlockResponse.Evidence)
  return target;
}

size_t BlockResponse_Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BlockResponse.Evidence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Struct evidence = 1 [json_name = "evidence"];
  total_size += 1UL * this->_internal_evidence_size();
  for (const auto& msg : this->evidence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockResponse_Evidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockResponse_Evidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockResponse_Evidence::GetClassData() const { return &_class_data_; }

void BlockResponse_Evidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockResponse_Evidence *>(to)->MergeFrom(
      static_cast<const BlockResponse_Evidence &>(from));
}


void BlockResponse_Evidence::MergeFrom(const BlockResponse_Evidence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BlockResponse.Evidence)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evidence_.MergeFrom(from.evidence_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockResponse_Evidence::CopyFrom(const BlockResponse_Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BlockResponse.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse_Evidence::IsInitialized() const {
  return true;
}

void BlockResponse_Evidence::InternalSwap(BlockResponse_Evidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  evidence_.InternalSwap(&other->evidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse_Evidence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[54]);
}

// ===================================================================

class BlockResponse::_Internal {
 public:
  static const ::api_pb::BlockResponse_Evidence& evidence(const BlockResponse* msg);
};

const ::api_pb::BlockResponse_Evidence&
BlockResponse::_Internal::evidence(const BlockResponse* msg) {
  return *msg->evidence_;
}
void BlockResponse::clear_events() {
  events_.Clear();
}
BlockResponse::BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena),
  validators_(arena),
  missed_(arena),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.BlockResponse)
}
BlockResponse::BlockResponse(const BlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_),
      validators_(from.validators_),
      missed_(from.missed_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time().empty()) {
    time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time(), 
      GetArenaForAllocation());
  }
  block_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_reward().empty()) {
    block_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_block_reward(), 
      GetArenaForAllocation());
  }
  proposer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_proposer().empty()) {
    proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_proposer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_evidence()) {
    evidence_ = new ::api_pb::BlockResponse_Evidence(*from.evidence_);
  } else {
    evidence_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&height_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:api_pb.BlockResponse)
}

inline void BlockResponse::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
block_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
proposer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&evidence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&evidence_)) + sizeof(size_));
}

BlockResponse::~BlockResponse() {
  // @@protoc_insertion_point(destructor:api_pb.BlockResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete evidence_;
}

void BlockResponse::ArenaDtor(void* object) {
  BlockResponse* _this = reinterpret_cast< BlockResponse* >(object);
  (void)_this;
}
void BlockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  validators_.Clear();
  missed_.Clear();
  events_.Clear();
  hash_.ClearToEmpty();
  time_.ClearToEmpty();
  block_reward_.ClearToEmpty();
  proposer_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&height_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BlockResponse.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time = 3 [json_name = "time"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BlockResponse.time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 transaction_count = 4 [json_name = "transactionCount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          transaction_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.TransactionResponse transactions = 6 [json_name = "transactions"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string block_reward = 7 [json_name = "blockReward"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_block_reward();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BlockResponse.block_reward"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 8 [json_name = "size"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proposer = 9 [json_name = "proposer"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_proposer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BlockResponse.proposer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.BlockResponse.Validator validators = 10 [json_name = "validators"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string missed = 12 [json_name = "missed"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_missed();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.BlockResponse.missed"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // .api_pb.BlockResponse.Evidence evidence = 13 [json_name = "evidence"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any events = 14 [json_name = "events"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.BlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BlockResponse.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // string time = 3 [json_name = "time"];
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BlockResponse.time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time(), target);
  }

  // uint64 transaction_count = 4 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_transaction_count(), target);
  }

  // repeated .api_pb.TransactionResponse transactions = 6 [json_name = "transactions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_transactions(i), target, stream);
  }

  // string block_reward = 7 [json_name = "blockReward"];
  if (!this->_internal_block_reward().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_reward().data(), static_cast<int>(this->_internal_block_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BlockResponse.block_reward");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_block_reward(), target);
  }

  // uint64 size = 8 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_size(), target);
  }

  // string proposer = 9 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proposer().data(), static_cast<int>(this->_internal_proposer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BlockResponse.proposer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_proposer(), target);
  }

  // repeated .api_pb.BlockResponse.Validator validators = 10 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_validators(i), target, stream);
  }

  // repeated string missed = 12 [json_name = "missed"];
  for (int i = 0, n = this->_internal_missed_size(); i < n; i++) {
    const auto& s = this->_internal_missed(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.BlockResponse.missed");
    target = stream->WriteString(12, s, target);
  }

  // .api_pb.BlockResponse.Evidence evidence = 13 [json_name = "evidence"];
  if (this->_internal_has_evidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::evidence(this), target, stream);
  }

  // repeated .google.protobuf.Any events = 14 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.BlockResponse)
  return target;
}

size_t BlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.BlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.TransactionResponse transactions = 6 [json_name = "transactions"];
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.BlockResponse.Validator validators = 10 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string missed = 12 [json_name = "missed"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(missed_.size());
  for (int i = 0, n = missed_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      missed_.Get(i));
  }

  // repeated .google.protobuf.Any events = 14 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string time = 3 [json_name = "time"];
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // string block_reward = 7 [json_name = "blockReward"];
  if (!this->_internal_block_reward().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_reward());
  }

  // string proposer = 9 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proposer());
  }

  // .api_pb.BlockResponse.Evidence evidence = 13 [json_name = "evidence"];
  if (this->_internal_has_evidence()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evidence_);
  }

  // uint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 transaction_count = 4 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transaction_count());
  }

  // uint64 size = 8 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockResponse::GetClassData() const { return &_class_data_; }

void BlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BlockResponse *>(to)->MergeFrom(
      static_cast<const BlockResponse &>(from));
}


void BlockResponse::MergeFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.BlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  validators_.MergeFrom(from.validators_);
  missed_.MergeFrom(from.missed_);
  events_.MergeFrom(from.events_);
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (!from._internal_time().empty()) {
    _internal_set_time(from._internal_time());
  }
  if (!from._internal_block_reward().empty()) {
    _internal_set_block_reward(from._internal_block_reward());
  }
  if (!from._internal_proposer().empty()) {
    _internal_set_proposer(from._internal_proposer());
  }
  if (from._internal_has_evidence()) {
    _internal_mutable_evidence()->::api_pb::BlockResponse_Evidence::MergeFrom(from._internal_evidence());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_transaction_count() != 0) {
    _internal_set_transaction_count(from._internal_transaction_count());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockResponse::CopyFrom(const BlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.BlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockResponse::IsInitialized() const {
  return true;
}

void BlockResponse::InternalSwap(BlockResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  validators_.InternalSwap(&other->validators_);
  missed_.InternalSwap(&other->missed_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_, GetArenaForAllocation(),
      &other->time_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &block_reward_, GetArenaForAllocation(),
      &other->block_reward_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &proposer_, GetArenaForAllocation(),
      &other->proposer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockResponse, size_)
      + sizeof(BlockResponse::size_)
      - PROTOBUF_FIELD_OFFSET(BlockResponse, evidence_)>(
          reinterpret_cast<char*>(&evidence_),
          reinterpret_cast<char*>(&other->evidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[55]);
}

// ===================================================================

class MaxGasPriceRequest::_Internal {
 public:
};

MaxGasPriceRequest::MaxGasPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MaxGasPriceRequest)
}
MaxGasPriceRequest::MaxGasPriceRequest(const MaxGasPriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.MaxGasPriceRequest)
}

inline void MaxGasPriceRequest::SharedCtor() {
height_ = uint64_t{0u};
}

MaxGasPriceRequest::~MaxGasPriceRequest() {
  // @@protoc_insertion_point(destructor:api_pb.MaxGasPriceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MaxGasPriceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaxGasPriceRequest::ArenaDtor(void* object) {
  MaxGasPriceRequest* _this = reinterpret_cast< MaxGasPriceRequest* >(object);
  (void)_this;
}
void MaxGasPriceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaxGasPriceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaxGasPriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MaxGasPriceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxGasPriceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxGasPriceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MaxGasPriceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MaxGasPriceRequest)
  return target;
}

size_t MaxGasPriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MaxGasPriceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaxGasPriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MaxGasPriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaxGasPriceRequest::GetClassData() const { return &_class_data_; }

void MaxGasPriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MaxGasPriceRequest *>(to)->MergeFrom(
      static_cast<const MaxGasPriceRequest &>(from));
}


void MaxGasPriceRequest::MergeFrom(const MaxGasPriceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MaxGasPriceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaxGasPriceRequest::CopyFrom(const MaxGasPriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MaxGasPriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxGasPriceRequest::IsInitialized() const {
  return true;
}

void MaxGasPriceRequest::InternalSwap(MaxGasPriceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxGasPriceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[56]);
}

// ===================================================================

class MaxGasPriceResponse::_Internal {
 public:
};

MaxGasPriceResponse::MaxGasPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MaxGasPriceResponse)
}
MaxGasPriceResponse::MaxGasPriceResponse(const MaxGasPriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_gas_price_ = from.max_gas_price_;
  // @@protoc_insertion_point(copy_constructor:api_pb.MaxGasPriceResponse)
}

inline void MaxGasPriceResponse::SharedCtor() {
max_gas_price_ = uint64_t{0u};
}

MaxGasPriceResponse::~MaxGasPriceResponse() {
  // @@protoc_insertion_point(destructor:api_pb.MaxGasPriceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MaxGasPriceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaxGasPriceResponse::ArenaDtor(void* object) {
  MaxGasPriceResponse* _this = reinterpret_cast< MaxGasPriceResponse* >(object);
  (void)_this;
}
void MaxGasPriceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MaxGasPriceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MaxGasPriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MaxGasPriceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_gas_price_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxGasPriceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 max_gas_price = 3 [json_name = "maxGasPrice"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaxGasPriceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MaxGasPriceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_gas_price = 3 [json_name = "maxGasPrice"];
  if (this->_internal_max_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_gas_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MaxGasPriceResponse)
  return target;
}

size_t MaxGasPriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MaxGasPriceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_gas_price = 3 [json_name = "maxGasPrice"];
  if (this->_internal_max_gas_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_gas_price());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaxGasPriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MaxGasPriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaxGasPriceResponse::GetClassData() const { return &_class_data_; }

void MaxGasPriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MaxGasPriceResponse *>(to)->MergeFrom(
      static_cast<const MaxGasPriceResponse &>(from));
}


void MaxGasPriceResponse::MergeFrom(const MaxGasPriceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MaxGasPriceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_gas_price() != 0) {
    _internal_set_max_gas_price(from._internal_max_gas_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaxGasPriceResponse::CopyFrom(const MaxGasPriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MaxGasPriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxGasPriceResponse::IsInitialized() const {
  return true;
}

void MaxGasPriceResponse::InternalSwap(MaxGasPriceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(max_gas_price_, other->max_gas_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxGasPriceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[57]);
}

// ===================================================================

class AddressRequest::_Internal {
 public:
};

AddressRequest::AddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressRequest)
}
AddressRequest::AddressRequest(const AddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&delegated_) -
    reinterpret_cast<char*>(&height_)) + sizeof(delegated_));
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressRequest)
}

inline void AddressRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delegated_) -
    reinterpret_cast<char*>(&height_)) + sizeof(delegated_));
}

AddressRequest::~AddressRequest() {
  // @@protoc_insertion_point(destructor:api_pb.AddressRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddressRequest::ArenaDtor(void* object) {
  AddressRequest* _this = reinterpret_cast< AddressRequest* >(object);
  (void)_this;
}
void AddressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delegated_) -
      reinterpret_cast<char*>(&height_)) + sizeof(delegated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delegated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_delegated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_delegated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressRequest)
  return target;
}

size_t AddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_delegated() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressRequest::GetClassData() const { return &_class_data_; }

void AddressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressRequest *>(to)->MergeFrom(
      static_cast<const AddressRequest &>(from));
}


void AddressRequest::MergeFrom(const AddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_delegated() != 0) {
    _internal_set_delegated(from._internal_delegated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressRequest::CopyFrom(const AddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressRequest::IsInitialized() const {
  return true;
}

void AddressRequest::InternalSwap(AddressRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressRequest, delegated_)
      + sizeof(AddressRequest::delegated_)
      - PROTOBUF_FIELD_OFFSET(AddressRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[58]);
}

// ===================================================================

class AddressBalance::_Internal {
 public:
  static const ::api_pb::Coin& coin(const AddressBalance* msg);
};

const ::api_pb::Coin&
AddressBalance::_Internal::coin(const AddressBalance* msg) {
  return *msg->coin_;
}
AddressBalance::AddressBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressBalance)
}
AddressBalance::AddressBalance(const AddressBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bip_value().empty()) {
    bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bip_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressBalance)
}

inline void AddressBalance::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

AddressBalance::~AddressBalance() {
  // @@protoc_insertion_point(destructor:api_pb.AddressBalance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void AddressBalance::ArenaDtor(void* object) {
  AddressBalance* _this = reinterpret_cast< AddressBalance* >(object);
  (void)_this;
}
void AddressBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  bip_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressBalance.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bip_value = 3 [json_name = "bipValue"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressBalance.bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin(this), target, stream);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressBalance.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string bip_value = 3 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bip_value().data(), static_cast<int>(this->_internal_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressBalance.bip_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bip_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressBalance)
  return target;
}

size_t AddressBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string bip_value = 3 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bip_value());
  }

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressBalance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressBalance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressBalance::GetClassData() const { return &_class_data_; }

void AddressBalance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressBalance *>(to)->MergeFrom(
      static_cast<const AddressBalance &>(from));
}


void AddressBalance::MergeFrom(const AddressBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressBalance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_bip_value().empty()) {
    _internal_set_bip_value(from._internal_bip_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressBalance::CopyFrom(const AddressBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBalance::IsInitialized() const {
  return true;
}

void AddressBalance::InternalSwap(AddressBalance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bip_value_, GetArenaForAllocation(),
      &other->bip_value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressBalance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[59]);
}

// ===================================================================

class AddressDelegatedBalance::_Internal {
 public:
  static const ::api_pb::Coin& coin(const AddressDelegatedBalance* msg);
};

const ::api_pb::Coin&
AddressDelegatedBalance::_Internal::coin(const AddressDelegatedBalance* msg) {
  return *msg->coin_;
}
AddressDelegatedBalance::AddressDelegatedBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressDelegatedBalance)
}
AddressDelegatedBalance::AddressDelegatedBalance(const AddressDelegatedBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bip_value().empty()) {
    bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bip_value(), 
      GetArenaForAllocation());
  }
  delegate_bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegate_bip_value().empty()) {
    delegate_bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate_bip_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressDelegatedBalance)
}

inline void AddressDelegatedBalance::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delegate_bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

AddressDelegatedBalance::~AddressDelegatedBalance() {
  // @@protoc_insertion_point(destructor:api_pb.AddressDelegatedBalance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressDelegatedBalance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegate_bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void AddressDelegatedBalance::ArenaDtor(void* object) {
  AddressDelegatedBalance* _this = reinterpret_cast< AddressDelegatedBalance* >(object);
  (void)_this;
}
void AddressDelegatedBalance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressDelegatedBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressDelegatedBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressDelegatedBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  bip_value_.ClearToEmpty();
  delegate_bip_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressDelegatedBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressDelegatedBalance.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bip_value = 3 [json_name = "bipValue"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressDelegatedBalance.bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delegate_bip_value = 4 [json_name = "delegateBipValue"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_delegate_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressDelegatedBalance.delegate_bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressDelegatedBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressDelegatedBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin(this), target, stream);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressDelegatedBalance.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string bip_value = 3 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bip_value().data(), static_cast<int>(this->_internal_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressDelegatedBalance.bip_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bip_value(), target);
  }

  // string delegate_bip_value = 4 [json_name = "delegateBipValue"];
  if (!this->_internal_delegate_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate_bip_value().data(), static_cast<int>(this->_internal_delegate_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressDelegatedBalance.delegate_bip_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_delegate_bip_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressDelegatedBalance)
  return target;
}

size_t AddressDelegatedBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressDelegatedBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string bip_value = 3 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bip_value());
  }

  // string delegate_bip_value = 4 [json_name = "delegateBipValue"];
  if (!this->_internal_delegate_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate_bip_value());
  }

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressDelegatedBalance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressDelegatedBalance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressDelegatedBalance::GetClassData() const { return &_class_data_; }

void AddressDelegatedBalance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressDelegatedBalance *>(to)->MergeFrom(
      static_cast<const AddressDelegatedBalance &>(from));
}


void AddressDelegatedBalance::MergeFrom(const AddressDelegatedBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressDelegatedBalance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_bip_value().empty()) {
    _internal_set_bip_value(from._internal_bip_value());
  }
  if (!from._internal_delegate_bip_value().empty()) {
    _internal_set_delegate_bip_value(from._internal_delegate_bip_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressDelegatedBalance::CopyFrom(const AddressDelegatedBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressDelegatedBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressDelegatedBalance::IsInitialized() const {
  return true;
}

void AddressDelegatedBalance::InternalSwap(AddressDelegatedBalance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bip_value_, GetArenaForAllocation(),
      &other->bip_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delegate_bip_value_, GetArenaForAllocation(),
      &other->delegate_bip_value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressDelegatedBalance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[60]);
}

// ===================================================================

class AddressResponse::_Internal {
 public:
  static const ::api_pb::Multisig& multisig(const AddressResponse* msg);
};

const ::api_pb::Multisig&
AddressResponse::_Internal::multisig(const AddressResponse* msg) {
  return *msg->multisig_;
}
AddressResponse::AddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  balance_(arena),
  delegated_(arena),
  total_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressResponse)
}
AddressResponse::AddressResponse(const AddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      balance_(from.balance_),
      delegated_(from.delegated_),
      total_(from.total_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bip_value().empty()) {
    bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bip_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_multisig()) {
    multisig_ = new ::api_pb::Multisig(*from.multisig_);
  } else {
    multisig_ = nullptr;
  }
  transaction_count_ = from.transaction_count_;
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressResponse)
}

inline void AddressResponse::SharedCtor() {
bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multisig_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_count_) -
    reinterpret_cast<char*>(&multisig_)) + sizeof(transaction_count_));
}

AddressResponse::~AddressResponse() {
  // @@protoc_insertion_point(destructor:api_pb.AddressResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete multisig_;
}

void AddressResponse::ArenaDtor(void* object) {
  AddressResponse* _this = reinterpret_cast< AddressResponse* >(object);
  (void)_this;
}
void AddressResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_.Clear();
  delegated_.Clear();
  total_.Clear();
  bip_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && multisig_ != nullptr) {
    delete multisig_;
  }
  multisig_ = nullptr;
  transaction_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.AddressBalance balance = 1 [json_name = "balance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 transaction_count = 2 [json_name = "transactionCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          transaction_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.AddressDelegatedBalance delegated = 3 [json_name = "delegated"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_total(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string bip_value = 5 [json_name = "bipValue"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressResponse.bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Multisig multisig = 6 [json_name = "multisig"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_multisig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.AddressBalance balance = 1 [json_name = "balance"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_balance(i), target, stream);
  }

  // uint64 transaction_count = 2 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_transaction_count(), target);
  }

  // repeated .api_pb.AddressDelegatedBalance delegated = 3 [json_name = "delegated"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_delegated(i), target, stream);
  }

  // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_total_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_total(i), target, stream);
  }

  // string bip_value = 5 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bip_value().data(), static_cast<int>(this->_internal_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressResponse.bip_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bip_value(), target);
  }

  // .api_pb.Multisig multisig = 6 [json_name = "multisig"];
  if (this->_internal_has_multisig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::multisig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressResponse)
  return target;
}

size_t AddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.AddressBalance balance = 1 [json_name = "balance"];
  total_size += 1UL * this->_internal_balance_size();
  for (const auto& msg : this->balance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.AddressDelegatedBalance delegated = 3 [json_name = "delegated"];
  total_size += 1UL * this->_internal_delegated_size();
  for (const auto& msg : this->delegated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
  total_size += 1UL * this->_internal_total_size();
  for (const auto& msg : this->total_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string bip_value = 5 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bip_value());
  }

  // .api_pb.Multisig multisig = 6 [json_name = "multisig"];
  if (this->_internal_has_multisig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multisig_);
  }

  // uint64 transaction_count = 2 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transaction_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressResponse::GetClassData() const { return &_class_data_; }

void AddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressResponse *>(to)->MergeFrom(
      static_cast<const AddressResponse &>(from));
}


void AddressResponse::MergeFrom(const AddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balance_.MergeFrom(from.balance_);
  delegated_.MergeFrom(from.delegated_);
  total_.MergeFrom(from.total_);
  if (!from._internal_bip_value().empty()) {
    _internal_set_bip_value(from._internal_bip_value());
  }
  if (from._internal_has_multisig()) {
    _internal_mutable_multisig()->::api_pb::Multisig::MergeFrom(from._internal_multisig());
  }
  if (from._internal_transaction_count() != 0) {
    _internal_set_transaction_count(from._internal_transaction_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressResponse::CopyFrom(const AddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressResponse::IsInitialized() const {
  return true;
}

void AddressResponse::InternalSwap(AddressResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  balance_.InternalSwap(&other->balance_);
  delegated_.InternalSwap(&other->delegated_);
  total_.InternalSwap(&other->total_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bip_value_, GetArenaForAllocation(),
      &other->bip_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressResponse, transaction_count_)
      + sizeof(AddressResponse::transaction_count_)
      - PROTOBUF_FIELD_OFFSET(AddressResponse, multisig_)>(
          reinterpret_cast<char*>(&multisig_),
          reinterpret_cast<char*>(&other->multisig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[61]);
}

// ===================================================================

class Multisig::_Internal {
 public:
};

Multisig::Multisig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  weights_(arena),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.Multisig)
}
Multisig::Multisig(const Multisig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      weights_(from.weights_),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  threshold_ = from.threshold_;
  // @@protoc_insertion_point(copy_constructor:api_pb.Multisig)
}

inline void Multisig::SharedCtor() {
threshold_ = uint64_t{0u};
}

Multisig::~Multisig() {
  // @@protoc_insertion_point(destructor:api_pb.Multisig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Multisig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Multisig::ArenaDtor(void* object) {
  Multisig* _this = reinterpret_cast< Multisig* >(object);
  (void)_this;
}
void Multisig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Multisig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Multisig::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.Multisig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  addresses_.Clear();
  threshold_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Multisig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 threshold = 1 [json_name = "threshold"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 weights = 2 [json_name = "weights"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_weights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 3 [json_name = "addresses"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.Multisig.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Multisig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.Multisig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_threshold(), target);
  }

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    int byte_size = _weights_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_weights(), byte_size, target);
    }
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.Multisig.addresses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.Multisig)
  return target;
}

size_t Multisig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.Multisig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 weights = 2 [json_name = "weights"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string addresses = 3 [json_name = "addresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // uint64 threshold = 1 [json_name = "threshold"];
  if (this->_internal_threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_threshold());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Multisig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Multisig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Multisig::GetClassData() const { return &_class_data_; }

void Multisig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Multisig *>(to)->MergeFrom(
      static_cast<const Multisig &>(from));
}


void Multisig::MergeFrom(const Multisig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.Multisig)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  addresses_.MergeFrom(from.addresses_);
  if (from._internal_threshold() != 0) {
    _internal_set_threshold(from._internal_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Multisig::CopyFrom(const Multisig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.Multisig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Multisig::IsInitialized() const {
  return true;
}

void Multisig::InternalSwap(Multisig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  weights_.InternalSwap(&other->weights_);
  addresses_.InternalSwap(&other->addresses_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Multisig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[62]);
}

// ===================================================================

class AddressesRequest::_Internal {
 public:
};

AddressesRequest::AddressesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressesRequest)
}
AddressesRequest::AddressesRequest(const AddressesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&delegated_) -
    reinterpret_cast<char*>(&height_)) + sizeof(delegated_));
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressesRequest)
}

inline void AddressesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delegated_) -
    reinterpret_cast<char*>(&height_)) + sizeof(delegated_));
}

AddressesRequest::~AddressesRequest() {
  // @@protoc_insertion_point(destructor:api_pb.AddressesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddressesRequest::ArenaDtor(void* object) {
  AddressesRequest* _this = reinterpret_cast< AddressesRequest* >(object);
  (void)_this;
}
void AddressesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delegated_) -
      reinterpret_cast<char*>(&height_)) + sizeof(delegated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string addresses = 1 [json_name = "addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressesRequest.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delegated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1 [json_name = "addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressesRequest.addresses");
    target = stream->WriteString(1, s, target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_delegated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_delegated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressesRequest)
  return target;
}

size_t AddressesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1 [json_name = "addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_delegated() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressesRequest::GetClassData() const { return &_class_data_; }

void AddressesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressesRequest *>(to)->MergeFrom(
      static_cast<const AddressesRequest &>(from));
}


void AddressesRequest::MergeFrom(const AddressesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_delegated() != 0) {
    _internal_set_delegated(from._internal_delegated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressesRequest::CopyFrom(const AddressesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressesRequest::IsInitialized() const {
  return true;
}

void AddressesRequest::InternalSwap(AddressesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressesRequest, delegated_)
      + sizeof(AddressesRequest::delegated_)
      - PROTOBUF_FIELD_OFFSET(AddressesRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[63]);
}

// ===================================================================

class AddressesResponse_Result::_Internal {
 public:
  static const ::api_pb::Multisig& multisig(const AddressesResponse_Result* msg);
};

const ::api_pb::Multisig&
AddressesResponse_Result::_Internal::multisig(const AddressesResponse_Result* msg) {
  return *msg->multisig_;
}
AddressesResponse_Result::AddressesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  balance_(arena),
  total_(arena),
  delegated_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressesResponse.Result)
}
AddressesResponse_Result::AddressesResponse_Result(const AddressesResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      balance_(from.balance_),
      total_(from.total_),
      delegated_(from.delegated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bip_value().empty()) {
    bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bip_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_multisig()) {
    multisig_ = new ::api_pb::Multisig(*from.multisig_);
  } else {
    multisig_ = nullptr;
  }
  transaction_count_ = from.transaction_count_;
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressesResponse.Result)
}

inline void AddressesResponse_Result::SharedCtor() {
bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multisig_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_count_) -
    reinterpret_cast<char*>(&multisig_)) + sizeof(transaction_count_));
}

AddressesResponse_Result::~AddressesResponse_Result() {
  // @@protoc_insertion_point(destructor:api_pb.AddressesResponse.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressesResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete multisig_;
}

void AddressesResponse_Result::ArenaDtor(void* object) {
  AddressesResponse_Result* _this = reinterpret_cast< AddressesResponse_Result* >(object);
  (void)_this;
}
void AddressesResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddressesResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressesResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressesResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  balance_.Clear();
  total_.Clear();
  delegated_.Clear();
  bip_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && multisig_ != nullptr) {
    delete multisig_;
  }
  multisig_ = nullptr;
  transaction_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressesResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.AddressBalance balance = 2 [json_name = "balance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 transaction_count = 3 [json_name = "transactionCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          transaction_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_total(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string bip_value = 5 [json_name = "bipValue"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.AddressesResponse.Result.bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.AddressDelegatedBalance delegated = 6 [json_name = "delegated"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegated(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .api_pb.Multisig multisig = 7 [json_name = "multisig"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_multisig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressesResponse_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressesResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.AddressBalance balance = 2 [json_name = "balance"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_balance_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_balance(i), target, stream);
  }

  // uint64 transaction_count = 3 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_transaction_count(), target);
  }

  // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_total_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_total(i), target, stream);
  }

  // string bip_value = 5 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bip_value().data(), static_cast<int>(this->_internal_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.AddressesResponse.Result.bip_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_bip_value(), target);
  }

  // repeated .api_pb.AddressDelegatedBalance delegated = 6 [json_name = "delegated"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_delegated_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_delegated(i), target, stream);
  }

  // .api_pb.Multisig multisig = 7 [json_name = "multisig"];
  if (this->_internal_has_multisig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::multisig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressesResponse.Result)
  return target;
}

size_t AddressesResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressesResponse.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.AddressBalance balance = 2 [json_name = "balance"];
  total_size += 1UL * this->_internal_balance_size();
  for (const auto& msg : this->balance_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
  total_size += 1UL * this->_internal_total_size();
  for (const auto& msg : this->total_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .api_pb.AddressDelegatedBalance delegated = 6 [json_name = "delegated"];
  total_size += 1UL * this->_internal_delegated_size();
  for (const auto& msg : this->delegated_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string bip_value = 5 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bip_value());
  }

  // .api_pb.Multisig multisig = 7 [json_name = "multisig"];
  if (this->_internal_has_multisig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multisig_);
  }

  // uint64 transaction_count = 3 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transaction_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressesResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressesResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressesResponse_Result::GetClassData() const { return &_class_data_; }

void AddressesResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressesResponse_Result *>(to)->MergeFrom(
      static_cast<const AddressesResponse_Result &>(from));
}


void AddressesResponse_Result::MergeFrom(const AddressesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressesResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  balance_.MergeFrom(from.balance_);
  total_.MergeFrom(from.total_);
  delegated_.MergeFrom(from.delegated_);
  if (!from._internal_bip_value().empty()) {
    _internal_set_bip_value(from._internal_bip_value());
  }
  if (from._internal_has_multisig()) {
    _internal_mutable_multisig()->::api_pb::Multisig::MergeFrom(from._internal_multisig());
  }
  if (from._internal_transaction_count() != 0) {
    _internal_set_transaction_count(from._internal_transaction_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressesResponse_Result::CopyFrom(const AddressesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressesResponse_Result::IsInitialized() const {
  return true;
}

void AddressesResponse_Result::InternalSwap(AddressesResponse_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  balance_.InternalSwap(&other->balance_);
  total_.InternalSwap(&other->total_);
  delegated_.InternalSwap(&other->delegated_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bip_value_, GetArenaForAllocation(),
      &other->bip_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddressesResponse_Result, transaction_count_)
      + sizeof(AddressesResponse_Result::transaction_count_)
      - PROTOBUF_FIELD_OFFSET(AddressesResponse_Result, multisig_)>(
          reinterpret_cast<char*>(&multisig_),
          reinterpret_cast<char*>(&other->multisig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressesResponse_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[64]);
}

// ===================================================================

AddressesResponse_AddressesEntry_DoNotUse::AddressesResponse_AddressesEntry_DoNotUse() {}
AddressesResponse_AddressesEntry_DoNotUse::AddressesResponse_AddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AddressesResponse_AddressesEntry_DoNotUse::MergeFrom(const AddressesResponse_AddressesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AddressesResponse_AddressesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[65]);
}

// ===================================================================

class AddressesResponse::_Internal {
 public:
};

AddressesResponse::AddressesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  addresses_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.AddressesResponse)
}
AddressesResponse::AddressesResponse(const AddressesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addresses_.MergeFrom(from.addresses_);
  // @@protoc_insertion_point(copy_constructor:api_pb.AddressesResponse)
}

inline void AddressesResponse::SharedCtor() {
}

AddressesResponse::~AddressesResponse() {
  // @@protoc_insertion_point(destructor:api_pb.AddressesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddressesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddressesResponse::ArenaDtor(void* object) {
  AddressesResponse* _this = reinterpret_cast< AddressesResponse* >(object);
  (void)_this;
  _this->addresses_. ~MapField();
}
inline void AddressesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AddressesResponse::ArenaDtor);
  }
}
void AddressesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddressesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.AddressesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddressesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .api_pb.AddressesResponse.Result> addresses = 3 [json_name = "addresses"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addresses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddressesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.AddressesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .api_pb.AddressesResponse.Result> addresses = 3 [json_name = "addresses"];
  if (!this->_internal_addresses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api_pb.AddressesResponse.AddressesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addresses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addresses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >::const_iterator
          it = this->_internal_addresses().begin();
          it != this->_internal_addresses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AddressesResponse_AddressesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >::const_iterator
          it = this->_internal_addresses().begin();
          it != this->_internal_addresses().end(); ++it) {
        target = AddressesResponse_AddressesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.AddressesResponse)
  return target;
}

size_t AddressesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.AddressesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .api_pb.AddressesResponse.Result> addresses = 3 [json_name = "addresses"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addresses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >::const_iterator
      it = this->_internal_addresses().begin();
      it != this->_internal_addresses().end(); ++it) {
    total_size += AddressesResponse_AddressesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddressesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddressesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddressesResponse::GetClassData() const { return &_class_data_; }

void AddressesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AddressesResponse *>(to)->MergeFrom(
      static_cast<const AddressesResponse &>(from));
}


void AddressesResponse::MergeFrom(const AddressesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.AddressesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddressesResponse::CopyFrom(const AddressesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.AddressesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressesResponse::IsInitialized() const {
  return true;
}

void AddressesResponse::InternalSwap(AddressesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddressesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[66]);
}

// ===================================================================

class CandidateRequest::_Internal {
 public:
};

CandidateRequest::CandidateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CandidateRequest)
}
CandidateRequest::CandidateRequest(const CandidateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_show_stakes_) -
    reinterpret_cast<char*>(&height_)) + sizeof(not_show_stakes_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CandidateRequest)
}

inline void CandidateRequest::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_show_stakes_) -
    reinterpret_cast<char*>(&height_)) + sizeof(not_show_stakes_));
}

CandidateRequest::~CandidateRequest() {
  // @@protoc_insertion_point(destructor:api_pb.CandidateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CandidateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CandidateRequest::ArenaDtor(void* object) {
  CandidateRequest* _this = reinterpret_cast< CandidateRequest* >(object);
  (void)_this;
}
void CandidateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CandidateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_show_stakes_) -
      reinterpret_cast<char*>(&height_)) + sizeof(not_show_stakes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not_show_stakes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CandidateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_not_show_stakes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_not_show_stakes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CandidateRequest)
  return target;
}

size_t CandidateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CandidateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_not_show_stakes() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CandidateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidateRequest::GetClassData() const { return &_class_data_; }

void CandidateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CandidateRequest *>(to)->MergeFrom(
      static_cast<const CandidateRequest &>(from));
}


void CandidateRequest::MergeFrom(const CandidateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CandidateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_not_show_stakes() != 0) {
    _internal_set_not_show_stakes(from._internal_not_show_stakes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidateRequest::CopyFrom(const CandidateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CandidateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateRequest::IsInitialized() const {
  return true;
}

void CandidateRequest::InternalSwap(CandidateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandidateRequest, not_show_stakes_)
      + sizeof(CandidateRequest::not_show_stakes_)
      - PROTOBUF_FIELD_OFFSET(CandidateRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[67]);
}

// ===================================================================

class CandidateResponse_Stake::_Internal {
 public:
  static const ::api_pb::Coin& coin(const CandidateResponse_Stake* msg);
};

const ::api_pb::Coin&
CandidateResponse_Stake::_Internal::coin(const CandidateResponse_Stake* msg) {
  return *msg->coin_;
}
CandidateResponse_Stake::CandidateResponse_Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CandidateResponse.Stake)
}
CandidateResponse_Stake::CandidateResponse_Stake(const CandidateResponse_Stake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner().empty()) {
    owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bip_value().empty()) {
    bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bip_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.CandidateResponse.Stake)
}

inline void CandidateResponse_Stake::SharedCtor() {
owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bip_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

CandidateResponse_Stake::~CandidateResponse_Stake() {
  // @@protoc_insertion_point(destructor:api_pb.CandidateResponse.Stake)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CandidateResponse_Stake::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bip_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void CandidateResponse_Stake::ArenaDtor(void* object) {
  CandidateResponse_Stake* _this = reinterpret_cast< CandidateResponse_Stake* >(object);
  (void)_this;
}
void CandidateResponse_Stake::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateResponse_Stake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidateResponse_Stake::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CandidateResponse.Stake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_.ClearToEmpty();
  value_.ClearToEmpty();
  bip_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidateResponse_Stake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner = 1 [json_name = "owner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.Stake.owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin = 2 [json_name = "coin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3 [json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.Stake.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bip_value = 4 [json_name = "bipValue"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bip_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.Stake.bip_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateResponse_Stake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CandidateResponse.Stake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.Stake.owner");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_owner(), target);
  }

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin(this), target, stream);
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.Stake.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  // string bip_value = 4 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bip_value().data(), static_cast<int>(this->_internal_bip_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.Stake.bip_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bip_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CandidateResponse.Stake)
  return target;
}

size_t CandidateResponse_Stake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CandidateResponse.Stake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [json_name = "owner"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string value = 3 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string bip_value = 4 [json_name = "bipValue"];
  if (!this->_internal_bip_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bip_value());
  }

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidateResponse_Stake::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CandidateResponse_Stake::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidateResponse_Stake::GetClassData() const { return &_class_data_; }

void CandidateResponse_Stake::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CandidateResponse_Stake *>(to)->MergeFrom(
      static_cast<const CandidateResponse_Stake &>(from));
}


void CandidateResponse_Stake::MergeFrom(const CandidateResponse_Stake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CandidateResponse.Stake)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _internal_set_owner(from._internal_owner());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_bip_value().empty()) {
    _internal_set_bip_value(from._internal_bip_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidateResponse_Stake::CopyFrom(const CandidateResponse_Stake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CandidateResponse.Stake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateResponse_Stake::IsInitialized() const {
  return true;
}

void CandidateResponse_Stake::InternalSwap(CandidateResponse_Stake* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_, GetArenaForAllocation(),
      &other->owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bip_value_, GetArenaForAllocation(),
      &other->bip_value_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateResponse_Stake::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[68]);
}

// ===================================================================

class CandidateResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& used_slots(const CandidateResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& uniq_users(const CandidateResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& min_stake(const CandidateResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt64Value&
CandidateResponse::_Internal::used_slots(const CandidateResponse* msg) {
  return *msg->used_slots_;
}
const PROTOBUF_NAMESPACE_ID::UInt64Value&
CandidateResponse::_Internal::uniq_users(const CandidateResponse* msg) {
  return *msg->uniq_users_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
CandidateResponse::_Internal::min_stake(const CandidateResponse* msg) {
  return *msg->min_stake_;
}
void CandidateResponse::clear_used_slots() {
  if (GetArenaForAllocation() == nullptr && used_slots_ != nullptr) {
    delete used_slots_;
  }
  used_slots_ = nullptr;
}
void CandidateResponse::clear_uniq_users() {
  if (GetArenaForAllocation() == nullptr && uniq_users_ != nullptr) {
    delete uniq_users_;
  }
  uniq_users_ = nullptr;
}
void CandidateResponse::clear_min_stake() {
  if (GetArenaForAllocation() == nullptr && min_stake_ != nullptr) {
    delete min_stake_;
  }
  min_stake_ = nullptr;
}
CandidateResponse::CandidateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stakes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CandidateResponse)
}
CandidateResponse::CandidateResponse(const CandidateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stakes_(from.stakes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reward_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reward_address().empty()) {
    reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reward_address(), 
      GetArenaForAllocation());
  }
  total_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_stake().empty()) {
    total_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_total_stake(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_owner_address().empty()) {
    owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owner_address(), 
      GetArenaForAllocation());
  }
  control_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_control_address().empty()) {
    control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_used_slots()) {
    used_slots_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.used_slots_);
  } else {
    used_slots_ = nullptr;
  }
  if (from._internal_has_uniq_users()) {
    uniq_users_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.uniq_users_);
  } else {
    uniq_users_ = nullptr;
  }
  if (from._internal_has_min_stake()) {
    min_stake_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.min_stake_);
  } else {
    min_stake_ = nullptr;
  }
  ::memcpy(&commission_, &from.commission_,
    static_cast<size_t>(reinterpret_cast<char*>(&validator_) -
    reinterpret_cast<char*>(&commission_)) + sizeof(validator_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CandidateResponse)
}

inline void CandidateResponse::SharedCtor() {
reward_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
total_stake_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
control_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&used_slots_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&validator_) -
    reinterpret_cast<char*>(&used_slots_)) + sizeof(validator_));
}

CandidateResponse::~CandidateResponse() {
  // @@protoc_insertion_point(destructor:api_pb.CandidateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CandidateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reward_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_stake_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete used_slots_;
  if (this != internal_default_instance()) delete uniq_users_;
  if (this != internal_default_instance()) delete min_stake_;
}

void CandidateResponse::ArenaDtor(void* object) {
  CandidateResponse* _this = reinterpret_cast< CandidateResponse* >(object);
  (void)_this;
}
void CandidateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CandidateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stakes_.Clear();
  reward_address_.ClearToEmpty();
  total_stake_.ClearToEmpty();
  public_key_.ClearToEmpty();
  owner_address_.ClearToEmpty();
  control_address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && used_slots_ != nullptr) {
    delete used_slots_;
  }
  used_slots_ = nullptr;
  if (GetArenaForAllocation() == nullptr && uniq_users_ != nullptr) {
    delete uniq_users_;
  }
  uniq_users_ = nullptr;
  if (GetArenaForAllocation() == nullptr && min_stake_ != nullptr) {
    delete min_stake_;
  }
  min_stake_ = nullptr;
  ::memset(&commission_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validator_) -
      reinterpret_cast<char*>(&commission_)) + sizeof(validator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reward_address = 1 [json_name = "rewardAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reward_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.reward_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string total_stake = 2 [json_name = "totalStake"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_total_stake();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.total_stake"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 3 [json_name = "publicKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 commission = 4 [json_name = "commission"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stakes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 status = 6 [json_name = "status"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_used_slots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_uniq_users(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_stake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string owner_address = 10 [json_name = "ownerAddress"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_owner_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.owner_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string control_address = 11 [json_name = "controlAddress"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_control_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CandidateResponse.control_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool validator = 12 [json_name = "validator"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          validator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 jailed_until = 13 [json_name = "jailedUntil"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          jailed_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 14 [json_name = "id"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CandidateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reward_address = 1 [json_name = "rewardAddress"];
  if (!this->_internal_reward_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reward_address().data(), static_cast<int>(this->_internal_reward_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.reward_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reward_address(), target);
  }

  // string total_stake = 2 [json_name = "totalStake"];
  if (!this->_internal_total_stake().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_total_stake().data(), static_cast<int>(this->_internal_total_stake().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.total_stake");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_total_stake(), target);
  }

  // string public_key = 3 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  // uint64 commission = 4 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_commission(), target);
  }

  // repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stakes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stakes(i), target, stream);
  }

  // uint64 status = 6 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_status(), target);
  }

  // .google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];
  if (this->_internal_has_used_slots()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::used_slots(this), target, stream);
  }

  // .google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];
  if (this->_internal_has_uniq_users()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::uniq_users(this), target, stream);
  }

  // .google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];
  if (this->_internal_has_min_stake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::min_stake(this), target, stream);
  }

  // string owner_address = 10 [json_name = "ownerAddress"];
  if (!this->_internal_owner_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_address().data(), static_cast<int>(this->_internal_owner_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.owner_address");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_owner_address(), target);
  }

  // string control_address = 11 [json_name = "controlAddress"];
  if (!this->_internal_control_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_control_address().data(), static_cast<int>(this->_internal_control_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CandidateResponse.control_address");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_control_address(), target);
  }

  // bool validator = 12 [json_name = "validator"];
  if (this->_internal_validator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_validator(), target);
  }

  // uint64 jailed_until = 13 [json_name = "jailedUntil"];
  if (this->_internal_jailed_until() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_jailed_until(), target);
  }

  // uint64 id = 14 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CandidateResponse)
  return target;
}

size_t CandidateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CandidateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];
  total_size += 1UL * this->_internal_stakes_size();
  for (const auto& msg : this->stakes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reward_address = 1 [json_name = "rewardAddress"];
  if (!this->_internal_reward_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reward_address());
  }

  // string total_stake = 2 [json_name = "totalStake"];
  if (!this->_internal_total_stake().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_total_stake());
  }

  // string public_key = 3 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string owner_address = 10 [json_name = "ownerAddress"];
  if (!this->_internal_owner_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_address());
  }

  // string control_address = 11 [json_name = "controlAddress"];
  if (!this->_internal_control_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_control_address());
  }

  // .google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];
  if (this->_internal_has_used_slots()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *used_slots_);
  }

  // .google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];
  if (this->_internal_has_uniq_users()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uniq_users_);
  }

  // .google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];
  if (this->_internal_has_min_stake()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_stake_);
  }

  // uint64 commission = 4 [json_name = "commission"];
  if (this->_internal_commission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_commission());
  }

  // uint64 status = 6 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_status());
  }

  // uint64 jailed_until = 13 [json_name = "jailedUntil"];
  if (this->_internal_jailed_until() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_jailed_until());
  }

  // uint64 id = 14 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // bool validator = 12 [json_name = "validator"];
  if (this->_internal_validator() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CandidateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidateResponse::GetClassData() const { return &_class_data_; }

void CandidateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CandidateResponse *>(to)->MergeFrom(
      static_cast<const CandidateResponse &>(from));
}


void CandidateResponse::MergeFrom(const CandidateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CandidateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stakes_.MergeFrom(from.stakes_);
  if (!from._internal_reward_address().empty()) {
    _internal_set_reward_address(from._internal_reward_address());
  }
  if (!from._internal_total_stake().empty()) {
    _internal_set_total_stake(from._internal_total_stake());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_owner_address().empty()) {
    _internal_set_owner_address(from._internal_owner_address());
  }
  if (!from._internal_control_address().empty()) {
    _internal_set_control_address(from._internal_control_address());
  }
  if (from._internal_has_used_slots()) {
    _internal_mutable_used_slots()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_used_slots());
  }
  if (from._internal_has_uniq_users()) {
    _internal_mutable_uniq_users()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_uniq_users());
  }
  if (from._internal_has_min_stake()) {
    _internal_mutable_min_stake()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_min_stake());
  }
  if (from._internal_commission() != 0) {
    _internal_set_commission(from._internal_commission());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_jailed_until() != 0) {
    _internal_set_jailed_until(from._internal_jailed_until());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_validator() != 0) {
    _internal_set_validator(from._internal_validator());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidateResponse::CopyFrom(const CandidateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CandidateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateResponse::IsInitialized() const {
  return true;
}

void CandidateResponse::InternalSwap(CandidateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stakes_.InternalSwap(&other->stakes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reward_address_, GetArenaForAllocation(),
      &other->reward_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &total_stake_, GetArenaForAllocation(),
      &other->total_stake_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &owner_address_, GetArenaForAllocation(),
      &other->owner_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_address_, GetArenaForAllocation(),
      &other->control_address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandidateResponse, validator_)
      + sizeof(CandidateResponse::validator_)
      - PROTOBUF_FIELD_OFFSET(CandidateResponse, used_slots_)>(
          reinterpret_cast<char*>(&used_slots_),
          reinterpret_cast<char*>(&other->used_slots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[69]);
}

// ===================================================================

class CandidatesRequest::_Internal {
 public:
};

CandidatesRequest::CandidatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CandidatesRequest)
}
CandidatesRequest::CandidatesRequest(const CandidatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_show_stakes_) -
    reinterpret_cast<char*>(&height_)) + sizeof(not_show_stakes_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CandidatesRequest)
}

inline void CandidatesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_show_stakes_) -
    reinterpret_cast<char*>(&height_)) + sizeof(not_show_stakes_));
}

CandidatesRequest::~CandidatesRequest() {
  // @@protoc_insertion_point(destructor:api_pb.CandidatesRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CandidatesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CandidatesRequest::ArenaDtor(void* object) {
  CandidatesRequest* _this = reinterpret_cast< CandidatesRequest* >(object);
  (void)_this;
}
void CandidatesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidatesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CandidatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_show_stakes_) -
      reinterpret_cast<char*>(&height_)) + sizeof(not_show_stakes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidatesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_stakes = 2 [json_name = "includeStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_stakes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.CandidatesRequest.CandidateStatus status = 3 [json_name = "status"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::api_pb::CandidatesRequest_CandidateStatus>(val));
        } else goto handle_unusual;
        continue;
      // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not_show_stakes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidatesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CandidatesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // bool include_stakes = 2 [json_name = "includeStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_include_stakes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_stakes(), target);
  }

  // .api_pb.CandidatesRequest.CandidateStatus status = 3 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_not_show_stakes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_not_show_stakes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CandidatesRequest)
  return target;
}

size_t CandidatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CandidatesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // .api_pb.CandidatesRequest.CandidateStatus status = 3 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // bool include_stakes = 2 [json_name = "includeStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_include_stakes() != 0) {
    total_size += 1 + 1;
  }

  // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_not_show_stakes() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CandidatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidatesRequest::GetClassData() const { return &_class_data_; }

void CandidatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CandidatesRequest *>(to)->MergeFrom(
      static_cast<const CandidatesRequest &>(from));
}


void CandidatesRequest::MergeFrom(const CandidatesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CandidatesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_include_stakes() != 0) {
    _internal_set_include_stakes(from._internal_include_stakes());
  }
  if (from._internal_not_show_stakes() != 0) {
    _internal_set_not_show_stakes(from._internal_not_show_stakes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidatesRequest::CopyFrom(const CandidatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CandidatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidatesRequest::IsInitialized() const {
  return true;
}

void CandidatesRequest::InternalSwap(CandidatesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CandidatesRequest, not_show_stakes_)
      + sizeof(CandidatesRequest::not_show_stakes_)
      - PROTOBUF_FIELD_OFFSET(CandidatesRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidatesRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[70]);
}

// ===================================================================

class CandidatesResponse::_Internal {
 public:
};

CandidatesResponse::CandidatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  candidates_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CandidatesResponse)
}
CandidatesResponse::CandidatesResponse(const CandidatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      candidates_(from.candidates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.CandidatesResponse)
}

inline void CandidatesResponse::SharedCtor() {
}

CandidatesResponse::~CandidatesResponse() {
  // @@protoc_insertion_point(destructor:api_pb.CandidatesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CandidatesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CandidatesResponse::ArenaDtor(void* object) {
  CandidatesResponse* _this = reinterpret_cast< CandidatesResponse* >(object);
  (void)_this;
}
void CandidatesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CandidatesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CandidatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CandidatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidates_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandidatesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.CandidateResponse candidates = 3 [json_name = "candidates"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidatesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CandidatesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.CandidateResponse candidates = 3 [json_name = "candidates"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candidates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_candidates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CandidatesResponse)
  return target;
}

size_t CandidatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CandidatesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.CandidateResponse candidates = 3 [json_name = "candidates"];
  total_size += 1UL * this->_internal_candidates_size();
  for (const auto& msg : this->candidates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandidatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CandidatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandidatesResponse::GetClassData() const { return &_class_data_; }

void CandidatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CandidatesResponse *>(to)->MergeFrom(
      static_cast<const CandidatesResponse &>(from));
}


void CandidatesResponse::MergeFrom(const CandidatesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CandidatesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidates_.MergeFrom(from.candidates_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandidatesResponse::CopyFrom(const CandidatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CandidatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidatesResponse::IsInitialized() const {
  return true;
}

void CandidatesResponse::InternalSwap(CandidatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  candidates_.InternalSwap(&other->candidates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidatesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[71]);
}

// ===================================================================

class CoinIdRequest::_Internal {
 public:
};

CoinIdRequest::CoinIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CoinIdRequest)
}
CoinIdRequest::CoinIdRequest(const CoinIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&height_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CoinIdRequest)
}

inline void CoinIdRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&height_)) + sizeof(id_));
}

CoinIdRequest::~CoinIdRequest() {
  // @@protoc_insertion_point(destructor:api_pb.CoinIdRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CoinIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoinIdRequest::ArenaDtor(void* object) {
  CoinIdRequest* _this = reinterpret_cast< CoinIdRequest* >(object);
  (void)_this;
}
void CoinIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoinIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoinIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CoinIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&height_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoinIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 2 [json_name = "id"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoinIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CoinIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // uint64 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CoinIdRequest)
  return target;
}

size_t CoinIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CoinIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoinIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoinIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoinIdRequest::GetClassData() const { return &_class_data_; }

void CoinIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CoinIdRequest *>(to)->MergeFrom(
      static_cast<const CoinIdRequest &>(from));
}


void CoinIdRequest::MergeFrom(const CoinIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CoinIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoinIdRequest::CopyFrom(const CoinIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CoinIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinIdRequest::IsInitialized() const {
  return true;
}

void CoinIdRequest::InternalSwap(CoinIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoinIdRequest, id_)
      + sizeof(CoinIdRequest::id_)
      - PROTOBUF_FIELD_OFFSET(CoinIdRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoinIdRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[72]);
}

// ===================================================================

class CoinInfoRequest::_Internal {
 public:
};

CoinInfoRequest::CoinInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CoinInfoRequest)
}
CoinInfoRequest::CoinInfoRequest(const CoinInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.CoinInfoRequest)
}

inline void CoinInfoRequest::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

CoinInfoRequest::~CoinInfoRequest() {
  // @@protoc_insertion_point(destructor:api_pb.CoinInfoRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CoinInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CoinInfoRequest::ArenaDtor(void* object) {
  CoinInfoRequest* _this = reinterpret_cast< CoinInfoRequest* >(object);
  (void)_this;
}
void CoinInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoinInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoinInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CoinInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbol_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoinInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CoinInfoRequest.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoinInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CoinInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CoinInfoRequest.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CoinInfoRequest)
  return target;
}

size_t CoinInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CoinInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoinInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoinInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoinInfoRequest::GetClassData() const { return &_class_data_; }

void CoinInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CoinInfoRequest *>(to)->MergeFrom(
      static_cast<const CoinInfoRequest &>(from));
}


void CoinInfoRequest::MergeFrom(const CoinInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CoinInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoinInfoRequest::CopyFrom(const CoinInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CoinInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinInfoRequest::IsInitialized() const {
  return true;
}

void CoinInfoRequest::InternalSwap(CoinInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoinInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[73]);
}

// ===================================================================

class CoinInfoResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& owner_address(const CoinInfoResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
CoinInfoResponse::_Internal::owner_address(const CoinInfoResponse* msg) {
  return *msg->owner_address_;
}
void CoinInfoResponse::clear_owner_address() {
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
}
CoinInfoResponse::CoinInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.CoinInfoResponse)
}
CoinInfoResponse::CoinInfoResponse(const CoinInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_symbol().empty()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArenaForAllocation());
  }
  volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_volume().empty()) {
    volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume(), 
      GetArenaForAllocation());
  }
  reserve_balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reserve_balance().empty()) {
    reserve_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reserve_balance(), 
      GetArenaForAllocation());
  }
  max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_supply().empty()) {
    max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_supply(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_owner_address()) {
    owner_address_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.owner_address_);
  } else {
    owner_address_ = nullptr;
  }
  ::memcpy(&crr_, &from.crr_,
    static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&crr_)) + sizeof(burnable_));
  // @@protoc_insertion_point(copy_constructor:api_pb.CoinInfoResponse)
}

inline void CoinInfoResponse::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reserve_balance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_supply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&burnable_) -
    reinterpret_cast<char*>(&owner_address_)) + sizeof(burnable_));
}

CoinInfoResponse::~CoinInfoResponse() {
  // @@protoc_insertion_point(destructor:api_pb.CoinInfoResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CoinInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reserve_balance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_supply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_address_;
}

void CoinInfoResponse::ArenaDtor(void* object) {
  CoinInfoResponse* _this = reinterpret_cast< CoinInfoResponse* >(object);
  (void)_this;
}
void CoinInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoinInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoinInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.CoinInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  symbol_.ClearToEmpty();
  volume_.ClearToEmpty();
  reserve_balance_.ClearToEmpty();
  max_supply_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && owner_address_ != nullptr) {
    delete owner_address_;
  }
  owner_address_ = nullptr;
  ::memset(&crr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burnable_) -
      reinterpret_cast<char*>(&crr_)) + sizeof(burnable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoinInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CoinInfoResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CoinInfoResponse.symbol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string volume = 3 [json_name = "volume"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_volume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CoinInfoResponse.volume"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 crr = 4 [json_name = "crr"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          crr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reserve_balance = 5 [json_name = "reserveBalance"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_reserve_balance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CoinInfoResponse.reserve_balance"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 id = 6 [json_name = "id"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue owner_address = 7 [json_name = "ownerAddress"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_supply = 8 [json_name = "maxSupply"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_max_supply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.CoinInfoResponse.max_supply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool mintable = 9 [json_name = "mintable"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          mintable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool burnable = 10 [json_name = "burnable"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          burnable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoinInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.CoinInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CoinInfoResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CoinInfoResponse.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // string volume = 3 [json_name = "volume"];
  if (!this->_internal_volume().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume().data(), static_cast<int>(this->_internal_volume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CoinInfoResponse.volume");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_volume(), target);
  }

  // uint64 crr = 4 [json_name = "crr"];
  if (this->_internal_crr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_crr(), target);
  }

  // string reserve_balance = 5 [json_name = "reserveBalance"];
  if (!this->_internal_reserve_balance().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reserve_balance().data(), static_cast<int>(this->_internal_reserve_balance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CoinInfoResponse.reserve_balance");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_reserve_balance(), target);
  }

  // uint64 id = 6 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_id(), target);
  }

  // .google.protobuf.StringValue owner_address = 7 [json_name = "ownerAddress"];
  if (this->_internal_has_owner_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::owner_address(this), target, stream);
  }

  // string max_supply = 8 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_supply().data(), static_cast<int>(this->_internal_max_supply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.CoinInfoResponse.max_supply");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_max_supply(), target);
  }

  // bool mintable = 9 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_mintable(), target);
  }

  // bool burnable = 10 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_burnable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.CoinInfoResponse)
  return target;
}

size_t CoinInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.CoinInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  // string volume = 3 [json_name = "volume"];
  if (!this->_internal_volume().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume());
  }

  // string reserve_balance = 5 [json_name = "reserveBalance"];
  if (!this->_internal_reserve_balance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reserve_balance());
  }

  // string max_supply = 8 [json_name = "maxSupply"];
  if (!this->_internal_max_supply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_supply());
  }

  // .google.protobuf.StringValue owner_address = 7 [json_name = "ownerAddress"];
  if (this->_internal_has_owner_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_address_);
  }

  // uint64 crr = 4 [json_name = "crr"];
  if (this->_internal_crr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_crr());
  }

  // uint64 id = 6 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // bool mintable = 9 [json_name = "mintable"];
  if (this->_internal_mintable() != 0) {
    total_size += 1 + 1;
  }

  // bool burnable = 10 [json_name = "burnable"];
  if (this->_internal_burnable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoinInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CoinInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoinInfoResponse::GetClassData() const { return &_class_data_; }

void CoinInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CoinInfoResponse *>(to)->MergeFrom(
      static_cast<const CoinInfoResponse &>(from));
}


void CoinInfoResponse::MergeFrom(const CoinInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.CoinInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_volume().empty()) {
    _internal_set_volume(from._internal_volume());
  }
  if (!from._internal_reserve_balance().empty()) {
    _internal_set_reserve_balance(from._internal_reserve_balance());
  }
  if (!from._internal_max_supply().empty()) {
    _internal_set_max_supply(from._internal_max_supply());
  }
  if (from._internal_has_owner_address()) {
    _internal_mutable_owner_address()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_owner_address());
  }
  if (from._internal_crr() != 0) {
    _internal_set_crr(from._internal_crr());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_mintable() != 0) {
    _internal_set_mintable(from._internal_mintable());
  }
  if (from._internal_burnable() != 0) {
    _internal_set_burnable(from._internal_burnable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoinInfoResponse::CopyFrom(const CoinInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.CoinInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinInfoResponse::IsInitialized() const {
  return true;
}

void CoinInfoResponse::InternalSwap(CoinInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbol_, GetArenaForAllocation(),
      &other->symbol_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &volume_, GetArenaForAllocation(),
      &other->volume_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reserve_balance_, GetArenaForAllocation(),
      &other->reserve_balance_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_supply_, GetArenaForAllocation(),
      &other->max_supply_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoinInfoResponse, burnable_)
      + sizeof(CoinInfoResponse::burnable_)
      - PROTOBUF_FIELD_OFFSET(CoinInfoResponse, owner_address_)>(
          reinterpret_cast<char*>(&owner_address_),
          reinterpret_cast<char*>(&other->owner_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoinInfoResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[74]);
}

// ===================================================================

class SendTransactionResponse::_Internal {
 public:
};

SendTransactionResponse::SendTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SendTransactionResponse)
}
SendTransactionResponse::SendTransactionResponse(const SendTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:api_pb.SendTransactionResponse)
}

inline void SendTransactionResponse::SharedCtor() {
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
code_ = uint64_t{0u};
}

SendTransactionResponse::~SendTransactionResponse() {
  // @@protoc_insertion_point(destructor:api_pb.SendTransactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendTransactionResponse::ArenaDtor(void* object) {
  SendTransactionResponse* _this = reinterpret_cast< SendTransactionResponse* >(object);
  (void)_this;
}
void SendTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SendTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.ClearToEmpty();
  hash_.ClearToEmpty();
  code_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log = 3 [json_name = "log"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SendTransactionResponse.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SendTransactionResponse.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SendTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_code(), target);
  }

  // string log = 3 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SendTransactionResponse.log");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log(), target);
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SendTransactionResponse.hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SendTransactionResponse)
  return target;
}

size_t SendTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SendTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string log = 3 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // uint64 code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTransactionResponse::GetClassData() const { return &_class_data_; }

void SendTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendTransactionResponse *>(to)->MergeFrom(
      static_cast<const SendTransactionResponse &>(from));
}


void SendTransactionResponse::MergeFrom(const SendTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SendTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTransactionResponse::CopyFrom(const SendTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SendTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTransactionResponse::IsInitialized() const {
  return true;
}

void SendTransactionResponse::InternalSwap(SendTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, GetArenaForAllocation(),
      &other->log_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTransactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[75]);
}

// ===================================================================

class SendTransactionRequest::_Internal {
 public:
};

SendTransactionRequest::SendTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SendTransactionRequest)
}
SendTransactionRequest::SendTransactionRequest(const SendTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SendTransactionRequest)
}

inline void SendTransactionRequest::SharedCtor() {
tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendTransactionRequest::~SendTransactionRequest() {
  // @@protoc_insertion_point(destructor:api_pb.SendTransactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendTransactionRequest::ArenaDtor(void* object) {
  SendTransactionRequest* _this = reinterpret_cast< SendTransactionRequest* >(object);
  (void)_this;
}
void SendTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SendTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SendTransactionRequest.tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendTransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SendTransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx = 1 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx().data(), static_cast<int>(this->_internal_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SendTransactionRequest.tx");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SendTransactionRequest)
  return target;
}

size_t SendTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SendTransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx = 1 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTransactionRequest::GetClassData() const { return &_class_data_; }

void SendTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SendTransactionRequest *>(to)->MergeFrom(
      static_cast<const SendTransactionRequest &>(from));
}


void SendTransactionRequest::MergeFrom(const SendTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SendTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _internal_set_tx(from._internal_tx());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTransactionRequest::CopyFrom(const SendTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SendTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTransactionRequest::IsInitialized() const {
  return true;
}

void SendTransactionRequest::InternalSwap(SendTransactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_, GetArenaForAllocation(),
      &other->tx_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTransactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[76]);
}

// ===================================================================

TransactionResponse_TagsEntry_DoNotUse::TransactionResponse_TagsEntry_DoNotUse() {}
TransactionResponse_TagsEntry_DoNotUse::TransactionResponse_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TransactionResponse_TagsEntry_DoNotUse::MergeFrom(const TransactionResponse_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TransactionResponse_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[77]);
}

// ===================================================================

class TransactionResponse::_Internal {
 public:
  static const ::api_pb::Coin& gas_coin(const TransactionResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& data(const TransactionResponse* msg);
};

const ::api_pb::Coin&
TransactionResponse::_Internal::gas_coin(const TransactionResponse* msg) {
  return *msg->gas_coin_;
}
const PROTOBUF_NAMESPACE_ID::Any&
TransactionResponse::_Internal::data(const TransactionResponse* msg) {
  return *msg->data_;
}
void TransactionResponse::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
TransactionResponse::TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.TransactionResponse)
}
TransactionResponse::TransactionResponse(const TransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  raw_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_tx().empty()) {
    raw_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_raw_tx(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_log(), 
      GetArenaForAllocation());
  }
  service_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_data().empty()) {
    service_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_service_data(), 
      GetArenaForAllocation());
  }
  type_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_hex().empty()) {
    type_hex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_hex(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_gas_coin()) {
    gas_coin_ = new ::api_pb::Coin(*from.gas_coin_);
  } else {
    gas_coin_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Any(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&height_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:api_pb.TransactionResponse)
}

inline void TransactionResponse::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
raw_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
service_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&gas_coin_)) + sizeof(code_));
}

TransactionResponse::~TransactionResponse() {
  // @@protoc_insertion_point(destructor:api_pb.TransactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gas_coin_;
  if (this != internal_default_instance()) delete data_;
}

void TransactionResponse::ArenaDtor(void* object) {
  TransactionResponse* _this = reinterpret_cast< TransactionResponse* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void TransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TransactionResponse::ArenaDtor);
  }
}
void TransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  hash_.ClearToEmpty();
  raw_tx_.ClearToEmpty();
  from_.ClearToEmpty();
  payload_.ClearToEmpty();
  log_.ClearToEmpty();
  service_data_.ClearToEmpty();
  type_hex_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && gas_coin_ != nullptr) {
    delete gas_coin_;
  }
  gas_coin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&height_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionResponse.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_tx = 2 [json_name = "rawTx"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_raw_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionResponse.raw_tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index = 4 [json_name = "index"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string from = 5 [json_name = "from"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionResponse.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 6 [json_name = "nonce"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas = 7 [json_name = "gas"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_price = 8 [json_name = "gasPrice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin gas_coin = 9 [json_name = "gasCoin"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_gas_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 type = 10 [json_name = "type"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any data = 11 [json_name = "data"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 12 [json_name = "payload"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 13 [json_name = "tags"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 code = 14 [json_name = "code"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string log = 15 [json_name = "log"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionResponse.log"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes service_data = 16 [json_name = "serviceData"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_service_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_hex = 17 [json_name = "typeHex"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_type_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionResponse.type_hex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.TransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionResponse.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // string raw_tx = 2 [json_name = "rawTx"];
  if (!this->_internal_raw_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_tx().data(), static_cast<int>(this->_internal_raw_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionResponse.raw_tx");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_raw_tx(), target);
  }

  // uint64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // uint64 index = 4 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_index(), target);
  }

  // string from = 5 [json_name = "from"];
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionResponse.from");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_from(), target);
  }

  // uint64 nonce = 6 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_nonce(), target);
  }

  // uint64 gas = 7 [json_name = "gas"];
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_gas(), target);
  }

  // uint64 gas_price = 8 [json_name = "gasPrice"];
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gas_price(), target);
  }

  // .api_pb.Coin gas_coin = 9 [json_name = "gasCoin"];
  if (this->_internal_has_gas_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::gas_coin(this), target, stream);
  }

  // uint64 type = 10 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_type(), target);
  }

  // .google.protobuf.Any data = 11 [json_name = "data"];
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::data(this), target, stream);
  }

  // bytes payload = 12 [json_name = "payload"];
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_payload(), target);
  }

  // map<string, string> tags = 13 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api_pb.TransactionResponse.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "api_pb.TransactionResponse.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TransactionResponse_TagsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = TransactionResponse_TagsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 code = 14 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_code(), target);
  }

  // string log = 15 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log().data(), static_cast<int>(this->_internal_log().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionResponse.log");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_log(), target);
  }

  // bytes service_data = 16 [json_name = "serviceData"];
  if (!this->_internal_service_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_service_data(), target);
  }

  // string type_hex = 17 [json_name = "typeHex"];
  if (!this->_internal_type_hex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_hex().data(), static_cast<int>(this->_internal_type_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionResponse.type_hex");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_type_hex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.TransactionResponse)
  return target;
}

size_t TransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.TransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 13 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += TransactionResponse_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string raw_tx = 2 [json_name = "rawTx"];
  if (!this->_internal_raw_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_tx());
  }

  // string from = 5 [json_name = "from"];
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // bytes payload = 12 [json_name = "payload"];
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // string log = 15 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log());
  }

  // bytes service_data = 16 [json_name = "serviceData"];
  if (!this->_internal_service_data().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_service_data());
  }

  // string type_hex = 17 [json_name = "typeHex"];
  if (!this->_internal_type_hex().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_hex());
  }

  // .api_pb.Coin gas_coin = 9 [json_name = "gasCoin"];
  if (this->_internal_has_gas_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gas_coin_);
  }

  // .google.protobuf.Any data = 11 [json_name = "data"];
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 index = 4 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index());
  }

  // uint64 nonce = 6 [json_name = "nonce"];
  if (this->_internal_nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint64 gas = 7 [json_name = "gas"];
  if (this->_internal_gas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas());
  }

  // uint64 gas_price = 8 [json_name = "gasPrice"];
  if (this->_internal_gas_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_price());
  }

  // uint64 type = 10 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_type());
  }

  // uint64 code = 14 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionResponse::GetClassData() const { return &_class_data_; }

void TransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionResponse *>(to)->MergeFrom(
      static_cast<const TransactionResponse &>(from));
}


void TransactionResponse::MergeFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.TransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (!from._internal_raw_tx().empty()) {
    _internal_set_raw_tx(from._internal_raw_tx());
  }
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  if (!from._internal_service_data().empty()) {
    _internal_set_service_data(from._internal_service_data());
  }
  if (!from._internal_type_hex().empty()) {
    _internal_set_type_hex(from._internal_type_hex());
  }
  if (from._internal_has_gas_coin()) {
    _internal_mutable_gas_coin()->::api_pb::Coin::MergeFrom(from._internal_gas_coin());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_data());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from._internal_gas() != 0) {
    _internal_set_gas(from._internal_gas());
  }
  if (from._internal_gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionResponse::CopyFrom(const TransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.TransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionResponse::IsInitialized() const {
  return true;
}

void TransactionResponse::InternalSwap(TransactionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &raw_tx_, GetArenaForAllocation(),
      &other->raw_tx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, GetArenaForAllocation(),
      &other->from_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, GetArenaForAllocation(),
      &other->payload_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &log_, GetArenaForAllocation(),
      &other->log_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &service_data_, GetArenaForAllocation(),
      &other->service_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_hex_, GetArenaForAllocation(),
      &other->type_hex_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionResponse, code_)
      + sizeof(TransactionResponse::code_)
      - PROTOBUF_FIELD_OFFSET(TransactionResponse, gas_coin_)>(
          reinterpret_cast<char*>(&gas_coin_),
          reinterpret_cast<char*>(&other->gas_coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[78]);
}

// ===================================================================

class TransactionRequest::_Internal {
 public:
};

TransactionRequest::TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.TransactionRequest)
}
TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.TransactionRequest)
}

inline void TransactionRequest::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionRequest::~TransactionRequest() {
  // @@protoc_insertion_point(destructor:api_pb.TransactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionRequest::ArenaDtor(void* object) {
  TransactionRequest* _this = reinterpret_cast< TransactionRequest* >(object);
  (void)_this;
}
void TransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.TransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionRequest.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.TransactionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionRequest.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.TransactionRequest)
  return target;
}

size_t TransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.TransactionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionRequest::GetClassData() const { return &_class_data_; }

void TransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionRequest *>(to)->MergeFrom(
      static_cast<const TransactionRequest &>(from));
}


void TransactionRequest::MergeFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.TransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.TransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {
  return true;
}

void TransactionRequest::InternalSwap(TransactionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[79]);
}

// ===================================================================

class TransactionsResponse::_Internal {
 public:
};

TransactionsResponse::TransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.TransactionsResponse)
}
TransactionsResponse::TransactionsResponse(const TransactionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.TransactionsResponse)
}

inline void TransactionsResponse::SharedCtor() {
}

TransactionsResponse::~TransactionsResponse() {
  // @@protoc_insertion_point(destructor:api_pb.TransactionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionsResponse::ArenaDtor(void* object) {
  TransactionsResponse* _this = reinterpret_cast< TransactionsResponse* >(object);
  (void)_this;
}
void TransactionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.TransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.TransactionResponse transactions = 3 [json_name = "transactions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.TransactionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.TransactionResponse transactions = 3 [json_name = "transactions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.TransactionsResponse)
  return target;
}

size_t TransactionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.TransactionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.TransactionResponse transactions = 3 [json_name = "transactions"];
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionsResponse::GetClassData() const { return &_class_data_; }

void TransactionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionsResponse *>(to)->MergeFrom(
      static_cast<const TransactionsResponse &>(from));
}


void TransactionsResponse::MergeFrom(const TransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.TransactionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionsResponse::CopyFrom(const TransactionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.TransactionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsResponse::IsInitialized() const {
  return true;
}

void TransactionsResponse::InternalSwap(TransactionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[80]);
}

// ===================================================================

class TransactionsRequest::_Internal {
 public:
};

TransactionsRequest::TransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.TransactionsRequest)
}
TransactionsRequest::TransactionsRequest(const TransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  // @@protoc_insertion_point(copy_constructor:api_pb.TransactionsRequest)
}

inline void TransactionsRequest::SharedCtor() {
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&per_page_) -
    reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
}

TransactionsRequest::~TransactionsRequest() {
  // @@protoc_insertion_point(destructor:api_pb.TransactionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionsRequest::ArenaDtor(void* object) {
  TransactionsRequest* _this = reinterpret_cast< TransactionsRequest* >(object);
  (void)_this;
}
void TransactionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.TransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmpty();
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_page_) -
      reinterpret_cast<char*>(&page_)) + sizeof(per_page_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.TransactionsRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 2 [json_name = "page", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 per_page = 3 [json_name = "perPage", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          per_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.TransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.TransactionsRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // int32 page = 2 [json_name = "page", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page(), target);
  }

  // int32 per_page = 3 [json_name = "perPage", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_per_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_per_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.TransactionsRequest)
  return target;
}

size_t TransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.TransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // int32 page = 2 [json_name = "page", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 per_page = 3 [json_name = "perPage", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_per_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_per_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionsRequest::GetClassData() const { return &_class_data_; }

void TransactionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TransactionsRequest *>(to)->MergeFrom(
      static_cast<const TransactionsRequest &>(from));
}


void TransactionsRequest::MergeFrom(const TransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.TransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_per_page() != 0) {
    _internal_set_per_page(from._internal_per_page());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionsRequest::CopyFrom(const TransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.TransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionsRequest::IsInitialized() const {
  return true;
}

void TransactionsRequest::InternalSwap(TransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, GetArenaForAllocation(),
      &other->query_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionsRequest, per_page_)
      + sizeof(TransactionsRequest::per_page_)
      - PROTOBUF_FIELD_OFFSET(TransactionsRequest, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[81]);
}

// ===================================================================

class EstimateCoinBuyRequest::_Internal {
 public:
};

EstimateCoinBuyRequest::EstimateCoinBuyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  route_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateCoinBuyRequest)
}
EstimateCoinBuyRequest::EstimateCoinBuyRequest(const EstimateCoinBuyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_(from.route_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_buy().empty()) {
    value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_buy(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(swap_from_));
  clear_has_buy();
  switch (from.buy_case()) {
    case kCoinIdToBuy: {
      _internal_set_coin_id_to_buy(from._internal_coin_id_to_buy());
      break;
    }
    case kCoinToBuy: {
      _internal_set_coin_to_buy(from._internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  clear_has_sell();
  switch (from.sell_case()) {
    case kCoinIdToSell: {
      _internal_set_coin_id_to_sell(from._internal_coin_id_to_sell());
      break;
    }
    case kCoinToSell: {
      _internal_set_coin_to_sell(from._internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  clear_has_commission();
  switch (from.commission_case()) {
    case kCoinIdCommission: {
      _internal_set_coin_id_commission(from._internal_coin_id_commission());
      break;
    }
    case kCoinCommission: {
      _internal_set_coin_commission(from._internal_coin_commission());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateCoinBuyRequest)
}

inline void EstimateCoinBuyRequest::SharedCtor() {
value_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&swap_from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(swap_from_));
clear_has_buy();
clear_has_sell();
clear_has_commission();
}

EstimateCoinBuyRequest::~EstimateCoinBuyRequest() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateCoinBuyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateCoinBuyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_buy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_buy()) {
    clear_buy();
  }
  if (has_sell()) {
    clear_sell();
  }
  if (has_commission()) {
    clear_commission();
  }
}

void EstimateCoinBuyRequest::ArenaDtor(void* object) {
  EstimateCoinBuyRequest* _this = reinterpret_cast< EstimateCoinBuyRequest* >(object);
  (void)_this;
}
void EstimateCoinBuyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateCoinBuyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateCoinBuyRequest::clear_buy() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinBuyRequest)
  switch (buy_case()) {
    case kCoinIdToBuy: {
      // No need to clear
      break;
    }
    case kCoinToBuy: {
      buy_.coin_to_buy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BUY_NOT_SET;
}

void EstimateCoinBuyRequest::clear_sell() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinBuyRequest)
  switch (sell_case()) {
    case kCoinIdToSell: {
      // No need to clear
      break;
    }
    case kCoinToSell: {
      sell_.coin_to_sell_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SELL_NOT_SET;
}

void EstimateCoinBuyRequest::clear_commission() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinBuyRequest)
  switch (commission_case()) {
    case kCoinIdCommission: {
      // No need to clear
      break;
    }
    case kCoinCommission: {
      commission_.coin_commission_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = COMMISSION_NOT_SET;
}


void EstimateCoinBuyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateCoinBuyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_.Clear();
  value_to_buy_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_from_) -
      reinterpret_cast<char*>(&height_)) + sizeof(swap_from_));
  clear_buy();
  clear_sell();
  clear_commission();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateCoinBuyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_buy = 3 [json_name = "valueToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinBuyRequest.value_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_to_buy = 5 [json_name = "coinToBuy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_coin_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinBuyRequest.coin_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_to_sell = 6 [json_name = "coinToSell"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_coin_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinBuyRequest.coin_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swap_from(static_cast<::api_pb::SwapFrom>(val));
        } else goto handle_unusual;
        continue;
      // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_commission = 10 [json_name = "coinCommission"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_coin_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinBuyRequest.coin_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 route = 11 [json_name = "route"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_route(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_route(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateCoinBuyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateCoinBuyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin_id_to_buy(), target);
  }

  // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coin_id_to_sell(), target);
  }

  // string value_to_buy = 3 [json_name = "valueToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_value_to_buy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_buy().data(), static_cast<int>(this->_internal_value_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinBuyRequest.value_to_buy");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value_to_buy(), target);
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  // string coin_to_buy = 5 [json_name = "coinToBuy"];
  if (_internal_has_coin_to_buy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_to_buy().data(), static_cast<int>(this->_internal_coin_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinBuyRequest.coin_to_buy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_coin_to_buy(), target);
  }

  // string coin_to_sell = 6 [json_name = "coinToSell"];
  if (_internal_has_coin_to_sell()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_to_sell().data(), static_cast<int>(this->_internal_coin_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinBuyRequest.coin_to_sell");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_coin_to_sell(), target);
  }

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_swap_from(), target);
  }

  // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_commission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_coin_id_commission(), target);
  }

  // string coin_commission = 10 [json_name = "coinCommission"];
  if (_internal_has_coin_commission()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_commission().data(), static_cast<int>(this->_internal_coin_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinBuyRequest.coin_commission");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_coin_commission(), target);
  }

  // repeated uint64 route = 11 [json_name = "route"];
  {
    int byte_size = _route_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_route(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateCoinBuyRequest)
  return target;
}

size_t EstimateCoinBuyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateCoinBuyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 route = 11 [json_name = "route"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->route_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _route_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string value_to_buy = 3 [json_name = "valueToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_value_to_buy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_buy());
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_from());
  }

  switch (buy_case()) {
    // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdToBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_to_buy());
      break;
    }
    // string coin_to_buy = 5 [json_name = "coinToBuy"];
    case kCoinToBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  switch (sell_case()) {
    // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdToSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_to_sell());
      break;
    }
    // string coin_to_sell = 6 [json_name = "coinToSell"];
    case kCoinToSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  switch (commission_case()) {
    // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdCommission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_commission());
      break;
    }
    // string coin_commission = 10 [json_name = "coinCommission"];
    case kCoinCommission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_commission());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateCoinBuyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateCoinBuyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateCoinBuyRequest::GetClassData() const { return &_class_data_; }

void EstimateCoinBuyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateCoinBuyRequest *>(to)->MergeFrom(
      static_cast<const EstimateCoinBuyRequest &>(from));
}


void EstimateCoinBuyRequest::MergeFrom(const EstimateCoinBuyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateCoinBuyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_.MergeFrom(from.route_);
  if (!from._internal_value_to_buy().empty()) {
    _internal_set_value_to_buy(from._internal_value_to_buy());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_swap_from() != 0) {
    _internal_set_swap_from(from._internal_swap_from());
  }
  switch (from.buy_case()) {
    case kCoinIdToBuy: {
      _internal_set_coin_id_to_buy(from._internal_coin_id_to_buy());
      break;
    }
    case kCoinToBuy: {
      _internal_set_coin_to_buy(from._internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  switch (from.sell_case()) {
    case kCoinIdToSell: {
      _internal_set_coin_id_to_sell(from._internal_coin_id_to_sell());
      break;
    }
    case kCoinToSell: {
      _internal_set_coin_to_sell(from._internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  switch (from.commission_case()) {
    case kCoinIdCommission: {
      _internal_set_coin_id_commission(from._internal_coin_id_commission());
      break;
    }
    case kCoinCommission: {
      _internal_set_coin_commission(from._internal_coin_commission());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateCoinBuyRequest::CopyFrom(const EstimateCoinBuyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateCoinBuyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateCoinBuyRequest::IsInitialized() const {
  return true;
}

void EstimateCoinBuyRequest::InternalSwap(EstimateCoinBuyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  route_.InternalSwap(&other->route_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_buy_, GetArenaForAllocation(),
      &other->value_to_buy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EstimateCoinBuyRequest, swap_from_)
      + sizeof(EstimateCoinBuyRequest::swap_from_)
      - PROTOBUF_FIELD_OFFSET(EstimateCoinBuyRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
  swap(buy_, other->buy_);
  swap(sell_, other->sell_);
  swap(commission_, other->commission_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateCoinBuyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[82]);
}

// ===================================================================

class EstimateCoinBuyResponse::_Internal {
 public:
};

EstimateCoinBuyResponse::EstimateCoinBuyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateCoinBuyResponse)
}
EstimateCoinBuyResponse::EstimateCoinBuyResponse(const EstimateCoinBuyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  will_pay_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_will_pay().empty()) {
    will_pay_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_will_pay(), 
      GetArenaForAllocation());
  }
  commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commission().empty()) {
    commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commission(), 
      GetArenaForAllocation());
  }
  swap_from_ = from.swap_from_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateCoinBuyResponse)
}

inline void EstimateCoinBuyResponse::SharedCtor() {
will_pay_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
swap_from_ = 0;
}

EstimateCoinBuyResponse::~EstimateCoinBuyResponse() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateCoinBuyResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateCoinBuyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  will_pay_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EstimateCoinBuyResponse::ArenaDtor(void* object) {
  EstimateCoinBuyResponse* _this = reinterpret_cast< EstimateCoinBuyResponse* >(object);
  (void)_this;
}
void EstimateCoinBuyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateCoinBuyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateCoinBuyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateCoinBuyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  will_pay_.ClearToEmpty();
  commission_.ClearToEmpty();
  swap_from_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateCoinBuyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string will_pay = 1 [json_name = "willPay"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_will_pay();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinBuyResponse.will_pay"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string commission = 2 [json_name = "commission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinBuyResponse.commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swap_from(static_cast<::api_pb::SwapFrom>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateCoinBuyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateCoinBuyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string will_pay = 1 [json_name = "willPay"];
  if (!this->_internal_will_pay().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_will_pay().data(), static_cast<int>(this->_internal_will_pay().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinBuyResponse.will_pay");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_will_pay(), target);
  }

  // string commission = 2 [json_name = "commission"];
  if (!this->_internal_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commission().data(), static_cast<int>(this->_internal_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinBuyResponse.commission");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commission(), target);
  }

  // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_swap_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateCoinBuyResponse)
  return target;
}

size_t EstimateCoinBuyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateCoinBuyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string will_pay = 1 [json_name = "willPay"];
  if (!this->_internal_will_pay().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_will_pay());
  }

  // string commission = 2 [json_name = "commission"];
  if (!this->_internal_commission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commission());
  }

  // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateCoinBuyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateCoinBuyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateCoinBuyResponse::GetClassData() const { return &_class_data_; }

void EstimateCoinBuyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateCoinBuyResponse *>(to)->MergeFrom(
      static_cast<const EstimateCoinBuyResponse &>(from));
}


void EstimateCoinBuyResponse::MergeFrom(const EstimateCoinBuyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateCoinBuyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_will_pay().empty()) {
    _internal_set_will_pay(from._internal_will_pay());
  }
  if (!from._internal_commission().empty()) {
    _internal_set_commission(from._internal_commission());
  }
  if (from._internal_swap_from() != 0) {
    _internal_set_swap_from(from._internal_swap_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateCoinBuyResponse::CopyFrom(const EstimateCoinBuyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateCoinBuyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateCoinBuyResponse::IsInitialized() const {
  return true;
}

void EstimateCoinBuyResponse::InternalSwap(EstimateCoinBuyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &will_pay_, GetArenaForAllocation(),
      &other->will_pay_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &commission_, GetArenaForAllocation(),
      &other->commission_, other->GetArenaForAllocation()
  );
  swap(swap_from_, other->swap_from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateCoinBuyResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[83]);
}

// ===================================================================

class EstimateCoinSellRequest::_Internal {
 public:
};

EstimateCoinSellRequest::EstimateCoinSellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  route_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateCoinSellRequest)
}
EstimateCoinSellRequest::EstimateCoinSellRequest(const EstimateCoinSellRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_(from.route_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_sell().empty()) {
    value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_sell(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(swap_from_));
  clear_has_buy();
  switch (from.buy_case()) {
    case kCoinIdToBuy: {
      _internal_set_coin_id_to_buy(from._internal_coin_id_to_buy());
      break;
    }
    case kCoinToBuy: {
      _internal_set_coin_to_buy(from._internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  clear_has_sell();
  switch (from.sell_case()) {
    case kCoinIdToSell: {
      _internal_set_coin_id_to_sell(from._internal_coin_id_to_sell());
      break;
    }
    case kCoinToSell: {
      _internal_set_coin_to_sell(from._internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  clear_has_commission();
  switch (from.commission_case()) {
    case kCoinIdCommission: {
      _internal_set_coin_id_commission(from._internal_coin_id_commission());
      break;
    }
    case kCoinCommission: {
      _internal_set_coin_commission(from._internal_coin_commission());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateCoinSellRequest)
}

inline void EstimateCoinSellRequest::SharedCtor() {
value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&swap_from_) -
    reinterpret_cast<char*>(&height_)) + sizeof(swap_from_));
clear_has_buy();
clear_has_sell();
clear_has_commission();
}

EstimateCoinSellRequest::~EstimateCoinSellRequest() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateCoinSellRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateCoinSellRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_buy()) {
    clear_buy();
  }
  if (has_sell()) {
    clear_sell();
  }
  if (has_commission()) {
    clear_commission();
  }
}

void EstimateCoinSellRequest::ArenaDtor(void* object) {
  EstimateCoinSellRequest* _this = reinterpret_cast< EstimateCoinSellRequest* >(object);
  (void)_this;
}
void EstimateCoinSellRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateCoinSellRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateCoinSellRequest::clear_buy() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinSellRequest)
  switch (buy_case()) {
    case kCoinIdToBuy: {
      // No need to clear
      break;
    }
    case kCoinToBuy: {
      buy_.coin_to_buy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BUY_NOT_SET;
}

void EstimateCoinSellRequest::clear_sell() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinSellRequest)
  switch (sell_case()) {
    case kCoinIdToSell: {
      // No need to clear
      break;
    }
    case kCoinToSell: {
      sell_.coin_to_sell_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SELL_NOT_SET;
}

void EstimateCoinSellRequest::clear_commission() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinSellRequest)
  switch (commission_case()) {
    case kCoinIdCommission: {
      // No need to clear
      break;
    }
    case kCoinCommission: {
      commission_.coin_commission_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = COMMISSION_NOT_SET;
}


void EstimateCoinSellRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateCoinSellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_.Clear();
  value_to_sell_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_from_) -
      reinterpret_cast<char*>(&height_)) + sizeof(swap_from_));
  clear_buy();
  clear_sell();
  clear_commission();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateCoinSellRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellRequest.value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_to_buy = 5 [json_name = "coinToBuy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_coin_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellRequest.coin_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_to_sell = 6 [json_name = "coinToSell"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_coin_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellRequest.coin_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swap_from(static_cast<::api_pb::SwapFrom>(val));
        } else goto handle_unusual;
        continue;
      // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_commission = 10 [json_name = "coinCommission"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_coin_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellRequest.coin_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 route = 11 [json_name = "route"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_route(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_route(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateCoinSellRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateCoinSellRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin_id_to_buy(), target);
  }

  // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coin_id_to_sell(), target);
  }

  // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_sell().data(), static_cast<int>(this->_internal_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellRequest.value_to_sell");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value_to_sell(), target);
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_height(), target);
  }

  // string coin_to_buy = 5 [json_name = "coinToBuy"];
  if (_internal_has_coin_to_buy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_to_buy().data(), static_cast<int>(this->_internal_coin_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellRequest.coin_to_buy");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_coin_to_buy(), target);
  }

  // string coin_to_sell = 6 [json_name = "coinToSell"];
  if (_internal_has_coin_to_sell()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_to_sell().data(), static_cast<int>(this->_internal_coin_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellRequest.coin_to_sell");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_coin_to_sell(), target);
  }

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_swap_from(), target);
  }

  // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_commission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_coin_id_commission(), target);
  }

  // string coin_commission = 10 [json_name = "coinCommission"];
  if (_internal_has_coin_commission()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_commission().data(), static_cast<int>(this->_internal_coin_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellRequest.coin_commission");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_coin_commission(), target);
  }

  // repeated uint64 route = 11 [json_name = "route"];
  {
    int byte_size = _route_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_route(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateCoinSellRequest)
  return target;
}

size_t EstimateCoinSellRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateCoinSellRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 route = 11 [json_name = "route"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->route_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _route_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_sell());
  }

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_from());
  }

  switch (buy_case()) {
    // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdToBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_to_buy());
      break;
    }
    // string coin_to_buy = 5 [json_name = "coinToBuy"];
    case kCoinToBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  switch (sell_case()) {
    // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdToSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_to_sell());
      break;
    }
    // string coin_to_sell = 6 [json_name = "coinToSell"];
    case kCoinToSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  switch (commission_case()) {
    // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdCommission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_commission());
      break;
    }
    // string coin_commission = 10 [json_name = "coinCommission"];
    case kCoinCommission: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_commission());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateCoinSellRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateCoinSellRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateCoinSellRequest::GetClassData() const { return &_class_data_; }

void EstimateCoinSellRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateCoinSellRequest *>(to)->MergeFrom(
      static_cast<const EstimateCoinSellRequest &>(from));
}


void EstimateCoinSellRequest::MergeFrom(const EstimateCoinSellRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateCoinSellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_.MergeFrom(from.route_);
  if (!from._internal_value_to_sell().empty()) {
    _internal_set_value_to_sell(from._internal_value_to_sell());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_swap_from() != 0) {
    _internal_set_swap_from(from._internal_swap_from());
  }
  switch (from.buy_case()) {
    case kCoinIdToBuy: {
      _internal_set_coin_id_to_buy(from._internal_coin_id_to_buy());
      break;
    }
    case kCoinToBuy: {
      _internal_set_coin_to_buy(from._internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  switch (from.sell_case()) {
    case kCoinIdToSell: {
      _internal_set_coin_id_to_sell(from._internal_coin_id_to_sell());
      break;
    }
    case kCoinToSell: {
      _internal_set_coin_to_sell(from._internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  switch (from.commission_case()) {
    case kCoinIdCommission: {
      _internal_set_coin_id_commission(from._internal_coin_id_commission());
      break;
    }
    case kCoinCommission: {
      _internal_set_coin_commission(from._internal_coin_commission());
      break;
    }
    case COMMISSION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateCoinSellRequest::CopyFrom(const EstimateCoinSellRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateCoinSellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateCoinSellRequest::IsInitialized() const {
  return true;
}

void EstimateCoinSellRequest::InternalSwap(EstimateCoinSellRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  route_.InternalSwap(&other->route_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_sell_, GetArenaForAllocation(),
      &other->value_to_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EstimateCoinSellRequest, swap_from_)
      + sizeof(EstimateCoinSellRequest::swap_from_)
      - PROTOBUF_FIELD_OFFSET(EstimateCoinSellRequest, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
  swap(buy_, other->buy_);
  swap(sell_, other->sell_);
  swap(commission_, other->commission_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateCoinSellRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[84]);
}

// ===================================================================

class EstimateCoinSellResponse::_Internal {
 public:
};

EstimateCoinSellResponse::EstimateCoinSellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateCoinSellResponse)
}
EstimateCoinSellResponse::EstimateCoinSellResponse(const EstimateCoinSellResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  will_get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_will_get().empty()) {
    will_get_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_will_get(), 
      GetArenaForAllocation());
  }
  commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commission().empty()) {
    commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commission(), 
      GetArenaForAllocation());
  }
  swap_from_ = from.swap_from_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateCoinSellResponse)
}

inline void EstimateCoinSellResponse::SharedCtor() {
will_get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
swap_from_ = 0;
}

EstimateCoinSellResponse::~EstimateCoinSellResponse() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateCoinSellResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateCoinSellResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  will_get_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EstimateCoinSellResponse::ArenaDtor(void* object) {
  EstimateCoinSellResponse* _this = reinterpret_cast< EstimateCoinSellResponse* >(object);
  (void)_this;
}
void EstimateCoinSellResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateCoinSellResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateCoinSellResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateCoinSellResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  will_get_.ClearToEmpty();
  commission_.ClearToEmpty();
  swap_from_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateCoinSellResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string will_get = 1 [json_name = "willGet"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_will_get();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellResponse.will_get"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string commission = 2 [json_name = "commission"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellResponse.commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swap_from(static_cast<::api_pb::SwapFrom>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateCoinSellResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateCoinSellResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string will_get = 1 [json_name = "willGet"];
  if (!this->_internal_will_get().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_will_get().data(), static_cast<int>(this->_internal_will_get().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellResponse.will_get");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_will_get(), target);
  }

  // string commission = 2 [json_name = "commission"];
  if (!this->_internal_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commission().data(), static_cast<int>(this->_internal_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellResponse.commission");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_commission(), target);
  }

  // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_swap_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateCoinSellResponse)
  return target;
}

size_t EstimateCoinSellResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateCoinSellResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string will_get = 1 [json_name = "willGet"];
  if (!this->_internal_will_get().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_will_get());
  }

  // string commission = 2 [json_name = "commission"];
  if (!this->_internal_commission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commission());
  }

  // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateCoinSellResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateCoinSellResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateCoinSellResponse::GetClassData() const { return &_class_data_; }

void EstimateCoinSellResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateCoinSellResponse *>(to)->MergeFrom(
      static_cast<const EstimateCoinSellResponse &>(from));
}


void EstimateCoinSellResponse::MergeFrom(const EstimateCoinSellResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateCoinSellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_will_get().empty()) {
    _internal_set_will_get(from._internal_will_get());
  }
  if (!from._internal_commission().empty()) {
    _internal_set_commission(from._internal_commission());
  }
  if (from._internal_swap_from() != 0) {
    _internal_set_swap_from(from._internal_swap_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateCoinSellResponse::CopyFrom(const EstimateCoinSellResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateCoinSellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateCoinSellResponse::IsInitialized() const {
  return true;
}

void EstimateCoinSellResponse::InternalSwap(EstimateCoinSellResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &will_get_, GetArenaForAllocation(),
      &other->will_get_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &commission_, GetArenaForAllocation(),
      &other->commission_, other->GetArenaForAllocation()
  );
  swap(swap_from_, other->swap_from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateCoinSellResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[85]);
}

// ===================================================================

class EstimateCoinSellAllRequest::_Internal {
 public:
};

EstimateCoinSellAllRequest::EstimateCoinSellAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  route_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateCoinSellAllRequest)
}
EstimateCoinSellAllRequest::EstimateCoinSellAllRequest(const EstimateCoinSellAllRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      route_(from.route_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_to_sell().empty()) {
    value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value_to_sell(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gas_price_, &from.gas_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&swap_from_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(swap_from_));
  clear_has_buy();
  switch (from.buy_case()) {
    case kCoinIdToBuy: {
      _internal_set_coin_id_to_buy(from._internal_coin_id_to_buy());
      break;
    }
    case kCoinToBuy: {
      _internal_set_coin_to_buy(from._internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  clear_has_sell();
  switch (from.sell_case()) {
    case kCoinIdToSell: {
      _internal_set_coin_id_to_sell(from._internal_coin_id_to_sell());
      break;
    }
    case kCoinToSell: {
      _internal_set_coin_to_sell(from._internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateCoinSellAllRequest)
}

inline void EstimateCoinSellAllRequest::SharedCtor() {
value_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gas_price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&swap_from_) -
    reinterpret_cast<char*>(&gas_price_)) + sizeof(swap_from_));
clear_has_buy();
clear_has_sell();
}

EstimateCoinSellAllRequest::~EstimateCoinSellAllRequest() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateCoinSellAllRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateCoinSellAllRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_to_sell_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_buy()) {
    clear_buy();
  }
  if (has_sell()) {
    clear_sell();
  }
}

void EstimateCoinSellAllRequest::ArenaDtor(void* object) {
  EstimateCoinSellAllRequest* _this = reinterpret_cast< EstimateCoinSellAllRequest* >(object);
  (void)_this;
}
void EstimateCoinSellAllRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateCoinSellAllRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateCoinSellAllRequest::clear_buy() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinSellAllRequest)
  switch (buy_case()) {
    case kCoinIdToBuy: {
      // No need to clear
      break;
    }
    case kCoinToBuy: {
      buy_.coin_to_buy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BUY_NOT_SET;
}

void EstimateCoinSellAllRequest::clear_sell() {
// @@protoc_insertion_point(one_of_clear_start:api_pb.EstimateCoinSellAllRequest)
  switch (sell_case()) {
    case kCoinIdToSell: {
      // No need to clear
      break;
    }
    case kCoinToSell: {
      sell_.coin_to_sell_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SELL_NOT_SET;
}


void EstimateCoinSellAllRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateCoinSellAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_.Clear();
  value_to_sell_.ClearToEmpty();
  ::memset(&gas_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&swap_from_) -
      reinterpret_cast<char*>(&gas_price_)) + sizeof(swap_from_));
  clear_buy();
  clear_sell();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateCoinSellAllRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellAllRequest.value_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 gas_price = 4 [json_name = "gasPrice", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gas_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 5 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_to_sell = 6 [json_name = "coinToSell"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_coin_to_sell();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellAllRequest.coin_to_sell"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string coin_to_buy = 7 [json_name = "coinToBuy"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_coin_to_buy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellAllRequest.coin_to_buy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swap_from(static_cast<::api_pb::SwapFrom>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint64 route = 11 [json_name = "route"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_route(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_route(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateCoinSellAllRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateCoinSellAllRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_to_buy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coin_id_to_buy(), target);
  }

  // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_coin_id_to_sell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_coin_id_to_sell(), target);
  }

  // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_value_to_sell().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_to_sell().data(), static_cast<int>(this->_internal_value_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellAllRequest.value_to_sell");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value_to_sell(), target);
  }

  // uint64 gas_price = 4 [json_name = "gasPrice", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_gas_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_gas_price(), target);
  }

  // uint64 height = 5 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_height(), target);
  }

  // string coin_to_sell = 6 [json_name = "coinToSell"];
  if (_internal_has_coin_to_sell()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_to_sell().data(), static_cast<int>(this->_internal_coin_to_sell().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellAllRequest.coin_to_sell");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_coin_to_sell(), target);
  }

  // string coin_to_buy = 7 [json_name = "coinToBuy"];
  if (_internal_has_coin_to_buy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coin_to_buy().data(), static_cast<int>(this->_internal_coin_to_buy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellAllRequest.coin_to_buy");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_coin_to_buy(), target);
  }

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_swap_from(), target);
  }

  // repeated uint64 route = 11 [json_name = "route"];
  {
    int byte_size = _route_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_route(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateCoinSellAllRequest)
  return target;
}

size_t EstimateCoinSellAllRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateCoinSellAllRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 route = 11 [json_name = "route"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->route_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _route_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_value_to_sell().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_to_sell());
  }

  // uint64 gas_price = 4 [json_name = "gasPrice", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_gas_price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gas_price());
  }

  // uint64 height = 5 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_from());
  }

  switch (buy_case()) {
    // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdToBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_to_buy());
      break;
    }
    // string coin_to_buy = 7 [json_name = "coinToBuy"];
    case kCoinToBuy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  switch (sell_case()) {
    // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kCoinIdToSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coin_id_to_sell());
      break;
    }
    // string coin_to_sell = 6 [json_name = "coinToSell"];
    case kCoinToSell: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateCoinSellAllRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateCoinSellAllRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateCoinSellAllRequest::GetClassData() const { return &_class_data_; }

void EstimateCoinSellAllRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateCoinSellAllRequest *>(to)->MergeFrom(
      static_cast<const EstimateCoinSellAllRequest &>(from));
}


void EstimateCoinSellAllRequest::MergeFrom(const EstimateCoinSellAllRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateCoinSellAllRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_.MergeFrom(from.route_);
  if (!from._internal_value_to_sell().empty()) {
    _internal_set_value_to_sell(from._internal_value_to_sell());
  }
  if (from._internal_gas_price() != 0) {
    _internal_set_gas_price(from._internal_gas_price());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_swap_from() != 0) {
    _internal_set_swap_from(from._internal_swap_from());
  }
  switch (from.buy_case()) {
    case kCoinIdToBuy: {
      _internal_set_coin_id_to_buy(from._internal_coin_id_to_buy());
      break;
    }
    case kCoinToBuy: {
      _internal_set_coin_to_buy(from._internal_coin_to_buy());
      break;
    }
    case BUY_NOT_SET: {
      break;
    }
  }
  switch (from.sell_case()) {
    case kCoinIdToSell: {
      _internal_set_coin_id_to_sell(from._internal_coin_id_to_sell());
      break;
    }
    case kCoinToSell: {
      _internal_set_coin_to_sell(from._internal_coin_to_sell());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateCoinSellAllRequest::CopyFrom(const EstimateCoinSellAllRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateCoinSellAllRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateCoinSellAllRequest::IsInitialized() const {
  return true;
}

void EstimateCoinSellAllRequest::InternalSwap(EstimateCoinSellAllRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  route_.InternalSwap(&other->route_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_to_sell_, GetArenaForAllocation(),
      &other->value_to_sell_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EstimateCoinSellAllRequest, swap_from_)
      + sizeof(EstimateCoinSellAllRequest::swap_from_)
      - PROTOBUF_FIELD_OFFSET(EstimateCoinSellAllRequest, gas_price_)>(
          reinterpret_cast<char*>(&gas_price_),
          reinterpret_cast<char*>(&other->gas_price_));
  swap(buy_, other->buy_);
  swap(sell_, other->sell_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateCoinSellAllRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[86]);
}

// ===================================================================

class EstimateCoinSellAllResponse::_Internal {
 public:
};

EstimateCoinSellAllResponse::EstimateCoinSellAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateCoinSellAllResponse)
}
EstimateCoinSellAllResponse::EstimateCoinSellAllResponse(const EstimateCoinSellAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  will_get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_will_get().empty()) {
    will_get_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_will_get(), 
      GetArenaForAllocation());
  }
  swap_from_ = from.swap_from_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateCoinSellAllResponse)
}

inline void EstimateCoinSellAllResponse::SharedCtor() {
will_get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
swap_from_ = 0;
}

EstimateCoinSellAllResponse::~EstimateCoinSellAllResponse() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateCoinSellAllResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateCoinSellAllResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  will_get_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EstimateCoinSellAllResponse::ArenaDtor(void* object) {
  EstimateCoinSellAllResponse* _this = reinterpret_cast< EstimateCoinSellAllResponse* >(object);
  (void)_this;
}
void EstimateCoinSellAllResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateCoinSellAllResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateCoinSellAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateCoinSellAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  will_get_.ClearToEmpty();
  swap_from_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateCoinSellAllResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string will_get = 1 [json_name = "willGet"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_will_get();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateCoinSellAllResponse.will_get"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.SwapFrom swap_from = 2 [json_name = "swapFrom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swap_from(static_cast<::api_pb::SwapFrom>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateCoinSellAllResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateCoinSellAllResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string will_get = 1 [json_name = "willGet"];
  if (!this->_internal_will_get().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_will_get().data(), static_cast<int>(this->_internal_will_get().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateCoinSellAllResponse.will_get");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_will_get(), target);
  }

  // .api_pb.SwapFrom swap_from = 2 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_swap_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateCoinSellAllResponse)
  return target;
}

size_t EstimateCoinSellAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateCoinSellAllResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string will_get = 1 [json_name = "willGet"];
  if (!this->_internal_will_get().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_will_get());
  }

  // .api_pb.SwapFrom swap_from = 2 [json_name = "swapFrom"];
  if (this->_internal_swap_from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swap_from());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateCoinSellAllResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateCoinSellAllResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateCoinSellAllResponse::GetClassData() const { return &_class_data_; }

void EstimateCoinSellAllResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateCoinSellAllResponse *>(to)->MergeFrom(
      static_cast<const EstimateCoinSellAllResponse &>(from));
}


void EstimateCoinSellAllResponse::MergeFrom(const EstimateCoinSellAllResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateCoinSellAllResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_will_get().empty()) {
    _internal_set_will_get(from._internal_will_get());
  }
  if (from._internal_swap_from() != 0) {
    _internal_set_swap_from(from._internal_swap_from());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateCoinSellAllResponse::CopyFrom(const EstimateCoinSellAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateCoinSellAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateCoinSellAllResponse::IsInitialized() const {
  return true;
}

void EstimateCoinSellAllResponse::InternalSwap(EstimateCoinSellAllResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &will_get_, GetArenaForAllocation(),
      &other->will_get_, other->GetArenaForAllocation()
  );
  swap(swap_from_, other->swap_from_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateCoinSellAllResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[87]);
}

// ===================================================================

class EstimateTxCommissionRequest::_Internal {
 public:
};

EstimateTxCommissionRequest::EstimateTxCommissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateTxCommissionRequest)
}
EstimateTxCommissionRequest::EstimateTxCommissionRequest(const EstimateTxCommissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx().empty()) {
    tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tx(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateTxCommissionRequest)
}

inline void EstimateTxCommissionRequest::SharedCtor() {
tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

EstimateTxCommissionRequest::~EstimateTxCommissionRequest() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateTxCommissionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateTxCommissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EstimateTxCommissionRequest::ArenaDtor(void* object) {
  EstimateTxCommissionRequest* _this = reinterpret_cast< EstimateTxCommissionRequest* >(object);
  (void)_this;
}
void EstimateTxCommissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateTxCommissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateTxCommissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateTxCommissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateTxCommissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx = 1 [json_name = "tx", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateTxCommissionRequest.tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateTxCommissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateTxCommissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx = 1 [json_name = "tx", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx().data(), static_cast<int>(this->_internal_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateTxCommissionRequest.tx");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateTxCommissionRequest)
  return target;
}

size_t EstimateTxCommissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateTxCommissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx = 1 [json_name = "tx", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_tx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateTxCommissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateTxCommissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateTxCommissionRequest::GetClassData() const { return &_class_data_; }

void EstimateTxCommissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateTxCommissionRequest *>(to)->MergeFrom(
      static_cast<const EstimateTxCommissionRequest &>(from));
}


void EstimateTxCommissionRequest::MergeFrom(const EstimateTxCommissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateTxCommissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _internal_set_tx(from._internal_tx());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateTxCommissionRequest::CopyFrom(const EstimateTxCommissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateTxCommissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateTxCommissionRequest::IsInitialized() const {
  return true;
}

void EstimateTxCommissionRequest::InternalSwap(EstimateTxCommissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tx_, GetArenaForAllocation(),
      &other->tx_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateTxCommissionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[88]);
}

// ===================================================================

class EstimateTxCommissionResponse::_Internal {
 public:
};

EstimateTxCommissionResponse::EstimateTxCommissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EstimateTxCommissionResponse)
}
EstimateTxCommissionResponse::EstimateTxCommissionResponse(const EstimateTxCommissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commission().empty()) {
    commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_commission(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.EstimateTxCommissionResponse)
}

inline void EstimateTxCommissionResponse::SharedCtor() {
commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EstimateTxCommissionResponse::~EstimateTxCommissionResponse() {
  // @@protoc_insertion_point(destructor:api_pb.EstimateTxCommissionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EstimateTxCommissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EstimateTxCommissionResponse::ArenaDtor(void* object) {
  EstimateTxCommissionResponse* _this = reinterpret_cast< EstimateTxCommissionResponse* >(object);
  (void)_this;
}
void EstimateTxCommissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EstimateTxCommissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EstimateTxCommissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EstimateTxCommissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commission_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EstimateTxCommissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string commission = 1 [json_name = "commission"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EstimateTxCommissionResponse.commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateTxCommissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EstimateTxCommissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string commission = 1 [json_name = "commission"];
  if (!this->_internal_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commission().data(), static_cast<int>(this->_internal_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EstimateTxCommissionResponse.commission");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_commission(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EstimateTxCommissionResponse)
  return target;
}

size_t EstimateTxCommissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EstimateTxCommissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string commission = 1 [json_name = "commission"];
  if (!this->_internal_commission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commission());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EstimateTxCommissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EstimateTxCommissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EstimateTxCommissionResponse::GetClassData() const { return &_class_data_; }

void EstimateTxCommissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EstimateTxCommissionResponse *>(to)->MergeFrom(
      static_cast<const EstimateTxCommissionResponse &>(from));
}


void EstimateTxCommissionResponse::MergeFrom(const EstimateTxCommissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EstimateTxCommissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_commission().empty()) {
    _internal_set_commission(from._internal_commission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EstimateTxCommissionResponse::CopyFrom(const EstimateTxCommissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EstimateTxCommissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateTxCommissionResponse::IsInitialized() const {
  return true;
}

void EstimateTxCommissionResponse::InternalSwap(EstimateTxCommissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &commission_, GetArenaForAllocation(),
      &other->commission_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateTxCommissionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[89]);
}

// ===================================================================

class EventsRequest::_Internal {
 public:
};

EventsRequest::EventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  search_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EventsRequest)
}
EventsRequest::EventsRequest(const EventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      search_(from.search_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.EventsRequest)
}

inline void EventsRequest::SharedCtor() {
height_ = uint64_t{0u};
}

EventsRequest::~EventsRequest() {
  // @@protoc_insertion_point(destructor:api_pb.EventsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventsRequest::ArenaDtor(void* object) {
  EventsRequest* _this = reinterpret_cast< EventsRequest* >(object);
  (void)_this;
}
void EventsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  search_.Clear();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string search = 2 [json_name = "search"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_search();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.EventsRequest.search"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // repeated string search = 2 [json_name = "search"];
  for (int i = 0, n = this->_internal_search_size(); i < n; i++) {
    const auto& s = this->_internal_search(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.EventsRequest.search");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EventsRequest)
  return target;
}

size_t EventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string search = 2 [json_name = "search"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(search_.size());
  for (int i = 0, n = search_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      search_.Get(i));
  }

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsRequest::GetClassData() const { return &_class_data_; }

void EventsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EventsRequest *>(to)->MergeFrom(
      static_cast<const EventsRequest &>(from));
}


void EventsRequest::MergeFrom(const EventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  search_.MergeFrom(from.search_);
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsRequest::CopyFrom(const EventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsRequest::IsInitialized() const {
  return true;
}

void EventsRequest::InternalSwap(EventsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  search_.InternalSwap(&other->search_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[90]);
}

// ===================================================================

class EventsResponse::_Internal {
 public:
};

void EventsResponse::clear_events() {
  events_.Clear();
}
EventsResponse::EventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.EventsResponse)
}
EventsResponse::EventsResponse(const EventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.EventsResponse)
}

inline void EventsResponse::SharedCtor() {
}

EventsResponse::~EventsResponse() {
  // @@protoc_insertion_point(destructor:api_pb.EventsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventsResponse::ArenaDtor(void* object) {
  EventsResponse* _this = reinterpret_cast< EventsResponse* >(object);
  (void)_this;
}
void EventsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.EventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Struct events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.EventsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Struct events = 1 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.EventsResponse)
  return target;
}

size_t EventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.EventsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Struct events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventsResponse::GetClassData() const { return &_class_data_; }

void EventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<EventsResponse *>(to)->MergeFrom(
      static_cast<const EventsResponse &>(from));
}


void EventsResponse::MergeFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.EventsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventsResponse::CopyFrom(const EventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.EventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsResponse::IsInitialized() const {
  return true;
}

void EventsResponse::InternalSwap(EventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[91]);
}

// ===================================================================

class MissedBlocksRequest::_Internal {
 public:
};

MissedBlocksRequest::MissedBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MissedBlocksRequest)
}
MissedBlocksRequest::MissedBlocksRequest(const MissedBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.MissedBlocksRequest)
}

inline void MissedBlocksRequest::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

MissedBlocksRequest::~MissedBlocksRequest() {
  // @@protoc_insertion_point(destructor:api_pb.MissedBlocksRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MissedBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissedBlocksRequest::ArenaDtor(void* object) {
  MissedBlocksRequest* _this = reinterpret_cast< MissedBlocksRequest* >(object);
  (void)_this;
}
void MissedBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissedBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissedBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MissedBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissedBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.MissedBlocksRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissedBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MissedBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.MissedBlocksRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MissedBlocksRequest)
  return target;
}

size_t MissedBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MissedBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissedBlocksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MissedBlocksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissedBlocksRequest::GetClassData() const { return &_class_data_; }

void MissedBlocksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MissedBlocksRequest *>(to)->MergeFrom(
      static_cast<const MissedBlocksRequest &>(from));
}


void MissedBlocksRequest::MergeFrom(const MissedBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MissedBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissedBlocksRequest::CopyFrom(const MissedBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MissedBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissedBlocksRequest::IsInitialized() const {
  return true;
}

void MissedBlocksRequest::InternalSwap(MissedBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissedBlocksRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[92]);
}

// ===================================================================

class MissedBlocksResponse::_Internal {
 public:
};

MissedBlocksResponse::MissedBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.MissedBlocksResponse)
}
MissedBlocksResponse::MissedBlocksResponse(const MissedBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  missed_blocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_missed_blocks().empty()) {
    missed_blocks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_missed_blocks(), 
      GetArenaForAllocation());
  }
  missed_blocks_count_ = from.missed_blocks_count_;
  // @@protoc_insertion_point(copy_constructor:api_pb.MissedBlocksResponse)
}

inline void MissedBlocksResponse::SharedCtor() {
missed_blocks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
missed_blocks_count_ = int64_t{0};
}

MissedBlocksResponse::~MissedBlocksResponse() {
  // @@protoc_insertion_point(destructor:api_pb.MissedBlocksResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MissedBlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  missed_blocks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissedBlocksResponse::ArenaDtor(void* object) {
  MissedBlocksResponse* _this = reinterpret_cast< MissedBlocksResponse* >(object);
  (void)_this;
}
void MissedBlocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissedBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MissedBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.MissedBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missed_blocks_.ClearToEmpty();
  missed_blocks_count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissedBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string missed_blocks = 1 [json_name = "missedBlocks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_missed_blocks();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.MissedBlocksResponse.missed_blocks"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 missed_blocks_count = 2 [json_name = "missedBlocksCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          missed_blocks_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissedBlocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.MissedBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string missed_blocks = 1 [json_name = "missedBlocks"];
  if (!this->_internal_missed_blocks().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_missed_blocks().data(), static_cast<int>(this->_internal_missed_blocks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.MissedBlocksResponse.missed_blocks");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_missed_blocks(), target);
  }

  // int64 missed_blocks_count = 2 [json_name = "missedBlocksCount"];
  if (this->_internal_missed_blocks_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_missed_blocks_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.MissedBlocksResponse)
  return target;
}

size_t MissedBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.MissedBlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string missed_blocks = 1 [json_name = "missedBlocks"];
  if (!this->_internal_missed_blocks().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_missed_blocks());
  }

  // int64 missed_blocks_count = 2 [json_name = "missedBlocksCount"];
  if (this->_internal_missed_blocks_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_missed_blocks_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissedBlocksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MissedBlocksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissedBlocksResponse::GetClassData() const { return &_class_data_; }

void MissedBlocksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MissedBlocksResponse *>(to)->MergeFrom(
      static_cast<const MissedBlocksResponse &>(from));
}


void MissedBlocksResponse::MergeFrom(const MissedBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.MissedBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_missed_blocks().empty()) {
    _internal_set_missed_blocks(from._internal_missed_blocks());
  }
  if (from._internal_missed_blocks_count() != 0) {
    _internal_set_missed_blocks_count(from._internal_missed_blocks_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissedBlocksResponse::CopyFrom(const MissedBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.MissedBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissedBlocksResponse::IsInitialized() const {
  return true;
}

void MissedBlocksResponse::InternalSwap(MissedBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &missed_blocks_, GetArenaForAllocation(),
      &other->missed_blocks_, other->GetArenaForAllocation()
  );
  swap(missed_blocks_count_, other->missed_blocks_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MissedBlocksResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[93]);
}

// ===================================================================

class UnconfirmedTxsResponse::_Internal {
 public:
};

UnconfirmedTxsResponse::UnconfirmedTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UnconfirmedTxsResponse)
}
UnconfirmedTxsResponse::UnconfirmedTxsResponse(const UnconfirmedTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transaction_count_, &from.transaction_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_bytes_) -
    reinterpret_cast<char*>(&transaction_count_)) + sizeof(total_bytes_));
  // @@protoc_insertion_point(copy_constructor:api_pb.UnconfirmedTxsResponse)
}

inline void UnconfirmedTxsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_bytes_) -
    reinterpret_cast<char*>(&transaction_count_)) + sizeof(total_bytes_));
}

UnconfirmedTxsResponse::~UnconfirmedTxsResponse() {
  // @@protoc_insertion_point(destructor:api_pb.UnconfirmedTxsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnconfirmedTxsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnconfirmedTxsResponse::ArenaDtor(void* object) {
  UnconfirmedTxsResponse* _this = reinterpret_cast< UnconfirmedTxsResponse* >(object);
  (void)_this;
}
void UnconfirmedTxsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnconfirmedTxsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnconfirmedTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UnconfirmedTxsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  ::memset(&transaction_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_bytes_) -
      reinterpret_cast<char*>(&transaction_count_)) + sizeof(total_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnconfirmedTxsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 transaction_count = 1 [json_name = "transactionCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          transaction_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_transactions = 2 [json_name = "totalTransactions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_transactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 total_bytes = 3 [json_name = "totalBytes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string transactions = 4 [json_name = "transactions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UnconfirmedTxsResponse.transactions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnconfirmedTxsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UnconfirmedTxsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 transaction_count = 1 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_transaction_count(), target);
  }

  // uint64 total_transactions = 2 [json_name = "totalTransactions"];
  if (this->_internal_total_transactions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_total_transactions(), target);
  }

  // uint64 total_bytes = 3 [json_name = "totalBytes"];
  if (this->_internal_total_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_total_bytes(), target);
  }

  // repeated string transactions = 4 [json_name = "transactions"];
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UnconfirmedTxsResponse.transactions");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UnconfirmedTxsResponse)
  return target;
}

size_t UnconfirmedTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UnconfirmedTxsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string transactions = 4 [json_name = "transactions"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      transactions_.Get(i));
  }

  // uint64 transaction_count = 1 [json_name = "transactionCount"];
  if (this->_internal_transaction_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_transaction_count());
  }

  // uint64 total_transactions = 2 [json_name = "totalTransactions"];
  if (this->_internal_total_transactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_transactions());
  }

  // uint64 total_bytes = 3 [json_name = "totalBytes"];
  if (this->_internal_total_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_total_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnconfirmedTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnconfirmedTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnconfirmedTxsResponse::GetClassData() const { return &_class_data_; }

void UnconfirmedTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnconfirmedTxsResponse *>(to)->MergeFrom(
      static_cast<const UnconfirmedTxsResponse &>(from));
}


void UnconfirmedTxsResponse::MergeFrom(const UnconfirmedTxsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UnconfirmedTxsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from._internal_transaction_count() != 0) {
    _internal_set_transaction_count(from._internal_transaction_count());
  }
  if (from._internal_total_transactions() != 0) {
    _internal_set_total_transactions(from._internal_total_transactions());
  }
  if (from._internal_total_bytes() != 0) {
    _internal_set_total_bytes(from._internal_total_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnconfirmedTxsResponse::CopyFrom(const UnconfirmedTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UnconfirmedTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnconfirmedTxsResponse::IsInitialized() const {
  return true;
}

void UnconfirmedTxsResponse::InternalSwap(UnconfirmedTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnconfirmedTxsResponse, total_bytes_)
      + sizeof(UnconfirmedTxsResponse::total_bytes_)
      - PROTOBUF_FIELD_OFFSET(UnconfirmedTxsResponse, transaction_count_)>(
          reinterpret_cast<char*>(&transaction_count_),
          reinterpret_cast<char*>(&other->transaction_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnconfirmedTxsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[94]);
}

// ===================================================================

class UnconfirmedTxsRequest::_Internal {
 public:
};

UnconfirmedTxsRequest::UnconfirmedTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UnconfirmedTxsRequest)
}
UnconfirmedTxsRequest::UnconfirmedTxsRequest(const UnconfirmedTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:api_pb.UnconfirmedTxsRequest)
}

inline void UnconfirmedTxsRequest::SharedCtor() {
limit_ = 0;
}

UnconfirmedTxsRequest::~UnconfirmedTxsRequest() {
  // @@protoc_insertion_point(destructor:api_pb.UnconfirmedTxsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnconfirmedTxsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnconfirmedTxsRequest::ArenaDtor(void* object) {
  UnconfirmedTxsRequest* _this = reinterpret_cast< UnconfirmedTxsRequest* >(object);
  (void)_this;
}
void UnconfirmedTxsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnconfirmedTxsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnconfirmedTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UnconfirmedTxsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnconfirmedTxsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 limit = 1 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnconfirmedTxsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UnconfirmedTxsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UnconfirmedTxsRequest)
  return target;
}

size_t UnconfirmedTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UnconfirmedTxsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 limit = 1 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnconfirmedTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnconfirmedTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnconfirmedTxsRequest::GetClassData() const { return &_class_data_; }

void UnconfirmedTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnconfirmedTxsRequest *>(to)->MergeFrom(
      static_cast<const UnconfirmedTxsRequest &>(from));
}


void UnconfirmedTxsRequest::MergeFrom(const UnconfirmedTxsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UnconfirmedTxsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnconfirmedTxsRequest::CopyFrom(const UnconfirmedTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UnconfirmedTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnconfirmedTxsRequest::IsInitialized() const {
  return true;
}

void UnconfirmedTxsRequest::InternalSwap(UnconfirmedTxsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnconfirmedTxsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[95]);
}

// ===================================================================

class ValidatorsRequest::_Internal {
 public:
};

ValidatorsRequest::ValidatorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.ValidatorsRequest)
}
ValidatorsRequest::ValidatorsRequest(const ValidatorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.ValidatorsRequest)
}

inline void ValidatorsRequest::SharedCtor() {
height_ = uint64_t{0u};
}

ValidatorsRequest::~ValidatorsRequest() {
  // @@protoc_insertion_point(destructor:api_pb.ValidatorsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValidatorsRequest::ArenaDtor(void* object) {
  ValidatorsRequest* _this = reinterpret_cast< ValidatorsRequest* >(object);
  (void)_this;
}
void ValidatorsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.ValidatorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.ValidatorsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.ValidatorsRequest)
  return target;
}

size_t ValidatorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.ValidatorsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorsRequest::GetClassData() const { return &_class_data_; }

void ValidatorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidatorsRequest *>(to)->MergeFrom(
      static_cast<const ValidatorsRequest &>(from));
}


void ValidatorsRequest::MergeFrom(const ValidatorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.ValidatorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorsRequest::CopyFrom(const ValidatorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.ValidatorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorsRequest::IsInitialized() const {
  return true;
}

void ValidatorsRequest::InternalSwap(ValidatorsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[96]);
}

// ===================================================================

class ValidatorsResponse_Result::_Internal {
 public:
};

ValidatorsResponse_Result::ValidatorsResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.ValidatorsResponse.Result)
}
ValidatorsResponse_Result::ValidatorsResponse_Result(const ValidatorsResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  voting_power_ = from.voting_power_;
  // @@protoc_insertion_point(copy_constructor:api_pb.ValidatorsResponse.Result)
}

inline void ValidatorsResponse_Result::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
voting_power_ = uint64_t{0u};
}

ValidatorsResponse_Result::~ValidatorsResponse_Result() {
  // @@protoc_insertion_point(destructor:api_pb.ValidatorsResponse.Result)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorsResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidatorsResponse_Result::ArenaDtor(void* object) {
  ValidatorsResponse_Result* _this = reinterpret_cast< ValidatorsResponse_Result* >(object);
  (void)_this;
}
void ValidatorsResponse_Result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorsResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorsResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.ValidatorsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  voting_power_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorsResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.ValidatorsResponse.Result.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 voting_power = 2 [json_name = "votingPower"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorsResponse_Result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.ValidatorsResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.ValidatorsResponse.Result.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // uint64 voting_power = 2 [json_name = "votingPower"];
  if (this->_internal_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_voting_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.ValidatorsResponse.Result)
  return target;
}

size_t ValidatorsResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.ValidatorsResponse.Result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // uint64 voting_power = 2 [json_name = "votingPower"];
  if (this->_internal_voting_power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_voting_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorsResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorsResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorsResponse_Result::GetClassData() const { return &_class_data_; }

void ValidatorsResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidatorsResponse_Result *>(to)->MergeFrom(
      static_cast<const ValidatorsResponse_Result &>(from));
}


void ValidatorsResponse_Result::MergeFrom(const ValidatorsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.ValidatorsResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_voting_power() != 0) {
    _internal_set_voting_power(from._internal_voting_power());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorsResponse_Result::CopyFrom(const ValidatorsResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.ValidatorsResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorsResponse_Result::IsInitialized() const {
  return true;
}

void ValidatorsResponse_Result::InternalSwap(ValidatorsResponse_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  swap(voting_power_, other->voting_power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorsResponse_Result::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[97]);
}

// ===================================================================

class ValidatorsResponse::_Internal {
 public:
};

ValidatorsResponse::ValidatorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  validators_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.ValidatorsResponse)
}
ValidatorsResponse::ValidatorsResponse(const ValidatorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      validators_(from.validators_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.ValidatorsResponse)
}

inline void ValidatorsResponse::SharedCtor() {
}

ValidatorsResponse::~ValidatorsResponse() {
  // @@protoc_insertion_point(destructor:api_pb.ValidatorsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidatorsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ValidatorsResponse::ArenaDtor(void* object) {
  ValidatorsResponse* _this = reinterpret_cast< ValidatorsResponse* >(object);
  (void)_this;
}
void ValidatorsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidatorsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidatorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.ValidatorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validators_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.ValidatorsResponse.Result validators = 3 [json_name = "validators"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidatorsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.ValidatorsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.ValidatorsResponse.Result validators = 3 [json_name = "validators"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_validators_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_validators(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.ValidatorsResponse)
  return target;
}

size_t ValidatorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.ValidatorsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.ValidatorsResponse.Result validators = 3 [json_name = "validators"];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->validators_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidatorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorsResponse::GetClassData() const { return &_class_data_; }

void ValidatorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidatorsResponse *>(to)->MergeFrom(
      static_cast<const ValidatorsResponse &>(from));
}


void ValidatorsResponse::MergeFrom(const ValidatorsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.ValidatorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validators_.MergeFrom(from.validators_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorsResponse::CopyFrom(const ValidatorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.ValidatorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorsResponse::IsInitialized() const {
  return true;
}

void ValidatorsResponse::InternalSwap(ValidatorsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  validators_.InternalSwap(&other->validators_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[98]);
}

// ===================================================================

class SubscribeRequest::_Internal {
 public:
};

SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor() {
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:api_pb.SubscribeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SubscribeRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SubscribeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SubscribeRequest.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SubscribeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }

void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubscribeRequest *>(to)->MergeFrom(
      static_cast<const SubscribeRequest &>(from));
}


void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, GetArenaForAllocation(),
      &other->query_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[99]);
}

// ===================================================================

class SubscribeResponse_Event::_Internal {
 public:
};

SubscribeResponse_Event::SubscribeResponse_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SubscribeResponse.Event)
}
SubscribeResponse_Event::SubscribeResponse_Event(const SubscribeResponse_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SubscribeResponse.Event)
}

inline void SubscribeResponse_Event::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubscribeResponse_Event::~SubscribeResponse_Event() {
  // @@protoc_insertion_point(destructor:api_pb.SubscribeResponse.Event)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeResponse_Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeResponse_Event::ArenaDtor(void* object) {
  SubscribeResponse_Event* _this = reinterpret_cast< SubscribeResponse_Event* >(object);
  (void)_this;
}
void SubscribeResponse_Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeResponse_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeResponse_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SubscribeResponse.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeResponse_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SubscribeResponse.Event.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string events = 2 [json_name = "events"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_events();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SubscribeResponse.Event.events"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse_Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SubscribeResponse.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SubscribeResponse.Event.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string events = 2 [json_name = "events"];
  for (int i = 0, n = this->_internal_events_size(); i < n; i++) {
    const auto& s = this->_internal_events(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SubscribeResponse.Event.events");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SubscribeResponse.Event)
  return target;
}

size_t SubscribeResponse_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SubscribeResponse.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string events = 2 [json_name = "events"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(events_.size());
  for (int i = 0, n = events_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      events_.Get(i));
  }

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeResponse_Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeResponse_Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeResponse_Event::GetClassData() const { return &_class_data_; }

void SubscribeResponse_Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubscribeResponse_Event *>(to)->MergeFrom(
      static_cast<const SubscribeResponse_Event &>(from));
}


void SubscribeResponse_Event::MergeFrom(const SubscribeResponse_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SubscribeResponse.Event)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeResponse_Event::CopyFrom(const SubscribeResponse_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SubscribeResponse.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse_Event::IsInitialized() const {
  return true;
}

void SubscribeResponse_Event::InternalSwap(SubscribeResponse_Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse_Event::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[100]);
}

// ===================================================================

class SubscribeResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& data(const SubscribeResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
SubscribeResponse::_Internal::data(const SubscribeResponse* msg) {
  return *msg->data_;
}
void SubscribeResponse::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
SubscribeResponse::SubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  events_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.SubscribeResponse)
}

inline void SubscribeResponse::SharedCtor() {
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = nullptr;
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:api_pb.SubscribeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void SubscribeResponse::ArenaDtor(void* object) {
  SubscribeResponse* _this = reinterpret_cast< SubscribeResponse* >(object);
  (void)_this;
}
void SubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  query_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SubscribeResponse.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api_pb.SubscribeResponse.Event events = 3 [json_name = "events"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string query = 1 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SubscribeResponse.query");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_query(), target);
  }

  // .google.protobuf.Struct data = 2 [json_name = "data"];
  if (this->_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // repeated .api_pb.SubscribeResponse.Event events = 3 [json_name = "events"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.SubscribeResponse.Event events = 3 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string query = 1 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // .google.protobuf.Struct data = 2 [json_name = "data"];
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeResponse::GetClassData() const { return &_class_data_; }

void SubscribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SubscribeResponse *>(to)->MergeFrom(
      static_cast<const SubscribeResponse &>(from));
}


void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (from._internal_has_data()) {
    _internal_mutable_data()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, GetArenaForAllocation(),
      &other->query_, other->GetArenaForAllocation()
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[101]);
}

// ===================================================================

class HaltsRequest::_Internal {
 public:
};

HaltsRequest::HaltsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.HaltsRequest)
}
HaltsRequest::HaltsRequest(const HaltsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.HaltsRequest)
}

inline void HaltsRequest::SharedCtor() {
height_ = uint64_t{0u};
}

HaltsRequest::~HaltsRequest() {
  // @@protoc_insertion_point(destructor:api_pb.HaltsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HaltsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HaltsRequest::ArenaDtor(void* object) {
  HaltsRequest* _this = reinterpret_cast< HaltsRequest* >(object);
  (void)_this;
}
void HaltsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HaltsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HaltsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.HaltsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HaltsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HaltsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.HaltsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.HaltsRequest)
  return target;
}

size_t HaltsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.HaltsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HaltsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HaltsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HaltsRequest::GetClassData() const { return &_class_data_; }

void HaltsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HaltsRequest *>(to)->MergeFrom(
      static_cast<const HaltsRequest &>(from));
}


void HaltsRequest::MergeFrom(const HaltsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.HaltsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HaltsRequest::CopyFrom(const HaltsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.HaltsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaltsRequest::IsInitialized() const {
  return true;
}

void HaltsRequest::InternalSwap(HaltsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HaltsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[102]);
}

// ===================================================================

class HaltsResponse::_Internal {
 public:
};

HaltsResponse::HaltsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  public_keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.HaltsResponse)
}
HaltsResponse::HaltsResponse(const HaltsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.HaltsResponse)
}

inline void HaltsResponse::SharedCtor() {
}

HaltsResponse::~HaltsResponse() {
  // @@protoc_insertion_point(destructor:api_pb.HaltsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HaltsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HaltsResponse::ArenaDtor(void* object) {
  HaltsResponse* _this = reinterpret_cast< HaltsResponse* >(object);
  (void)_this;
}
void HaltsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HaltsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HaltsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.HaltsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HaltsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string public_keys = 1 [json_name = "publicKeys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_public_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.HaltsResponse.public_keys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HaltsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.HaltsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string public_keys = 1 [json_name = "publicKeys"];
  for (int i = 0, n = this->_internal_public_keys_size(); i < n; i++) {
    const auto& s = this->_internal_public_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.HaltsResponse.public_keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.HaltsResponse)
  return target;
}

size_t HaltsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.HaltsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string public_keys = 1 [json_name = "publicKeys"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(public_keys_.size());
  for (int i = 0, n = public_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      public_keys_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HaltsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HaltsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HaltsResponse::GetClassData() const { return &_class_data_; }

void HaltsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<HaltsResponse *>(to)->MergeFrom(
      static_cast<const HaltsResponse &>(from));
}


void HaltsResponse::MergeFrom(const HaltsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.HaltsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HaltsResponse::CopyFrom(const HaltsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.HaltsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaltsResponse::IsInitialized() const {
  return true;
}

void HaltsResponse::InternalSwap(HaltsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HaltsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[103]);
}

// ===================================================================

class FrozenRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt64Value& coin_id(const FrozenRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt64Value&
FrozenRequest::_Internal::coin_id(const FrozenRequest* msg) {
  return *msg->coin_id_;
}
void FrozenRequest::clear_coin_id() {
  if (GetArenaForAllocation() == nullptr && coin_id_ != nullptr) {
    delete coin_id_;
  }
  coin_id_ = nullptr;
}
FrozenRequest::FrozenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.FrozenRequest)
}
FrozenRequest::FrozenRequest(const FrozenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin_id()) {
    coin_id_ = new PROTOBUF_NAMESPACE_ID::UInt64Value(*from.coin_id_);
  } else {
    coin_id_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.FrozenRequest)
}

inline void FrozenRequest::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin_id_)) + sizeof(height_));
}

FrozenRequest::~FrozenRequest() {
  // @@protoc_insertion_point(destructor:api_pb.FrozenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrozenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_id_;
}

void FrozenRequest::ArenaDtor(void* object) {
  FrozenRequest* _this = reinterpret_cast< FrozenRequest* >(object);
  (void)_this;
}
void FrozenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrozenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrozenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.FrozenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_id_ != nullptr) {
    delete coin_id_;
  }
  coin_id_ = nullptr;
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrozenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.FrozenRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value coin_id = 2 [json_name = "coinId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrozenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.FrozenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.FrozenRequest.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // .google.protobuf.UInt64Value coin_id = 2 [json_name = "coinId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_has_coin_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coin_id(this), target, stream);
  }

  // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.FrozenRequest)
  return target;
}

size_t FrozenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.FrozenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .google.protobuf.UInt64Value coin_id = 2 [json_name = "coinId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_has_coin_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_id_);
  }

  // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrozenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrozenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrozenRequest::GetClassData() const { return &_class_data_; }

void FrozenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FrozenRequest *>(to)->MergeFrom(
      static_cast<const FrozenRequest &>(from));
}


void FrozenRequest::MergeFrom(const FrozenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.FrozenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_has_coin_id()) {
    _internal_mutable_coin_id()->PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(from._internal_coin_id());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrozenRequest::CopyFrom(const FrozenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.FrozenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrozenRequest::IsInitialized() const {
  return true;
}

void FrozenRequest::InternalSwap(FrozenRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrozenRequest, height_)
      + sizeof(FrozenRequest::height_)
      - PROTOBUF_FIELD_OFFSET(FrozenRequest, coin_id_)>(
          reinterpret_cast<char*>(&coin_id_),
          reinterpret_cast<char*>(&other->coin_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrozenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[104]);
}

// ===================================================================

class FrozenResponse_Frozen::_Internal {
 public:
  static const ::api_pb::Coin& coin(const FrozenResponse_Frozen* msg);
};

const ::api_pb::Coin&
FrozenResponse_Frozen::_Internal::coin(const FrozenResponse_Frozen* msg) {
  return *msg->coin_;
}
FrozenResponse_Frozen::FrozenResponse_Frozen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.FrozenResponse.Frozen)
}
FrozenResponse_Frozen::FrozenResponse_Frozen(const FrozenResponse_Frozen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  candidate_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidate_key().empty()) {
    candidate_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidate_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.FrozenResponse.Frozen)
}

inline void FrozenResponse_Frozen::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
candidate_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(height_));
}

FrozenResponse_Frozen::~FrozenResponse_Frozen() {
  // @@protoc_insertion_point(destructor:api_pb.FrozenResponse.Frozen)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrozenResponse_Frozen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candidate_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void FrozenResponse_Frozen::ArenaDtor(void* object) {
  FrozenResponse_Frozen* _this = reinterpret_cast< FrozenResponse_Frozen* >(object);
  (void)_this;
}
void FrozenResponse_Frozen::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrozenResponse_Frozen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrozenResponse_Frozen::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.FrozenResponse.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  candidate_key_.ClearToEmpty();
  value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrozenResponse_Frozen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.FrozenResponse.Frozen.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string candidate_key = 3 [json_name = "candidateKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_candidate_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.FrozenResponse.Frozen.candidate_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api_pb.Coin coin = 4 [json_name = "coin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 5 [json_name = "value"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.FrozenResponse.Frozen.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrozenResponse_Frozen::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.FrozenResponse.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.FrozenResponse.Frozen.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string candidate_key = 3 [json_name = "candidateKey"];
  if (!this->_internal_candidate_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate_key().data(), static_cast<int>(this->_internal_candidate_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.FrozenResponse.Frozen.candidate_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_candidate_key(), target);
  }

  // .api_pb.Coin coin = 4 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::coin(this), target, stream);
  }

  // string value = 5 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.FrozenResponse.Frozen.value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.FrozenResponse.Frozen)
  return target;
}

size_t FrozenResponse_Frozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.FrozenResponse.Frozen)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string candidate_key = 3 [json_name = "candidateKey"];
  if (!this->_internal_candidate_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate_key());
  }

  // string value = 5 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .api_pb.Coin coin = 4 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrozenResponse_Frozen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrozenResponse_Frozen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrozenResponse_Frozen::GetClassData() const { return &_class_data_; }

void FrozenResponse_Frozen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FrozenResponse_Frozen *>(to)->MergeFrom(
      static_cast<const FrozenResponse_Frozen &>(from));
}


void FrozenResponse_Frozen::MergeFrom(const FrozenResponse_Frozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.FrozenResponse.Frozen)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_candidate_key().empty()) {
    _internal_set_candidate_key(from._internal_candidate_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrozenResponse_Frozen::CopyFrom(const FrozenResponse_Frozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.FrozenResponse.Frozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrozenResponse_Frozen::IsInitialized() const {
  return true;
}

void FrozenResponse_Frozen::InternalSwap(FrozenResponse_Frozen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &candidate_key_, GetArenaForAllocation(),
      &other->candidate_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrozenResponse_Frozen, height_)
      + sizeof(FrozenResponse_Frozen::height_)
      - PROTOBUF_FIELD_OFFSET(FrozenResponse_Frozen, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrozenResponse_Frozen::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[105]);
}

// ===================================================================

class FrozenResponse::_Internal {
 public:
};

FrozenResponse::FrozenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  frozen_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.FrozenResponse)
}
FrozenResponse::FrozenResponse(const FrozenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frozen_(from.frozen_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.FrozenResponse)
}

inline void FrozenResponse::SharedCtor() {
}

FrozenResponse::~FrozenResponse() {
  // @@protoc_insertion_point(destructor:api_pb.FrozenResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FrozenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FrozenResponse::ArenaDtor(void* object) {
  FrozenResponse* _this = reinterpret_cast< FrozenResponse* >(object);
  (void)_this;
}
void FrozenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrozenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FrozenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.FrozenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frozen_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrozenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.FrozenResponse.Frozen frozen = 1 [json_name = "frozen"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frozen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrozenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.FrozenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.FrozenResponse.Frozen frozen = 1 [json_name = "frozen"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frozen_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_frozen(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.FrozenResponse)
  return target;
}

size_t FrozenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.FrozenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.FrozenResponse.Frozen frozen = 1 [json_name = "frozen"];
  total_size += 1UL * this->_internal_frozen_size();
  for (const auto& msg : this->frozen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrozenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FrozenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrozenResponse::GetClassData() const { return &_class_data_; }

void FrozenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<FrozenResponse *>(to)->MergeFrom(
      static_cast<const FrozenResponse &>(from));
}


void FrozenResponse::MergeFrom(const FrozenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.FrozenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frozen_.MergeFrom(from.frozen_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrozenResponse::CopyFrom(const FrozenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.FrozenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrozenResponse::IsInitialized() const {
  return true;
}

void FrozenResponse::InternalSwap(FrozenResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  frozen_.InternalSwap(&other->frozen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrozenResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[106]);
}

// ===================================================================

class WaitListRequest::_Internal {
 public:
};

WaitListRequest::WaitListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.WaitListRequest)
}
WaitListRequest::WaitListRequest(const WaitListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:api_pb.WaitListRequest)
}

inline void WaitListRequest::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
height_ = uint64_t{0u};
}

WaitListRequest::~WaitListRequest() {
  // @@protoc_insertion_point(destructor:api_pb.WaitListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WaitListRequest::ArenaDtor(void* object) {
  WaitListRequest* _this = reinterpret_cast< WaitListRequest* >(object);
  (void)_this;
}
void WaitListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.WaitListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  address_.ClearToEmpty();
  height_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.WaitListRequest.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.WaitListRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.WaitListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.WaitListRequest.public_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.WaitListRequest.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.WaitListRequest)
  return target;
}

size_t WaitListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.WaitListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string public_key = 1 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->_internal_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitListRequest::GetClassData() const { return &_class_data_; }

void WaitListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WaitListRequest *>(to)->MergeFrom(
      static_cast<const WaitListRequest &>(from));
}


void WaitListRequest::MergeFrom(const WaitListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.WaitListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitListRequest::CopyFrom(const WaitListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.WaitListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitListRequest::IsInitialized() const {
  return true;
}

void WaitListRequest::InternalSwap(WaitListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[107]);
}

// ===================================================================

class WaitListResponse_Wait::_Internal {
 public:
  static const ::api_pb::Coin& coin(const WaitListResponse_Wait* msg);
};

const ::api_pb::Coin&
WaitListResponse_Wait::_Internal::coin(const WaitListResponse_Wait* msg) {
  return *msg->coin_;
}
WaitListResponse_Wait::WaitListResponse_Wait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.WaitListResponse.Wait)
}
WaitListResponse_Wait::WaitListResponse_Wait(const WaitListResponse_Wait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_coin()) {
    coin_ = new ::api_pb::Coin(*from.coin_);
  } else {
    coin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.WaitListResponse.Wait)
}

inline void WaitListResponse_Wait::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = nullptr;
}

WaitListResponse_Wait::~WaitListResponse_Wait() {
  // @@protoc_insertion_point(destructor:api_pb.WaitListResponse.Wait)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitListResponse_Wait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coin_;
}

void WaitListResponse_Wait::ArenaDtor(void* object) {
  WaitListResponse_Wait* _this = reinterpret_cast< WaitListResponse_Wait* >(object);
  (void)_this;
}
void WaitListResponse_Wait::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitListResponse_Wait::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitListResponse_Wait::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.WaitListResponse.Wait)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  public_key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitListResponse_Wait::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.Coin coin = 1 [json_name = "coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.WaitListResponse.Wait.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string public_key = 3 [json_name = "publicKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.WaitListResponse.Wait.public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitListResponse_Wait::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.WaitListResponse.Wait)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coin(this), target, stream);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.WaitListResponse.Wait.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string public_key = 3 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_key().data(), static_cast<int>(this->_internal_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.WaitListResponse.Wait.public_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.WaitListResponse.Wait)
  return target;
}

size_t WaitListResponse_Wait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.WaitListResponse.Wait)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string public_key = 3 [json_name = "publicKey"];
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_key());
  }

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  if (this->_internal_has_coin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coin_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitListResponse_Wait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitListResponse_Wait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitListResponse_Wait::GetClassData() const { return &_class_data_; }

void WaitListResponse_Wait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WaitListResponse_Wait *>(to)->MergeFrom(
      static_cast<const WaitListResponse_Wait &>(from));
}


void WaitListResponse_Wait::MergeFrom(const WaitListResponse_Wait& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.WaitListResponse.Wait)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (from._internal_has_coin()) {
    _internal_mutable_coin()->::api_pb::Coin::MergeFrom(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitListResponse_Wait::CopyFrom(const WaitListResponse_Wait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.WaitListResponse.Wait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitListResponse_Wait::IsInitialized() const {
  return true;
}

void WaitListResponse_Wait::InternalSwap(WaitListResponse_Wait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitListResponse_Wait::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[108]);
}

// ===================================================================

class WaitListResponse::_Internal {
 public:
};

WaitListResponse::WaitListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.WaitListResponse)
}
WaitListResponse::WaitListResponse(const WaitListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api_pb.WaitListResponse)
}

inline void WaitListResponse::SharedCtor() {
}

WaitListResponse::~WaitListResponse() {
  // @@protoc_insertion_point(destructor:api_pb.WaitListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WaitListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WaitListResponse::ArenaDtor(void* object) {
  WaitListResponse* _this = reinterpret_cast< WaitListResponse* >(object);
  (void)_this;
}
void WaitListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaitListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WaitListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.WaitListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .api_pb.WaitListResponse.Wait list = 1 [json_name = "list"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaitListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.WaitListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api_pb.WaitListResponse.Wait list = 1 [json_name = "list"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.WaitListResponse)
  return target;
}

size_t WaitListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.WaitListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api_pb.WaitListResponse.Wait list = 1 [json_name = "list"];
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WaitListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitListResponse::GetClassData() const { return &_class_data_; }

void WaitListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<WaitListResponse *>(to)->MergeFrom(
      static_cast<const WaitListResponse &>(from));
}


void WaitListResponse::MergeFrom(const WaitListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.WaitListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitListResponse::CopyFrom(const WaitListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.WaitListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitListResponse::IsInitialized() const {
  return true;
}

void WaitListResponse::InternalSwap(WaitListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_resources_2eproto_getter, &descriptor_table_resources_2eproto_once,
      file_level_metadata_resources_2eproto[109]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api_pb::Coin* Arena::CreateMaybeMessage< ::api_pb::Coin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::Coin >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BlocksRequest* Arena::CreateMaybeMessage< ::api_pb::BlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BlocksResponse* Arena::CreateMaybeMessage< ::api_pb::BlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CommissionVotesRequest* Arena::CreateMaybeMessage< ::api_pb::CommissionVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CommissionVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CommissionVotesResponse_Vote* Arena::CreateMaybeMessage< ::api_pb::CommissionVotesResponse_Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CommissionVotesResponse_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CommissionVotesResponse* Arena::CreateMaybeMessage< ::api_pb::CommissionVotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CommissionVotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::LimitOrderRequest* Arena::CreateMaybeMessage< ::api_pb::LimitOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::LimitOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::LimitOrderResponse* Arena::CreateMaybeMessage< ::api_pb::LimitOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::LimitOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::LimitOrdersOfPoolRequest* Arena::CreateMaybeMessage< ::api_pb::LimitOrdersOfPoolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::LimitOrdersOfPoolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::LimitOrdersOfPoolResponse* Arena::CreateMaybeMessage< ::api_pb::LimitOrdersOfPoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::LimitOrdersOfPoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::LimitOrdersRequest* Arena::CreateMaybeMessage< ::api_pb::LimitOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::LimitOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::LimitOrdersResponse* Arena::CreateMaybeMessage< ::api_pb::LimitOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::LimitOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UpdateVotesRequest* Arena::CreateMaybeMessage< ::api_pb::UpdateVotesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UpdateVotesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UpdateVotesResponse_Vote* Arena::CreateMaybeMessage< ::api_pb::UpdateVotesResponse_Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UpdateVotesResponse_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UpdateVotesResponse* Arena::CreateMaybeMessage< ::api_pb::UpdateVotesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UpdateVotesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::VersionNetworkRequest* Arena::CreateMaybeMessage< ::api_pb::VersionNetworkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::VersionNetworkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::VersionNetworkResponse_Version* Arena::CreateMaybeMessage< ::api_pb::VersionNetworkResponse_Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::VersionNetworkResponse_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::VersionNetworkResponse* Arena::CreateMaybeMessage< ::api_pb::VersionNetworkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::VersionNetworkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::PriceCommissionRequest* Arena::CreateMaybeMessage< ::api_pb::PriceCommissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::PriceCommissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::PriceCommissionResponse* Arena::CreateMaybeMessage< ::api_pb::PriceCommissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::PriceCommissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SwapPoolRequest* Arena::CreateMaybeMessage< ::api_pb::SwapPoolRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SwapPoolRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SwapPoolResponse* Arena::CreateMaybeMessage< ::api_pb::SwapPoolResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SwapPoolResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SwapPoolProviderRequest* Arena::CreateMaybeMessage< ::api_pb::SwapPoolProviderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SwapPoolProviderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NodeInfo_ProtocolVersion* Arena::CreateMaybeMessage< ::api_pb::NodeInfo_ProtocolVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NodeInfo_ProtocolVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NodeInfo_Other* Arena::CreateMaybeMessage< ::api_pb::NodeInfo_Other >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NodeInfo_Other >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NodeInfo* Arena::CreateMaybeMessage< ::api_pb::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* Arena::CreateMaybeMessage< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* Arena::CreateMaybeMessage< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NetInfoResponse_Peer_ConnectionStatus* Arena::CreateMaybeMessage< ::api_pb::NetInfoResponse_Peer_ConnectionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NetInfoResponse_Peer_ConnectionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NetInfoResponse_Peer* Arena::CreateMaybeMessage< ::api_pb::NetInfoResponse_Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NetInfoResponse_Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::NetInfoResponse* Arena::CreateMaybeMessage< ::api_pb::NetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::NetInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::StatusResponse* Arena::CreateMaybeMessage< ::api_pb::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_ConsensusParams_Block* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_ConsensusParams_Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_ConsensusParams_Block >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_ConsensusParams_Evidence* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_ConsensusParams_Evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_ConsensusParams_Evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_ConsensusParams_Validator* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_ConsensusParams_Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_ConsensusParams_Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_ConsensusParams* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_ConsensusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_ConsensusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Validators* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Validators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Validators >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Candidate_Stake* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Candidate_Stake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Candidate_Stake >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Candidate* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Candidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Coin* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Coin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Coin >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_FrozenFund* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_FrozenFund >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_FrozenFund >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Waitlist* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Waitlist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Waitlist >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Account_Balance* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Account_Balance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Account_Balance >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Account_MultisigData* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Account_MultisigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Account_MultisigData >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Account* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Account >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_HaltBlock* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_HaltBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_HaltBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Pool* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Pool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Pool >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_Commission* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_Commission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_Commission >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState_CommissionVote* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState_CommissionVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState_CommissionVote >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse_AppState* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse_AppState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse_AppState >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::GenesisResponse* Arena::CreateMaybeMessage< ::api_pb::GenesisResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::GenesisResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MinGasPriceResponse* Arena::CreateMaybeMessage< ::api_pb::MinGasPriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MinGasPriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BlockRequest* Arena::CreateMaybeMessage< ::api_pb::BlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BlockResponse_Validator* Arena::CreateMaybeMessage< ::api_pb::BlockResponse_Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BlockResponse_Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BlockResponse_Evidence* Arena::CreateMaybeMessage< ::api_pb::BlockResponse_Evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BlockResponse_Evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::BlockResponse* Arena::CreateMaybeMessage< ::api_pb::BlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::BlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MaxGasPriceRequest* Arena::CreateMaybeMessage< ::api_pb::MaxGasPriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MaxGasPriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MaxGasPriceResponse* Arena::CreateMaybeMessage< ::api_pb::MaxGasPriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MaxGasPriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressRequest* Arena::CreateMaybeMessage< ::api_pb::AddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressBalance* Arena::CreateMaybeMessage< ::api_pb::AddressBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressDelegatedBalance* Arena::CreateMaybeMessage< ::api_pb::AddressDelegatedBalance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressDelegatedBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressResponse* Arena::CreateMaybeMessage< ::api_pb::AddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::Multisig* Arena::CreateMaybeMessage< ::api_pb::Multisig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::Multisig >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressesRequest* Arena::CreateMaybeMessage< ::api_pb::AddressesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressesResponse_Result* Arena::CreateMaybeMessage< ::api_pb::AddressesResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressesResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressesResponse_AddressesEntry_DoNotUse* Arena::CreateMaybeMessage< ::api_pb::AddressesResponse_AddressesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressesResponse_AddressesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::AddressesResponse* Arena::CreateMaybeMessage< ::api_pb::AddressesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::AddressesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CandidateRequest* Arena::CreateMaybeMessage< ::api_pb::CandidateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CandidateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CandidateResponse_Stake* Arena::CreateMaybeMessage< ::api_pb::CandidateResponse_Stake >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CandidateResponse_Stake >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CandidateResponse* Arena::CreateMaybeMessage< ::api_pb::CandidateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CandidateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CandidatesRequest* Arena::CreateMaybeMessage< ::api_pb::CandidatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CandidatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CandidatesResponse* Arena::CreateMaybeMessage< ::api_pb::CandidatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CandidatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CoinIdRequest* Arena::CreateMaybeMessage< ::api_pb::CoinIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CoinIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CoinInfoRequest* Arena::CreateMaybeMessage< ::api_pb::CoinInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CoinInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::CoinInfoResponse* Arena::CreateMaybeMessage< ::api_pb::CoinInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::CoinInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SendTransactionResponse* Arena::CreateMaybeMessage< ::api_pb::SendTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SendTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SendTransactionRequest* Arena::CreateMaybeMessage< ::api_pb::SendTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SendTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::TransactionResponse_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::api_pb::TransactionResponse_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::TransactionResponse_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::TransactionResponse* Arena::CreateMaybeMessage< ::api_pb::TransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::TransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::TransactionRequest* Arena::CreateMaybeMessage< ::api_pb::TransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::TransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::TransactionsResponse* Arena::CreateMaybeMessage< ::api_pb::TransactionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::TransactionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::TransactionsRequest* Arena::CreateMaybeMessage< ::api_pb::TransactionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::TransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateCoinBuyRequest* Arena::CreateMaybeMessage< ::api_pb::EstimateCoinBuyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateCoinBuyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateCoinBuyResponse* Arena::CreateMaybeMessage< ::api_pb::EstimateCoinBuyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateCoinBuyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateCoinSellRequest* Arena::CreateMaybeMessage< ::api_pb::EstimateCoinSellRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateCoinSellRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateCoinSellResponse* Arena::CreateMaybeMessage< ::api_pb::EstimateCoinSellResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateCoinSellResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateCoinSellAllRequest* Arena::CreateMaybeMessage< ::api_pb::EstimateCoinSellAllRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateCoinSellAllRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateCoinSellAllResponse* Arena::CreateMaybeMessage< ::api_pb::EstimateCoinSellAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateCoinSellAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateTxCommissionRequest* Arena::CreateMaybeMessage< ::api_pb::EstimateTxCommissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateTxCommissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EstimateTxCommissionResponse* Arena::CreateMaybeMessage< ::api_pb::EstimateTxCommissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EstimateTxCommissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EventsRequest* Arena::CreateMaybeMessage< ::api_pb::EventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::EventsResponse* Arena::CreateMaybeMessage< ::api_pb::EventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::EventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MissedBlocksRequest* Arena::CreateMaybeMessage< ::api_pb::MissedBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MissedBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::MissedBlocksResponse* Arena::CreateMaybeMessage< ::api_pb::MissedBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::MissedBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UnconfirmedTxsResponse* Arena::CreateMaybeMessage< ::api_pb::UnconfirmedTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UnconfirmedTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UnconfirmedTxsRequest* Arena::CreateMaybeMessage< ::api_pb::UnconfirmedTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UnconfirmedTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::ValidatorsRequest* Arena::CreateMaybeMessage< ::api_pb::ValidatorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::ValidatorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::ValidatorsResponse_Result* Arena::CreateMaybeMessage< ::api_pb::ValidatorsResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::ValidatorsResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::ValidatorsResponse* Arena::CreateMaybeMessage< ::api_pb::ValidatorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::ValidatorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SubscribeRequest* Arena::CreateMaybeMessage< ::api_pb::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SubscribeResponse_Event* Arena::CreateMaybeMessage< ::api_pb::SubscribeResponse_Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SubscribeResponse_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SubscribeResponse* Arena::CreateMaybeMessage< ::api_pb::SubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::HaltsRequest* Arena::CreateMaybeMessage< ::api_pb::HaltsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::HaltsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::HaltsResponse* Arena::CreateMaybeMessage< ::api_pb::HaltsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::HaltsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::FrozenRequest* Arena::CreateMaybeMessage< ::api_pb::FrozenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::FrozenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::FrozenResponse_Frozen* Arena::CreateMaybeMessage< ::api_pb::FrozenResponse_Frozen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::FrozenResponse_Frozen >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::FrozenResponse* Arena::CreateMaybeMessage< ::api_pb::FrozenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::FrozenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::WaitListRequest* Arena::CreateMaybeMessage< ::api_pb::WaitListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::WaitListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::WaitListResponse_Wait* Arena::CreateMaybeMessage< ::api_pb::WaitListResponse_Wait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::WaitListResponse_Wait >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::WaitListResponse* Arena::CreateMaybeMessage< ::api_pb::WaitListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::WaitListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
