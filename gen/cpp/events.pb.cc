// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: events.proto

#include "events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace api_pb {
constexpr JailEvent::JailEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : validator_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , jailed_until_(uint64_t{0u}){}
struct JailEventDefaultTypeInternal {
  constexpr JailEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JailEventDefaultTypeInternal() {}
  union {
    JailEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JailEventDefaultTypeInternal _JailEvent_default_instance_;
constexpr RemoveCandidateEvent::RemoveCandidateEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : candidate_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RemoveCandidateEventDefaultTypeInternal {
  constexpr RemoveCandidateEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoveCandidateEventDefaultTypeInternal() {}
  union {
    RemoveCandidateEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoveCandidateEventDefaultTypeInternal _RemoveCandidateEvent_default_instance_;
constexpr RewardEvent::RewardEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validator_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u})
  , for_coin_(uint64_t{0u})
  , role_(0)
{}
struct RewardEventDefaultTypeInternal {
  constexpr RewardEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewardEventDefaultTypeInternal() {}
  union {
    RewardEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewardEventDefaultTypeInternal _RewardEvent_default_instance_;
constexpr SlashEvent::SlashEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validator_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct SlashEventDefaultTypeInternal {
  constexpr SlashEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlashEventDefaultTypeInternal() {}
  union {
    SlashEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlashEventDefaultTypeInternal _SlashEvent_default_instance_;
constexpr UnbondEvent::UnbondEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validator_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct UnbondEventDefaultTypeInternal {
  constexpr UnbondEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnbondEventDefaultTypeInternal() {}
  union {
    UnbondEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnbondEventDefaultTypeInternal _UnbondEvent_default_instance_;
constexpr StakeKickEvent::StakeKickEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , validator_pub_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct StakeKickEventDefaultTypeInternal {
  constexpr StakeKickEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StakeKickEventDefaultTypeInternal() {}
  union {
    StakeKickEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StakeKickEventDefaultTypeInternal _StakeKickEvent_default_instance_;
constexpr UpdateNetworkEvent::UpdateNetworkEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UpdateNetworkEventDefaultTypeInternal {
  constexpr UpdateNetworkEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateNetworkEventDefaultTypeInternal() {}
  union {
    UpdateNetworkEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateNetworkEventDefaultTypeInternal _UpdateNetworkEvent_default_instance_;
constexpr UpdateCommissionsEvent::UpdateCommissionsEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_byte_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , send_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker3_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker4_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker6_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_ticker7_10_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , declare_candidacy_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , delegate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unbond_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , redeem_check_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_halt_block_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_ticker_owner_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_multisig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edit_candidate_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_commission_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vote_update_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_coin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , recreate_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_bancor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_on_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , set_candidate_off_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mint_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , burn_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , create_swap_pool_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_liquidity_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_base_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , multisend_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buy_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sell_all_pool_delta_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , failed_tx_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , remove_limit_order_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coin_(uint64_t{0u}){}
struct UpdateCommissionsEventDefaultTypeInternal {
  constexpr UpdateCommissionsEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateCommissionsEventDefaultTypeInternal() {}
  union {
    UpdateCommissionsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateCommissionsEventDefaultTypeInternal _UpdateCommissionsEvent_default_instance_;
constexpr OrderExpiredEvent::OrderExpiredEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , amount_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , coin_(uint64_t{0u}){}
struct OrderExpiredEventDefaultTypeInternal {
  constexpr OrderExpiredEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrderExpiredEventDefaultTypeInternal() {}
  union {
    OrderExpiredEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrderExpiredEventDefaultTypeInternal _OrderExpiredEvent_default_instance_;
}  // namespace api_pb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_events_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_events_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_events_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_events_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::JailEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::JailEvent, validator_pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::JailEvent, jailed_until_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveCandidateEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RemoveCandidateEvent, candidate_pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, role_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, validator_pub_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::RewardEvent, for_coin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::SlashEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::SlashEvent, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SlashEvent, amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SlashEvent, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::SlashEvent, validator_pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondEvent, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondEvent, amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondEvent, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UnbondEvent, validator_pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::StakeKickEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::StakeKickEvent, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StakeKickEvent, amount_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StakeKickEvent, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::StakeKickEvent, validator_pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateNetworkEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateNetworkEvent, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, payload_byte_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, send_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, buy_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, sell_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, sell_all_bancor_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, buy_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, buy_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, sell_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, sell_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, sell_all_pool_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, sell_all_pool_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_ticker3_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_ticker4_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_ticker5_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_ticker6_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_ticker7_10_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, recreate_coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, recreate_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, declare_candidacy_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, delegate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, unbond_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, redeem_check_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, set_candidate_on_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, set_candidate_off_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, multisend_base_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, multisend_delta_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, edit_candidate_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, set_halt_block_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, edit_ticker_owner_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, edit_multisig_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, edit_candidate_public_key_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, create_swap_pool_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, add_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, remove_liquidity_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, edit_candidate_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, mint_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, burn_token_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, vote_commission_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, vote_update_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, failed_tx_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, add_limit_order_),
  PROTOBUF_FIELD_OFFSET(::api_pb::UpdateCommissionsEvent, remove_limit_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api_pb::OrderExpiredEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api_pb::OrderExpiredEvent, id_),
  PROTOBUF_FIELD_OFFSET(::api_pb::OrderExpiredEvent, address_),
  PROTOBUF_FIELD_OFFSET(::api_pb::OrderExpiredEvent, coin_),
  PROTOBUF_FIELD_OFFSET(::api_pb::OrderExpiredEvent, amount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api_pb::JailEvent)},
  { 7, -1, sizeof(::api_pb::RemoveCandidateEvent)},
  { 13, -1, sizeof(::api_pb::RewardEvent)},
  { 24, -1, sizeof(::api_pb::SlashEvent)},
  { 33, -1, sizeof(::api_pb::UnbondEvent)},
  { 42, -1, sizeof(::api_pb::StakeKickEvent)},
  { 51, -1, sizeof(::api_pb::UpdateNetworkEvent)},
  { 57, -1, sizeof(::api_pb::UpdateCommissionsEvent)},
  { 108, -1, sizeof(::api_pb::OrderExpiredEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_JailEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RemoveCandidateEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_RewardEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_SlashEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UnbondEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_StakeKickEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UpdateNetworkEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_UpdateCommissionsEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api_pb::_OrderExpiredEvent_default_instance_),
};

const char descriptor_table_protodef_events_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014events.proto\022\006api_pb\"Z\n\tJailEvent\022*\n\021v"
  "alidator_pub_key\030\001 \001(\tR\017validatorPubKey\022"
  "!\n\014jailed_until\030\002 \001(\004R\013jailedUntil\"B\n\024Re"
  "moveCandidateEvent\022*\n\021candidate_pub_key\030"
  "\001 \001(\tR\017candidatePubKey\"\207\002\n\013RewardEvent\022,"
  "\n\004role\030\001 \001(\0162\030.api_pb.RewardEvent.RoleR\004"
  "role\022\030\n\007address\030\002 \001(\tR\007address\022\026\n\006amount"
  "\030\003 \001(\tR\006amount\022\022\n\004coin\030\005 \001(\004R\004coin\022*\n\021va"
  "lidator_pub_key\030\004 \001(\tR\017validatorPubKey\022\031"
  "\n\010for_coin\030\006 \001(\004R\007forCoin\"=\n\004Role\022\r\n\tVal"
  "idator\020\000\022\r\n\tDelegator\020\001\022\007\n\003DAO\020\002\022\016\n\nDeve"
  "lopers\020\003\"~\n\nSlashEvent\022\030\n\007address\030\001 \001(\tR"
  "\007address\022\026\n\006amount\030\002 \001(\tR\006amount\022\022\n\004coin"
  "\030\003 \001(\004R\004coin\022*\n\021validator_pub_key\030\004 \001(\tR"
  "\017validatorPubKey\"\177\n\013UnbondEvent\022\030\n\007addre"
  "ss\030\001 \001(\tR\007address\022\026\n\006amount\030\002 \001(\tR\006amoun"
  "t\022\022\n\004coin\030\003 \001(\004R\004coin\022*\n\021validator_pub_k"
  "ey\030\004 \001(\tR\017validatorPubKey\"\202\001\n\016StakeKickE"
  "vent\022\030\n\007address\030\001 \001(\tR\007address\022\026\n\006amount"
  "\030\002 \001(\tR\006amount\022\022\n\004coin\030\003 \001(\004R\004coin\022*\n\021va"
  "lidator_pub_key\030\004 \001(\tR\017validatorPubKey\"."
  "\n\022UpdateNetworkEvent\022\030\n\007version\030\001 \001(\tR\007v"
  "ersion\"\364\r\n\026UpdateCommissionsEvent\022\022\n\004coi"
  "n\030\003 \001(\004R\004coin\022!\n\014payload_byte\030\004 \001(\tR\013pay"
  "loadByte\022\022\n\004send\030\005 \001(\tR\004send\022\035\n\nbuy_banc"
  "or\030& \001(\tR\tbuyBancor\022\037\n\013sell_bancor\030\' \001(\t"
  "R\nsellBancor\022&\n\017sell_all_bancor\030( \001(\tR\rs"
  "ellAllBancor\022\"\n\rbuy_pool_base\030) \001(\tR\013buy"
  "PoolBase\022$\n\016buy_pool_delta\0305 \001(\tR\014buyPoo"
  "lDelta\022$\n\016sell_pool_base\030* \001(\tR\014sellPool"
  "Base\022&\n\017sell_pool_delta\0306 \001(\tR\rsellPoolD"
  "elta\022+\n\022sell_all_pool_base\030+ \001(\tR\017sellAl"
  "lPoolBase\022-\n\023sell_all_pool_delta\0307 \001(\tR\020"
  "sellAllPoolDelta\022%\n\016create_ticker3\030\007 \001(\t"
  "R\rcreateTicker3\022%\n\016create_ticker4\030\010 \001(\tR"
  "\rcreateTicker4\022%\n\016create_ticker5\030\t \001(\tR\r"
  "createTicker5\022%\n\016create_ticker6\030\n \001(\tR\rc"
  "reateTicker6\022*\n\021create_ticker7_10\030\013 \001(\tR"
  "\017createTicker710\022\037\n\013create_coin\030\" \001(\tR\nc"
  "reateCoin\022!\n\014create_token\030# \001(\tR\013createT"
  "oken\022#\n\rrecreate_coin\030$ \001(\tR\014recreateCoi"
  "n\022%\n\016recreate_token\030% \001(\tR\rrecreateToken"
  "\022+\n\021declare_candidacy\030\r \001(\tR\020declareCand"
  "idacy\022\032\n\010delegate\030\016 \001(\tR\010delegate\022\026\n\006unb"
  "ond\030\017 \001(\tR\006unbond\022!\n\014redeem_check\030\020 \001(\tR"
  "\013redeemCheck\022(\n\020set_candidate_on\030, \001(\tR\016"
  "setCandidateOn\022*\n\021set_candidate_off\030- \001("
  "\tR\017setCandidateOff\022\'\n\017create_multisig\030\022 "
  "\001(\tR\016createMultisig\022%\n\016multisend_base\0303 "
  "\001(\tR\rmultisendBase\022\'\n\017multisend_delta\0304 "
  "\001(\tR\016multisendDelta\022%\n\016edit_candidate\030\024 "
  "\001(\tR\reditCandidate\022$\n\016set_halt_block\030\025 \001"
  "(\tR\014setHaltBlock\022*\n\021edit_ticker_owner\030\026 "
  "\001(\tR\017editTickerOwner\022#\n\redit_multisig\030\027 "
  "\001(\tR\014editMultisig\0229\n\031edit_candidate_publ"
  "ic_key\030\031 \001(\tR\026editCandidatePublicKey\022(\n\020"
  "create_swap_pool\0300 \001(\tR\016createSwapPool\022#"
  "\n\radd_liquidity\0301 \001(\tR\014addLiquidity\022)\n\020r"
  "emove_liquidity\0302 \001(\tR\017removeLiquidity\022:"
  "\n\031edit_candidate_commission\030\034 \001(\tR\027editC"
  "andidateCommission\022\035\n\nmint_token\030. \001(\tR\t"
  "mintToken\022\035\n\nburn_token\030/ \001(\tR\tburnToken"
  "\022\'\n\017vote_commission\030\037 \001(\tR\016voteCommissio"
  "n\022\037\n\013vote_update\030  \001(\tR\nvoteUpdate\022\033\n\tfa"
  "iled_tx\0308 \001(\tR\010failedTx\022&\n\017add_limit_ord"
  "er\0309 \001(\tR\raddLimitOrder\022,\n\022remove_limit_"
  "order\030: \001(\tR\020removeLimitOrder\"i\n\021OrderEx"
  "piredEvent\022\016\n\002id\030\001 \001(\004R\002id\022\030\n\007address\030\002 "
  "\001(\tR\007address\022\022\n\004coin\030\003 \001(\004R\004coin\022\026\n\006amou"
  "nt\030\004 \001(\tR\006amountBW\n\023network.minter.grpcP"
  "\001Z5github.com/MinterTeam/node-grpc-gatew"
  "ay/gen/go;api_pb\272\002\006Minterb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_events_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_events_2eproto = {
  false, false, 2873, descriptor_table_protodef_events_2eproto, "events.proto", 
  &descriptor_table_events_2eproto_once, nullptr, 0, 9,
  schemas, file_default_instances, TableStruct_events_2eproto::offsets,
  file_level_metadata_events_2eproto, file_level_enum_descriptors_events_2eproto, file_level_service_descriptors_events_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_events_2eproto_getter() {
  return &descriptor_table_events_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_events_2eproto(&descriptor_table_events_2eproto);
namespace api_pb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardEvent_Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_events_2eproto);
  return file_level_enum_descriptors_events_2eproto[0];
}
bool RewardEvent_Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RewardEvent_Role RewardEvent::Validator;
constexpr RewardEvent_Role RewardEvent::Delegator;
constexpr RewardEvent_Role RewardEvent::DAO;
constexpr RewardEvent_Role RewardEvent::Developers;
constexpr RewardEvent_Role RewardEvent::Role_MIN;
constexpr RewardEvent_Role RewardEvent::Role_MAX;
constexpr int RewardEvent::Role_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class JailEvent::_Internal {
 public:
};

JailEvent::JailEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.JailEvent)
}
JailEvent::JailEvent(const JailEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_pub_key().empty()) {
    validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pub_key(), 
      GetArenaForAllocation());
  }
  jailed_until_ = from.jailed_until_;
  // @@protoc_insertion_point(copy_constructor:api_pb.JailEvent)
}

inline void JailEvent::SharedCtor() {
validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
jailed_until_ = uint64_t{0u};
}

JailEvent::~JailEvent() {
  // @@protoc_insertion_point(destructor:api_pb.JailEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JailEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  validator_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JailEvent::ArenaDtor(void* object) {
  JailEvent* _this = reinterpret_cast< JailEvent* >(object);
  (void)_this;
}
void JailEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JailEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JailEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.JailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validator_pub_key_.ClearToEmpty();
  jailed_until_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JailEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string validator_pub_key = 1 [json_name = "validatorPubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_validator_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.JailEvent.validator_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 jailed_until = 2 [json_name = "jailedUntil"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          jailed_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JailEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.JailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string validator_pub_key = 1 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pub_key().data(), static_cast<int>(this->_internal_validator_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.JailEvent.validator_pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_validator_pub_key(), target);
  }

  // uint64 jailed_until = 2 [json_name = "jailedUntil"];
  if (this->_internal_jailed_until() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_jailed_until(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.JailEvent)
  return target;
}

size_t JailEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.JailEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string validator_pub_key = 1 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pub_key());
  }

  // uint64 jailed_until = 2 [json_name = "jailedUntil"];
  if (this->_internal_jailed_until() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_jailed_until());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JailEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JailEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JailEvent::GetClassData() const { return &_class_data_; }

void JailEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<JailEvent *>(to)->MergeFrom(
      static_cast<const JailEvent &>(from));
}


void JailEvent::MergeFrom(const JailEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.JailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_pub_key().empty()) {
    _internal_set_validator_pub_key(from._internal_validator_pub_key());
  }
  if (from._internal_jailed_until() != 0) {
    _internal_set_jailed_until(from._internal_jailed_until());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JailEvent::CopyFrom(const JailEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.JailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JailEvent::IsInitialized() const {
  return true;
}

void JailEvent::InternalSwap(JailEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_pub_key_, GetArenaForAllocation(),
      &other->validator_pub_key_, other->GetArenaForAllocation()
  );
  swap(jailed_until_, other->jailed_until_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JailEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[0]);
}

// ===================================================================

class RemoveCandidateEvent::_Internal {
 public:
};

RemoveCandidateEvent::RemoveCandidateEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RemoveCandidateEvent)
}
RemoveCandidateEvent::RemoveCandidateEvent(const RemoveCandidateEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  candidate_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_candidate_pub_key().empty()) {
    candidate_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_candidate_pub_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.RemoveCandidateEvent)
}

inline void RemoveCandidateEvent::SharedCtor() {
candidate_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveCandidateEvent::~RemoveCandidateEvent() {
  // @@protoc_insertion_point(destructor:api_pb.RemoveCandidateEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoveCandidateEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  candidate_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveCandidateEvent::ArenaDtor(void* object) {
  RemoveCandidateEvent* _this = reinterpret_cast< RemoveCandidateEvent* >(object);
  (void)_this;
}
void RemoveCandidateEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveCandidateEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveCandidateEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RemoveCandidateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_pub_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveCandidateEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string candidate_pub_key = 1 [json_name = "candidatePubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_candidate_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RemoveCandidateEvent.candidate_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveCandidateEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RemoveCandidateEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate_pub_key = 1 [json_name = "candidatePubKey"];
  if (!this->_internal_candidate_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate_pub_key().data(), static_cast<int>(this->_internal_candidate_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RemoveCandidateEvent.candidate_pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidate_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RemoveCandidateEvent)
  return target;
}

size_t RemoveCandidateEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RemoveCandidateEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate_pub_key = 1 [json_name = "candidatePubKey"];
  if (!this->_internal_candidate_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate_pub_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveCandidateEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveCandidateEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveCandidateEvent::GetClassData() const { return &_class_data_; }

void RemoveCandidateEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RemoveCandidateEvent *>(to)->MergeFrom(
      static_cast<const RemoveCandidateEvent &>(from));
}


void RemoveCandidateEvent::MergeFrom(const RemoveCandidateEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RemoveCandidateEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidate_pub_key().empty()) {
    _internal_set_candidate_pub_key(from._internal_candidate_pub_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveCandidateEvent::CopyFrom(const RemoveCandidateEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RemoveCandidateEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCandidateEvent::IsInitialized() const {
  return true;
}

void RemoveCandidateEvent::InternalSwap(RemoveCandidateEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &candidate_pub_key_, GetArenaForAllocation(),
      &other->candidate_pub_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveCandidateEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[1]);
}

// ===================================================================

class RewardEvent::_Internal {
 public:
};

RewardEvent::RewardEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.RewardEvent)
}
RewardEvent::RewardEvent(const RewardEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_pub_key().empty()) {
    validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pub_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&coin_, &from.coin_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:api_pb.RewardEvent)
}

inline void RewardEvent::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&coin_)) + sizeof(role_));
}

RewardEvent::~RewardEvent() {
  // @@protoc_insertion_point(destructor:api_pb.RewardEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RewardEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RewardEvent::ArenaDtor(void* object) {
  RewardEvent* _this = reinterpret_cast< RewardEvent* >(object);
  (void)_this;
}
void RewardEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewardEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.RewardEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_.ClearToEmpty();
  validator_pub_key_.ClearToEmpty();
  ::memset(&coin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&coin_)) + sizeof(role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewardEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .api_pb.RewardEvent.Role role = 1 [json_name = "role"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::api_pb::RewardEvent_Role>(val));
        } else goto handle_unusual;
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RewardEvent.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RewardEvent.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_pub_key = 4 [json_name = "validatorPubKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.RewardEvent.validator_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 5 [json_name = "coin"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 for_coin = 6 [json_name = "forCoin"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          for_coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.RewardEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api_pb.RewardEvent.Role role = 1 [json_name = "role"];
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_role(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RewardEvent.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string amount = 3 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RewardEvent.amount");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_amount(), target);
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pub_key().data(), static_cast<int>(this->_internal_validator_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.RewardEvent.validator_pub_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator_pub_key(), target);
  }

  // uint64 coin = 5 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_coin(), target);
  }

  // uint64 for_coin = 6 [json_name = "forCoin"];
  if (this->_internal_for_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_for_coin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.RewardEvent)
  return target;
}

size_t RewardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.RewardEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string amount = 3 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pub_key());
  }

  // uint64 coin = 5 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  // uint64 for_coin = 6 [json_name = "forCoin"];
  if (this->_internal_for_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_for_coin());
  }

  // .api_pb.RewardEvent.Role role = 1 [json_name = "role"];
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewardEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RewardEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewardEvent::GetClassData() const { return &_class_data_; }

void RewardEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RewardEvent *>(to)->MergeFrom(
      static_cast<const RewardEvent &>(from));
}


void RewardEvent::MergeFrom(const RewardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.RewardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_validator_pub_key().empty()) {
    _internal_set_validator_pub_key(from._internal_validator_pub_key());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  if (from._internal_for_coin() != 0) {
    _internal_set_for_coin(from._internal_for_coin());
  }
  if (from._internal_role() != 0) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewardEvent::CopyFrom(const RewardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.RewardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardEvent::IsInitialized() const {
  return true;
}

void RewardEvent::InternalSwap(RewardEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, GetArenaForAllocation(),
      &other->amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_pub_key_, GetArenaForAllocation(),
      &other->validator_pub_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewardEvent, role_)
      + sizeof(RewardEvent::role_)
      - PROTOBUF_FIELD_OFFSET(RewardEvent, coin_)>(
          reinterpret_cast<char*>(&coin_),
          reinterpret_cast<char*>(&other->coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[2]);
}

// ===================================================================

class SlashEvent::_Internal {
 public:
};

SlashEvent::SlashEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.SlashEvent)
}
SlashEvent::SlashEvent(const SlashEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_pub_key().empty()) {
    validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pub_key(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.SlashEvent)
}

inline void SlashEvent::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

SlashEvent::~SlashEvent() {
  // @@protoc_insertion_point(destructor:api_pb.SlashEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlashEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SlashEvent::ArenaDtor(void* object) {
  SlashEvent* _this = reinterpret_cast< SlashEvent* >(object);
  (void)_this;
}
void SlashEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlashEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlashEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.SlashEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_.ClearToEmpty();
  validator_pub_key_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlashEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SlashEvent.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SlashEvent.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_pub_key = 4 [json_name = "validatorPubKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.SlashEvent.validator_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlashEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.SlashEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SlashEvent.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SlashEvent.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pub_key().data(), static_cast<int>(this->_internal_validator_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.SlashEvent.validator_pub_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.SlashEvent)
  return target;
}

size_t SlashEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.SlashEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pub_key());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlashEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlashEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlashEvent::GetClassData() const { return &_class_data_; }

void SlashEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<SlashEvent *>(to)->MergeFrom(
      static_cast<const SlashEvent &>(from));
}


void SlashEvent::MergeFrom(const SlashEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.SlashEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_validator_pub_key().empty()) {
    _internal_set_validator_pub_key(from._internal_validator_pub_key());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlashEvent::CopyFrom(const SlashEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.SlashEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlashEvent::IsInitialized() const {
  return true;
}

void SlashEvent::InternalSwap(SlashEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, GetArenaForAllocation(),
      &other->amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_pub_key_, GetArenaForAllocation(),
      &other->validator_pub_key_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlashEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[3]);
}

// ===================================================================

class UnbondEvent::_Internal {
 public:
};

UnbondEvent::UnbondEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UnbondEvent)
}
UnbondEvent::UnbondEvent(const UnbondEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_pub_key().empty()) {
    validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pub_key(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.UnbondEvent)
}

inline void UnbondEvent::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

UnbondEvent::~UnbondEvent() {
  // @@protoc_insertion_point(destructor:api_pb.UnbondEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnbondEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnbondEvent::ArenaDtor(void* object) {
  UnbondEvent* _this = reinterpret_cast< UnbondEvent* >(object);
  (void)_this;
}
void UnbondEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnbondEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnbondEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UnbondEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_.ClearToEmpty();
  validator_pub_key_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnbondEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UnbondEvent.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UnbondEvent.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_pub_key = 4 [json_name = "validatorPubKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UnbondEvent.validator_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnbondEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UnbondEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UnbondEvent.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UnbondEvent.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pub_key().data(), static_cast<int>(this->_internal_validator_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UnbondEvent.validator_pub_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UnbondEvent)
  return target;
}

size_t UnbondEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UnbondEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pub_key());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnbondEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnbondEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnbondEvent::GetClassData() const { return &_class_data_; }

void UnbondEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UnbondEvent *>(to)->MergeFrom(
      static_cast<const UnbondEvent &>(from));
}


void UnbondEvent::MergeFrom(const UnbondEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UnbondEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_validator_pub_key().empty()) {
    _internal_set_validator_pub_key(from._internal_validator_pub_key());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnbondEvent::CopyFrom(const UnbondEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UnbondEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnbondEvent::IsInitialized() const {
  return true;
}

void UnbondEvent::InternalSwap(UnbondEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, GetArenaForAllocation(),
      &other->amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_pub_key_, GetArenaForAllocation(),
      &other->validator_pub_key_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnbondEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[4]);
}

// ===================================================================

class StakeKickEvent::_Internal {
 public:
};

StakeKickEvent::StakeKickEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.StakeKickEvent)
}
StakeKickEvent::StakeKickEvent(const StakeKickEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_validator_pub_key().empty()) {
    validator_pub_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_validator_pub_key(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.StakeKickEvent)
}

inline void StakeKickEvent::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
validator_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

StakeKickEvent::~StakeKickEvent() {
  // @@protoc_insertion_point(destructor:api_pb.StakeKickEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StakeKickEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  validator_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StakeKickEvent::ArenaDtor(void* object) {
  StakeKickEvent* _this = reinterpret_cast< StakeKickEvent* >(object);
  (void)_this;
}
void StakeKickEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StakeKickEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StakeKickEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.StakeKickEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_.ClearToEmpty();
  validator_pub_key_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeKickEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StakeKickEvent.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StakeKickEvent.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string validator_pub_key = 4 [json_name = "validatorPubKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_validator_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.StakeKickEvent.validator_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StakeKickEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.StakeKickEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StakeKickEvent.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StakeKickEvent.amount");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_amount(), target);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_validator_pub_key().data(), static_cast<int>(this->_internal_validator_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.StakeKickEvent.validator_pub_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_validator_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.StakeKickEvent)
  return target;
}

size_t StakeKickEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.StakeKickEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // string validator_pub_key = 4 [json_name = "validatorPubKey"];
  if (!this->_internal_validator_pub_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_validator_pub_key());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StakeKickEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StakeKickEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StakeKickEvent::GetClassData() const { return &_class_data_; }

void StakeKickEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StakeKickEvent *>(to)->MergeFrom(
      static_cast<const StakeKickEvent &>(from));
}


void StakeKickEvent::MergeFrom(const StakeKickEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.StakeKickEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (!from._internal_validator_pub_key().empty()) {
    _internal_set_validator_pub_key(from._internal_validator_pub_key());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StakeKickEvent::CopyFrom(const StakeKickEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.StakeKickEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeKickEvent::IsInitialized() const {
  return true;
}

void StakeKickEvent::InternalSwap(StakeKickEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, GetArenaForAllocation(),
      &other->amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &validator_pub_key_, GetArenaForAllocation(),
      &other->validator_pub_key_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeKickEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[5]);
}

// ===================================================================

class UpdateNetworkEvent::_Internal {
 public:
};

UpdateNetworkEvent::UpdateNetworkEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UpdateNetworkEvent)
}
UpdateNetworkEvent::UpdateNetworkEvent(const UpdateNetworkEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:api_pb.UpdateNetworkEvent)
}

inline void UpdateNetworkEvent::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateNetworkEvent::~UpdateNetworkEvent() {
  // @@protoc_insertion_point(destructor:api_pb.UpdateNetworkEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateNetworkEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateNetworkEvent::ArenaDtor(void* object) {
  UpdateNetworkEvent* _this = reinterpret_cast< UpdateNetworkEvent* >(object);
  (void)_this;
}
void UpdateNetworkEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNetworkEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateNetworkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UpdateNetworkEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetworkEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateNetworkEvent.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateNetworkEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UpdateNetworkEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateNetworkEvent.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UpdateNetworkEvent)
  return target;
}

size_t UpdateNetworkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UpdateNetworkEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateNetworkEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateNetworkEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateNetworkEvent::GetClassData() const { return &_class_data_; }

void UpdateNetworkEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateNetworkEvent *>(to)->MergeFrom(
      static_cast<const UpdateNetworkEvent &>(from));
}


void UpdateNetworkEvent::MergeFrom(const UpdateNetworkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UpdateNetworkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateNetworkEvent::CopyFrom(const UpdateNetworkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UpdateNetworkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetworkEvent::IsInitialized() const {
  return true;
}

void UpdateNetworkEvent::InternalSwap(UpdateNetworkEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, GetArenaForAllocation(),
      &other->version_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetworkEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[6]);
}

// ===================================================================

class UpdateCommissionsEvent::_Internal {
 public:
};

UpdateCommissionsEvent::UpdateCommissionsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.UpdateCommissionsEvent)
}
UpdateCommissionsEvent::UpdateCommissionsEvent(const UpdateCommissionsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payload_byte().empty()) {
    payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload_byte(), 
      GetArenaForAllocation());
  }
  send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_send().empty()) {
    send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_send(), 
      GetArenaForAllocation());
  }
  create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker3().empty()) {
    create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker3(), 
      GetArenaForAllocation());
  }
  create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker4().empty()) {
    create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker4(), 
      GetArenaForAllocation());
  }
  create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker5().empty()) {
    create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker5(), 
      GetArenaForAllocation());
  }
  create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker6().empty()) {
    create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker6(), 
      GetArenaForAllocation());
  }
  create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_ticker7_10().empty()) {
    create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_ticker7_10(), 
      GetArenaForAllocation());
  }
  declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_declare_candidacy().empty()) {
    declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_declare_candidacy(), 
      GetArenaForAllocation());
  }
  delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delegate().empty()) {
    delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_delegate(), 
      GetArenaForAllocation());
  }
  unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_unbond().empty()) {
    unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unbond(), 
      GetArenaForAllocation());
  }
  redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_redeem_check().empty()) {
    redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_redeem_check(), 
      GetArenaForAllocation());
  }
  create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_multisig().empty()) {
    create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate().empty()) {
    edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate(), 
      GetArenaForAllocation());
  }
  set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_halt_block().empty()) {
    set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_halt_block(), 
      GetArenaForAllocation());
  }
  edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_ticker_owner().empty()) {
    edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_ticker_owner(), 
      GetArenaForAllocation());
  }
  edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_multisig().empty()) {
    edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_multisig(), 
      GetArenaForAllocation());
  }
  edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_public_key().empty()) {
    edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_public_key(), 
      GetArenaForAllocation());
  }
  edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edit_candidate_commission().empty()) {
    edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_edit_candidate_commission(), 
      GetArenaForAllocation());
  }
  vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_commission().empty()) {
    vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_commission(), 
      GetArenaForAllocation());
  }
  vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vote_update().empty()) {
    vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vote_update(), 
      GetArenaForAllocation());
  }
  create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_coin().empty()) {
    create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_coin(), 
      GetArenaForAllocation());
  }
  create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_token().empty()) {
    create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_token(), 
      GetArenaForAllocation());
  }
  recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_coin().empty()) {
    recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_coin(), 
      GetArenaForAllocation());
  }
  recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_recreate_token().empty()) {
    recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_recreate_token(), 
      GetArenaForAllocation());
  }
  buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_bancor().empty()) {
    buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_bancor(), 
      GetArenaForAllocation());
  }
  sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_bancor().empty()) {
    sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_bancor(), 
      GetArenaForAllocation());
  }
  sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_bancor().empty()) {
    sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_bancor(), 
      GetArenaForAllocation());
  }
  buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_base().empty()) {
    buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_base(), 
      GetArenaForAllocation());
  }
  sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_base().empty()) {
    sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_base(), 
      GetArenaForAllocation());
  }
  sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_base().empty()) {
    sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_base(), 
      GetArenaForAllocation());
  }
  set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_on().empty()) {
    set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_on(), 
      GetArenaForAllocation());
  }
  set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_candidate_off().empty()) {
    set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_set_candidate_off(), 
      GetArenaForAllocation());
  }
  mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mint_token().empty()) {
    mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mint_token(), 
      GetArenaForAllocation());
  }
  burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_burn_token().empty()) {
    burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_burn_token(), 
      GetArenaForAllocation());
  }
  create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_swap_pool().empty()) {
    create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_create_swap_pool(), 
      GetArenaForAllocation());
  }
  add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_liquidity().empty()) {
    add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_liquidity(), 
      GetArenaForAllocation());
  }
  remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_liquidity().empty()) {
    remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_liquidity(), 
      GetArenaForAllocation());
  }
  multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_base().empty()) {
    multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_base(), 
      GetArenaForAllocation());
  }
  multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multisend_delta().empty()) {
    multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_multisend_delta(), 
      GetArenaForAllocation());
  }
  buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buy_pool_delta().empty()) {
    buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buy_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_pool_delta().empty()) {
    sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_pool_delta(), 
      GetArenaForAllocation());
  }
  sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sell_all_pool_delta().empty()) {
    sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sell_all_pool_delta(), 
      GetArenaForAllocation());
  }
  failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failed_tx().empty()) {
    failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_failed_tx(), 
      GetArenaForAllocation());
  }
  add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_add_limit_order().empty()) {
    add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_add_limit_order(), 
      GetArenaForAllocation());
  }
  remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remove_limit_order().empty()) {
    remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_remove_limit_order(), 
      GetArenaForAllocation());
  }
  coin_ = from.coin_;
  // @@protoc_insertion_point(copy_constructor:api_pb.UpdateCommissionsEvent)
}

inline void UpdateCommissionsEvent::SharedCtor() {
payload_byte_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
send_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_ticker7_10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
declare_candidacy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
delegate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unbond_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
redeem_check_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_halt_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_ticker_owner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_multisig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
edit_candidate_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vote_update_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_coin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
recreate_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_bancor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_on_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
set_candidate_off_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mint_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
burn_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
create_swap_pool_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_liquidity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
multisend_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buy_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sell_all_pool_delta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
failed_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
add_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
remove_limit_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coin_ = uint64_t{0u};
}

UpdateCommissionsEvent::~UpdateCommissionsEvent() {
  // @@protoc_insertion_point(destructor:api_pb.UpdateCommissionsEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateCommissionsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_byte_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  send_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_ticker7_10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  declare_candidacy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unbond_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  redeem_check_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_halt_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_ticker_owner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_multisig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  edit_candidate_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_commission_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_update_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_coin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recreate_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_bancor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_on_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_candidate_off_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mint_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  burn_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_swap_pool_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_liquidity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  multisend_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buy_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sell_all_pool_delta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failed_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remove_limit_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateCommissionsEvent::ArenaDtor(void* object) {
  UpdateCommissionsEvent* _this = reinterpret_cast< UpdateCommissionsEvent* >(object);
  (void)_this;
}
void UpdateCommissionsEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCommissionsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateCommissionsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.UpdateCommissionsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_byte_.ClearToEmpty();
  send_.ClearToEmpty();
  create_ticker3_.ClearToEmpty();
  create_ticker4_.ClearToEmpty();
  create_ticker5_.ClearToEmpty();
  create_ticker6_.ClearToEmpty();
  create_ticker7_10_.ClearToEmpty();
  declare_candidacy_.ClearToEmpty();
  delegate_.ClearToEmpty();
  unbond_.ClearToEmpty();
  redeem_check_.ClearToEmpty();
  create_multisig_.ClearToEmpty();
  edit_candidate_.ClearToEmpty();
  set_halt_block_.ClearToEmpty();
  edit_ticker_owner_.ClearToEmpty();
  edit_multisig_.ClearToEmpty();
  edit_candidate_public_key_.ClearToEmpty();
  edit_candidate_commission_.ClearToEmpty();
  vote_commission_.ClearToEmpty();
  vote_update_.ClearToEmpty();
  create_coin_.ClearToEmpty();
  create_token_.ClearToEmpty();
  recreate_coin_.ClearToEmpty();
  recreate_token_.ClearToEmpty();
  buy_bancor_.ClearToEmpty();
  sell_bancor_.ClearToEmpty();
  sell_all_bancor_.ClearToEmpty();
  buy_pool_base_.ClearToEmpty();
  sell_pool_base_.ClearToEmpty();
  sell_all_pool_base_.ClearToEmpty();
  set_candidate_on_.ClearToEmpty();
  set_candidate_off_.ClearToEmpty();
  mint_token_.ClearToEmpty();
  burn_token_.ClearToEmpty();
  create_swap_pool_.ClearToEmpty();
  add_liquidity_.ClearToEmpty();
  remove_liquidity_.ClearToEmpty();
  multisend_base_.ClearToEmpty();
  multisend_delta_.ClearToEmpty();
  buy_pool_delta_.ClearToEmpty();
  sell_pool_delta_.ClearToEmpty();
  sell_all_pool_delta_.ClearToEmpty();
  failed_tx_.ClearToEmpty();
  add_limit_order_.ClearToEmpty();
  remove_limit_order_.ClearToEmpty();
  coin_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCommissionsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payload_byte = 4 [json_name = "payloadByte"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payload_byte();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.payload_byte"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string send = 5 [json_name = "send"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_send();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.send"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker3 = 7 [json_name = "createTicker3"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_create_ticker3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_ticker3"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker4 = 8 [json_name = "createTicker4"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_create_ticker4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_ticker4"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker5 = 9 [json_name = "createTicker5"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_create_ticker5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_ticker5"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker6 = 10 [json_name = "createTicker6"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_create_ticker6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_ticker6"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_ticker7_10 = 11 [json_name = "createTicker710"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_create_ticker7_10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_ticker7_10"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string declare_candidacy = 13 [json_name = "declareCandidacy"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_declare_candidacy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.declare_candidacy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delegate = 14 [json_name = "delegate"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_delegate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.delegate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unbond = 15 [json_name = "unbond"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_unbond();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.unbond"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string redeem_check = 16 [json_name = "redeemCheck"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_redeem_check();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.redeem_check"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_multisig = 18 [json_name = "createMultisig"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_create_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate = 20 [json_name = "editCandidate"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_edit_candidate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.edit_candidate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_halt_block = 21 [json_name = "setHaltBlock"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_set_halt_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.set_halt_block"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_edit_ticker_owner();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.edit_ticker_owner"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_multisig = 23 [json_name = "editMultisig"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_edit_multisig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.edit_multisig"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_edit_candidate_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.edit_candidate_public_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_edit_candidate_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.edit_candidate_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_commission = 31 [json_name = "voteCommission"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_vote_commission();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.vote_commission"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string vote_update = 32 [json_name = "voteUpdate"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_vote_update();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.vote_update"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_coin = 34 [json_name = "createCoin"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_create_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_token = 35 [json_name = "createToken"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_create_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_coin = 36 [json_name = "recreateCoin"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_recreate_coin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.recreate_coin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string recreate_token = 37 [json_name = "recreateToken"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_recreate_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.recreate_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_bancor = 38 [json_name = "buyBancor"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buy_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.buy_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_bancor = 39 [json_name = "sellBancor"];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_sell_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.sell_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sell_all_bancor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.sell_all_bancor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_base = 41 [json_name = "buyPoolBase"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_buy_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.buy_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_base = 42 [json_name = "sellPoolBase"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sell_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.sell_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_sell_all_pool_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.sell_all_pool_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_on = 44 [json_name = "setCandidateOn"];
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_set_candidate_on();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.set_candidate_on"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string set_candidate_off = 45 [json_name = "setCandidateOff"];
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_set_candidate_off();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.set_candidate_off"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mint_token = 46 [json_name = "mintToken"];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_mint_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.mint_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string burn_token = 47 [json_name = "burnToken"];
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_burn_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.burn_token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string create_swap_pool = 48 [json_name = "createSwapPool"];
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_create_swap_pool();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.create_swap_pool"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_liquidity = 49 [json_name = "addLiquidity"];
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_add_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.add_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_liquidity = 50 [json_name = "removeLiquidity"];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_remove_liquidity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.remove_liquidity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_base = 51 [json_name = "multisendBase"];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_multisend_base();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.multisend_base"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string multisend_delta = 52 [json_name = "multisendDelta"];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_multisend_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.multisend_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_buy_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.buy_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sell_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.sell_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_sell_all_pool_delta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.sell_all_pool_delta"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string failed_tx = 56 [json_name = "failedTx"];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_failed_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.failed_tx"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string add_limit_order = 57 [json_name = "addLimitOrder"];
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_add_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.add_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_remove_limit_order();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.UpdateCommissionsEvent.remove_limit_order"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCommissionsEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.UpdateCommissionsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_byte().data(), static_cast<int>(this->_internal_payload_byte().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.payload_byte");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload_byte(), target);
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_send().data(), static_cast<int>(this->_internal_send().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.send");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_send(), target);
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker3().data(), static_cast<int>(this->_internal_create_ticker3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_ticker3");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_create_ticker3(), target);
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker4().data(), static_cast<int>(this->_internal_create_ticker4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_ticker4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_create_ticker4(), target);
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker5().data(), static_cast<int>(this->_internal_create_ticker5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_ticker5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_create_ticker5(), target);
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker6().data(), static_cast<int>(this->_internal_create_ticker6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_ticker6");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_create_ticker6(), target);
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_ticker7_10().data(), static_cast<int>(this->_internal_create_ticker7_10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_ticker7_10");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_create_ticker7_10(), target);
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_declare_candidacy().data(), static_cast<int>(this->_internal_declare_candidacy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.declare_candidacy");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_declare_candidacy(), target);
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delegate().data(), static_cast<int>(this->_internal_delegate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.delegate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_delegate(), target);
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_unbond().data(), static_cast<int>(this->_internal_unbond().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.unbond");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_unbond(), target);
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redeem_check().data(), static_cast<int>(this->_internal_redeem_check().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.redeem_check");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_redeem_check(), target);
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_multisig().data(), static_cast<int>(this->_internal_create_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_multisig");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_create_multisig(), target);
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate().data(), static_cast<int>(this->_internal_edit_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.edit_candidate");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_edit_candidate(), target);
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_halt_block().data(), static_cast<int>(this->_internal_set_halt_block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.set_halt_block");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_set_halt_block(), target);
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_ticker_owner().data(), static_cast<int>(this->_internal_edit_ticker_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.edit_ticker_owner");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_edit_ticker_owner(), target);
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_multisig().data(), static_cast<int>(this->_internal_edit_multisig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.edit_multisig");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_edit_multisig(), target);
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_public_key().data(), static_cast<int>(this->_internal_edit_candidate_public_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.edit_candidate_public_key");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_edit_candidate_public_key(), target);
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edit_candidate_commission().data(), static_cast<int>(this->_internal_edit_candidate_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.edit_candidate_commission");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_edit_candidate_commission(), target);
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_commission().data(), static_cast<int>(this->_internal_vote_commission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.vote_commission");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_vote_commission(), target);
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vote_update().data(), static_cast<int>(this->_internal_vote_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.vote_update");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_vote_update(), target);
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_coin().data(), static_cast<int>(this->_internal_create_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_coin");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_create_coin(), target);
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_token().data(), static_cast<int>(this->_internal_create_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_token");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_create_token(), target);
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_coin().data(), static_cast<int>(this->_internal_recreate_coin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.recreate_coin");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_recreate_coin(), target);
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recreate_token().data(), static_cast<int>(this->_internal_recreate_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.recreate_token");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_recreate_token(), target);
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_bancor().data(), static_cast<int>(this->_internal_buy_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.buy_bancor");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_buy_bancor(), target);
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_bancor().data(), static_cast<int>(this->_internal_sell_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.sell_bancor");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_sell_bancor(), target);
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_bancor().data(), static_cast<int>(this->_internal_sell_all_bancor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.sell_all_bancor");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_sell_all_bancor(), target);
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_base().data(), static_cast<int>(this->_internal_buy_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.buy_pool_base");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_buy_pool_base(), target);
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_base().data(), static_cast<int>(this->_internal_sell_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.sell_pool_base");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_sell_pool_base(), target);
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_base().data(), static_cast<int>(this->_internal_sell_all_pool_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.sell_all_pool_base");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_sell_all_pool_base(), target);
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_on().data(), static_cast<int>(this->_internal_set_candidate_on().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.set_candidate_on");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_set_candidate_on(), target);
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_set_candidate_off().data(), static_cast<int>(this->_internal_set_candidate_off().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.set_candidate_off");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_set_candidate_off(), target);
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mint_token().data(), static_cast<int>(this->_internal_mint_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.mint_token");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_mint_token(), target);
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_burn_token().data(), static_cast<int>(this->_internal_burn_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.burn_token");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_burn_token(), target);
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_swap_pool().data(), static_cast<int>(this->_internal_create_swap_pool().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.create_swap_pool");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_create_swap_pool(), target);
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_liquidity().data(), static_cast<int>(this->_internal_add_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.add_liquidity");
    target = stream->WriteStringMaybeAliased(
        49, this->_internal_add_liquidity(), target);
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_liquidity().data(), static_cast<int>(this->_internal_remove_liquidity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.remove_liquidity");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_remove_liquidity(), target);
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_base().data(), static_cast<int>(this->_internal_multisend_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.multisend_base");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_multisend_base(), target);
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_multisend_delta().data(), static_cast<int>(this->_internal_multisend_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.multisend_delta");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_multisend_delta(), target);
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buy_pool_delta().data(), static_cast<int>(this->_internal_buy_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.buy_pool_delta");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_buy_pool_delta(), target);
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_pool_delta().data(), static_cast<int>(this->_internal_sell_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.sell_pool_delta");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_sell_pool_delta(), target);
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sell_all_pool_delta().data(), static_cast<int>(this->_internal_sell_all_pool_delta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.sell_all_pool_delta");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_sell_all_pool_delta(), target);
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failed_tx().data(), static_cast<int>(this->_internal_failed_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.failed_tx");
    target = stream->WriteStringMaybeAliased(
        56, this->_internal_failed_tx(), target);
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_add_limit_order().data(), static_cast<int>(this->_internal_add_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.add_limit_order");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_add_limit_order(), target);
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remove_limit_order().data(), static_cast<int>(this->_internal_remove_limit_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.UpdateCommissionsEvent.remove_limit_order");
    target = stream->WriteStringMaybeAliased(
        58, this->_internal_remove_limit_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.UpdateCommissionsEvent)
  return target;
}

size_t UpdateCommissionsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.UpdateCommissionsEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload_byte = 4 [json_name = "payloadByte"];
  if (!this->_internal_payload_byte().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_byte());
  }

  // string send = 5 [json_name = "send"];
  if (!this->_internal_send().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_send());
  }

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  if (!this->_internal_create_ticker3().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker3());
  }

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  if (!this->_internal_create_ticker4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker4());
  }

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  if (!this->_internal_create_ticker5().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker5());
  }

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  if (!this->_internal_create_ticker6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker6());
  }

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  if (!this->_internal_create_ticker7_10().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_ticker7_10());
  }

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  if (!this->_internal_declare_candidacy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_declare_candidacy());
  }

  // string delegate = 14 [json_name = "delegate"];
  if (!this->_internal_delegate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delegate());
  }

  // string unbond = 15 [json_name = "unbond"];
  if (!this->_internal_unbond().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unbond());
  }

  // string redeem_check = 16 [json_name = "redeemCheck"];
  if (!this->_internal_redeem_check().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redeem_check());
  }

  // string create_multisig = 18 [json_name = "createMultisig"];
  if (!this->_internal_create_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_multisig());
  }

  // string edit_candidate = 20 [json_name = "editCandidate"];
  if (!this->_internal_edit_candidate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate());
  }

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  if (!this->_internal_set_halt_block().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_halt_block());
  }

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  if (!this->_internal_edit_ticker_owner().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_ticker_owner());
  }

  // string edit_multisig = 23 [json_name = "editMultisig"];
  if (!this->_internal_edit_multisig().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_multisig());
  }

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  if (!this->_internal_edit_candidate_public_key().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_public_key());
  }

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  if (!this->_internal_edit_candidate_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edit_candidate_commission());
  }

  // string vote_commission = 31 [json_name = "voteCommission"];
  if (!this->_internal_vote_commission().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_commission());
  }

  // string vote_update = 32 [json_name = "voteUpdate"];
  if (!this->_internal_vote_update().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vote_update());
  }

  // string create_coin = 34 [json_name = "createCoin"];
  if (!this->_internal_create_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_coin());
  }

  // string create_token = 35 [json_name = "createToken"];
  if (!this->_internal_create_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_token());
  }

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  if (!this->_internal_recreate_coin().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_coin());
  }

  // string recreate_token = 37 [json_name = "recreateToken"];
  if (!this->_internal_recreate_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recreate_token());
  }

  // string buy_bancor = 38 [json_name = "buyBancor"];
  if (!this->_internal_buy_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_bancor());
  }

  // string sell_bancor = 39 [json_name = "sellBancor"];
  if (!this->_internal_sell_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_bancor());
  }

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  if (!this->_internal_sell_all_bancor().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_bancor());
  }

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  if (!this->_internal_buy_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_base());
  }

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  if (!this->_internal_sell_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_base());
  }

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  if (!this->_internal_sell_all_pool_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_base());
  }

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  if (!this->_internal_set_candidate_on().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_on());
  }

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  if (!this->_internal_set_candidate_off().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_set_candidate_off());
  }

  // string mint_token = 46 [json_name = "mintToken"];
  if (!this->_internal_mint_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mint_token());
  }

  // string burn_token = 47 [json_name = "burnToken"];
  if (!this->_internal_burn_token().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_burn_token());
  }

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  if (!this->_internal_create_swap_pool().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_swap_pool());
  }

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  if (!this->_internal_add_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_liquidity());
  }

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  if (!this->_internal_remove_liquidity().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_liquidity());
  }

  // string multisend_base = 51 [json_name = "multisendBase"];
  if (!this->_internal_multisend_base().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_base());
  }

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  if (!this->_internal_multisend_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_multisend_delta());
  }

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  if (!this->_internal_buy_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buy_pool_delta());
  }

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  if (!this->_internal_sell_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_pool_delta());
  }

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  if (!this->_internal_sell_all_pool_delta().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sell_all_pool_delta());
  }

  // string failed_tx = 56 [json_name = "failedTx"];
  if (!this->_internal_failed_tx().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failed_tx());
  }

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  if (!this->_internal_add_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_add_limit_order());
  }

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  if (!this->_internal_remove_limit_order().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remove_limit_order());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateCommissionsEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateCommissionsEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateCommissionsEvent::GetClassData() const { return &_class_data_; }

void UpdateCommissionsEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateCommissionsEvent *>(to)->MergeFrom(
      static_cast<const UpdateCommissionsEvent &>(from));
}


void UpdateCommissionsEvent::MergeFrom(const UpdateCommissionsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.UpdateCommissionsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload_byte().empty()) {
    _internal_set_payload_byte(from._internal_payload_byte());
  }
  if (!from._internal_send().empty()) {
    _internal_set_send(from._internal_send());
  }
  if (!from._internal_create_ticker3().empty()) {
    _internal_set_create_ticker3(from._internal_create_ticker3());
  }
  if (!from._internal_create_ticker4().empty()) {
    _internal_set_create_ticker4(from._internal_create_ticker4());
  }
  if (!from._internal_create_ticker5().empty()) {
    _internal_set_create_ticker5(from._internal_create_ticker5());
  }
  if (!from._internal_create_ticker6().empty()) {
    _internal_set_create_ticker6(from._internal_create_ticker6());
  }
  if (!from._internal_create_ticker7_10().empty()) {
    _internal_set_create_ticker7_10(from._internal_create_ticker7_10());
  }
  if (!from._internal_declare_candidacy().empty()) {
    _internal_set_declare_candidacy(from._internal_declare_candidacy());
  }
  if (!from._internal_delegate().empty()) {
    _internal_set_delegate(from._internal_delegate());
  }
  if (!from._internal_unbond().empty()) {
    _internal_set_unbond(from._internal_unbond());
  }
  if (!from._internal_redeem_check().empty()) {
    _internal_set_redeem_check(from._internal_redeem_check());
  }
  if (!from._internal_create_multisig().empty()) {
    _internal_set_create_multisig(from._internal_create_multisig());
  }
  if (!from._internal_edit_candidate().empty()) {
    _internal_set_edit_candidate(from._internal_edit_candidate());
  }
  if (!from._internal_set_halt_block().empty()) {
    _internal_set_set_halt_block(from._internal_set_halt_block());
  }
  if (!from._internal_edit_ticker_owner().empty()) {
    _internal_set_edit_ticker_owner(from._internal_edit_ticker_owner());
  }
  if (!from._internal_edit_multisig().empty()) {
    _internal_set_edit_multisig(from._internal_edit_multisig());
  }
  if (!from._internal_edit_candidate_public_key().empty()) {
    _internal_set_edit_candidate_public_key(from._internal_edit_candidate_public_key());
  }
  if (!from._internal_edit_candidate_commission().empty()) {
    _internal_set_edit_candidate_commission(from._internal_edit_candidate_commission());
  }
  if (!from._internal_vote_commission().empty()) {
    _internal_set_vote_commission(from._internal_vote_commission());
  }
  if (!from._internal_vote_update().empty()) {
    _internal_set_vote_update(from._internal_vote_update());
  }
  if (!from._internal_create_coin().empty()) {
    _internal_set_create_coin(from._internal_create_coin());
  }
  if (!from._internal_create_token().empty()) {
    _internal_set_create_token(from._internal_create_token());
  }
  if (!from._internal_recreate_coin().empty()) {
    _internal_set_recreate_coin(from._internal_recreate_coin());
  }
  if (!from._internal_recreate_token().empty()) {
    _internal_set_recreate_token(from._internal_recreate_token());
  }
  if (!from._internal_buy_bancor().empty()) {
    _internal_set_buy_bancor(from._internal_buy_bancor());
  }
  if (!from._internal_sell_bancor().empty()) {
    _internal_set_sell_bancor(from._internal_sell_bancor());
  }
  if (!from._internal_sell_all_bancor().empty()) {
    _internal_set_sell_all_bancor(from._internal_sell_all_bancor());
  }
  if (!from._internal_buy_pool_base().empty()) {
    _internal_set_buy_pool_base(from._internal_buy_pool_base());
  }
  if (!from._internal_sell_pool_base().empty()) {
    _internal_set_sell_pool_base(from._internal_sell_pool_base());
  }
  if (!from._internal_sell_all_pool_base().empty()) {
    _internal_set_sell_all_pool_base(from._internal_sell_all_pool_base());
  }
  if (!from._internal_set_candidate_on().empty()) {
    _internal_set_set_candidate_on(from._internal_set_candidate_on());
  }
  if (!from._internal_set_candidate_off().empty()) {
    _internal_set_set_candidate_off(from._internal_set_candidate_off());
  }
  if (!from._internal_mint_token().empty()) {
    _internal_set_mint_token(from._internal_mint_token());
  }
  if (!from._internal_burn_token().empty()) {
    _internal_set_burn_token(from._internal_burn_token());
  }
  if (!from._internal_create_swap_pool().empty()) {
    _internal_set_create_swap_pool(from._internal_create_swap_pool());
  }
  if (!from._internal_add_liquidity().empty()) {
    _internal_set_add_liquidity(from._internal_add_liquidity());
  }
  if (!from._internal_remove_liquidity().empty()) {
    _internal_set_remove_liquidity(from._internal_remove_liquidity());
  }
  if (!from._internal_multisend_base().empty()) {
    _internal_set_multisend_base(from._internal_multisend_base());
  }
  if (!from._internal_multisend_delta().empty()) {
    _internal_set_multisend_delta(from._internal_multisend_delta());
  }
  if (!from._internal_buy_pool_delta().empty()) {
    _internal_set_buy_pool_delta(from._internal_buy_pool_delta());
  }
  if (!from._internal_sell_pool_delta().empty()) {
    _internal_set_sell_pool_delta(from._internal_sell_pool_delta());
  }
  if (!from._internal_sell_all_pool_delta().empty()) {
    _internal_set_sell_all_pool_delta(from._internal_sell_all_pool_delta());
  }
  if (!from._internal_failed_tx().empty()) {
    _internal_set_failed_tx(from._internal_failed_tx());
  }
  if (!from._internal_add_limit_order().empty()) {
    _internal_set_add_limit_order(from._internal_add_limit_order());
  }
  if (!from._internal_remove_limit_order().empty()) {
    _internal_set_remove_limit_order(from._internal_remove_limit_order());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateCommissionsEvent::CopyFrom(const UpdateCommissionsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.UpdateCommissionsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCommissionsEvent::IsInitialized() const {
  return true;
}

void UpdateCommissionsEvent::InternalSwap(UpdateCommissionsEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_byte_, GetArenaForAllocation(),
      &other->payload_byte_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &send_, GetArenaForAllocation(),
      &other->send_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker3_, GetArenaForAllocation(),
      &other->create_ticker3_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker4_, GetArenaForAllocation(),
      &other->create_ticker4_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker5_, GetArenaForAllocation(),
      &other->create_ticker5_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker6_, GetArenaForAllocation(),
      &other->create_ticker6_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_ticker7_10_, GetArenaForAllocation(),
      &other->create_ticker7_10_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &declare_candidacy_, GetArenaForAllocation(),
      &other->declare_candidacy_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &delegate_, GetArenaForAllocation(),
      &other->delegate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unbond_, GetArenaForAllocation(),
      &other->unbond_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &redeem_check_, GetArenaForAllocation(),
      &other->redeem_check_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_multisig_, GetArenaForAllocation(),
      &other->create_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_, GetArenaForAllocation(),
      &other->edit_candidate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_halt_block_, GetArenaForAllocation(),
      &other->set_halt_block_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_ticker_owner_, GetArenaForAllocation(),
      &other->edit_ticker_owner_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_multisig_, GetArenaForAllocation(),
      &other->edit_multisig_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_public_key_, GetArenaForAllocation(),
      &other->edit_candidate_public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &edit_candidate_commission_, GetArenaForAllocation(),
      &other->edit_candidate_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_commission_, GetArenaForAllocation(),
      &other->vote_commission_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vote_update_, GetArenaForAllocation(),
      &other->vote_update_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_coin_, GetArenaForAllocation(),
      &other->create_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_token_, GetArenaForAllocation(),
      &other->create_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_coin_, GetArenaForAllocation(),
      &other->recreate_coin_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &recreate_token_, GetArenaForAllocation(),
      &other->recreate_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_bancor_, GetArenaForAllocation(),
      &other->buy_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_bancor_, GetArenaForAllocation(),
      &other->sell_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_bancor_, GetArenaForAllocation(),
      &other->sell_all_bancor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_base_, GetArenaForAllocation(),
      &other->buy_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_base_, GetArenaForAllocation(),
      &other->sell_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_base_, GetArenaForAllocation(),
      &other->sell_all_pool_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_on_, GetArenaForAllocation(),
      &other->set_candidate_on_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &set_candidate_off_, GetArenaForAllocation(),
      &other->set_candidate_off_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mint_token_, GetArenaForAllocation(),
      &other->mint_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &burn_token_, GetArenaForAllocation(),
      &other->burn_token_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &create_swap_pool_, GetArenaForAllocation(),
      &other->create_swap_pool_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_liquidity_, GetArenaForAllocation(),
      &other->add_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_liquidity_, GetArenaForAllocation(),
      &other->remove_liquidity_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_base_, GetArenaForAllocation(),
      &other->multisend_base_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &multisend_delta_, GetArenaForAllocation(),
      &other->multisend_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buy_pool_delta_, GetArenaForAllocation(),
      &other->buy_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_pool_delta_, GetArenaForAllocation(),
      &other->sell_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sell_all_pool_delta_, GetArenaForAllocation(),
      &other->sell_all_pool_delta_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &failed_tx_, GetArenaForAllocation(),
      &other->failed_tx_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &add_limit_order_, GetArenaForAllocation(),
      &other->add_limit_order_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &remove_limit_order_, GetArenaForAllocation(),
      &other->remove_limit_order_, other->GetArenaForAllocation()
  );
  swap(coin_, other->coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCommissionsEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[7]);
}

// ===================================================================

class OrderExpiredEvent::_Internal {
 public:
};

OrderExpiredEvent::OrderExpiredEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:api_pb.OrderExpiredEvent)
}
OrderExpiredEvent::OrderExpiredEvent(const OrderExpiredEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_amount().empty()) {
    amount_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_amount(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(coin_));
  // @@protoc_insertion_point(copy_constructor:api_pb.OrderExpiredEvent)
}

inline void OrderExpiredEvent::SharedCtor() {
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
amount_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&id_)) + sizeof(coin_));
}

OrderExpiredEvent::~OrderExpiredEvent() {
  // @@protoc_insertion_point(destructor:api_pb.OrderExpiredEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrderExpiredEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OrderExpiredEvent::ArenaDtor(void* object) {
  OrderExpiredEvent* _this = reinterpret_cast< OrderExpiredEvent* >(object);
  (void)_this;
}
void OrderExpiredEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrderExpiredEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrderExpiredEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:api_pb.OrderExpiredEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty();
  amount_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&id_)) + sizeof(coin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderExpiredEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.OrderExpiredEvent.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 coin = 3 [json_name = "coin"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string amount = 4 [json_name = "amount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_amount();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api_pb.OrderExpiredEvent.amount"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderExpiredEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api_pb.OrderExpiredEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.OrderExpiredEvent.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_coin(), target);
  }

  // string amount = 4 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_amount().data(), static_cast<int>(this->_internal_amount().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api_pb.OrderExpiredEvent.amount");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api_pb.OrderExpiredEvent)
  return target;
}

size_t OrderExpiredEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api_pb.OrderExpiredEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string amount = 4 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_amount());
  }

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint64 coin = 3 [json_name = "coin"];
  if (this->_internal_coin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderExpiredEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrderExpiredEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderExpiredEvent::GetClassData() const { return &_class_data_; }

void OrderExpiredEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<OrderExpiredEvent *>(to)->MergeFrom(
      static_cast<const OrderExpiredEvent &>(from));
}


void OrderExpiredEvent::MergeFrom(const OrderExpiredEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api_pb.OrderExpiredEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_amount().empty()) {
    _internal_set_amount(from._internal_amount());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_coin() != 0) {
    _internal_set_coin(from._internal_coin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderExpiredEvent::CopyFrom(const OrderExpiredEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api_pb.OrderExpiredEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderExpiredEvent::IsInitialized() const {
  return true;
}

void OrderExpiredEvent::InternalSwap(OrderExpiredEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, GetArenaForAllocation(),
      &other->address_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &amount_, GetArenaForAllocation(),
      &other->amount_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderExpiredEvent, coin_)
      + sizeof(OrderExpiredEvent::coin_)
      - PROTOBUF_FIELD_OFFSET(OrderExpiredEvent, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderExpiredEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_events_2eproto_getter, &descriptor_table_events_2eproto_once,
      file_level_metadata_events_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api_pb::JailEvent* Arena::CreateMaybeMessage< ::api_pb::JailEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::JailEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RemoveCandidateEvent* Arena::CreateMaybeMessage< ::api_pb::RemoveCandidateEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RemoveCandidateEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::RewardEvent* Arena::CreateMaybeMessage< ::api_pb::RewardEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::RewardEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::SlashEvent* Arena::CreateMaybeMessage< ::api_pb::SlashEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::SlashEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UnbondEvent* Arena::CreateMaybeMessage< ::api_pb::UnbondEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UnbondEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::StakeKickEvent* Arena::CreateMaybeMessage< ::api_pb::StakeKickEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::StakeKickEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UpdateNetworkEvent* Arena::CreateMaybeMessage< ::api_pb::UpdateNetworkEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UpdateNetworkEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::UpdateCommissionsEvent* Arena::CreateMaybeMessage< ::api_pb::UpdateCommissionsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::UpdateCommissionsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::api_pb::OrderExpiredEvent* Arena::CreateMaybeMessage< ::api_pb::OrderExpiredEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api_pb::OrderExpiredEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
