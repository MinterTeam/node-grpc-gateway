// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_resources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_resources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_resources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_resources_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[110]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_resources_2eproto;
namespace api_pb {
class AddressBalance;
struct AddressBalanceDefaultTypeInternal;
extern AddressBalanceDefaultTypeInternal _AddressBalance_default_instance_;
class AddressDelegatedBalance;
struct AddressDelegatedBalanceDefaultTypeInternal;
extern AddressDelegatedBalanceDefaultTypeInternal _AddressDelegatedBalance_default_instance_;
class AddressRequest;
struct AddressRequestDefaultTypeInternal;
extern AddressRequestDefaultTypeInternal _AddressRequest_default_instance_;
class AddressResponse;
struct AddressResponseDefaultTypeInternal;
extern AddressResponseDefaultTypeInternal _AddressResponse_default_instance_;
class AddressesRequest;
struct AddressesRequestDefaultTypeInternal;
extern AddressesRequestDefaultTypeInternal _AddressesRequest_default_instance_;
class AddressesResponse;
struct AddressesResponseDefaultTypeInternal;
extern AddressesResponseDefaultTypeInternal _AddressesResponse_default_instance_;
class AddressesResponse_AddressesEntry_DoNotUse;
struct AddressesResponse_AddressesEntry_DoNotUseDefaultTypeInternal;
extern AddressesResponse_AddressesEntry_DoNotUseDefaultTypeInternal _AddressesResponse_AddressesEntry_DoNotUse_default_instance_;
class AddressesResponse_Result;
struct AddressesResponse_ResultDefaultTypeInternal;
extern AddressesResponse_ResultDefaultTypeInternal _AddressesResponse_Result_default_instance_;
class BlockRequest;
struct BlockRequestDefaultTypeInternal;
extern BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
class BlockResponse;
struct BlockResponseDefaultTypeInternal;
extern BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
class BlockResponse_Evidence;
struct BlockResponse_EvidenceDefaultTypeInternal;
extern BlockResponse_EvidenceDefaultTypeInternal _BlockResponse_Evidence_default_instance_;
class BlockResponse_Validator;
struct BlockResponse_ValidatorDefaultTypeInternal;
extern BlockResponse_ValidatorDefaultTypeInternal _BlockResponse_Validator_default_instance_;
class BlocksRequest;
struct BlocksRequestDefaultTypeInternal;
extern BlocksRequestDefaultTypeInternal _BlocksRequest_default_instance_;
class BlocksResponse;
struct BlocksResponseDefaultTypeInternal;
extern BlocksResponseDefaultTypeInternal _BlocksResponse_default_instance_;
class CandidateRequest;
struct CandidateRequestDefaultTypeInternal;
extern CandidateRequestDefaultTypeInternal _CandidateRequest_default_instance_;
class CandidateResponse;
struct CandidateResponseDefaultTypeInternal;
extern CandidateResponseDefaultTypeInternal _CandidateResponse_default_instance_;
class CandidateResponse_Stake;
struct CandidateResponse_StakeDefaultTypeInternal;
extern CandidateResponse_StakeDefaultTypeInternal _CandidateResponse_Stake_default_instance_;
class CandidatesRequest;
struct CandidatesRequestDefaultTypeInternal;
extern CandidatesRequestDefaultTypeInternal _CandidatesRequest_default_instance_;
class CandidatesResponse;
struct CandidatesResponseDefaultTypeInternal;
extern CandidatesResponseDefaultTypeInternal _CandidatesResponse_default_instance_;
class Coin;
struct CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class CoinIdRequest;
struct CoinIdRequestDefaultTypeInternal;
extern CoinIdRequestDefaultTypeInternal _CoinIdRequest_default_instance_;
class CoinInfoRequest;
struct CoinInfoRequestDefaultTypeInternal;
extern CoinInfoRequestDefaultTypeInternal _CoinInfoRequest_default_instance_;
class CoinInfoResponse;
struct CoinInfoResponseDefaultTypeInternal;
extern CoinInfoResponseDefaultTypeInternal _CoinInfoResponse_default_instance_;
class CommissionVotesRequest;
struct CommissionVotesRequestDefaultTypeInternal;
extern CommissionVotesRequestDefaultTypeInternal _CommissionVotesRequest_default_instance_;
class CommissionVotesResponse;
struct CommissionVotesResponseDefaultTypeInternal;
extern CommissionVotesResponseDefaultTypeInternal _CommissionVotesResponse_default_instance_;
class CommissionVotesResponse_Vote;
struct CommissionVotesResponse_VoteDefaultTypeInternal;
extern CommissionVotesResponse_VoteDefaultTypeInternal _CommissionVotesResponse_Vote_default_instance_;
class EstimateCoinBuyRequest;
struct EstimateCoinBuyRequestDefaultTypeInternal;
extern EstimateCoinBuyRequestDefaultTypeInternal _EstimateCoinBuyRequest_default_instance_;
class EstimateCoinBuyResponse;
struct EstimateCoinBuyResponseDefaultTypeInternal;
extern EstimateCoinBuyResponseDefaultTypeInternal _EstimateCoinBuyResponse_default_instance_;
class EstimateCoinSellAllRequest;
struct EstimateCoinSellAllRequestDefaultTypeInternal;
extern EstimateCoinSellAllRequestDefaultTypeInternal _EstimateCoinSellAllRequest_default_instance_;
class EstimateCoinSellAllResponse;
struct EstimateCoinSellAllResponseDefaultTypeInternal;
extern EstimateCoinSellAllResponseDefaultTypeInternal _EstimateCoinSellAllResponse_default_instance_;
class EstimateCoinSellRequest;
struct EstimateCoinSellRequestDefaultTypeInternal;
extern EstimateCoinSellRequestDefaultTypeInternal _EstimateCoinSellRequest_default_instance_;
class EstimateCoinSellResponse;
struct EstimateCoinSellResponseDefaultTypeInternal;
extern EstimateCoinSellResponseDefaultTypeInternal _EstimateCoinSellResponse_default_instance_;
class EstimateTxCommissionRequest;
struct EstimateTxCommissionRequestDefaultTypeInternal;
extern EstimateTxCommissionRequestDefaultTypeInternal _EstimateTxCommissionRequest_default_instance_;
class EstimateTxCommissionResponse;
struct EstimateTxCommissionResponseDefaultTypeInternal;
extern EstimateTxCommissionResponseDefaultTypeInternal _EstimateTxCommissionResponse_default_instance_;
class EventsRequest;
struct EventsRequestDefaultTypeInternal;
extern EventsRequestDefaultTypeInternal _EventsRequest_default_instance_;
class EventsResponse;
struct EventsResponseDefaultTypeInternal;
extern EventsResponseDefaultTypeInternal _EventsResponse_default_instance_;
class FrozenRequest;
struct FrozenRequestDefaultTypeInternal;
extern FrozenRequestDefaultTypeInternal _FrozenRequest_default_instance_;
class FrozenResponse;
struct FrozenResponseDefaultTypeInternal;
extern FrozenResponseDefaultTypeInternal _FrozenResponse_default_instance_;
class FrozenResponse_Frozen;
struct FrozenResponse_FrozenDefaultTypeInternal;
extern FrozenResponse_FrozenDefaultTypeInternal _FrozenResponse_Frozen_default_instance_;
class GenesisResponse;
struct GenesisResponseDefaultTypeInternal;
extern GenesisResponseDefaultTypeInternal _GenesisResponse_default_instance_;
class GenesisResponse_AppState;
struct GenesisResponse_AppStateDefaultTypeInternal;
extern GenesisResponse_AppStateDefaultTypeInternal _GenesisResponse_AppState_default_instance_;
class GenesisResponse_AppState_Account;
struct GenesisResponse_AppState_AccountDefaultTypeInternal;
extern GenesisResponse_AppState_AccountDefaultTypeInternal _GenesisResponse_AppState_Account_default_instance_;
class GenesisResponse_AppState_Account_Balance;
struct GenesisResponse_AppState_Account_BalanceDefaultTypeInternal;
extern GenesisResponse_AppState_Account_BalanceDefaultTypeInternal _GenesisResponse_AppState_Account_Balance_default_instance_;
class GenesisResponse_AppState_Account_MultisigData;
struct GenesisResponse_AppState_Account_MultisigDataDefaultTypeInternal;
extern GenesisResponse_AppState_Account_MultisigDataDefaultTypeInternal _GenesisResponse_AppState_Account_MultisigData_default_instance_;
class GenesisResponse_AppState_Candidate;
struct GenesisResponse_AppState_CandidateDefaultTypeInternal;
extern GenesisResponse_AppState_CandidateDefaultTypeInternal _GenesisResponse_AppState_Candidate_default_instance_;
class GenesisResponse_AppState_Candidate_Stake;
struct GenesisResponse_AppState_Candidate_StakeDefaultTypeInternal;
extern GenesisResponse_AppState_Candidate_StakeDefaultTypeInternal _GenesisResponse_AppState_Candidate_Stake_default_instance_;
class GenesisResponse_AppState_Coin;
struct GenesisResponse_AppState_CoinDefaultTypeInternal;
extern GenesisResponse_AppState_CoinDefaultTypeInternal _GenesisResponse_AppState_Coin_default_instance_;
class GenesisResponse_AppState_Commission;
struct GenesisResponse_AppState_CommissionDefaultTypeInternal;
extern GenesisResponse_AppState_CommissionDefaultTypeInternal _GenesisResponse_AppState_Commission_default_instance_;
class GenesisResponse_AppState_CommissionVote;
struct GenesisResponse_AppState_CommissionVoteDefaultTypeInternal;
extern GenesisResponse_AppState_CommissionVoteDefaultTypeInternal _GenesisResponse_AppState_CommissionVote_default_instance_;
class GenesisResponse_AppState_FrozenFund;
struct GenesisResponse_AppState_FrozenFundDefaultTypeInternal;
extern GenesisResponse_AppState_FrozenFundDefaultTypeInternal _GenesisResponse_AppState_FrozenFund_default_instance_;
class GenesisResponse_AppState_HaltBlock;
struct GenesisResponse_AppState_HaltBlockDefaultTypeInternal;
extern GenesisResponse_AppState_HaltBlockDefaultTypeInternal _GenesisResponse_AppState_HaltBlock_default_instance_;
class GenesisResponse_AppState_Pool;
struct GenesisResponse_AppState_PoolDefaultTypeInternal;
extern GenesisResponse_AppState_PoolDefaultTypeInternal _GenesisResponse_AppState_Pool_default_instance_;
class GenesisResponse_AppState_Validators;
struct GenesisResponse_AppState_ValidatorsDefaultTypeInternal;
extern GenesisResponse_AppState_ValidatorsDefaultTypeInternal _GenesisResponse_AppState_Validators_default_instance_;
class GenesisResponse_AppState_Waitlist;
struct GenesisResponse_AppState_WaitlistDefaultTypeInternal;
extern GenesisResponse_AppState_WaitlistDefaultTypeInternal _GenesisResponse_AppState_Waitlist_default_instance_;
class GenesisResponse_ConsensusParams;
struct GenesisResponse_ConsensusParamsDefaultTypeInternal;
extern GenesisResponse_ConsensusParamsDefaultTypeInternal _GenesisResponse_ConsensusParams_default_instance_;
class GenesisResponse_ConsensusParams_Block;
struct GenesisResponse_ConsensusParams_BlockDefaultTypeInternal;
extern GenesisResponse_ConsensusParams_BlockDefaultTypeInternal _GenesisResponse_ConsensusParams_Block_default_instance_;
class GenesisResponse_ConsensusParams_Evidence;
struct GenesisResponse_ConsensusParams_EvidenceDefaultTypeInternal;
extern GenesisResponse_ConsensusParams_EvidenceDefaultTypeInternal _GenesisResponse_ConsensusParams_Evidence_default_instance_;
class GenesisResponse_ConsensusParams_Validator;
struct GenesisResponse_ConsensusParams_ValidatorDefaultTypeInternal;
extern GenesisResponse_ConsensusParams_ValidatorDefaultTypeInternal _GenesisResponse_ConsensusParams_Validator_default_instance_;
class HaltsRequest;
struct HaltsRequestDefaultTypeInternal;
extern HaltsRequestDefaultTypeInternal _HaltsRequest_default_instance_;
class HaltsResponse;
struct HaltsResponseDefaultTypeInternal;
extern HaltsResponseDefaultTypeInternal _HaltsResponse_default_instance_;
class LimitOrderRequest;
struct LimitOrderRequestDefaultTypeInternal;
extern LimitOrderRequestDefaultTypeInternal _LimitOrderRequest_default_instance_;
class LimitOrderResponse;
struct LimitOrderResponseDefaultTypeInternal;
extern LimitOrderResponseDefaultTypeInternal _LimitOrderResponse_default_instance_;
class LimitOrdersOfPoolRequest;
struct LimitOrdersOfPoolRequestDefaultTypeInternal;
extern LimitOrdersOfPoolRequestDefaultTypeInternal _LimitOrdersOfPoolRequest_default_instance_;
class LimitOrdersOfPoolResponse;
struct LimitOrdersOfPoolResponseDefaultTypeInternal;
extern LimitOrdersOfPoolResponseDefaultTypeInternal _LimitOrdersOfPoolResponse_default_instance_;
class LimitOrdersRequest;
struct LimitOrdersRequestDefaultTypeInternal;
extern LimitOrdersRequestDefaultTypeInternal _LimitOrdersRequest_default_instance_;
class LimitOrdersResponse;
struct LimitOrdersResponseDefaultTypeInternal;
extern LimitOrdersResponseDefaultTypeInternal _LimitOrdersResponse_default_instance_;
class MaxGasPriceRequest;
struct MaxGasPriceRequestDefaultTypeInternal;
extern MaxGasPriceRequestDefaultTypeInternal _MaxGasPriceRequest_default_instance_;
class MaxGasPriceResponse;
struct MaxGasPriceResponseDefaultTypeInternal;
extern MaxGasPriceResponseDefaultTypeInternal _MaxGasPriceResponse_default_instance_;
class MinGasPriceResponse;
struct MinGasPriceResponseDefaultTypeInternal;
extern MinGasPriceResponseDefaultTypeInternal _MinGasPriceResponse_default_instance_;
class MissedBlocksRequest;
struct MissedBlocksRequestDefaultTypeInternal;
extern MissedBlocksRequestDefaultTypeInternal _MissedBlocksRequest_default_instance_;
class MissedBlocksResponse;
struct MissedBlocksResponseDefaultTypeInternal;
extern MissedBlocksResponseDefaultTypeInternal _MissedBlocksResponse_default_instance_;
class Multisig;
struct MultisigDefaultTypeInternal;
extern MultisigDefaultTypeInternal _Multisig_default_instance_;
class NetInfoResponse;
struct NetInfoResponseDefaultTypeInternal;
extern NetInfoResponseDefaultTypeInternal _NetInfoResponse_default_instance_;
class NetInfoResponse_Peer;
struct NetInfoResponse_PeerDefaultTypeInternal;
extern NetInfoResponse_PeerDefaultTypeInternal _NetInfoResponse_Peer_default_instance_;
class NetInfoResponse_Peer_ConnectionStatus;
struct NetInfoResponse_Peer_ConnectionStatusDefaultTypeInternal;
extern NetInfoResponse_Peer_ConnectionStatusDefaultTypeInternal _NetInfoResponse_Peer_ConnectionStatus_default_instance_;
class NetInfoResponse_Peer_ConnectionStatus_Channel;
struct NetInfoResponse_Peer_ConnectionStatus_ChannelDefaultTypeInternal;
extern NetInfoResponse_Peer_ConnectionStatus_ChannelDefaultTypeInternal _NetInfoResponse_Peer_ConnectionStatus_Channel_default_instance_;
class NetInfoResponse_Peer_ConnectionStatus_Monitor;
struct NetInfoResponse_Peer_ConnectionStatus_MonitorDefaultTypeInternal;
extern NetInfoResponse_Peer_ConnectionStatus_MonitorDefaultTypeInternal _NetInfoResponse_Peer_ConnectionStatus_Monitor_default_instance_;
class NodeInfo;
struct NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeInfo_Other;
struct NodeInfo_OtherDefaultTypeInternal;
extern NodeInfo_OtherDefaultTypeInternal _NodeInfo_Other_default_instance_;
class NodeInfo_ProtocolVersion;
struct NodeInfo_ProtocolVersionDefaultTypeInternal;
extern NodeInfo_ProtocolVersionDefaultTypeInternal _NodeInfo_ProtocolVersion_default_instance_;
class PriceCommissionRequest;
struct PriceCommissionRequestDefaultTypeInternal;
extern PriceCommissionRequestDefaultTypeInternal _PriceCommissionRequest_default_instance_;
class PriceCommissionResponse;
struct PriceCommissionResponseDefaultTypeInternal;
extern PriceCommissionResponseDefaultTypeInternal _PriceCommissionResponse_default_instance_;
class SendTransactionRequest;
struct SendTransactionRequestDefaultTypeInternal;
extern SendTransactionRequestDefaultTypeInternal _SendTransactionRequest_default_instance_;
class SendTransactionResponse;
struct SendTransactionResponseDefaultTypeInternal;
extern SendTransactionResponseDefaultTypeInternal _SendTransactionResponse_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class SubscribeRequest;
struct SubscribeRequestDefaultTypeInternal;
extern SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
class SubscribeResponse;
struct SubscribeResponseDefaultTypeInternal;
extern SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
class SubscribeResponse_Event;
struct SubscribeResponse_EventDefaultTypeInternal;
extern SubscribeResponse_EventDefaultTypeInternal _SubscribeResponse_Event_default_instance_;
class SwapPoolProviderRequest;
struct SwapPoolProviderRequestDefaultTypeInternal;
extern SwapPoolProviderRequestDefaultTypeInternal _SwapPoolProviderRequest_default_instance_;
class SwapPoolRequest;
struct SwapPoolRequestDefaultTypeInternal;
extern SwapPoolRequestDefaultTypeInternal _SwapPoolRequest_default_instance_;
class SwapPoolResponse;
struct SwapPoolResponseDefaultTypeInternal;
extern SwapPoolResponseDefaultTypeInternal _SwapPoolResponse_default_instance_;
class TransactionRequest;
struct TransactionRequestDefaultTypeInternal;
extern TransactionRequestDefaultTypeInternal _TransactionRequest_default_instance_;
class TransactionResponse;
struct TransactionResponseDefaultTypeInternal;
extern TransactionResponseDefaultTypeInternal _TransactionResponse_default_instance_;
class TransactionResponse_TagsEntry_DoNotUse;
struct TransactionResponse_TagsEntry_DoNotUseDefaultTypeInternal;
extern TransactionResponse_TagsEntry_DoNotUseDefaultTypeInternal _TransactionResponse_TagsEntry_DoNotUse_default_instance_;
class TransactionsRequest;
struct TransactionsRequestDefaultTypeInternal;
extern TransactionsRequestDefaultTypeInternal _TransactionsRequest_default_instance_;
class TransactionsResponse;
struct TransactionsResponseDefaultTypeInternal;
extern TransactionsResponseDefaultTypeInternal _TransactionsResponse_default_instance_;
class UnconfirmedTxsRequest;
struct UnconfirmedTxsRequestDefaultTypeInternal;
extern UnconfirmedTxsRequestDefaultTypeInternal _UnconfirmedTxsRequest_default_instance_;
class UnconfirmedTxsResponse;
struct UnconfirmedTxsResponseDefaultTypeInternal;
extern UnconfirmedTxsResponseDefaultTypeInternal _UnconfirmedTxsResponse_default_instance_;
class UpdateVotesRequest;
struct UpdateVotesRequestDefaultTypeInternal;
extern UpdateVotesRequestDefaultTypeInternal _UpdateVotesRequest_default_instance_;
class UpdateVotesResponse;
struct UpdateVotesResponseDefaultTypeInternal;
extern UpdateVotesResponseDefaultTypeInternal _UpdateVotesResponse_default_instance_;
class UpdateVotesResponse_Vote;
struct UpdateVotesResponse_VoteDefaultTypeInternal;
extern UpdateVotesResponse_VoteDefaultTypeInternal _UpdateVotesResponse_Vote_default_instance_;
class ValidatorsRequest;
struct ValidatorsRequestDefaultTypeInternal;
extern ValidatorsRequestDefaultTypeInternal _ValidatorsRequest_default_instance_;
class ValidatorsResponse;
struct ValidatorsResponseDefaultTypeInternal;
extern ValidatorsResponseDefaultTypeInternal _ValidatorsResponse_default_instance_;
class ValidatorsResponse_Result;
struct ValidatorsResponse_ResultDefaultTypeInternal;
extern ValidatorsResponse_ResultDefaultTypeInternal _ValidatorsResponse_Result_default_instance_;
class VersionNetworkRequest;
struct VersionNetworkRequestDefaultTypeInternal;
extern VersionNetworkRequestDefaultTypeInternal _VersionNetworkRequest_default_instance_;
class VersionNetworkResponse;
struct VersionNetworkResponseDefaultTypeInternal;
extern VersionNetworkResponseDefaultTypeInternal _VersionNetworkResponse_default_instance_;
class VersionNetworkResponse_Version;
struct VersionNetworkResponse_VersionDefaultTypeInternal;
extern VersionNetworkResponse_VersionDefaultTypeInternal _VersionNetworkResponse_Version_default_instance_;
class WaitListRequest;
struct WaitListRequestDefaultTypeInternal;
extern WaitListRequestDefaultTypeInternal _WaitListRequest_default_instance_;
class WaitListResponse;
struct WaitListResponseDefaultTypeInternal;
extern WaitListResponseDefaultTypeInternal _WaitListResponse_default_instance_;
class WaitListResponse_Wait;
struct WaitListResponse_WaitDefaultTypeInternal;
extern WaitListResponse_WaitDefaultTypeInternal _WaitListResponse_Wait_default_instance_;
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::api_pb::AddressBalance* Arena::CreateMaybeMessage<::api_pb::AddressBalance>(Arena*);
template<> ::api_pb::AddressDelegatedBalance* Arena::CreateMaybeMessage<::api_pb::AddressDelegatedBalance>(Arena*);
template<> ::api_pb::AddressRequest* Arena::CreateMaybeMessage<::api_pb::AddressRequest>(Arena*);
template<> ::api_pb::AddressResponse* Arena::CreateMaybeMessage<::api_pb::AddressResponse>(Arena*);
template<> ::api_pb::AddressesRequest* Arena::CreateMaybeMessage<::api_pb::AddressesRequest>(Arena*);
template<> ::api_pb::AddressesResponse* Arena::CreateMaybeMessage<::api_pb::AddressesResponse>(Arena*);
template<> ::api_pb::AddressesResponse_AddressesEntry_DoNotUse* Arena::CreateMaybeMessage<::api_pb::AddressesResponse_AddressesEntry_DoNotUse>(Arena*);
template<> ::api_pb::AddressesResponse_Result* Arena::CreateMaybeMessage<::api_pb::AddressesResponse_Result>(Arena*);
template<> ::api_pb::BlockRequest* Arena::CreateMaybeMessage<::api_pb::BlockRequest>(Arena*);
template<> ::api_pb::BlockResponse* Arena::CreateMaybeMessage<::api_pb::BlockResponse>(Arena*);
template<> ::api_pb::BlockResponse_Evidence* Arena::CreateMaybeMessage<::api_pb::BlockResponse_Evidence>(Arena*);
template<> ::api_pb::BlockResponse_Validator* Arena::CreateMaybeMessage<::api_pb::BlockResponse_Validator>(Arena*);
template<> ::api_pb::BlocksRequest* Arena::CreateMaybeMessage<::api_pb::BlocksRequest>(Arena*);
template<> ::api_pb::BlocksResponse* Arena::CreateMaybeMessage<::api_pb::BlocksResponse>(Arena*);
template<> ::api_pb::CandidateRequest* Arena::CreateMaybeMessage<::api_pb::CandidateRequest>(Arena*);
template<> ::api_pb::CandidateResponse* Arena::CreateMaybeMessage<::api_pb::CandidateResponse>(Arena*);
template<> ::api_pb::CandidateResponse_Stake* Arena::CreateMaybeMessage<::api_pb::CandidateResponse_Stake>(Arena*);
template<> ::api_pb::CandidatesRequest* Arena::CreateMaybeMessage<::api_pb::CandidatesRequest>(Arena*);
template<> ::api_pb::CandidatesResponse* Arena::CreateMaybeMessage<::api_pb::CandidatesResponse>(Arena*);
template<> ::api_pb::Coin* Arena::CreateMaybeMessage<::api_pb::Coin>(Arena*);
template<> ::api_pb::CoinIdRequest* Arena::CreateMaybeMessage<::api_pb::CoinIdRequest>(Arena*);
template<> ::api_pb::CoinInfoRequest* Arena::CreateMaybeMessage<::api_pb::CoinInfoRequest>(Arena*);
template<> ::api_pb::CoinInfoResponse* Arena::CreateMaybeMessage<::api_pb::CoinInfoResponse>(Arena*);
template<> ::api_pb::CommissionVotesRequest* Arena::CreateMaybeMessage<::api_pb::CommissionVotesRequest>(Arena*);
template<> ::api_pb::CommissionVotesResponse* Arena::CreateMaybeMessage<::api_pb::CommissionVotesResponse>(Arena*);
template<> ::api_pb::CommissionVotesResponse_Vote* Arena::CreateMaybeMessage<::api_pb::CommissionVotesResponse_Vote>(Arena*);
template<> ::api_pb::EstimateCoinBuyRequest* Arena::CreateMaybeMessage<::api_pb::EstimateCoinBuyRequest>(Arena*);
template<> ::api_pb::EstimateCoinBuyResponse* Arena::CreateMaybeMessage<::api_pb::EstimateCoinBuyResponse>(Arena*);
template<> ::api_pb::EstimateCoinSellAllRequest* Arena::CreateMaybeMessage<::api_pb::EstimateCoinSellAllRequest>(Arena*);
template<> ::api_pb::EstimateCoinSellAllResponse* Arena::CreateMaybeMessage<::api_pb::EstimateCoinSellAllResponse>(Arena*);
template<> ::api_pb::EstimateCoinSellRequest* Arena::CreateMaybeMessage<::api_pb::EstimateCoinSellRequest>(Arena*);
template<> ::api_pb::EstimateCoinSellResponse* Arena::CreateMaybeMessage<::api_pb::EstimateCoinSellResponse>(Arena*);
template<> ::api_pb::EstimateTxCommissionRequest* Arena::CreateMaybeMessage<::api_pb::EstimateTxCommissionRequest>(Arena*);
template<> ::api_pb::EstimateTxCommissionResponse* Arena::CreateMaybeMessage<::api_pb::EstimateTxCommissionResponse>(Arena*);
template<> ::api_pb::EventsRequest* Arena::CreateMaybeMessage<::api_pb::EventsRequest>(Arena*);
template<> ::api_pb::EventsResponse* Arena::CreateMaybeMessage<::api_pb::EventsResponse>(Arena*);
template<> ::api_pb::FrozenRequest* Arena::CreateMaybeMessage<::api_pb::FrozenRequest>(Arena*);
template<> ::api_pb::FrozenResponse* Arena::CreateMaybeMessage<::api_pb::FrozenResponse>(Arena*);
template<> ::api_pb::FrozenResponse_Frozen* Arena::CreateMaybeMessage<::api_pb::FrozenResponse_Frozen>(Arena*);
template<> ::api_pb::GenesisResponse* Arena::CreateMaybeMessage<::api_pb::GenesisResponse>(Arena*);
template<> ::api_pb::GenesisResponse_AppState* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Account* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Account>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Account_Balance* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Account_Balance>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Account_MultisigData* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Account_MultisigData>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Candidate* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Candidate>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Candidate_Stake* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Candidate_Stake>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Coin* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Coin>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Commission* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Commission>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_CommissionVote* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_CommissionVote>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_FrozenFund* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_FrozenFund>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_HaltBlock* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_HaltBlock>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Pool* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Pool>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Validators* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Validators>(Arena*);
template<> ::api_pb::GenesisResponse_AppState_Waitlist* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Waitlist>(Arena*);
template<> ::api_pb::GenesisResponse_ConsensusParams* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams>(Arena*);
template<> ::api_pb::GenesisResponse_ConsensusParams_Block* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams_Block>(Arena*);
template<> ::api_pb::GenesisResponse_ConsensusParams_Evidence* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams_Evidence>(Arena*);
template<> ::api_pb::GenesisResponse_ConsensusParams_Validator* Arena::CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams_Validator>(Arena*);
template<> ::api_pb::HaltsRequest* Arena::CreateMaybeMessage<::api_pb::HaltsRequest>(Arena*);
template<> ::api_pb::HaltsResponse* Arena::CreateMaybeMessage<::api_pb::HaltsResponse>(Arena*);
template<> ::api_pb::LimitOrderRequest* Arena::CreateMaybeMessage<::api_pb::LimitOrderRequest>(Arena*);
template<> ::api_pb::LimitOrderResponse* Arena::CreateMaybeMessage<::api_pb::LimitOrderResponse>(Arena*);
template<> ::api_pb::LimitOrdersOfPoolRequest* Arena::CreateMaybeMessage<::api_pb::LimitOrdersOfPoolRequest>(Arena*);
template<> ::api_pb::LimitOrdersOfPoolResponse* Arena::CreateMaybeMessage<::api_pb::LimitOrdersOfPoolResponse>(Arena*);
template<> ::api_pb::LimitOrdersRequest* Arena::CreateMaybeMessage<::api_pb::LimitOrdersRequest>(Arena*);
template<> ::api_pb::LimitOrdersResponse* Arena::CreateMaybeMessage<::api_pb::LimitOrdersResponse>(Arena*);
template<> ::api_pb::MaxGasPriceRequest* Arena::CreateMaybeMessage<::api_pb::MaxGasPriceRequest>(Arena*);
template<> ::api_pb::MaxGasPriceResponse* Arena::CreateMaybeMessage<::api_pb::MaxGasPriceResponse>(Arena*);
template<> ::api_pb::MinGasPriceResponse* Arena::CreateMaybeMessage<::api_pb::MinGasPriceResponse>(Arena*);
template<> ::api_pb::MissedBlocksRequest* Arena::CreateMaybeMessage<::api_pb::MissedBlocksRequest>(Arena*);
template<> ::api_pb::MissedBlocksResponse* Arena::CreateMaybeMessage<::api_pb::MissedBlocksResponse>(Arena*);
template<> ::api_pb::Multisig* Arena::CreateMaybeMessage<::api_pb::Multisig>(Arena*);
template<> ::api_pb::NetInfoResponse* Arena::CreateMaybeMessage<::api_pb::NetInfoResponse>(Arena*);
template<> ::api_pb::NetInfoResponse_Peer* Arena::CreateMaybeMessage<::api_pb::NetInfoResponse_Peer>(Arena*);
template<> ::api_pb::NetInfoResponse_Peer_ConnectionStatus* Arena::CreateMaybeMessage<::api_pb::NetInfoResponse_Peer_ConnectionStatus>(Arena*);
template<> ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* Arena::CreateMaybeMessage<::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel>(Arena*);
template<> ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* Arena::CreateMaybeMessage<::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor>(Arena*);
template<> ::api_pb::NodeInfo* Arena::CreateMaybeMessage<::api_pb::NodeInfo>(Arena*);
template<> ::api_pb::NodeInfo_Other* Arena::CreateMaybeMessage<::api_pb::NodeInfo_Other>(Arena*);
template<> ::api_pb::NodeInfo_ProtocolVersion* Arena::CreateMaybeMessage<::api_pb::NodeInfo_ProtocolVersion>(Arena*);
template<> ::api_pb::PriceCommissionRequest* Arena::CreateMaybeMessage<::api_pb::PriceCommissionRequest>(Arena*);
template<> ::api_pb::PriceCommissionResponse* Arena::CreateMaybeMessage<::api_pb::PriceCommissionResponse>(Arena*);
template<> ::api_pb::SendTransactionRequest* Arena::CreateMaybeMessage<::api_pb::SendTransactionRequest>(Arena*);
template<> ::api_pb::SendTransactionResponse* Arena::CreateMaybeMessage<::api_pb::SendTransactionResponse>(Arena*);
template<> ::api_pb::StatusResponse* Arena::CreateMaybeMessage<::api_pb::StatusResponse>(Arena*);
template<> ::api_pb::SubscribeRequest* Arena::CreateMaybeMessage<::api_pb::SubscribeRequest>(Arena*);
template<> ::api_pb::SubscribeResponse* Arena::CreateMaybeMessage<::api_pb::SubscribeResponse>(Arena*);
template<> ::api_pb::SubscribeResponse_Event* Arena::CreateMaybeMessage<::api_pb::SubscribeResponse_Event>(Arena*);
template<> ::api_pb::SwapPoolProviderRequest* Arena::CreateMaybeMessage<::api_pb::SwapPoolProviderRequest>(Arena*);
template<> ::api_pb::SwapPoolRequest* Arena::CreateMaybeMessage<::api_pb::SwapPoolRequest>(Arena*);
template<> ::api_pb::SwapPoolResponse* Arena::CreateMaybeMessage<::api_pb::SwapPoolResponse>(Arena*);
template<> ::api_pb::TransactionRequest* Arena::CreateMaybeMessage<::api_pb::TransactionRequest>(Arena*);
template<> ::api_pb::TransactionResponse* Arena::CreateMaybeMessage<::api_pb::TransactionResponse>(Arena*);
template<> ::api_pb::TransactionResponse_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::api_pb::TransactionResponse_TagsEntry_DoNotUse>(Arena*);
template<> ::api_pb::TransactionsRequest* Arena::CreateMaybeMessage<::api_pb::TransactionsRequest>(Arena*);
template<> ::api_pb::TransactionsResponse* Arena::CreateMaybeMessage<::api_pb::TransactionsResponse>(Arena*);
template<> ::api_pb::UnconfirmedTxsRequest* Arena::CreateMaybeMessage<::api_pb::UnconfirmedTxsRequest>(Arena*);
template<> ::api_pb::UnconfirmedTxsResponse* Arena::CreateMaybeMessage<::api_pb::UnconfirmedTxsResponse>(Arena*);
template<> ::api_pb::UpdateVotesRequest* Arena::CreateMaybeMessage<::api_pb::UpdateVotesRequest>(Arena*);
template<> ::api_pb::UpdateVotesResponse* Arena::CreateMaybeMessage<::api_pb::UpdateVotesResponse>(Arena*);
template<> ::api_pb::UpdateVotesResponse_Vote* Arena::CreateMaybeMessage<::api_pb::UpdateVotesResponse_Vote>(Arena*);
template<> ::api_pb::ValidatorsRequest* Arena::CreateMaybeMessage<::api_pb::ValidatorsRequest>(Arena*);
template<> ::api_pb::ValidatorsResponse* Arena::CreateMaybeMessage<::api_pb::ValidatorsResponse>(Arena*);
template<> ::api_pb::ValidatorsResponse_Result* Arena::CreateMaybeMessage<::api_pb::ValidatorsResponse_Result>(Arena*);
template<> ::api_pb::VersionNetworkRequest* Arena::CreateMaybeMessage<::api_pb::VersionNetworkRequest>(Arena*);
template<> ::api_pb::VersionNetworkResponse* Arena::CreateMaybeMessage<::api_pb::VersionNetworkResponse>(Arena*);
template<> ::api_pb::VersionNetworkResponse_Version* Arena::CreateMaybeMessage<::api_pb::VersionNetworkResponse_Version>(Arena*);
template<> ::api_pb::WaitListRequest* Arena::CreateMaybeMessage<::api_pb::WaitListRequest>(Arena*);
template<> ::api_pb::WaitListResponse* Arena::CreateMaybeMessage<::api_pb::WaitListResponse>(Arena*);
template<> ::api_pb::WaitListResponse_Wait* Arena::CreateMaybeMessage<::api_pb::WaitListResponse_Wait>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api_pb {

enum CandidatesRequest_CandidateStatus : int {
  CandidatesRequest_CandidateStatus_all = 0,
  CandidatesRequest_CandidateStatus_off = 1,
  CandidatesRequest_CandidateStatus_on = 2,
  CandidatesRequest_CandidateStatus_validator = 3,
  CandidatesRequest_CandidateStatus_CandidatesRequest_CandidateStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CandidatesRequest_CandidateStatus_CandidatesRequest_CandidateStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CandidatesRequest_CandidateStatus_IsValid(int value);
constexpr CandidatesRequest_CandidateStatus CandidatesRequest_CandidateStatus_CandidateStatus_MIN = CandidatesRequest_CandidateStatus_all;
constexpr CandidatesRequest_CandidateStatus CandidatesRequest_CandidateStatus_CandidateStatus_MAX = CandidatesRequest_CandidateStatus_validator;
constexpr int CandidatesRequest_CandidateStatus_CandidateStatus_ARRAYSIZE = CandidatesRequest_CandidateStatus_CandidateStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandidatesRequest_CandidateStatus_descriptor();
template<typename T>
inline const std::string& CandidatesRequest_CandidateStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CandidatesRequest_CandidateStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CandidatesRequest_CandidateStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CandidatesRequest_CandidateStatus_descriptor(), enum_t_value);
}
inline bool CandidatesRequest_CandidateStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CandidatesRequest_CandidateStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CandidatesRequest_CandidateStatus>(
    CandidatesRequest_CandidateStatus_descriptor(), name, value);
}
enum TransactionResponse_Type : int {
  TransactionResponse_Type_unknown = 0,
  TransactionResponse_Type_Send = 1,
  TransactionResponse_Type_SellCoin = 2,
  TransactionResponse_Type_SellAllCoin = 3,
  TransactionResponse_Type_BuyCoin = 4,
  TransactionResponse_Type_CreateCoin = 5,
  TransactionResponse_Type_DeclareCandidacy = 6,
  TransactionResponse_Type_Delegate = 7,
  TransactionResponse_Type_Unbond = 8,
  TransactionResponse_Type_RedeemCheck = 9,
  TransactionResponse_Type_SetCandidateOnline = 10,
  TransactionResponse_Type_SetCandidateOffline = 11,
  TransactionResponse_Type_CreateMultisig = 12,
  TransactionResponse_Type_Multisend = 13,
  TransactionResponse_Type_EditCandidate = 14,
  TransactionResponse_Type_SetHaltBlock = 15,
  TransactionResponse_Type_RecreateCoin = 16,
  TransactionResponse_Type_EditCoinOwner = 17,
  TransactionResponse_Type_EditMultisig = 18,
  TransactionResponse_Type_PriceVote = 19,
  TransactionResponse_Type_EditCandidatePublicKey = 20,
  TransactionResponse_Type_AddLiquidity = 21,
  TransactionResponse_Type_RemoveLiquidity = 22,
  TransactionResponse_Type_SellSwapPool = 23,
  TransactionResponse_Type_BuySwapPool = 24,
  TransactionResponse_Type_SellAllSwapPool = 25,
  TransactionResponse_Type_EditCommissionCandidate = 26,
  TransactionResponse_Type_MoveStake = 27,
  TransactionResponse_Type_MintToken = 28,
  TransactionResponse_Type_BurnToken = 29,
  TransactionResponse_Type_CreateToken = 30,
  TransactionResponse_Type_RecreateToken = 31,
  TransactionResponse_Type_VoteCommission = 32,
  TransactionResponse_Type_VoteUpdate = 33,
  TransactionResponse_Type_CreateSwapPool = 34,
  TransactionResponse_Type_AddLimitOrder = 35,
  TransactionResponse_Type_RemoveLimitOrder = 36,
  TransactionResponse_Type_TransactionResponse_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionResponse_Type_TransactionResponse_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionResponse_Type_IsValid(int value);
constexpr TransactionResponse_Type TransactionResponse_Type_Type_MIN = TransactionResponse_Type_unknown;
constexpr TransactionResponse_Type TransactionResponse_Type_Type_MAX = TransactionResponse_Type_RemoveLimitOrder;
constexpr int TransactionResponse_Type_Type_ARRAYSIZE = TransactionResponse_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionResponse_Type_descriptor();
template<typename T>
inline const std::string& TransactionResponse_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionResponse_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionResponse_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionResponse_Type_descriptor(), enum_t_value);
}
inline bool TransactionResponse_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransactionResponse_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionResponse_Type>(
    TransactionResponse_Type_descriptor(), name, value);
}
enum BlockField : int {
  transactions = 0,
  missed = 1,
  block_reward = 2,
  size = 3,
  proposer = 4,
  validators = 5,
  evidence = 6,
  BlockField_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlockField_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlockField_IsValid(int value);
constexpr BlockField BlockField_MIN = transactions;
constexpr BlockField BlockField_MAX = evidence;
constexpr int BlockField_ARRAYSIZE = BlockField_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockField_descriptor();
template<typename T>
inline const std::string& BlockField_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlockField>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlockField_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlockField_descriptor(), enum_t_value);
}
inline bool BlockField_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlockField* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlockField>(
    BlockField_descriptor(), name, value);
}
enum SwapFrom : int {
  optimal = 0,
  bancor = 1,
  pool = 2,
  SwapFrom_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SwapFrom_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SwapFrom_IsValid(int value);
constexpr SwapFrom SwapFrom_MIN = optimal;
constexpr SwapFrom SwapFrom_MAX = pool;
constexpr int SwapFrom_ARRAYSIZE = SwapFrom_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwapFrom_descriptor();
template<typename T>
inline const std::string& SwapFrom_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwapFrom>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwapFrom_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwapFrom_descriptor(), enum_t_value);
}
inline bool SwapFrom_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SwapFrom* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwapFrom>(
    SwapFrom_descriptor(), name, value);
}
// ===================================================================

class Coin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.Coin) */ {
 public:
  inline Coin() : Coin(nullptr) {}
  ~Coin() override;
  explicit constexpr Coin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coin(const Coin& from);
  Coin(Coin&& from) noexcept
    : Coin() {
    *this = ::std::move(from);
  }

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coin& operator=(Coin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
               &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coin& a, Coin& b) {
    a.Swap(&b);
  }
  inline void Swap(Coin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coin* New() const final {
    return new Coin();
  }

  Coin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.Coin";
  }
  protected:
  explicit Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.Coin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class BlocksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.BlocksRequest) */ {
 public:
  inline BlocksRequest() : BlocksRequest(nullptr) {}
  ~BlocksRequest() override;
  explicit constexpr BlocksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlocksRequest(const BlocksRequest& from);
  BlocksRequest(BlocksRequest&& from) noexcept
    : BlocksRequest() {
    *this = ::std::move(from);
  }

  inline BlocksRequest& operator=(const BlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlocksRequest& operator=(BlocksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlocksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlocksRequest* internal_default_instance() {
    return reinterpret_cast<const BlocksRequest*>(
               &_BlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlocksRequest& a, BlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlocksRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlocksRequest* New() const final {
    return new BlocksRequest();
  }

  BlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlocksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlocksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlocksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.BlocksRequest";
  }
  protected:
  explicit BlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kFromHeightFieldNumber = 1,
    kToHeightFieldNumber = 2,
    kFailedTxsFieldNumber = 4,
    kEventsFieldNumber = 5,
  };
  // repeated .api_pb.BlockField fields = 3 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  ::api_pb::BlockField _internal_fields(int index) const;
  void _internal_add_fields(::api_pb::BlockField value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_fields();
  public:
  ::api_pb::BlockField fields(int index) const;
  void set_fields(int index, ::api_pb::BlockField value);
  void add_fields(::api_pb::BlockField value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_fields();

  // uint64 from_height = 1 [json_name = "fromHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_from_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_height() const;
  void set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_height() const;
  void _internal_set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 to_height = 2 [json_name = "toHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_to_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_height() const;
  void set_to_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_to_height() const;
  void _internal_set_to_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool failed_txs = 4 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_failed_txs();
  bool failed_txs() const;
  void set_failed_txs(bool value);
  private:
  bool _internal_failed_txs() const;
  void _internal_set_failed_txs(bool value);
  public:

  // bool events = 5 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_events();
  bool events() const;
  void set_events(bool value);
  private:
  bool _internal_events() const;
  void _internal_set_events(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.BlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> fields_;
  mutable std::atomic<int> _fields_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_height_;
  bool failed_txs_;
  bool events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class BlocksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.BlocksResponse) */ {
 public:
  inline BlocksResponse() : BlocksResponse(nullptr) {}
  ~BlocksResponse() override;
  explicit constexpr BlocksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlocksResponse(const BlocksResponse& from);
  BlocksResponse(BlocksResponse&& from) noexcept
    : BlocksResponse() {
    *this = ::std::move(from);
  }

  inline BlocksResponse& operator=(const BlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlocksResponse& operator=(BlocksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlocksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlocksResponse* internal_default_instance() {
    return reinterpret_cast<const BlocksResponse*>(
               &_BlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlocksResponse& a, BlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlocksResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlocksResponse* New() const final {
    return new BlocksResponse();
  }

  BlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlocksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlocksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlocksResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.BlocksResponse";
  }
  protected:
  explicit BlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .api_pb.BlockResponse blocks = 1 [json_name = "blocks"];
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::api_pb::BlockResponse* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse >*
      mutable_blocks();
  private:
  const ::api_pb::BlockResponse& _internal_blocks(int index) const;
  ::api_pb::BlockResponse* _internal_add_blocks();
  public:
  const ::api_pb::BlockResponse& blocks(int index) const;
  ::api_pb::BlockResponse* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:api_pb.BlocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse > blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CommissionVotesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CommissionVotesRequest) */ {
 public:
  inline CommissionVotesRequest() : CommissionVotesRequest(nullptr) {}
  ~CommissionVotesRequest() override;
  explicit constexpr CommissionVotesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommissionVotesRequest(const CommissionVotesRequest& from);
  CommissionVotesRequest(CommissionVotesRequest&& from) noexcept
    : CommissionVotesRequest() {
    *this = ::std::move(from);
  }

  inline CommissionVotesRequest& operator=(const CommissionVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommissionVotesRequest& operator=(CommissionVotesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommissionVotesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommissionVotesRequest* internal_default_instance() {
    return reinterpret_cast<const CommissionVotesRequest*>(
               &_CommissionVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommissionVotesRequest& a, CommissionVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommissionVotesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommissionVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommissionVotesRequest* New() const final {
    return new CommissionVotesRequest();
  }

  CommissionVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommissionVotesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommissionVotesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommissionVotesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommissionVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CommissionVotesRequest";
  }
  protected:
  explicit CommissionVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetVersionFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_version() const;
  void set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_version() const;
  void _internal_set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CommissionVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CommissionVotesResponse_Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CommissionVotesResponse.Vote) */ {
 public:
  inline CommissionVotesResponse_Vote() : CommissionVotesResponse_Vote(nullptr) {}
  ~CommissionVotesResponse_Vote() override;
  explicit constexpr CommissionVotesResponse_Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommissionVotesResponse_Vote(const CommissionVotesResponse_Vote& from);
  CommissionVotesResponse_Vote(CommissionVotesResponse_Vote&& from) noexcept
    : CommissionVotesResponse_Vote() {
    *this = ::std::move(from);
  }

  inline CommissionVotesResponse_Vote& operator=(const CommissionVotesResponse_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommissionVotesResponse_Vote& operator=(CommissionVotesResponse_Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommissionVotesResponse_Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommissionVotesResponse_Vote* internal_default_instance() {
    return reinterpret_cast<const CommissionVotesResponse_Vote*>(
               &_CommissionVotesResponse_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommissionVotesResponse_Vote& a, CommissionVotesResponse_Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(CommissionVotesResponse_Vote* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommissionVotesResponse_Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommissionVotesResponse_Vote* New() const final {
    return new CommissionVotesResponse_Vote();
  }

  CommissionVotesResponse_Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommissionVotesResponse_Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommissionVotesResponse_Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommissionVotesResponse_Vote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommissionVotesResponse_Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CommissionVotesResponse.Vote";
  }
  protected:
  explicit CommissionVotesResponse_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeysFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // repeated string public_keys = 1 [json_name = "publicKeys"];
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  const std::string& public_keys(int index) const;
  std::string* mutable_public_keys(int index);
  void set_public_keys(int index, const std::string& value);
  void set_public_keys(int index, std::string&& value);
  void set_public_keys(int index, const char* value);
  void set_public_keys(int index, const char* value, size_t size);
  std::string* add_public_keys();
  void add_public_keys(const std::string& value);
  void add_public_keys(std::string&& value);
  void add_public_keys(const char* value);
  void add_public_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_keys();
  private:
  const std::string& _internal_public_keys(int index) const;
  std::string* _internal_add_public_keys();
  public:

  // .api_pb.PriceCommissionResponse price = 2 [json_name = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::api_pb::PriceCommissionResponse& price() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::PriceCommissionResponse* release_price();
  ::api_pb::PriceCommissionResponse* mutable_price();
  void set_allocated_price(::api_pb::PriceCommissionResponse* price);
  private:
  const ::api_pb::PriceCommissionResponse& _internal_price() const;
  ::api_pb::PriceCommissionResponse* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::api_pb::PriceCommissionResponse* price);
  ::api_pb::PriceCommissionResponse* unsafe_arena_release_price();

  // @@protoc_insertion_point(class_scope:api_pb.CommissionVotesResponse.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_keys_;
  ::api_pb::PriceCommissionResponse* price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CommissionVotesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CommissionVotesResponse) */ {
 public:
  inline CommissionVotesResponse() : CommissionVotesResponse(nullptr) {}
  ~CommissionVotesResponse() override;
  explicit constexpr CommissionVotesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommissionVotesResponse(const CommissionVotesResponse& from);
  CommissionVotesResponse(CommissionVotesResponse&& from) noexcept
    : CommissionVotesResponse() {
    *this = ::std::move(from);
  }

  inline CommissionVotesResponse& operator=(const CommissionVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommissionVotesResponse& operator=(CommissionVotesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommissionVotesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommissionVotesResponse* internal_default_instance() {
    return reinterpret_cast<const CommissionVotesResponse*>(
               &_CommissionVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommissionVotesResponse& a, CommissionVotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommissionVotesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommissionVotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommissionVotesResponse* New() const final {
    return new CommissionVotesResponse();
  }

  CommissionVotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommissionVotesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommissionVotesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommissionVotesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommissionVotesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CommissionVotesResponse";
  }
  protected:
  explicit CommissionVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommissionVotesResponse_Vote Vote;

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .api_pb.CommissionVotesResponse.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::api_pb::CommissionVotesResponse_Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CommissionVotesResponse_Vote >*
      mutable_votes();
  private:
  const ::api_pb::CommissionVotesResponse_Vote& _internal_votes(int index) const;
  ::api_pb::CommissionVotesResponse_Vote* _internal_add_votes();
  public:
  const ::api_pb::CommissionVotesResponse_Vote& votes(int index) const;
  ::api_pb::CommissionVotesResponse_Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CommissionVotesResponse_Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:api_pb.CommissionVotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CommissionVotesResponse_Vote > votes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class LimitOrderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.LimitOrderRequest) */ {
 public:
  inline LimitOrderRequest() : LimitOrderRequest(nullptr) {}
  ~LimitOrderRequest() override;
  explicit constexpr LimitOrderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LimitOrderRequest(const LimitOrderRequest& from);
  LimitOrderRequest(LimitOrderRequest&& from) noexcept
    : LimitOrderRequest() {
    *this = ::std::move(from);
  }

  inline LimitOrderRequest& operator=(const LimitOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrderRequest& operator=(LimitOrderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrderRequest* internal_default_instance() {
    return reinterpret_cast<const LimitOrderRequest*>(
               &_LimitOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LimitOrderRequest& a, LimitOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitOrderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitOrderRequest* New() const final {
    return new LimitOrderRequest();
  }

  LimitOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitOrderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LimitOrderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LimitOrderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.LimitOrderRequest";
  }
  protected:
  explicit LimitOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint64 order_id = 1 [json_name = "orderId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.LimitOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class LimitOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.LimitOrderResponse) */ {
 public:
  inline LimitOrderResponse() : LimitOrderResponse(nullptr) {}
  ~LimitOrderResponse() override;
  explicit constexpr LimitOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LimitOrderResponse(const LimitOrderResponse& from);
  LimitOrderResponse(LimitOrderResponse&& from) noexcept
    : LimitOrderResponse() {
    *this = ::std::move(from);
  }

  inline LimitOrderResponse& operator=(const LimitOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrderResponse& operator=(LimitOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrderResponse* internal_default_instance() {
    return reinterpret_cast<const LimitOrderResponse*>(
               &_LimitOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LimitOrderResponse& a, LimitOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitOrderResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitOrderResponse* New() const final {
    return new LimitOrderResponse();
  }

  LimitOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LimitOrderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LimitOrderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.LimitOrderResponse";
  }
  protected:
  explicit LimitOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWantSellFieldNumber = 3,
    kWantBuyFieldNumber = 4,
    kOwnerFieldNumber = 5,
    kPriceFieldNumber = 8,
    kCoinSellFieldNumber = 1,
    kCoinBuyFieldNumber = 2,
    kHeightFieldNumber = 6,
    kIdFieldNumber = 7,
  };
  // string want_sell = 3 [json_name = "wantSell"];
  void clear_want_sell();
  const std::string& want_sell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_want_sell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_want_sell();
  PROTOBUF_MUST_USE_RESULT std::string* release_want_sell();
  void set_allocated_want_sell(std::string* want_sell);
  private:
  const std::string& _internal_want_sell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_want_sell(const std::string& value);
  std::string* _internal_mutable_want_sell();
  public:

  // string want_buy = 4 [json_name = "wantBuy"];
  void clear_want_buy();
  const std::string& want_buy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_want_buy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_want_buy();
  PROTOBUF_MUST_USE_RESULT std::string* release_want_buy();
  void set_allocated_want_buy(std::string* want_buy);
  private:
  const std::string& _internal_want_buy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_want_buy(const std::string& value);
  std::string* _internal_mutable_want_buy();
  public:

  // string owner = 5 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string price = 8 [json_name = "price"];
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_MUST_USE_RESULT std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // .api_pb.Coin coin_sell = 1 [json_name = "coinSell"];
  bool has_coin_sell() const;
  private:
  bool _internal_has_coin_sell() const;
  public:
  void clear_coin_sell();
  const ::api_pb::Coin& coin_sell() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin_sell();
  ::api_pb::Coin* mutable_coin_sell();
  void set_allocated_coin_sell(::api_pb::Coin* coin_sell);
  private:
  const ::api_pb::Coin& _internal_coin_sell() const;
  ::api_pb::Coin* _internal_mutable_coin_sell();
  public:
  void unsafe_arena_set_allocated_coin_sell(
      ::api_pb::Coin* coin_sell);
  ::api_pb::Coin* unsafe_arena_release_coin_sell();

  // .api_pb.Coin coin_buy = 2 [json_name = "coinBuy"];
  bool has_coin_buy() const;
  private:
  bool _internal_has_coin_buy() const;
  public:
  void clear_coin_buy();
  const ::api_pb::Coin& coin_buy() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin_buy();
  ::api_pb::Coin* mutable_coin_buy();
  void set_allocated_coin_buy(::api_pb::Coin* coin_buy);
  private:
  const ::api_pb::Coin& _internal_coin_buy() const;
  ::api_pb::Coin* _internal_mutable_coin_buy();
  public:
  void unsafe_arena_set_allocated_coin_buy(
      ::api_pb::Coin* coin_buy);
  ::api_pb::Coin* unsafe_arena_release_coin_buy();

  // uint64 height = 6 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 id = 7 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.LimitOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr want_sell_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr want_buy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  ::api_pb::Coin* coin_sell_;
  ::api_pb::Coin* coin_buy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class LimitOrdersOfPoolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.LimitOrdersOfPoolRequest) */ {
 public:
  inline LimitOrdersOfPoolRequest() : LimitOrdersOfPoolRequest(nullptr) {}
  ~LimitOrdersOfPoolRequest() override;
  explicit constexpr LimitOrdersOfPoolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LimitOrdersOfPoolRequest(const LimitOrdersOfPoolRequest& from);
  LimitOrdersOfPoolRequest(LimitOrdersOfPoolRequest&& from) noexcept
    : LimitOrdersOfPoolRequest() {
    *this = ::std::move(from);
  }

  inline LimitOrdersOfPoolRequest& operator=(const LimitOrdersOfPoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrdersOfPoolRequest& operator=(LimitOrdersOfPoolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrdersOfPoolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrdersOfPoolRequest* internal_default_instance() {
    return reinterpret_cast<const LimitOrdersOfPoolRequest*>(
               &_LimitOrdersOfPoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LimitOrdersOfPoolRequest& a, LimitOrdersOfPoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitOrdersOfPoolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrdersOfPoolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitOrdersOfPoolRequest* New() const final {
    return new LimitOrdersOfPoolRequest();
  }

  LimitOrdersOfPoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitOrdersOfPoolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LimitOrdersOfPoolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LimitOrdersOfPoolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitOrdersOfPoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.LimitOrdersOfPoolRequest";
  }
  protected:
  explicit LimitOrdersOfPoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSellCoinFieldNumber = 1,
    kBuyCoinFieldNumber = 2,
    kHeightFieldNumber = 4,
    kLimitFieldNumber = 3,
  };
  // uint64 sell_coin = 1 [json_name = "sellCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_sell_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 sell_coin() const;
  void set_sell_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sell_coin() const;
  void _internal_set_sell_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 buy_coin = 2 [json_name = "buyCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_buy_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 buy_coin() const;
  void set_buy_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buy_coin() const;
  void _internal_set_buy_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 limit = 3 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.LimitOrdersOfPoolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sell_coin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buy_coin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class LimitOrdersOfPoolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.LimitOrdersOfPoolResponse) */ {
 public:
  inline LimitOrdersOfPoolResponse() : LimitOrdersOfPoolResponse(nullptr) {}
  ~LimitOrdersOfPoolResponse() override;
  explicit constexpr LimitOrdersOfPoolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LimitOrdersOfPoolResponse(const LimitOrdersOfPoolResponse& from);
  LimitOrdersOfPoolResponse(LimitOrdersOfPoolResponse&& from) noexcept
    : LimitOrdersOfPoolResponse() {
    *this = ::std::move(from);
  }

  inline LimitOrdersOfPoolResponse& operator=(const LimitOrdersOfPoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrdersOfPoolResponse& operator=(LimitOrdersOfPoolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrdersOfPoolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrdersOfPoolResponse* internal_default_instance() {
    return reinterpret_cast<const LimitOrdersOfPoolResponse*>(
               &_LimitOrdersOfPoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LimitOrdersOfPoolResponse& a, LimitOrdersOfPoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitOrdersOfPoolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrdersOfPoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitOrdersOfPoolResponse* New() const final {
    return new LimitOrdersOfPoolResponse();
  }

  LimitOrdersOfPoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitOrdersOfPoolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LimitOrdersOfPoolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LimitOrdersOfPoolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitOrdersOfPoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.LimitOrdersOfPoolResponse";
  }
  protected:
  explicit LimitOrdersOfPoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kPoolPriceFieldNumber = 2,
  };
  // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::api_pb::LimitOrderResponse* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >*
      mutable_orders();
  private:
  const ::api_pb::LimitOrderResponse& _internal_orders(int index) const;
  ::api_pb::LimitOrderResponse* _internal_add_orders();
  public:
  const ::api_pb::LimitOrderResponse& orders(int index) const;
  ::api_pb::LimitOrderResponse* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >&
      orders() const;

  // string pool_price = 2 [json_name = "poolPrice"];
  void clear_pool_price();
  const std::string& pool_price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pool_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pool_price();
  PROTOBUF_MUST_USE_RESULT std::string* release_pool_price();
  void set_allocated_pool_price(std::string* pool_price);
  private:
  const std::string& _internal_pool_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pool_price(const std::string& value);
  std::string* _internal_mutable_pool_price();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.LimitOrdersOfPoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse > orders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pool_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class LimitOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.LimitOrdersRequest) */ {
 public:
  inline LimitOrdersRequest() : LimitOrdersRequest(nullptr) {}
  ~LimitOrdersRequest() override;
  explicit constexpr LimitOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LimitOrdersRequest(const LimitOrdersRequest& from);
  LimitOrdersRequest(LimitOrdersRequest&& from) noexcept
    : LimitOrdersRequest() {
    *this = ::std::move(from);
  }

  inline LimitOrdersRequest& operator=(const LimitOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrdersRequest& operator=(LimitOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const LimitOrdersRequest*>(
               &_LimitOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LimitOrdersRequest& a, LimitOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitOrdersRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitOrdersRequest* New() const final {
    return new LimitOrdersRequest();
  }

  LimitOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LimitOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LimitOrdersRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitOrdersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.LimitOrdersRequest";
  }
  protected:
  explicit LimitOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated uint64 ids = 1 [json_name = "ids"];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_ids();

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.LimitOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > ids_;
  mutable std::atomic<int> _ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class LimitOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.LimitOrdersResponse) */ {
 public:
  inline LimitOrdersResponse() : LimitOrdersResponse(nullptr) {}
  ~LimitOrdersResponse() override;
  explicit constexpr LimitOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LimitOrdersResponse(const LimitOrdersResponse& from);
  LimitOrdersResponse(LimitOrdersResponse&& from) noexcept
    : LimitOrdersResponse() {
    *this = ::std::move(from);
  }

  inline LimitOrdersResponse& operator=(const LimitOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LimitOrdersResponse& operator=(LimitOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LimitOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LimitOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const LimitOrdersResponse*>(
               &_LimitOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LimitOrdersResponse& a, LimitOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LimitOrdersResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LimitOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LimitOrdersResponse* New() const final {
    return new LimitOrdersResponse();
  }

  LimitOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LimitOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LimitOrdersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LimitOrdersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LimitOrdersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.LimitOrdersResponse";
  }
  protected:
  explicit LimitOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::api_pb::LimitOrderResponse* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >*
      mutable_orders();
  private:
  const ::api_pb::LimitOrderResponse& _internal_orders(int index) const;
  ::api_pb::LimitOrderResponse* _internal_add_orders();
  public:
  const ::api_pb::LimitOrderResponse& orders(int index) const;
  ::api_pb::LimitOrderResponse* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >&
      orders() const;

  // @@protoc_insertion_point(class_scope:api_pb.LimitOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class UpdateVotesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UpdateVotesRequest) */ {
 public:
  inline UpdateVotesRequest() : UpdateVotesRequest(nullptr) {}
  ~UpdateVotesRequest() override;
  explicit constexpr UpdateVotesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVotesRequest(const UpdateVotesRequest& from);
  UpdateVotesRequest(UpdateVotesRequest&& from) noexcept
    : UpdateVotesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateVotesRequest& operator=(const UpdateVotesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVotesRequest& operator=(UpdateVotesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVotesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVotesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateVotesRequest*>(
               &_UpdateVotesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateVotesRequest& a, UpdateVotesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVotesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVotesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateVotesRequest* New() const final {
    return new UpdateVotesRequest();
  }

  UpdateVotesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVotesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVotesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVotesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVotesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UpdateVotesRequest";
  }
  protected:
  explicit UpdateVotesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetVersionFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_version() const;
  void set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_version() const;
  void _internal_set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UpdateVotesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class UpdateVotesResponse_Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UpdateVotesResponse.Vote) */ {
 public:
  inline UpdateVotesResponse_Vote() : UpdateVotesResponse_Vote(nullptr) {}
  ~UpdateVotesResponse_Vote() override;
  explicit constexpr UpdateVotesResponse_Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVotesResponse_Vote(const UpdateVotesResponse_Vote& from);
  UpdateVotesResponse_Vote(UpdateVotesResponse_Vote&& from) noexcept
    : UpdateVotesResponse_Vote() {
    *this = ::std::move(from);
  }

  inline UpdateVotesResponse_Vote& operator=(const UpdateVotesResponse_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVotesResponse_Vote& operator=(UpdateVotesResponse_Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVotesResponse_Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVotesResponse_Vote* internal_default_instance() {
    return reinterpret_cast<const UpdateVotesResponse_Vote*>(
               &_UpdateVotesResponse_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateVotesResponse_Vote& a, UpdateVotesResponse_Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVotesResponse_Vote* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVotesResponse_Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateVotesResponse_Vote* New() const final {
    return new UpdateVotesResponse_Vote();
  }

  UpdateVotesResponse_Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVotesResponse_Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVotesResponse_Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVotesResponse_Vote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVotesResponse_Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UpdateVotesResponse.Vote";
  }
  protected:
  explicit UpdateVotesResponse_Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeysFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated string public_keys = 1 [json_name = "publicKeys"];
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  const std::string& public_keys(int index) const;
  std::string* mutable_public_keys(int index);
  void set_public_keys(int index, const std::string& value);
  void set_public_keys(int index, std::string&& value);
  void set_public_keys(int index, const char* value);
  void set_public_keys(int index, const char* value, size_t size);
  std::string* add_public_keys();
  void add_public_keys(const std::string& value);
  void add_public_keys(std::string&& value);
  void add_public_keys(const char* value);
  void add_public_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_keys();
  private:
  const std::string& _internal_public_keys(int index) const;
  std::string* _internal_add_public_keys();
  public:

  // string version = 2 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UpdateVotesResponse.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class UpdateVotesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UpdateVotesResponse) */ {
 public:
  inline UpdateVotesResponse() : UpdateVotesResponse(nullptr) {}
  ~UpdateVotesResponse() override;
  explicit constexpr UpdateVotesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateVotesResponse(const UpdateVotesResponse& from);
  UpdateVotesResponse(UpdateVotesResponse&& from) noexcept
    : UpdateVotesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateVotesResponse& operator=(const UpdateVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateVotesResponse& operator=(UpdateVotesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateVotesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateVotesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateVotesResponse*>(
               &_UpdateVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateVotesResponse& a, UpdateVotesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateVotesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateVotesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateVotesResponse* New() const final {
    return new UpdateVotesResponse();
  }

  UpdateVotesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateVotesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateVotesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateVotesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateVotesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UpdateVotesResponse";
  }
  protected:
  explicit UpdateVotesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UpdateVotesResponse_Vote Vote;

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 1,
  };
  // repeated .api_pb.UpdateVotesResponse.Vote votes = 1 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  ::api_pb::UpdateVotesResponse_Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::UpdateVotesResponse_Vote >*
      mutable_votes();
  private:
  const ::api_pb::UpdateVotesResponse_Vote& _internal_votes(int index) const;
  ::api_pb::UpdateVotesResponse_Vote* _internal_add_votes();
  public:
  const ::api_pb::UpdateVotesResponse_Vote& votes(int index) const;
  ::api_pb::UpdateVotesResponse_Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::UpdateVotesResponse_Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:api_pb.UpdateVotesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::UpdateVotesResponse_Vote > votes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class VersionNetworkRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.VersionNetworkRequest) */ {
 public:
  inline VersionNetworkRequest() : VersionNetworkRequest(nullptr) {}
  ~VersionNetworkRequest() override;
  explicit constexpr VersionNetworkRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionNetworkRequest(const VersionNetworkRequest& from);
  VersionNetworkRequest(VersionNetworkRequest&& from) noexcept
    : VersionNetworkRequest() {
    *this = ::std::move(from);
  }

  inline VersionNetworkRequest& operator=(const VersionNetworkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionNetworkRequest& operator=(VersionNetworkRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionNetworkRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionNetworkRequest* internal_default_instance() {
    return reinterpret_cast<const VersionNetworkRequest*>(
               &_VersionNetworkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(VersionNetworkRequest& a, VersionNetworkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionNetworkRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionNetworkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionNetworkRequest* New() const final {
    return new VersionNetworkRequest();
  }

  VersionNetworkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionNetworkRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionNetworkRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VersionNetworkRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionNetworkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.VersionNetworkRequest";
  }
  protected:
  explicit VersionNetworkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:api_pb.VersionNetworkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class VersionNetworkResponse_Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.VersionNetworkResponse.Version) */ {
 public:
  inline VersionNetworkResponse_Version() : VersionNetworkResponse_Version(nullptr) {}
  ~VersionNetworkResponse_Version() override;
  explicit constexpr VersionNetworkResponse_Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionNetworkResponse_Version(const VersionNetworkResponse_Version& from);
  VersionNetworkResponse_Version(VersionNetworkResponse_Version&& from) noexcept
    : VersionNetworkResponse_Version() {
    *this = ::std::move(from);
  }

  inline VersionNetworkResponse_Version& operator=(const VersionNetworkResponse_Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionNetworkResponse_Version& operator=(VersionNetworkResponse_Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionNetworkResponse_Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionNetworkResponse_Version* internal_default_instance() {
    return reinterpret_cast<const VersionNetworkResponse_Version*>(
               &_VersionNetworkResponse_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(VersionNetworkResponse_Version& a, VersionNetworkResponse_Version& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionNetworkResponse_Version* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionNetworkResponse_Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionNetworkResponse_Version* New() const final {
    return new VersionNetworkResponse_Version();
  }

  VersionNetworkResponse_Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionNetworkResponse_Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionNetworkResponse_Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VersionNetworkResponse_Version& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionNetworkResponse_Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.VersionNetworkResponse.Version";
  }
  protected:
  explicit VersionNetworkResponse_Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 height = 2 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.VersionNetworkResponse.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class VersionNetworkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.VersionNetworkResponse) */ {
 public:
  inline VersionNetworkResponse() : VersionNetworkResponse(nullptr) {}
  ~VersionNetworkResponse() override;
  explicit constexpr VersionNetworkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionNetworkResponse(const VersionNetworkResponse& from);
  VersionNetworkResponse(VersionNetworkResponse&& from) noexcept
    : VersionNetworkResponse() {
    *this = ::std::move(from);
  }

  inline VersionNetworkResponse& operator=(const VersionNetworkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionNetworkResponse& operator=(VersionNetworkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionNetworkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionNetworkResponse* internal_default_instance() {
    return reinterpret_cast<const VersionNetworkResponse*>(
               &_VersionNetworkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VersionNetworkResponse& a, VersionNetworkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionNetworkResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionNetworkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionNetworkResponse* New() const final {
    return new VersionNetworkResponse();
  }

  VersionNetworkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionNetworkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionNetworkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VersionNetworkResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionNetworkResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.VersionNetworkResponse";
  }
  protected:
  explicit VersionNetworkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VersionNetworkResponse_Version Version;

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 3,
    kCurrentFieldNumber = 1,
  };
  // repeated .api_pb.VersionNetworkResponse.Version versions = 3 [json_name = "versions"];
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  ::api_pb::VersionNetworkResponse_Version* mutable_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::VersionNetworkResponse_Version >*
      mutable_versions();
  private:
  const ::api_pb::VersionNetworkResponse_Version& _internal_versions(int index) const;
  ::api_pb::VersionNetworkResponse_Version* _internal_add_versions();
  public:
  const ::api_pb::VersionNetworkResponse_Version& versions(int index) const;
  ::api_pb::VersionNetworkResponse_Version* add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::VersionNetworkResponse_Version >&
      versions() const;

  // string current = 1 [json_name = "current"];
  void clear_current();
  const std::string& current() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current();
  PROTOBUF_MUST_USE_RESULT std::string* release_current();
  void set_allocated_current(std::string* current);
  private:
  const std::string& _internal_current() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current(const std::string& value);
  std::string* _internal_mutable_current();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.VersionNetworkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::VersionNetworkResponse_Version > versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class PriceCommissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.PriceCommissionRequest) */ {
 public:
  inline PriceCommissionRequest() : PriceCommissionRequest(nullptr) {}
  ~PriceCommissionRequest() override;
  explicit constexpr PriceCommissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriceCommissionRequest(const PriceCommissionRequest& from);
  PriceCommissionRequest(PriceCommissionRequest&& from) noexcept
    : PriceCommissionRequest() {
    *this = ::std::move(from);
  }

  inline PriceCommissionRequest& operator=(const PriceCommissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceCommissionRequest& operator=(PriceCommissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceCommissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceCommissionRequest* internal_default_instance() {
    return reinterpret_cast<const PriceCommissionRequest*>(
               &_PriceCommissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PriceCommissionRequest& a, PriceCommissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceCommissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceCommissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceCommissionRequest* New() const final {
    return new PriceCommissionRequest();
  }

  PriceCommissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceCommissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriceCommissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PriceCommissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceCommissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.PriceCommissionRequest";
  }
  protected:
  explicit PriceCommissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.PriceCommissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class PriceCommissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.PriceCommissionResponse) */ {
 public:
  inline PriceCommissionResponse() : PriceCommissionResponse(nullptr) {}
  ~PriceCommissionResponse() override;
  explicit constexpr PriceCommissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriceCommissionResponse(const PriceCommissionResponse& from);
  PriceCommissionResponse(PriceCommissionResponse&& from) noexcept
    : PriceCommissionResponse() {
    *this = ::std::move(from);
  }

  inline PriceCommissionResponse& operator=(const PriceCommissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceCommissionResponse& operator=(PriceCommissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceCommissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceCommissionResponse* internal_default_instance() {
    return reinterpret_cast<const PriceCommissionResponse*>(
               &_PriceCommissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PriceCommissionResponse& a, PriceCommissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceCommissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceCommissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceCommissionResponse* New() const final {
    return new PriceCommissionResponse();
  }

  PriceCommissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceCommissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriceCommissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PriceCommissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceCommissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.PriceCommissionResponse";
  }
  protected:
  explicit PriceCommissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadByteFieldNumber = 4,
    kSendFieldNumber = 5,
    kCreateTicker3FieldNumber = 7,
    kCreateTicker4FieldNumber = 8,
    kCreateTicker5FieldNumber = 9,
    kCreateTicker6FieldNumber = 10,
    kCreateTicker710FieldNumber = 11,
    kDeclareCandidacyFieldNumber = 13,
    kDelegateFieldNumber = 14,
    kUnbondFieldNumber = 15,
    kRedeemCheckFieldNumber = 16,
    kCreateMultisigFieldNumber = 18,
    kEditCandidateFieldNumber = 20,
    kSetHaltBlockFieldNumber = 21,
    kEditTickerOwnerFieldNumber = 22,
    kEditMultisigFieldNumber = 23,
    kEditCandidatePublicKeyFieldNumber = 25,
    kEditCandidateCommissionFieldNumber = 28,
    kVoteCommissionFieldNumber = 31,
    kVoteUpdateFieldNumber = 32,
    kCreateCoinFieldNumber = 34,
    kCreateTokenFieldNumber = 35,
    kRecreateCoinFieldNumber = 36,
    kRecreateTokenFieldNumber = 37,
    kBuyBancorFieldNumber = 38,
    kSellBancorFieldNumber = 39,
    kSellAllBancorFieldNumber = 40,
    kBuyPoolBaseFieldNumber = 41,
    kSellPoolBaseFieldNumber = 42,
    kSellAllPoolBaseFieldNumber = 43,
    kSetCandidateOnFieldNumber = 44,
    kSetCandidateOffFieldNumber = 45,
    kMintTokenFieldNumber = 46,
    kBurnTokenFieldNumber = 47,
    kCreateSwapPoolFieldNumber = 48,
    kAddLiquidityFieldNumber = 49,
    kRemoveLiquidityFieldNumber = 50,
    kMultisendBaseFieldNumber = 51,
    kMultisendDeltaFieldNumber = 52,
    kBuyPoolDeltaFieldNumber = 53,
    kSellPoolDeltaFieldNumber = 54,
    kSellAllPoolDeltaFieldNumber = 55,
    kFailedTxFieldNumber = 56,
    kAddLimitOrderFieldNumber = 57,
    kRemoveLimitOrderFieldNumber = 58,
    kCoinFieldNumber = 3,
  };
  // string payload_byte = 4 [json_name = "payloadByte"];
  void clear_payload_byte();
  const std::string& payload_byte() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_byte(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_byte();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload_byte();
  void set_allocated_payload_byte(std::string* payload_byte);
  private:
  const std::string& _internal_payload_byte() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_byte(const std::string& value);
  std::string* _internal_mutable_payload_byte();
  public:

  // string send = 5 [json_name = "send"];
  void clear_send();
  const std::string& send() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send();
  PROTOBUF_MUST_USE_RESULT std::string* release_send();
  void set_allocated_send(std::string* send);
  private:
  const std::string& _internal_send() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send(const std::string& value);
  std::string* _internal_mutable_send();
  public:

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  void clear_create_ticker3();
  const std::string& create_ticker3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker3();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker3();
  void set_allocated_create_ticker3(std::string* create_ticker3);
  private:
  const std::string& _internal_create_ticker3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker3(const std::string& value);
  std::string* _internal_mutable_create_ticker3();
  public:

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  void clear_create_ticker4();
  const std::string& create_ticker4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker4();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker4();
  void set_allocated_create_ticker4(std::string* create_ticker4);
  private:
  const std::string& _internal_create_ticker4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker4(const std::string& value);
  std::string* _internal_mutable_create_ticker4();
  public:

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  void clear_create_ticker5();
  const std::string& create_ticker5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker5();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker5();
  void set_allocated_create_ticker5(std::string* create_ticker5);
  private:
  const std::string& _internal_create_ticker5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker5(const std::string& value);
  std::string* _internal_mutable_create_ticker5();
  public:

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  void clear_create_ticker6();
  const std::string& create_ticker6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker6();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker6();
  void set_allocated_create_ticker6(std::string* create_ticker6);
  private:
  const std::string& _internal_create_ticker6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker6(const std::string& value);
  std::string* _internal_mutable_create_ticker6();
  public:

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  void clear_create_ticker7_10();
  const std::string& create_ticker7_10() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker7_10(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker7_10();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker7_10();
  void set_allocated_create_ticker7_10(std::string* create_ticker7_10);
  private:
  const std::string& _internal_create_ticker7_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker7_10(const std::string& value);
  std::string* _internal_mutable_create_ticker7_10();
  public:

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  void clear_declare_candidacy();
  const std::string& declare_candidacy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_declare_candidacy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_declare_candidacy();
  PROTOBUF_MUST_USE_RESULT std::string* release_declare_candidacy();
  void set_allocated_declare_candidacy(std::string* declare_candidacy);
  private:
  const std::string& _internal_declare_candidacy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_declare_candidacy(const std::string& value);
  std::string* _internal_mutable_declare_candidacy();
  public:

  // string delegate = 14 [json_name = "delegate"];
  void clear_delegate();
  const std::string& delegate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate();
  PROTOBUF_MUST_USE_RESULT std::string* release_delegate();
  void set_allocated_delegate(std::string* delegate);
  private:
  const std::string& _internal_delegate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate(const std::string& value);
  std::string* _internal_mutable_delegate();
  public:

  // string unbond = 15 [json_name = "unbond"];
  void clear_unbond();
  const std::string& unbond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unbond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unbond();
  PROTOBUF_MUST_USE_RESULT std::string* release_unbond();
  void set_allocated_unbond(std::string* unbond);
  private:
  const std::string& _internal_unbond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unbond(const std::string& value);
  std::string* _internal_mutable_unbond();
  public:

  // string redeem_check = 16 [json_name = "redeemCheck"];
  void clear_redeem_check();
  const std::string& redeem_check() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redeem_check(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redeem_check();
  PROTOBUF_MUST_USE_RESULT std::string* release_redeem_check();
  void set_allocated_redeem_check(std::string* redeem_check);
  private:
  const std::string& _internal_redeem_check() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redeem_check(const std::string& value);
  std::string* _internal_mutable_redeem_check();
  public:

  // string create_multisig = 18 [json_name = "createMultisig"];
  void clear_create_multisig();
  const std::string& create_multisig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_multisig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_multisig();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_multisig();
  void set_allocated_create_multisig(std::string* create_multisig);
  private:
  const std::string& _internal_create_multisig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_multisig(const std::string& value);
  std::string* _internal_mutable_create_multisig();
  public:

  // string edit_candidate = 20 [json_name = "editCandidate"];
  void clear_edit_candidate();
  const std::string& edit_candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate();
  void set_allocated_edit_candidate(std::string* edit_candidate);
  private:
  const std::string& _internal_edit_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate(const std::string& value);
  std::string* _internal_mutable_edit_candidate();
  public:

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  void clear_set_halt_block();
  const std::string& set_halt_block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_halt_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_halt_block();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_halt_block();
  void set_allocated_set_halt_block(std::string* set_halt_block);
  private:
  const std::string& _internal_set_halt_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_halt_block(const std::string& value);
  std::string* _internal_mutable_set_halt_block();
  public:

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  void clear_edit_ticker_owner();
  const std::string& edit_ticker_owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_ticker_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_ticker_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_ticker_owner();
  void set_allocated_edit_ticker_owner(std::string* edit_ticker_owner);
  private:
  const std::string& _internal_edit_ticker_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_ticker_owner(const std::string& value);
  std::string* _internal_mutable_edit_ticker_owner();
  public:

  // string edit_multisig = 23 [json_name = "editMultisig"];
  void clear_edit_multisig();
  const std::string& edit_multisig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_multisig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_multisig();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_multisig();
  void set_allocated_edit_multisig(std::string* edit_multisig);
  private:
  const std::string& _internal_edit_multisig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_multisig(const std::string& value);
  std::string* _internal_mutable_edit_multisig();
  public:

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  void clear_edit_candidate_public_key();
  const std::string& edit_candidate_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate_public_key();
  void set_allocated_edit_candidate_public_key(std::string* edit_candidate_public_key);
  private:
  const std::string& _internal_edit_candidate_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate_public_key(const std::string& value);
  std::string* _internal_mutable_edit_candidate_public_key();
  public:

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  void clear_edit_candidate_commission();
  const std::string& edit_candidate_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate_commission();
  void set_allocated_edit_candidate_commission(std::string* edit_candidate_commission);
  private:
  const std::string& _internal_edit_candidate_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate_commission(const std::string& value);
  std::string* _internal_mutable_edit_candidate_commission();
  public:

  // string vote_commission = 31 [json_name = "voteCommission"];
  void clear_vote_commission();
  const std::string& vote_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vote_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vote_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_vote_commission();
  void set_allocated_vote_commission(std::string* vote_commission);
  private:
  const std::string& _internal_vote_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_commission(const std::string& value);
  std::string* _internal_mutable_vote_commission();
  public:

  // string vote_update = 32 [json_name = "voteUpdate"];
  void clear_vote_update();
  const std::string& vote_update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vote_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vote_update();
  PROTOBUF_MUST_USE_RESULT std::string* release_vote_update();
  void set_allocated_vote_update(std::string* vote_update);
  private:
  const std::string& _internal_vote_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_update(const std::string& value);
  std::string* _internal_mutable_vote_update();
  public:

  // string create_coin = 34 [json_name = "createCoin"];
  void clear_create_coin();
  const std::string& create_coin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_coin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_coin();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_coin();
  void set_allocated_create_coin(std::string* create_coin);
  private:
  const std::string& _internal_create_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_coin(const std::string& value);
  std::string* _internal_mutable_create_coin();
  public:

  // string create_token = 35 [json_name = "createToken"];
  void clear_create_token();
  const std::string& create_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_token();
  void set_allocated_create_token(std::string* create_token);
  private:
  const std::string& _internal_create_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_token(const std::string& value);
  std::string* _internal_mutable_create_token();
  public:

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  void clear_recreate_coin();
  const std::string& recreate_coin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recreate_coin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recreate_coin();
  PROTOBUF_MUST_USE_RESULT std::string* release_recreate_coin();
  void set_allocated_recreate_coin(std::string* recreate_coin);
  private:
  const std::string& _internal_recreate_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recreate_coin(const std::string& value);
  std::string* _internal_mutable_recreate_coin();
  public:

  // string recreate_token = 37 [json_name = "recreateToken"];
  void clear_recreate_token();
  const std::string& recreate_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recreate_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recreate_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_recreate_token();
  void set_allocated_recreate_token(std::string* recreate_token);
  private:
  const std::string& _internal_recreate_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recreate_token(const std::string& value);
  std::string* _internal_mutable_recreate_token();
  public:

  // string buy_bancor = 38 [json_name = "buyBancor"];
  void clear_buy_bancor();
  const std::string& buy_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_bancor();
  void set_allocated_buy_bancor(std::string* buy_bancor);
  private:
  const std::string& _internal_buy_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_bancor(const std::string& value);
  std::string* _internal_mutable_buy_bancor();
  public:

  // string sell_bancor = 39 [json_name = "sellBancor"];
  void clear_sell_bancor();
  const std::string& sell_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_bancor();
  void set_allocated_sell_bancor(std::string* sell_bancor);
  private:
  const std::string& _internal_sell_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_bancor(const std::string& value);
  std::string* _internal_mutable_sell_bancor();
  public:

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  void clear_sell_all_bancor();
  const std::string& sell_all_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_bancor();
  void set_allocated_sell_all_bancor(std::string* sell_all_bancor);
  private:
  const std::string& _internal_sell_all_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_bancor(const std::string& value);
  std::string* _internal_mutable_sell_all_bancor();
  public:

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  void clear_buy_pool_base();
  const std::string& buy_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_pool_base();
  void set_allocated_buy_pool_base(std::string* buy_pool_base);
  private:
  const std::string& _internal_buy_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_pool_base(const std::string& value);
  std::string* _internal_mutable_buy_pool_base();
  public:

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  void clear_sell_pool_base();
  const std::string& sell_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_pool_base();
  void set_allocated_sell_pool_base(std::string* sell_pool_base);
  private:
  const std::string& _internal_sell_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_pool_base(const std::string& value);
  std::string* _internal_mutable_sell_pool_base();
  public:

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  void clear_sell_all_pool_base();
  const std::string& sell_all_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_pool_base();
  void set_allocated_sell_all_pool_base(std::string* sell_all_pool_base);
  private:
  const std::string& _internal_sell_all_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_pool_base(const std::string& value);
  std::string* _internal_mutable_sell_all_pool_base();
  public:

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  void clear_set_candidate_on();
  const std::string& set_candidate_on() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_candidate_on(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_candidate_on();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_candidate_on();
  void set_allocated_set_candidate_on(std::string* set_candidate_on);
  private:
  const std::string& _internal_set_candidate_on() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_candidate_on(const std::string& value);
  std::string* _internal_mutable_set_candidate_on();
  public:

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  void clear_set_candidate_off();
  const std::string& set_candidate_off() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_candidate_off(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_candidate_off();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_candidate_off();
  void set_allocated_set_candidate_off(std::string* set_candidate_off);
  private:
  const std::string& _internal_set_candidate_off() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_candidate_off(const std::string& value);
  std::string* _internal_mutable_set_candidate_off();
  public:

  // string mint_token = 46 [json_name = "mintToken"];
  void clear_mint_token();
  const std::string& mint_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mint_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mint_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_mint_token();
  void set_allocated_mint_token(std::string* mint_token);
  private:
  const std::string& _internal_mint_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mint_token(const std::string& value);
  std::string* _internal_mutable_mint_token();
  public:

  // string burn_token = 47 [json_name = "burnToken"];
  void clear_burn_token();
  const std::string& burn_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_burn_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_burn_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_burn_token();
  void set_allocated_burn_token(std::string* burn_token);
  private:
  const std::string& _internal_burn_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_burn_token(const std::string& value);
  std::string* _internal_mutable_burn_token();
  public:

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  void clear_create_swap_pool();
  const std::string& create_swap_pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_swap_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_swap_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_swap_pool();
  void set_allocated_create_swap_pool(std::string* create_swap_pool);
  private:
  const std::string& _internal_create_swap_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_swap_pool(const std::string& value);
  std::string* _internal_mutable_create_swap_pool();
  public:

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  void clear_add_liquidity();
  const std::string& add_liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_liquidity();
  void set_allocated_add_liquidity(std::string* add_liquidity);
  private:
  const std::string& _internal_add_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_liquidity(const std::string& value);
  std::string* _internal_mutable_add_liquidity();
  public:

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  void clear_remove_liquidity();
  const std::string& remove_liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remove_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remove_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_remove_liquidity();
  void set_allocated_remove_liquidity(std::string* remove_liquidity);
  private:
  const std::string& _internal_remove_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remove_liquidity(const std::string& value);
  std::string* _internal_mutable_remove_liquidity();
  public:

  // string multisend_base = 51 [json_name = "multisendBase"];
  void clear_multisend_base();
  const std::string& multisend_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multisend_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multisend_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_multisend_base();
  void set_allocated_multisend_base(std::string* multisend_base);
  private:
  const std::string& _internal_multisend_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multisend_base(const std::string& value);
  std::string* _internal_mutable_multisend_base();
  public:

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  void clear_multisend_delta();
  const std::string& multisend_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multisend_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multisend_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_multisend_delta();
  void set_allocated_multisend_delta(std::string* multisend_delta);
  private:
  const std::string& _internal_multisend_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multisend_delta(const std::string& value);
  std::string* _internal_mutable_multisend_delta();
  public:

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  void clear_buy_pool_delta();
  const std::string& buy_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_pool_delta();
  void set_allocated_buy_pool_delta(std::string* buy_pool_delta);
  private:
  const std::string& _internal_buy_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_pool_delta(const std::string& value);
  std::string* _internal_mutable_buy_pool_delta();
  public:

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  void clear_sell_pool_delta();
  const std::string& sell_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_pool_delta();
  void set_allocated_sell_pool_delta(std::string* sell_pool_delta);
  private:
  const std::string& _internal_sell_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_pool_delta(const std::string& value);
  std::string* _internal_mutable_sell_pool_delta();
  public:

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  void clear_sell_all_pool_delta();
  const std::string& sell_all_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_pool_delta();
  void set_allocated_sell_all_pool_delta(std::string* sell_all_pool_delta);
  private:
  const std::string& _internal_sell_all_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_pool_delta(const std::string& value);
  std::string* _internal_mutable_sell_all_pool_delta();
  public:

  // string failed_tx = 56 [json_name = "failedTx"];
  void clear_failed_tx();
  const std::string& failed_tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failed_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failed_tx();
  PROTOBUF_MUST_USE_RESULT std::string* release_failed_tx();
  void set_allocated_failed_tx(std::string* failed_tx);
  private:
  const std::string& _internal_failed_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failed_tx(const std::string& value);
  std::string* _internal_mutable_failed_tx();
  public:

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  void clear_add_limit_order();
  const std::string& add_limit_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_limit_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_limit_order();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_limit_order();
  void set_allocated_add_limit_order(std::string* add_limit_order);
  private:
  const std::string& _internal_add_limit_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_limit_order(const std::string& value);
  std::string* _internal_mutable_add_limit_order();
  public:

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  void clear_remove_limit_order();
  const std::string& remove_limit_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remove_limit_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remove_limit_order();
  PROTOBUF_MUST_USE_RESULT std::string* release_remove_limit_order();
  void set_allocated_remove_limit_order(std::string* remove_limit_order);
  private:
  const std::string& _internal_remove_limit_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remove_limit_order(const std::string& value);
  std::string* _internal_mutable_remove_limit_order();
  public:

  // .api_pb.Coin coin = 3 [json_name = "coin"];
  bool has_coin() const;
  private:
  bool _internal_has_coin() const;
  public:
  void clear_coin();
  const ::api_pb::Coin& coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin();
  ::api_pb::Coin* mutable_coin();
  void set_allocated_coin(::api_pb::Coin* coin);
  private:
  const ::api_pb::Coin& _internal_coin() const;
  ::api_pb::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::api_pb::Coin* coin);
  ::api_pb::Coin* unsafe_arena_release_coin();

  // @@protoc_insertion_point(class_scope:api_pb.PriceCommissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_byte_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker7_10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr declare_candidacy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unbond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redeem_check_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_multisig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_halt_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_ticker_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_multisig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_commission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_commission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_update_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recreate_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recreate_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_candidate_on_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_candidate_off_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mint_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burn_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_swap_pool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remove_liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multisend_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multisend_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failed_tx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_limit_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remove_limit_order_;
  ::api_pb::Coin* coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SwapPoolRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SwapPoolRequest) */ {
 public:
  inline SwapPoolRequest() : SwapPoolRequest(nullptr) {}
  ~SwapPoolRequest() override;
  explicit constexpr SwapPoolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapPoolRequest(const SwapPoolRequest& from);
  SwapPoolRequest(SwapPoolRequest&& from) noexcept
    : SwapPoolRequest() {
    *this = ::std::move(from);
  }

  inline SwapPoolRequest& operator=(const SwapPoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapPoolRequest& operator=(SwapPoolRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapPoolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapPoolRequest* internal_default_instance() {
    return reinterpret_cast<const SwapPoolRequest*>(
               &_SwapPoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SwapPoolRequest& a, SwapPoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapPoolRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapPoolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapPoolRequest* New() const final {
    return new SwapPoolRequest();
  }

  SwapPoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapPoolRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapPoolRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapPoolRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapPoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SwapPoolRequest";
  }
  protected:
  explicit SwapPoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoin0FieldNumber = 1,
    kCoin1FieldNumber = 2,
    kHeightFieldNumber = 4,
  };
  // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_coin0();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin0() const;
  void set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin0() const;
  void _internal_set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_coin1();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin1() const;
  void set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin1() const;
  void _internal_set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SwapPoolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SwapPoolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SwapPoolResponse) */ {
 public:
  inline SwapPoolResponse() : SwapPoolResponse(nullptr) {}
  ~SwapPoolResponse() override;
  explicit constexpr SwapPoolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapPoolResponse(const SwapPoolResponse& from);
  SwapPoolResponse(SwapPoolResponse&& from) noexcept
    : SwapPoolResponse() {
    *this = ::std::move(from);
  }

  inline SwapPoolResponse& operator=(const SwapPoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapPoolResponse& operator=(SwapPoolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapPoolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapPoolResponse* internal_default_instance() {
    return reinterpret_cast<const SwapPoolResponse*>(
               &_SwapPoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SwapPoolResponse& a, SwapPoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapPoolResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapPoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapPoolResponse* New() const final {
    return new SwapPoolResponse();
  }

  SwapPoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapPoolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapPoolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapPoolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapPoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SwapPoolResponse";
  }
  protected:
  explicit SwapPoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmount0FieldNumber = 1,
    kAmount1FieldNumber = 2,
    kLiquidityFieldNumber = 3,
    kPriceFieldNumber = 4,
  };
  // string amount0 = 1 [json_name = "amount0"];
  void clear_amount0();
  const std::string& amount0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount0();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount0();
  void set_allocated_amount0(std::string* amount0);
  private:
  const std::string& _internal_amount0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount0(const std::string& value);
  std::string* _internal_mutable_amount0();
  public:

  // string amount1 = 2 [json_name = "amount1"];
  void clear_amount1();
  const std::string& amount1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_amount1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_amount1();
  PROTOBUF_MUST_USE_RESULT std::string* release_amount1();
  void set_allocated_amount1(std::string* amount1);
  private:
  const std::string& _internal_amount1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount1(const std::string& value);
  std::string* _internal_mutable_amount1();
  public:

  // string liquidity = 3 [json_name = "liquidity"];
  void clear_liquidity();
  const std::string& liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_liquidity();
  void set_allocated_liquidity(std::string* liquidity);
  private:
  const std::string& _internal_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_liquidity(const std::string& value);
  std::string* _internal_mutable_liquidity();
  public:

  // string price = 4 [json_name = "price"];
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_MUST_USE_RESULT std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SwapPoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SwapPoolProviderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SwapPoolProviderRequest) */ {
 public:
  inline SwapPoolProviderRequest() : SwapPoolProviderRequest(nullptr) {}
  ~SwapPoolProviderRequest() override;
  explicit constexpr SwapPoolProviderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapPoolProviderRequest(const SwapPoolProviderRequest& from);
  SwapPoolProviderRequest(SwapPoolProviderRequest&& from) noexcept
    : SwapPoolProviderRequest() {
    *this = ::std::move(from);
  }

  inline SwapPoolProviderRequest& operator=(const SwapPoolProviderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapPoolProviderRequest& operator=(SwapPoolProviderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapPoolProviderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapPoolProviderRequest* internal_default_instance() {
    return reinterpret_cast<const SwapPoolProviderRequest*>(
               &_SwapPoolProviderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SwapPoolProviderRequest& a, SwapPoolProviderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapPoolProviderRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapPoolProviderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapPoolProviderRequest* New() const final {
    return new SwapPoolProviderRequest();
  }

  SwapPoolProviderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapPoolProviderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapPoolProviderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SwapPoolProviderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapPoolProviderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SwapPoolProviderRequest";
  }
  protected:
  explicit SwapPoolProviderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 3,
    kCoin0FieldNumber = 1,
    kCoin1FieldNumber = 2,
    kHeightFieldNumber = 4,
  };
  // string provider = 3 [json_name = "provider"];
  void clear_provider();
  const std::string& provider() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider();
  PROTOBUF_MUST_USE_RESULT std::string* release_provider();
  void set_allocated_provider(std::string* provider);
  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(const std::string& value);
  std::string* _internal_mutable_provider();
  public:

  // uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_coin0();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin0() const;
  void set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin0() const;
  void _internal_set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_coin1();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin1() const;
  void set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin1() const;
  void _internal_set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SwapPoolProviderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_ProtocolVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NodeInfo.ProtocolVersion) */ {
 public:
  inline NodeInfo_ProtocolVersion() : NodeInfo_ProtocolVersion(nullptr) {}
  ~NodeInfo_ProtocolVersion() override;
  explicit constexpr NodeInfo_ProtocolVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfo_ProtocolVersion(const NodeInfo_ProtocolVersion& from);
  NodeInfo_ProtocolVersion(NodeInfo_ProtocolVersion&& from) noexcept
    : NodeInfo_ProtocolVersion() {
    *this = ::std::move(from);
  }

  inline NodeInfo_ProtocolVersion& operator=(const NodeInfo_ProtocolVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_ProtocolVersion& operator=(NodeInfo_ProtocolVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfo_ProtocolVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfo_ProtocolVersion* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_ProtocolVersion*>(
               &_NodeInfo_ProtocolVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(NodeInfo_ProtocolVersion& a, NodeInfo_ProtocolVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_ProtocolVersion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo_ProtocolVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_ProtocolVersion* New() const final {
    return new NodeInfo_ProtocolVersion();
  }

  NodeInfo_ProtocolVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_ProtocolVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfo_ProtocolVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeInfo_ProtocolVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_ProtocolVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NodeInfo.ProtocolVersion";
  }
  protected:
  explicit NodeInfo_ProtocolVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kAppFieldNumber = 2,
    kP2PFieldNumber = 3,
  };
  // uint64 block = 1 [json_name = "block"];
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint64 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 app = 2 [json_name = "app"];
  void clear_app();
  ::PROTOBUF_NAMESPACE_ID::uint64 app() const;
  void set_app(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_app() const;
  void _internal_set_app(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 p2p = 3 [json_name = "p2p"];
  void clear_p2p();
  ::PROTOBUF_NAMESPACE_ID::uint64 p2p() const;
  void set_p2p(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_p2p() const;
  void _internal_set_p2p(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NodeInfo.ProtocolVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 app_;
  ::PROTOBUF_NAMESPACE_ID::uint64 p2p_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_Other final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NodeInfo.Other) */ {
 public:
  inline NodeInfo_Other() : NodeInfo_Other(nullptr) {}
  ~NodeInfo_Other() override;
  explicit constexpr NodeInfo_Other(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfo_Other(const NodeInfo_Other& from);
  NodeInfo_Other(NodeInfo_Other&& from) noexcept
    : NodeInfo_Other() {
    *this = ::std::move(from);
  }

  inline NodeInfo_Other& operator=(const NodeInfo_Other& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_Other& operator=(NodeInfo_Other&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfo_Other& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfo_Other* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_Other*>(
               &_NodeInfo_Other_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(NodeInfo_Other& a, NodeInfo_Other& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_Other* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo_Other* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_Other* New() const final {
    return new NodeInfo_Other();
  }

  NodeInfo_Other* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_Other>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfo_Other& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeInfo_Other& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_Other* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NodeInfo.Other";
  }
  protected:
  explicit NodeInfo_Other(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRpcAddressFieldNumber = 1,
    kTxIndexFieldNumber = 2,
  };
  // string rpc_address = 1 [json_name = "rpcAddress"];
  void clear_rpc_address();
  const std::string& rpc_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rpc_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rpc_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_rpc_address();
  void set_allocated_rpc_address(std::string* rpc_address);
  private:
  const std::string& _internal_rpc_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rpc_address(const std::string& value);
  std::string* _internal_mutable_rpc_address();
  public:

  // string tx_index = 2 [json_name = "txIndex"];
  void clear_tx_index();
  const std::string& tx_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx_index();
  PROTOBUF_MUST_USE_RESULT std::string* release_tx_index();
  void set_allocated_tx_index(std::string* tx_index);
  private:
  const std::string& _internal_tx_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_index(const std::string& value);
  std::string* _internal_mutable_tx_index();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NodeInfo.Other)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpc_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {}
  ~NodeInfo() override;
  explicit constexpr NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return new NodeInfo();
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NodeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeInfo_ProtocolVersion ProtocolVersion;
  typedef NodeInfo_Other Other;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kListenAddrFieldNumber = 2,
    kNetworkFieldNumber = 3,
    kVersionFieldNumber = 4,
    kChannelsFieldNumber = 5,
    kMonikerFieldNumber = 6,
    kOtherFieldNumber = 7,
    kProtocolVersionFieldNumber = 8,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string listen_addr = 2 [json_name = "listenAddr"];
  void clear_listen_addr();
  const std::string& listen_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_listen_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_listen_addr();
  PROTOBUF_MUST_USE_RESULT std::string* release_listen_addr();
  void set_allocated_listen_addr(std::string* listen_addr);
  private:
  const std::string& _internal_listen_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_listen_addr(const std::string& value);
  std::string* _internal_mutable_listen_addr();
  public:

  // string network = 3 [json_name = "network"];
  void clear_network();
  const std::string& network() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network();
  PROTOBUF_MUST_USE_RESULT std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // string version = 4 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string channels = 5 [json_name = "channels"];
  void clear_channels();
  const std::string& channels() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channels(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channels();
  PROTOBUF_MUST_USE_RESULT std::string* release_channels();
  void set_allocated_channels(std::string* channels);
  private:
  const std::string& _internal_channels() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channels(const std::string& value);
  std::string* _internal_mutable_channels();
  public:

  // string moniker = 6 [json_name = "moniker"];
  void clear_moniker();
  const std::string& moniker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_moniker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_moniker();
  PROTOBUF_MUST_USE_RESULT std::string* release_moniker();
  void set_allocated_moniker(std::string* moniker);
  private:
  const std::string& _internal_moniker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moniker(const std::string& value);
  std::string* _internal_mutable_moniker();
  public:

  // .api_pb.NodeInfo.Other other = 7 [json_name = "other"];
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::api_pb::NodeInfo_Other& other() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::NodeInfo_Other* release_other();
  ::api_pb::NodeInfo_Other* mutable_other();
  void set_allocated_other(::api_pb::NodeInfo_Other* other);
  private:
  const ::api_pb::NodeInfo_Other& _internal_other() const;
  ::api_pb::NodeInfo_Other* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::api_pb::NodeInfo_Other* other);
  ::api_pb::NodeInfo_Other* unsafe_arena_release_other();

  // .api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];
  bool has_protocol_version() const;
  private:
  bool _internal_has_protocol_version() const;
  public:
  void clear_protocol_version();
  const ::api_pb::NodeInfo_ProtocolVersion& protocol_version() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::NodeInfo_ProtocolVersion* release_protocol_version();
  ::api_pb::NodeInfo_ProtocolVersion* mutable_protocol_version();
  void set_allocated_protocol_version(::api_pb::NodeInfo_ProtocolVersion* protocol_version);
  private:
  const ::api_pb::NodeInfo_ProtocolVersion& _internal_protocol_version() const;
  ::api_pb::NodeInfo_ProtocolVersion* _internal_mutable_protocol_version();
  public:
  void unsafe_arena_set_allocated_protocol_version(
      ::api_pb::NodeInfo_ProtocolVersion* protocol_version);
  ::api_pb::NodeInfo_ProtocolVersion* unsafe_arena_release_protocol_version();

  // @@protoc_insertion_point(class_scope:api_pb.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr listen_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moniker_;
  ::api_pb::NodeInfo_Other* other_;
  ::api_pb::NodeInfo_ProtocolVersion* protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NetInfoResponse_Peer_ConnectionStatus_Monitor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor) */ {
 public:
  inline NetInfoResponse_Peer_ConnectionStatus_Monitor() : NetInfoResponse_Peer_ConnectionStatus_Monitor(nullptr) {}
  ~NetInfoResponse_Peer_ConnectionStatus_Monitor() override;
  explicit constexpr NetInfoResponse_Peer_ConnectionStatus_Monitor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfoResponse_Peer_ConnectionStatus_Monitor(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from);
  NetInfoResponse_Peer_ConnectionStatus_Monitor(NetInfoResponse_Peer_ConnectionStatus_Monitor&& from) noexcept
    : NetInfoResponse_Peer_ConnectionStatus_Monitor() {
    *this = ::std::move(from);
  }

  inline NetInfoResponse_Peer_ConnectionStatus_Monitor& operator=(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfoResponse_Peer_ConnectionStatus_Monitor& operator=(NetInfoResponse_Peer_ConnectionStatus_Monitor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfoResponse_Peer_ConnectionStatus_Monitor& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfoResponse_Peer_ConnectionStatus_Monitor* internal_default_instance() {
    return reinterpret_cast<const NetInfoResponse_Peer_ConnectionStatus_Monitor*>(
               &_NetInfoResponse_Peer_ConnectionStatus_Monitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(NetInfoResponse_Peer_ConnectionStatus_Monitor& a, NetInfoResponse_Peer_ConnectionStatus_Monitor& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfoResponse_Peer_ConnectionStatus_Monitor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfoResponse_Peer_ConnectionStatus_Monitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetInfoResponse_Peer_ConnectionStatus_Monitor* New() const final {
    return new NetInfoResponse_Peer_ConnectionStatus_Monitor();
  }

  NetInfoResponse_Peer_ConnectionStatus_Monitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInfoResponse_Peer_ConnectionStatus_Monitor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInfoResponse_Peer_ConnectionStatus_Monitor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfoResponse_Peer_ConnectionStatus_Monitor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor";
  }
  protected:
  explicit NetInfoResponse_Peer_ConnectionStatus_Monitor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kDurationFieldNumber = 2,
    kIdleFieldNumber = 3,
    kBytesFieldNumber = 4,
    kSamplesFieldNumber = 5,
    kInstRateFieldNumber = 6,
    kCurRateFieldNumber = 7,
    kAvgRateFieldNumber = 8,
    kPeakRateFieldNumber = 9,
    kBytesRemFieldNumber = 10,
    kTimeRemFieldNumber = 11,
    kProgressFieldNumber = 12,
    kActiveFieldNumber = 13,
  };
  // string start = 1 [json_name = "start"];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // int64 duration = 2 [json_name = "duration"];
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 idle = 3 [json_name = "idle"];
  void clear_idle();
  ::PROTOBUF_NAMESPACE_ID::int64 idle() const;
  void set_idle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_idle() const;
  void _internal_set_idle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bytes = 4 [json_name = "bytes"];
  void clear_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes() const;
  void set_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes() const;
  void _internal_set_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 samples = 5 [json_name = "samples"];
  void clear_samples();
  ::PROTOBUF_NAMESPACE_ID::int64 samples() const;
  void set_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_samples() const;
  void _internal_set_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 inst_rate = 6 [json_name = "instRate"];
  void clear_inst_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 inst_rate() const;
  void set_inst_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_inst_rate() const;
  void _internal_set_inst_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cur_rate = 7 [json_name = "curRate"];
  void clear_cur_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 cur_rate() const;
  void set_cur_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cur_rate() const;
  void _internal_set_cur_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 avg_rate = 8 [json_name = "avgRate"];
  void clear_avg_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 avg_rate() const;
  void set_avg_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_avg_rate() const;
  void _internal_set_avg_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 peak_rate = 9 [json_name = "peakRate"];
  void clear_peak_rate();
  ::PROTOBUF_NAMESPACE_ID::int64 peak_rate() const;
  void set_peak_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_peak_rate() const;
  void _internal_set_peak_rate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 bytes_rem = 10 [json_name = "bytesRem"];
  void clear_bytes_rem();
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_rem() const;
  void set_bytes_rem(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_bytes_rem() const;
  void _internal_set_bytes_rem(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time_rem = 11 [json_name = "timeRem"];
  void clear_time_rem();
  ::PROTOBUF_NAMESPACE_ID::int64 time_rem() const;
  void set_time_rem(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_rem() const;
  void _internal_set_time_rem(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 progress = 12 [json_name = "progress"];
  void clear_progress();
  ::PROTOBUF_NAMESPACE_ID::uint64 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_progress() const;
  void _internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool active = 13 [json_name = "active"];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_;
  ::PROTOBUF_NAMESPACE_ID::int64 idle_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 samples_;
  ::PROTOBUF_NAMESPACE_ID::int64 inst_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 cur_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 avg_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 peak_rate_;
  ::PROTOBUF_NAMESPACE_ID::int64 bytes_rem_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_rem_;
  ::PROTOBUF_NAMESPACE_ID::uint64 progress_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NetInfoResponse_Peer_ConnectionStatus_Channel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel) */ {
 public:
  inline NetInfoResponse_Peer_ConnectionStatus_Channel() : NetInfoResponse_Peer_ConnectionStatus_Channel(nullptr) {}
  ~NetInfoResponse_Peer_ConnectionStatus_Channel() override;
  explicit constexpr NetInfoResponse_Peer_ConnectionStatus_Channel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfoResponse_Peer_ConnectionStatus_Channel(const NetInfoResponse_Peer_ConnectionStatus_Channel& from);
  NetInfoResponse_Peer_ConnectionStatus_Channel(NetInfoResponse_Peer_ConnectionStatus_Channel&& from) noexcept
    : NetInfoResponse_Peer_ConnectionStatus_Channel() {
    *this = ::std::move(from);
  }

  inline NetInfoResponse_Peer_ConnectionStatus_Channel& operator=(const NetInfoResponse_Peer_ConnectionStatus_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfoResponse_Peer_ConnectionStatus_Channel& operator=(NetInfoResponse_Peer_ConnectionStatus_Channel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfoResponse_Peer_ConnectionStatus_Channel& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfoResponse_Peer_ConnectionStatus_Channel* internal_default_instance() {
    return reinterpret_cast<const NetInfoResponse_Peer_ConnectionStatus_Channel*>(
               &_NetInfoResponse_Peer_ConnectionStatus_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NetInfoResponse_Peer_ConnectionStatus_Channel& a, NetInfoResponse_Peer_ConnectionStatus_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfoResponse_Peer_ConnectionStatus_Channel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfoResponse_Peer_ConnectionStatus_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetInfoResponse_Peer_ConnectionStatus_Channel* New() const final {
    return new NetInfoResponse_Peer_ConnectionStatus_Channel();
  }

  NetInfoResponse_Peer_ConnectionStatus_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInfoResponse_Peer_ConnectionStatus_Channel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfoResponse_Peer_ConnectionStatus_Channel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInfoResponse_Peer_ConnectionStatus_Channel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfoResponse_Peer_ConnectionStatus_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel";
  }
  protected:
  explicit NetInfoResponse_Peer_ConnectionStatus_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSendQueueCapacityFieldNumber = 1,
    kSendQueueSizeFieldNumber = 2,
    kPriorityFieldNumber = 3,
    kRecentlySentFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // int64 send_queue_capacity = 1 [json_name = "sendQueueCapacity"];
  void clear_send_queue_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 send_queue_capacity() const;
  void set_send_queue_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_send_queue_capacity() const;
  void _internal_set_send_queue_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 send_queue_size = 2 [json_name = "sendQueueSize"];
  void clear_send_queue_size();
  ::PROTOBUF_NAMESPACE_ID::int64 send_queue_size() const;
  void set_send_queue_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_send_queue_size() const;
  void _internal_set_send_queue_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 priority = 3 [json_name = "priority"];
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int64 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 recently_sent = 4 [json_name = "recentlySent"];
  void clear_recently_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 recently_sent() const;
  void set_recently_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_recently_sent() const;
  void _internal_set_recently_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 id = 5 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 send_queue_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 send_queue_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 priority_;
  ::PROTOBUF_NAMESPACE_ID::int64 recently_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NetInfoResponse_Peer_ConnectionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NetInfoResponse.Peer.ConnectionStatus) */ {
 public:
  inline NetInfoResponse_Peer_ConnectionStatus() : NetInfoResponse_Peer_ConnectionStatus(nullptr) {}
  ~NetInfoResponse_Peer_ConnectionStatus() override;
  explicit constexpr NetInfoResponse_Peer_ConnectionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfoResponse_Peer_ConnectionStatus(const NetInfoResponse_Peer_ConnectionStatus& from);
  NetInfoResponse_Peer_ConnectionStatus(NetInfoResponse_Peer_ConnectionStatus&& from) noexcept
    : NetInfoResponse_Peer_ConnectionStatus() {
    *this = ::std::move(from);
  }

  inline NetInfoResponse_Peer_ConnectionStatus& operator=(const NetInfoResponse_Peer_ConnectionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfoResponse_Peer_ConnectionStatus& operator=(NetInfoResponse_Peer_ConnectionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfoResponse_Peer_ConnectionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfoResponse_Peer_ConnectionStatus* internal_default_instance() {
    return reinterpret_cast<const NetInfoResponse_Peer_ConnectionStatus*>(
               &_NetInfoResponse_Peer_ConnectionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(NetInfoResponse_Peer_ConnectionStatus& a, NetInfoResponse_Peer_ConnectionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfoResponse_Peer_ConnectionStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfoResponse_Peer_ConnectionStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetInfoResponse_Peer_ConnectionStatus* New() const final {
    return new NetInfoResponse_Peer_ConnectionStatus();
  }

  NetInfoResponse_Peer_ConnectionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInfoResponse_Peer_ConnectionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfoResponse_Peer_ConnectionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInfoResponse_Peer_ConnectionStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfoResponse_Peer_ConnectionStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NetInfoResponse.Peer.ConnectionStatus";
  }
  protected:
  explicit NetInfoResponse_Peer_ConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInfoResponse_Peer_ConnectionStatus_Monitor Monitor;
  typedef NetInfoResponse_Peer_ConnectionStatus_Channel Channel;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 3,
    kSendMonitorFieldNumber = 1,
    kRecvMonitorFieldNumber = 2,
    kDurationFieldNumber = 4,
  };
  // repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel >*
      mutable_channels();
  private:
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel& _internal_channels(int index) const;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* _internal_add_channels();
  public:
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel& channels(int index) const;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel >&
      channels() const;

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1 [json_name = "SendMonitor"];
  bool has_sendmonitor() const;
  private:
  bool _internal_has_sendmonitor() const;
  public:
  void clear_sendmonitor();
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& sendmonitor() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* release_sendmonitor();
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* mutable_sendmonitor();
  void set_allocated_sendmonitor(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* sendmonitor);
  private:
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& _internal_sendmonitor() const;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* _internal_mutable_sendmonitor();
  public:
  void unsafe_arena_set_allocated_sendmonitor(
      ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* sendmonitor);
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* unsafe_arena_release_sendmonitor();

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2 [json_name = "RecvMonitor"];
  bool has_recvmonitor() const;
  private:
  bool _internal_has_recvmonitor() const;
  public:
  void clear_recvmonitor();
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& recvmonitor() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* release_recvmonitor();
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* mutable_recvmonitor();
  void set_allocated_recvmonitor(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* recvmonitor);
  private:
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& _internal_recvmonitor() const;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* _internal_mutable_recvmonitor();
  public:
  void unsafe_arena_set_allocated_recvmonitor(
      ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* recvmonitor);
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* unsafe_arena_release_recvmonitor();

  // uint64 duration = 4 [json_name = "duration"];
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NetInfoResponse.Peer.ConnectionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel > channels_;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* sendmonitor_;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* recvmonitor_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NetInfoResponse_Peer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NetInfoResponse.Peer) */ {
 public:
  inline NetInfoResponse_Peer() : NetInfoResponse_Peer(nullptr) {}
  ~NetInfoResponse_Peer() override;
  explicit constexpr NetInfoResponse_Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfoResponse_Peer(const NetInfoResponse_Peer& from);
  NetInfoResponse_Peer(NetInfoResponse_Peer&& from) noexcept
    : NetInfoResponse_Peer() {
    *this = ::std::move(from);
  }

  inline NetInfoResponse_Peer& operator=(const NetInfoResponse_Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfoResponse_Peer& operator=(NetInfoResponse_Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfoResponse_Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfoResponse_Peer* internal_default_instance() {
    return reinterpret_cast<const NetInfoResponse_Peer*>(
               &_NetInfoResponse_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(NetInfoResponse_Peer& a, NetInfoResponse_Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfoResponse_Peer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfoResponse_Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetInfoResponse_Peer* New() const final {
    return new NetInfoResponse_Peer();
  }

  NetInfoResponse_Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInfoResponse_Peer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfoResponse_Peer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInfoResponse_Peer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfoResponse_Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NetInfoResponse.Peer";
  }
  protected:
  explicit NetInfoResponse_Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInfoResponse_Peer_ConnectionStatus ConnectionStatus;

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIpFieldNumber = 3,
    kConnectionStatusFieldNumber = 2,
    kNodeInfoFieldNumber = 4,
    kLatestBlockHeightFieldNumber = 5,
    kIsOutboundFieldNumber = 1,
  };
  // string remote_ip = 3 [json_name = "remoteIp"];
  void clear_remote_ip();
  const std::string& remote_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_ip();
  PROTOBUF_MUST_USE_RESULT std::string* release_remote_ip();
  void set_allocated_remote_ip(std::string* remote_ip);
  private:
  const std::string& _internal_remote_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_ip(const std::string& value);
  std::string* _internal_mutable_remote_ip();
  public:

  // .api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2 [json_name = "connectionStatus"];
  bool has_connection_status() const;
  private:
  bool _internal_has_connection_status() const;
  public:
  void clear_connection_status();
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus& connection_status() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::NetInfoResponse_Peer_ConnectionStatus* release_connection_status();
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* mutable_connection_status();
  void set_allocated_connection_status(::api_pb::NetInfoResponse_Peer_ConnectionStatus* connection_status);
  private:
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus& _internal_connection_status() const;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* _internal_mutable_connection_status();
  public:
  void unsafe_arena_set_allocated_connection_status(
      ::api_pb::NetInfoResponse_Peer_ConnectionStatus* connection_status);
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* unsafe_arena_release_connection_status();

  // .api_pb.NodeInfo node_info = 4 [json_name = "nodeInfo"];
  bool has_node_info() const;
  private:
  bool _internal_has_node_info() const;
  public:
  void clear_node_info();
  const ::api_pb::NodeInfo& node_info() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::NodeInfo* release_node_info();
  ::api_pb::NodeInfo* mutable_node_info();
  void set_allocated_node_info(::api_pb::NodeInfo* node_info);
  private:
  const ::api_pb::NodeInfo& _internal_node_info() const;
  ::api_pb::NodeInfo* _internal_mutable_node_info();
  public:
  void unsafe_arena_set_allocated_node_info(
      ::api_pb::NodeInfo* node_info);
  ::api_pb::NodeInfo* unsafe_arena_release_node_info();

  // .google.protobuf.UInt64Value latest_block_height = 5 [json_name = "latestBlockHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_latest_block_height() const;
  private:
  bool _internal_has_latest_block_height() const;
  public:
  void clear_latest_block_height();
  const PROTOBUF_NAMESPACE_ID::UInt64Value& latest_block_height() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::UInt64Value* release_latest_block_height();
  PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_latest_block_height();
  void set_allocated_latest_block_height(PROTOBUF_NAMESPACE_ID::UInt64Value* latest_block_height);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_latest_block_height() const;
  PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_latest_block_height();
  public:
  void unsafe_arena_set_allocated_latest_block_height(
      PROTOBUF_NAMESPACE_ID::UInt64Value* latest_block_height);
  PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_latest_block_height();

  // bool is_outbound = 1 [json_name = "isOutbound"];
  void clear_is_outbound();
  bool is_outbound() const;
  void set_is_outbound(bool value);
  private:
  bool _internal_is_outbound() const;
  void _internal_set_is_outbound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NetInfoResponse.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_ip_;
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* connection_status_;
  ::api_pb::NodeInfo* node_info_;
  PROTOBUF_NAMESPACE_ID::UInt64Value* latest_block_height_;
  bool is_outbound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class NetInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.NetInfoResponse) */ {
 public:
  inline NetInfoResponse() : NetInfoResponse(nullptr) {}
  ~NetInfoResponse() override;
  explicit constexpr NetInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetInfoResponse(const NetInfoResponse& from);
  NetInfoResponse(NetInfoResponse&& from) noexcept
    : NetInfoResponse() {
    *this = ::std::move(from);
  }

  inline NetInfoResponse& operator=(const NetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetInfoResponse& operator=(NetInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NetInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const NetInfoResponse*>(
               &_NetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(NetInfoResponse& a, NetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetInfoResponse* New() const final {
    return new NetInfoResponse();
  }

  NetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NetInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NetInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.NetInfoResponse";
  }
  protected:
  explicit NetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetInfoResponse_Peer Peer;

  // accessors -------------------------------------------------------

  enum : int {
    kListenersFieldNumber = 1,
    kPeersFieldNumber = 3,
    kCountPeersFieldNumber = 2,
    kListeningFieldNumber = 4,
  };
  // repeated string listeners = 1 [json_name = "listeners"];
  int listeners_size() const;
  private:
  int _internal_listeners_size() const;
  public:
  void clear_listeners();
  const std::string& listeners(int index) const;
  std::string* mutable_listeners(int index);
  void set_listeners(int index, const std::string& value);
  void set_listeners(int index, std::string&& value);
  void set_listeners(int index, const char* value);
  void set_listeners(int index, const char* value, size_t size);
  std::string* add_listeners();
  void add_listeners(const std::string& value);
  void add_listeners(std::string&& value);
  void add_listeners(const char* value);
  void add_listeners(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& listeners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_listeners();
  private:
  const std::string& _internal_listeners(int index) const;
  std::string* _internal_add_listeners();
  public:

  // repeated .api_pb.NetInfoResponse.Peer peers = 3 [json_name = "peers"];
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::api_pb::NetInfoResponse_Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer >*
      mutable_peers();
  private:
  const ::api_pb::NetInfoResponse_Peer& _internal_peers(int index) const;
  ::api_pb::NetInfoResponse_Peer* _internal_add_peers();
  public:
  const ::api_pb::NetInfoResponse_Peer& peers(int index) const;
  ::api_pb::NetInfoResponse_Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer >&
      peers() const;

  // int64 count_peers = 2 [json_name = "countPeers"];
  void clear_count_peers();
  ::PROTOBUF_NAMESPACE_ID::int64 count_peers() const;
  void set_count_peers(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count_peers() const;
  void _internal_set_count_peers(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool listening = 4 [json_name = "listening"];
  void clear_listening();
  bool listening() const;
  void set_listening(bool value);
  private:
  bool _internal_listening() const;
  void _internal_set_listening(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.NetInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> listeners_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer > peers_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_peers_;
  bool listening_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  explicit constexpr StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const final {
    return new StatusResponse();
  }

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestBlockHashFieldNumber = 1,
    kLatestAppHashFieldNumber = 2,
    kLatestBlockTimeFieldNumber = 4,
    kPublicKeyFieldNumber = 7,
    kVersionFieldNumber = 8,
    kNodeIdFieldNumber = 9,
    kTotalSlashedFieldNumber = 10,
    kNetworkFieldNumber = 11,
    kMonikerFieldNumber = 13,
    kLatestBlockHeightFieldNumber = 3,
    kKeepLastStatesFieldNumber = 5,
    kInitialHeightFieldNumber = 12,
    kCatchingUpFieldNumber = 6,
  };
  // string latest_block_hash = 1 [json_name = "latestBlockHash"];
  void clear_latest_block_hash();
  const std::string& latest_block_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_block_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_block_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_latest_block_hash();
  void set_allocated_latest_block_hash(std::string* latest_block_hash);
  private:
  const std::string& _internal_latest_block_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_block_hash(const std::string& value);
  std::string* _internal_mutable_latest_block_hash();
  public:

  // string latest_app_hash = 2 [json_name = "latestAppHash"];
  void clear_latest_app_hash();
  const std::string& latest_app_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_app_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_app_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_latest_app_hash();
  void set_allocated_latest_app_hash(std::string* latest_app_hash);
  private:
  const std::string& _internal_latest_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_app_hash(const std::string& value);
  std::string* _internal_mutable_latest_app_hash();
  public:

  // string latest_block_time = 4 [json_name = "latestBlockTime"];
  void clear_latest_block_time();
  const std::string& latest_block_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_latest_block_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_latest_block_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_latest_block_time();
  void set_allocated_latest_block_time(std::string* latest_block_time);
  private:
  const std::string& _internal_latest_block_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_latest_block_time(const std::string& value);
  std::string* _internal_mutable_latest_block_time();
  public:

  // string public_key = 7 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string version = 8 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string node_id = 9 [json_name = "nodeId"];
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string total_slashed = 10 [json_name = "totalSlashed"];
  void clear_total_slashed();
  const std::string& total_slashed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_total_slashed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_total_slashed();
  PROTOBUF_MUST_USE_RESULT std::string* release_total_slashed();
  void set_allocated_total_slashed(std::string* total_slashed);
  private:
  const std::string& _internal_total_slashed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_slashed(const std::string& value);
  std::string* _internal_mutable_total_slashed();
  public:

  // string network = 11 [json_name = "network"];
  void clear_network();
  const std::string& network() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_network(ArgT0&& arg0, ArgT... args);
  std::string* mutable_network();
  PROTOBUF_MUST_USE_RESULT std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // string moniker = 13 [json_name = "moniker"];
  void clear_moniker();
  const std::string& moniker() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_moniker(ArgT0&& arg0, ArgT... args);
  std::string* mutable_moniker();
  PROTOBUF_MUST_USE_RESULT std::string* release_moniker();
  void set_allocated_moniker(std::string* moniker);
  private:
  const std::string& _internal_moniker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_moniker(const std::string& value);
  std::string* _internal_mutable_moniker();
  public:

  // uint64 latest_block_height = 3 [json_name = "latestBlockHeight"];
  void clear_latest_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_block_height() const;
  void set_latest_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest_block_height() const;
  void _internal_set_latest_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 keep_last_states = 5 [json_name = "keepLastStates"];
  void clear_keep_last_states();
  ::PROTOBUF_NAMESPACE_ID::uint64 keep_last_states() const;
  void set_keep_last_states(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_keep_last_states() const;
  void _internal_set_keep_last_states(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 initial_height = 12 [json_name = "initialHeight"];
  void clear_initial_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_height() const;
  void set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initial_height() const;
  void _internal_set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool catching_up = 6 [json_name = "catchingUp"];
  void clear_catching_up();
  bool catching_up() const;
  void set_catching_up(bool value);
  private:
  bool _internal_catching_up() const;
  void _internal_set_catching_up(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_app_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latest_block_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_slashed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moniker_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_block_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 keep_last_states_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_height_;
  bool catching_up_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_ConsensusParams_Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.ConsensusParams.Block) */ {
 public:
  inline GenesisResponse_ConsensusParams_Block() : GenesisResponse_ConsensusParams_Block(nullptr) {}
  ~GenesisResponse_ConsensusParams_Block() override;
  explicit constexpr GenesisResponse_ConsensusParams_Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_ConsensusParams_Block(const GenesisResponse_ConsensusParams_Block& from);
  GenesisResponse_ConsensusParams_Block(GenesisResponse_ConsensusParams_Block&& from) noexcept
    : GenesisResponse_ConsensusParams_Block() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_ConsensusParams_Block& operator=(const GenesisResponse_ConsensusParams_Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_ConsensusParams_Block& operator=(GenesisResponse_ConsensusParams_Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_ConsensusParams_Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_ConsensusParams_Block* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_ConsensusParams_Block*>(
               &_GenesisResponse_ConsensusParams_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GenesisResponse_ConsensusParams_Block& a, GenesisResponse_ConsensusParams_Block& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_ConsensusParams_Block* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_ConsensusParams_Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_ConsensusParams_Block* New() const final {
    return new GenesisResponse_ConsensusParams_Block();
  }

  GenesisResponse_ConsensusParams_Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_ConsensusParams_Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_ConsensusParams_Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_ConsensusParams_Block& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_ConsensusParams_Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.ConsensusParams.Block";
  }
  protected:
  explicit GenesisResponse_ConsensusParams_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBytesFieldNumber = 1,
    kMaxGasFieldNumber = 2,
    kTimeIotaMsFieldNumber = 3,
  };
  // int64 max_bytes = 1 [json_name = "maxBytes"];
  void clear_max_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 max_bytes() const;
  void set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_bytes() const;
  void _internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_gas = 2 [json_name = "maxGas"];
  void clear_max_gas();
  ::PROTOBUF_NAMESPACE_ID::int64 max_gas() const;
  void set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_gas() const;
  void _internal_set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time_iota_ms = 3 [json_name = "timeIotaMs"];
  void clear_time_iota_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 time_iota_ms() const;
  void set_time_iota_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_iota_ms() const;
  void _internal_set_time_iota_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.ConsensusParams.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_gas_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_iota_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_ConsensusParams_Evidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.ConsensusParams.Evidence) */ {
 public:
  inline GenesisResponse_ConsensusParams_Evidence() : GenesisResponse_ConsensusParams_Evidence(nullptr) {}
  ~GenesisResponse_ConsensusParams_Evidence() override;
  explicit constexpr GenesisResponse_ConsensusParams_Evidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_ConsensusParams_Evidence(const GenesisResponse_ConsensusParams_Evidence& from);
  GenesisResponse_ConsensusParams_Evidence(GenesisResponse_ConsensusParams_Evidence&& from) noexcept
    : GenesisResponse_ConsensusParams_Evidence() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_ConsensusParams_Evidence& operator=(const GenesisResponse_ConsensusParams_Evidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_ConsensusParams_Evidence& operator=(GenesisResponse_ConsensusParams_Evidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_ConsensusParams_Evidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_ConsensusParams_Evidence* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_ConsensusParams_Evidence*>(
               &_GenesisResponse_ConsensusParams_Evidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GenesisResponse_ConsensusParams_Evidence& a, GenesisResponse_ConsensusParams_Evidence& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_ConsensusParams_Evidence* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_ConsensusParams_Evidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_ConsensusParams_Evidence* New() const final {
    return new GenesisResponse_ConsensusParams_Evidence();
  }

  GenesisResponse_ConsensusParams_Evidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_ConsensusParams_Evidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_ConsensusParams_Evidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_ConsensusParams_Evidence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_ConsensusParams_Evidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.ConsensusParams.Evidence";
  }
  protected:
  explicit GenesisResponse_ConsensusParams_Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAgeNumBlocksFieldNumber = 1,
    kMaxAgeDurationFieldNumber = 2,
  };
  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  void clear_max_age_num_blocks();
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_num_blocks() const;
  void set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_age_num_blocks() const;
  void _internal_set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
  void clear_max_age_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_duration() const;
  void set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_age_duration() const;
  void _internal_set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.ConsensusParams.Evidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_num_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_age_duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_ConsensusParams_Validator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.ConsensusParams.Validator) */ {
 public:
  inline GenesisResponse_ConsensusParams_Validator() : GenesisResponse_ConsensusParams_Validator(nullptr) {}
  ~GenesisResponse_ConsensusParams_Validator() override;
  explicit constexpr GenesisResponse_ConsensusParams_Validator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_ConsensusParams_Validator(const GenesisResponse_ConsensusParams_Validator& from);
  GenesisResponse_ConsensusParams_Validator(GenesisResponse_ConsensusParams_Validator&& from) noexcept
    : GenesisResponse_ConsensusParams_Validator() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_ConsensusParams_Validator& operator=(const GenesisResponse_ConsensusParams_Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_ConsensusParams_Validator& operator=(GenesisResponse_ConsensusParams_Validator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_ConsensusParams_Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_ConsensusParams_Validator* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_ConsensusParams_Validator*>(
               &_GenesisResponse_ConsensusParams_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GenesisResponse_ConsensusParams_Validator& a, GenesisResponse_ConsensusParams_Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_ConsensusParams_Validator* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_ConsensusParams_Validator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_ConsensusParams_Validator* New() const final {
    return new GenesisResponse_ConsensusParams_Validator();
  }

  GenesisResponse_ConsensusParams_Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_ConsensusParams_Validator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_ConsensusParams_Validator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_ConsensusParams_Validator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_ConsensusParams_Validator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.ConsensusParams.Validator";
  }
  protected:
  explicit GenesisResponse_ConsensusParams_Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyTypesFieldNumber = 1,
  };
  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  int pub_key_types_size() const;
  private:
  int _internal_pub_key_types_size() const;
  public:
  void clear_pub_key_types();
  const std::string& pub_key_types(int index) const;
  std::string* mutable_pub_key_types(int index);
  void set_pub_key_types(int index, const std::string& value);
  void set_pub_key_types(int index, std::string&& value);
  void set_pub_key_types(int index, const char* value);
  void set_pub_key_types(int index, const char* value, size_t size);
  std::string* add_pub_key_types();
  void add_pub_key_types(const std::string& value);
  void add_pub_key_types(std::string&& value);
  void add_pub_key_types(const char* value);
  void add_pub_key_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_key_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_key_types();
  private:
  const std::string& _internal_pub_key_types(int index) const;
  std::string* _internal_add_pub_key_types();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.ConsensusParams.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_key_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_ConsensusParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.ConsensusParams) */ {
 public:
  inline GenesisResponse_ConsensusParams() : GenesisResponse_ConsensusParams(nullptr) {}
  ~GenesisResponse_ConsensusParams() override;
  explicit constexpr GenesisResponse_ConsensusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_ConsensusParams(const GenesisResponse_ConsensusParams& from);
  GenesisResponse_ConsensusParams(GenesisResponse_ConsensusParams&& from) noexcept
    : GenesisResponse_ConsensusParams() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_ConsensusParams& operator=(const GenesisResponse_ConsensusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_ConsensusParams& operator=(GenesisResponse_ConsensusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_ConsensusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_ConsensusParams* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_ConsensusParams*>(
               &_GenesisResponse_ConsensusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GenesisResponse_ConsensusParams& a, GenesisResponse_ConsensusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_ConsensusParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_ConsensusParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_ConsensusParams* New() const final {
    return new GenesisResponse_ConsensusParams();
  }

  GenesisResponse_ConsensusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_ConsensusParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_ConsensusParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_ConsensusParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_ConsensusParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.ConsensusParams";
  }
  protected:
  explicit GenesisResponse_ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenesisResponse_ConsensusParams_Block Block;
  typedef GenesisResponse_ConsensusParams_Evidence Evidence;
  typedef GenesisResponse_ConsensusParams_Validator Validator;

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kEvidenceFieldNumber = 2,
    kValidatorFieldNumber = 3,
  };
  // .api_pb.GenesisResponse.ConsensusParams.Block block = 1 [json_name = "block"];
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::api_pb::GenesisResponse_ConsensusParams_Block& block() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_ConsensusParams_Block* release_block();
  ::api_pb::GenesisResponse_ConsensusParams_Block* mutable_block();
  void set_allocated_block(::api_pb::GenesisResponse_ConsensusParams_Block* block);
  private:
  const ::api_pb::GenesisResponse_ConsensusParams_Block& _internal_block() const;
  ::api_pb::GenesisResponse_ConsensusParams_Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::api_pb::GenesisResponse_ConsensusParams_Block* block);
  ::api_pb::GenesisResponse_ConsensusParams_Block* unsafe_arena_release_block();

  // .api_pb.GenesisResponse.ConsensusParams.Evidence evidence = 2 [json_name = "evidence"];
  bool has_evidence() const;
  private:
  bool _internal_has_evidence() const;
  public:
  void clear_evidence();
  const ::api_pb::GenesisResponse_ConsensusParams_Evidence& evidence() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_ConsensusParams_Evidence* release_evidence();
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* mutable_evidence();
  void set_allocated_evidence(::api_pb::GenesisResponse_ConsensusParams_Evidence* evidence);
  private:
  const ::api_pb::GenesisResponse_ConsensusParams_Evidence& _internal_evidence() const;
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::api_pb::GenesisResponse_ConsensusParams_Evidence* evidence);
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* unsafe_arena_release_evidence();

  // .api_pb.GenesisResponse.ConsensusParams.Validator validator = 3 [json_name = "validator"];
  bool has_validator() const;
  private:
  bool _internal_has_validator() const;
  public:
  void clear_validator();
  const ::api_pb::GenesisResponse_ConsensusParams_Validator& validator() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_ConsensusParams_Validator* release_validator();
  ::api_pb::GenesisResponse_ConsensusParams_Validator* mutable_validator();
  void set_allocated_validator(::api_pb::GenesisResponse_ConsensusParams_Validator* validator);
  private:
  const ::api_pb::GenesisResponse_ConsensusParams_Validator& _internal_validator() const;
  ::api_pb::GenesisResponse_ConsensusParams_Validator* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::api_pb::GenesisResponse_ConsensusParams_Validator* validator);
  ::api_pb::GenesisResponse_ConsensusParams_Validator* unsafe_arena_release_validator();

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.ConsensusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api_pb::GenesisResponse_ConsensusParams_Block* block_;
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* evidence_;
  ::api_pb::GenesisResponse_ConsensusParams_Validator* validator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Validators final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Validators) */ {
 public:
  inline GenesisResponse_AppState_Validators() : GenesisResponse_AppState_Validators(nullptr) {}
  ~GenesisResponse_AppState_Validators() override;
  explicit constexpr GenesisResponse_AppState_Validators(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Validators(const GenesisResponse_AppState_Validators& from);
  GenesisResponse_AppState_Validators(GenesisResponse_AppState_Validators&& from) noexcept
    : GenesisResponse_AppState_Validators() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Validators& operator=(const GenesisResponse_AppState_Validators& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Validators& operator=(GenesisResponse_AppState_Validators&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Validators& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Validators* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Validators*>(
               &_GenesisResponse_AppState_Validators_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GenesisResponse_AppState_Validators& a, GenesisResponse_AppState_Validators& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Validators* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Validators* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Validators* New() const final {
    return new GenesisResponse_AppState_Validators();
  }

  GenesisResponse_AppState_Validators* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Validators>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Validators& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Validators& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Validators* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Validators";
  }
  protected:
  explicit GenesisResponse_AppState_Validators(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kAccumRewardFieldNumber = 2,
    kAbsentTimesFieldNumber = 3,
    kTotalBipStakeFieldNumber = 4,
  };
  // string public_key = 1 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string accum_reward = 2 [json_name = "accumReward"];
  void clear_accum_reward();
  const std::string& accum_reward() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accum_reward(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accum_reward();
  PROTOBUF_MUST_USE_RESULT std::string* release_accum_reward();
  void set_allocated_accum_reward(std::string* accum_reward);
  private:
  const std::string& _internal_accum_reward() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accum_reward(const std::string& value);
  std::string* _internal_mutable_accum_reward();
  public:

  // string absent_times = 3 [json_name = "absentTimes"];
  void clear_absent_times();
  const std::string& absent_times() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_absent_times(ArgT0&& arg0, ArgT... args);
  std::string* mutable_absent_times();
  PROTOBUF_MUST_USE_RESULT std::string* release_absent_times();
  void set_allocated_absent_times(std::string* absent_times);
  private:
  const std::string& _internal_absent_times() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_absent_times(const std::string& value);
  std::string* _internal_mutable_absent_times();
  public:

  // string total_bip_stake = 4 [json_name = "totalBipStake"];
  void clear_total_bip_stake();
  const std::string& total_bip_stake() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_total_bip_stake(ArgT0&& arg0, ArgT... args);
  std::string* mutable_total_bip_stake();
  PROTOBUF_MUST_USE_RESULT std::string* release_total_bip_stake();
  void set_allocated_total_bip_stake(std::string* total_bip_stake);
  private:
  const std::string& _internal_total_bip_stake() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_bip_stake(const std::string& value);
  std::string* _internal_mutable_total_bip_stake();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Validators)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accum_reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absent_times_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_bip_stake_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Candidate_Stake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Candidate.Stake) */ {
 public:
  inline GenesisResponse_AppState_Candidate_Stake() : GenesisResponse_AppState_Candidate_Stake(nullptr) {}
  ~GenesisResponse_AppState_Candidate_Stake() override;
  explicit constexpr GenesisResponse_AppState_Candidate_Stake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Candidate_Stake(const GenesisResponse_AppState_Candidate_Stake& from);
  GenesisResponse_AppState_Candidate_Stake(GenesisResponse_AppState_Candidate_Stake&& from) noexcept
    : GenesisResponse_AppState_Candidate_Stake() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Candidate_Stake& operator=(const GenesisResponse_AppState_Candidate_Stake& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Candidate_Stake& operator=(GenesisResponse_AppState_Candidate_Stake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Candidate_Stake& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Candidate_Stake* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Candidate_Stake*>(
               &_GenesisResponse_AppState_Candidate_Stake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GenesisResponse_AppState_Candidate_Stake& a, GenesisResponse_AppState_Candidate_Stake& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Candidate_Stake* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Candidate_Stake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Candidate_Stake* New() const final {
    return new GenesisResponse_AppState_Candidate_Stake();
  }

  GenesisResponse_AppState_Candidate_Stake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Candidate_Stake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Candidate_Stake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Candidate_Stake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Candidate_Stake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Candidate.Stake";
  }
  protected:
  explicit GenesisResponse_AppState_Candidate_Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kBipValueFieldNumber = 3,
    kOwnerFieldNumber = 4,
    kCoinFieldNumber = 1,
  };
  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string bip_value = 3 [json_name = "bipValue"];
  void clear_bip_value();
  const std::string& bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bip_value();
  void set_allocated_bip_value(std::string* bip_value);
  private:
  const std::string& _internal_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bip_value(const std::string& value);
  std::string* _internal_mutable_bip_value();
  public:

  // string owner = 4 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // uint64 coin = 1 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Candidate.Stake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bip_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Candidate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Candidate) */ {
 public:
  inline GenesisResponse_AppState_Candidate() : GenesisResponse_AppState_Candidate(nullptr) {}
  ~GenesisResponse_AppState_Candidate() override;
  explicit constexpr GenesisResponse_AppState_Candidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Candidate(const GenesisResponse_AppState_Candidate& from);
  GenesisResponse_AppState_Candidate(GenesisResponse_AppState_Candidate&& from) noexcept
    : GenesisResponse_AppState_Candidate() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Candidate& operator=(const GenesisResponse_AppState_Candidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Candidate& operator=(GenesisResponse_AppState_Candidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Candidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Candidate* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Candidate*>(
               &_GenesisResponse_AppState_Candidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GenesisResponse_AppState_Candidate& a, GenesisResponse_AppState_Candidate& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Candidate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Candidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Candidate* New() const final {
    return new GenesisResponse_AppState_Candidate();
  }

  GenesisResponse_AppState_Candidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Candidate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Candidate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Candidate& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Candidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Candidate";
  }
  protected:
  explicit GenesisResponse_AppState_Candidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenesisResponse_AppState_Candidate_Stake Stake;

  // accessors -------------------------------------------------------

  enum : int {
    kStakesFieldNumber = 7,
    kUpdatesFieldNumber = 8,
    kRewardAddressFieldNumber = 1,
    kOwnerAddressFieldNumber = 2,
    kControlAddressFieldNumber = 3,
    kTotalBipStakeFieldNumber = 4,
    kPublicKeyFieldNumber = 5,
    kCommissionFieldNumber = 6,
    kStatusFieldNumber = 9,
    kIdFieldNumber = 10,
    kJailedUntilFieldNumber = 11,
    kLastEditCommissionHeightFieldNumber = 12,
  };
  // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake stakes = 7 [json_name = "stakes"];
  int stakes_size() const;
  private:
  int _internal_stakes_size() const;
  public:
  void clear_stakes();
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* mutable_stakes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >*
      mutable_stakes();
  private:
  const ::api_pb::GenesisResponse_AppState_Candidate_Stake& _internal_stakes(int index) const;
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* _internal_add_stakes();
  public:
  const ::api_pb::GenesisResponse_AppState_Candidate_Stake& stakes(int index) const;
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* add_stakes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >&
      stakes() const;

  // repeated .api_pb.GenesisResponse.AppState.Candidate.Stake updates = 8 [json_name = "updates"];
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >*
      mutable_updates();
  private:
  const ::api_pb::GenesisResponse_AppState_Candidate_Stake& _internal_updates(int index) const;
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* _internal_add_updates();
  public:
  const ::api_pb::GenesisResponse_AppState_Candidate_Stake& updates(int index) const;
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >&
      updates() const;

  // string reward_address = 1 [json_name = "rewardAddress"];
  void clear_reward_address();
  const std::string& reward_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_reward_address();
  void set_allocated_reward_address(std::string* reward_address);
  private:
  const std::string& _internal_reward_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_address(const std::string& value);
  std::string* _internal_mutable_reward_address();
  public:

  // string owner_address = 2 [json_name = "ownerAddress"];
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // string control_address = 3 [json_name = "controlAddress"];
  void clear_control_address();
  const std::string& control_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_control_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_control_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_control_address();
  void set_allocated_control_address(std::string* control_address);
  private:
  const std::string& _internal_control_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_address(const std::string& value);
  std::string* _internal_mutable_control_address();
  public:

  // string total_bip_stake = 4 [json_name = "totalBipStake"];
  void clear_total_bip_stake();
  const std::string& total_bip_stake() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_total_bip_stake(ArgT0&& arg0, ArgT... args);
  std::string* mutable_total_bip_stake();
  PROTOBUF_MUST_USE_RESULT std::string* release_total_bip_stake();
  void set_allocated_total_bip_stake(std::string* total_bip_stake);
  private:
  const std::string& _internal_total_bip_stake() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_bip_stake(const std::string& value);
  std::string* _internal_mutable_total_bip_stake();
  public:

  // string public_key = 5 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint64 commission = 6 [json_name = "commission"];
  void clear_commission();
  ::PROTOBUF_NAMESPACE_ID::uint64 commission() const;
  void set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commission() const;
  void _internal_set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 status = 9 [json_name = "status"];
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 id = 10 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 jailed_until = 11 [json_name = "jailedUntil"];
  void clear_jailed_until();
  ::PROTOBUF_NAMESPACE_ID::int64 jailed_until() const;
  void set_jailed_until(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_jailed_until() const;
  void _internal_set_jailed_until(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_edit_commission_height = 12 [json_name = "lastEditCommissionHeight"];
  void clear_last_edit_commission_height();
  ::PROTOBUF_NAMESPACE_ID::int64 last_edit_commission_height() const;
  void set_last_edit_commission_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_edit_commission_height() const;
  void _internal_set_last_edit_commission_height(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Candidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake > stakes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake > updates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_bip_stake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commission_;
  ::PROTOBUF_NAMESPACE_ID::int64 status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 jailed_until_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_edit_commission_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Coin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Coin) */ {
 public:
  inline GenesisResponse_AppState_Coin() : GenesisResponse_AppState_Coin(nullptr) {}
  ~GenesisResponse_AppState_Coin() override;
  explicit constexpr GenesisResponse_AppState_Coin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Coin(const GenesisResponse_AppState_Coin& from);
  GenesisResponse_AppState_Coin(GenesisResponse_AppState_Coin&& from) noexcept
    : GenesisResponse_AppState_Coin() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Coin& operator=(const GenesisResponse_AppState_Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Coin& operator=(GenesisResponse_AppState_Coin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Coin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Coin* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Coin*>(
               &_GenesisResponse_AppState_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GenesisResponse_AppState_Coin& a, GenesisResponse_AppState_Coin& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Coin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Coin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Coin* New() const final {
    return new GenesisResponse_AppState_Coin();
  }

  GenesisResponse_AppState_Coin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Coin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Coin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Coin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Coin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Coin";
  }
  protected:
  explicit GenesisResponse_AppState_Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kReserveFieldNumber = 5,
    kMaxSupplyFieldNumber = 6,
    kOwnerAddressFieldNumber = 8,
    kCrrFieldNumber = 4,
    kVersionFieldNumber = 7,
    kIdFieldNumber = 9,
    kMintableFieldNumber = 10,
    kBurnableFieldNumber = 11,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string volume = 3 [json_name = "volume"];
  void clear_volume();
  const std::string& volume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume();
  PROTOBUF_MUST_USE_RESULT std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // string reserve = 5 [json_name = "reserve"];
  void clear_reserve();
  const std::string& reserve() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve();
  PROTOBUF_MUST_USE_RESULT std::string* release_reserve();
  void set_allocated_reserve(std::string* reserve);
  private:
  const std::string& _internal_reserve() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve(const std::string& value);
  std::string* _internal_mutable_reserve();
  public:

  // string max_supply = 6 [json_name = "maxSupply"];
  void clear_max_supply();
  const std::string& max_supply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_supply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_supply();
  PROTOBUF_MUST_USE_RESULT std::string* release_max_supply();
  void set_allocated_max_supply(std::string* max_supply);
  private:
  const std::string& _internal_max_supply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_supply(const std::string& value);
  std::string* _internal_mutable_max_supply();
  public:

  // .google.protobuf.StringValue owner_address = 8 [json_name = "ownerAddress"];
  bool has_owner_address() const;
  private:
  bool _internal_has_owner_address() const;
  public:
  void clear_owner_address();
  const PROTOBUF_NAMESPACE_ID::StringValue& owner_address() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::StringValue* release_owner_address();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_owner_address();
  void set_allocated_owner_address(PROTOBUF_NAMESPACE_ID::StringValue* owner_address);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_owner_address() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_owner_address();
  public:
  void unsafe_arena_set_allocated_owner_address(
      PROTOBUF_NAMESPACE_ID::StringValue* owner_address);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_owner_address();

  // uint64 crr = 4 [json_name = "crr"];
  void clear_crr();
  ::PROTOBUF_NAMESPACE_ID::uint64 crr() const;
  void set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_crr() const;
  void _internal_set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 version = 7 [json_name = "version"];
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 id = 9 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool mintable = 10 [json_name = "mintable"];
  void clear_mintable();
  bool mintable() const;
  void set_mintable(bool value);
  private:
  bool _internal_mintable() const;
  void _internal_set_mintable(bool value);
  public:

  // bool burnable = 11 [json_name = "burnable"];
  void clear_burnable();
  bool burnable() const;
  void set_burnable(bool value);
  private:
  bool _internal_burnable() const;
  void _internal_set_burnable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Coin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_supply_;
  PROTOBUF_NAMESPACE_ID::StringValue* owner_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 crr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool mintable_;
  bool burnable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_FrozenFund final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.FrozenFund) */ {
 public:
  inline GenesisResponse_AppState_FrozenFund() : GenesisResponse_AppState_FrozenFund(nullptr) {}
  ~GenesisResponse_AppState_FrozenFund() override;
  explicit constexpr GenesisResponse_AppState_FrozenFund(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_FrozenFund(const GenesisResponse_AppState_FrozenFund& from);
  GenesisResponse_AppState_FrozenFund(GenesisResponse_AppState_FrozenFund&& from) noexcept
    : GenesisResponse_AppState_FrozenFund() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_FrozenFund& operator=(const GenesisResponse_AppState_FrozenFund& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_FrozenFund& operator=(GenesisResponse_AppState_FrozenFund&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_FrozenFund& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_FrozenFund* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_FrozenFund*>(
               &_GenesisResponse_AppState_FrozenFund_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GenesisResponse_AppState_FrozenFund& a, GenesisResponse_AppState_FrozenFund& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_FrozenFund* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_FrozenFund* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_FrozenFund* New() const final {
    return new GenesisResponse_AppState_FrozenFund();
  }

  GenesisResponse_AppState_FrozenFund* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_FrozenFund>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_FrozenFund& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_FrozenFund& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_FrozenFund* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.FrozenFund";
  }
  protected:
  explicit GenesisResponse_AppState_FrozenFund(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kValueFieldNumber = 4,
    kCandidateKeyFieldNumber = 2,
    kCoinFieldNumber = 3,
    kHeightFieldNumber = 5,
    kCandidateIdFieldNumber = 6,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string value = 4 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .google.protobuf.StringValue candidate_key = 2 [json_name = "candidateKey"];
  bool has_candidate_key() const;
  private:
  bool _internal_has_candidate_key() const;
  public:
  void clear_candidate_key();
  const PROTOBUF_NAMESPACE_ID::StringValue& candidate_key() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::StringValue* release_candidate_key();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_candidate_key();
  void set_allocated_candidate_key(PROTOBUF_NAMESPACE_ID::StringValue* candidate_key);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_candidate_key() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_candidate_key();
  public:
  void unsafe_arena_set_allocated_candidate_key(
      PROTOBUF_NAMESPACE_ID::StringValue* candidate_key);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_candidate_key();

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 5 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 candidate_id = 6 [json_name = "candidateId"];
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_candidate_id() const;
  void _internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.FrozenFund)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  PROTOBUF_NAMESPACE_ID::StringValue* candidate_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 candidate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Waitlist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Waitlist) */ {
 public:
  inline GenesisResponse_AppState_Waitlist() : GenesisResponse_AppState_Waitlist(nullptr) {}
  ~GenesisResponse_AppState_Waitlist() override;
  explicit constexpr GenesisResponse_AppState_Waitlist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Waitlist(const GenesisResponse_AppState_Waitlist& from);
  GenesisResponse_AppState_Waitlist(GenesisResponse_AppState_Waitlist&& from) noexcept
    : GenesisResponse_AppState_Waitlist() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Waitlist& operator=(const GenesisResponse_AppState_Waitlist& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Waitlist& operator=(GenesisResponse_AppState_Waitlist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Waitlist& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Waitlist* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Waitlist*>(
               &_GenesisResponse_AppState_Waitlist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GenesisResponse_AppState_Waitlist& a, GenesisResponse_AppState_Waitlist& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Waitlist* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Waitlist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Waitlist* New() const final {
    return new GenesisResponse_AppState_Waitlist();
  }

  GenesisResponse_AppState_Waitlist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Waitlist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Waitlist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Waitlist& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Waitlist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Waitlist";
  }
  protected:
  explicit GenesisResponse_AppState_Waitlist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 2,
    kValueFieldNumber = 4,
    kCandidateIdFieldNumber = 1,
    kCoinFieldNumber = 3,
  };
  // string owner = 2 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string value = 4 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 candidate_id = 1 [json_name = "candidateId"];
  void clear_candidate_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 candidate_id() const;
  void set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_candidate_id() const;
  void _internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Waitlist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Account_Balance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Account.Balance) */ {
 public:
  inline GenesisResponse_AppState_Account_Balance() : GenesisResponse_AppState_Account_Balance(nullptr) {}
  ~GenesisResponse_AppState_Account_Balance() override;
  explicit constexpr GenesisResponse_AppState_Account_Balance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Account_Balance(const GenesisResponse_AppState_Account_Balance& from);
  GenesisResponse_AppState_Account_Balance(GenesisResponse_AppState_Account_Balance&& from) noexcept
    : GenesisResponse_AppState_Account_Balance() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Account_Balance& operator=(const GenesisResponse_AppState_Account_Balance& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Account_Balance& operator=(GenesisResponse_AppState_Account_Balance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Account_Balance& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Account_Balance* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Account_Balance*>(
               &_GenesisResponse_AppState_Account_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GenesisResponse_AppState_Account_Balance& a, GenesisResponse_AppState_Account_Balance& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Account_Balance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Account_Balance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Account_Balance* New() const final {
    return new GenesisResponse_AppState_Account_Balance();
  }

  GenesisResponse_AppState_Account_Balance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Account_Balance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Account_Balance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Account_Balance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Account_Balance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Account.Balance";
  }
  protected:
  explicit GenesisResponse_AppState_Account_Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kCoinFieldNumber = 1,
  };
  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint64 coin = 1 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Account.Balance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Account_MultisigData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Account.MultisigData) */ {
 public:
  inline GenesisResponse_AppState_Account_MultisigData() : GenesisResponse_AppState_Account_MultisigData(nullptr) {}
  ~GenesisResponse_AppState_Account_MultisigData() override;
  explicit constexpr GenesisResponse_AppState_Account_MultisigData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Account_MultisigData(const GenesisResponse_AppState_Account_MultisigData& from);
  GenesisResponse_AppState_Account_MultisigData(GenesisResponse_AppState_Account_MultisigData&& from) noexcept
    : GenesisResponse_AppState_Account_MultisigData() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Account_MultisigData& operator=(const GenesisResponse_AppState_Account_MultisigData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Account_MultisigData& operator=(GenesisResponse_AppState_Account_MultisigData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Account_MultisigData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Account_MultisigData* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Account_MultisigData*>(
               &_GenesisResponse_AppState_Account_MultisigData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GenesisResponse_AppState_Account_MultisigData& a, GenesisResponse_AppState_Account_MultisigData& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Account_MultisigData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Account_MultisigData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Account_MultisigData* New() const final {
    return new GenesisResponse_AppState_Account_MultisigData();
  }

  GenesisResponse_AppState_Account_MultisigData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Account_MultisigData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Account_MultisigData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Account_MultisigData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Account_MultisigData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Account.MultisigData";
  }
  protected:
  explicit GenesisResponse_AppState_Account_MultisigData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 2,
    kAddressesFieldNumber = 3,
    kThresholdFieldNumber = 1,
  };
  // repeated uint64 weights = 2 [json_name = "weights"];
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_weights() const;
  void _internal_add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_weights();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 weights(int index) const;
  void set_weights(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_weights();

  // repeated string addresses = 3 [json_name = "addresses"];
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // uint64 threshold = 1 [json_name = "threshold"];
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Account.MultisigData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Account) */ {
 public:
  inline GenesisResponse_AppState_Account() : GenesisResponse_AppState_Account(nullptr) {}
  ~GenesisResponse_AppState_Account() override;
  explicit constexpr GenesisResponse_AppState_Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Account(const GenesisResponse_AppState_Account& from);
  GenesisResponse_AppState_Account(GenesisResponse_AppState_Account&& from) noexcept
    : GenesisResponse_AppState_Account() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Account& operator=(const GenesisResponse_AppState_Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Account& operator=(GenesisResponse_AppState_Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Account* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Account*>(
               &_GenesisResponse_AppState_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GenesisResponse_AppState_Account& a, GenesisResponse_AppState_Account& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Account* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Account* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Account* New() const final {
    return new GenesisResponse_AppState_Account();
  }

  GenesisResponse_AppState_Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Account& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Account";
  }
  protected:
  explicit GenesisResponse_AppState_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenesisResponse_AppState_Account_Balance Balance;
  typedef GenesisResponse_AppState_Account_MultisigData MultisigData;

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 2,
    kAddressFieldNumber = 1,
    kMultisigDataFieldNumber = 4,
    kNonceFieldNumber = 3,
  };
  // repeated .api_pb.GenesisResponse.AppState.Account.Balance balance = 2 [json_name = "balance"];
  int balance_size() const;
  private:
  int _internal_balance_size() const;
  public:
  void clear_balance();
  ::api_pb::GenesisResponse_AppState_Account_Balance* mutable_balance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account_Balance >*
      mutable_balance();
  private:
  const ::api_pb::GenesisResponse_AppState_Account_Balance& _internal_balance(int index) const;
  ::api_pb::GenesisResponse_AppState_Account_Balance* _internal_add_balance();
  public:
  const ::api_pb::GenesisResponse_AppState_Account_Balance& balance(int index) const;
  ::api_pb::GenesisResponse_AppState_Account_Balance* add_balance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account_Balance >&
      balance() const;

  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .api_pb.GenesisResponse.AppState.Account.MultisigData multisig_data = 4 [json_name = "multisigData"];
  bool has_multisig_data() const;
  private:
  bool _internal_has_multisig_data() const;
  public:
  void clear_multisig_data();
  const ::api_pb::GenesisResponse_AppState_Account_MultisigData& multisig_data() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_AppState_Account_MultisigData* release_multisig_data();
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* mutable_multisig_data();
  void set_allocated_multisig_data(::api_pb::GenesisResponse_AppState_Account_MultisigData* multisig_data);
  private:
  const ::api_pb::GenesisResponse_AppState_Account_MultisigData& _internal_multisig_data() const;
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* _internal_mutable_multisig_data();
  public:
  void unsafe_arena_set_allocated_multisig_data(
      ::api_pb::GenesisResponse_AppState_Account_MultisigData* multisig_data);
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* unsafe_arena_release_multisig_data();

  // uint64 nonce = 3 [json_name = "nonce"];
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account_Balance > balance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* multisig_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_HaltBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.HaltBlock) */ {
 public:
  inline GenesisResponse_AppState_HaltBlock() : GenesisResponse_AppState_HaltBlock(nullptr) {}
  ~GenesisResponse_AppState_HaltBlock() override;
  explicit constexpr GenesisResponse_AppState_HaltBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_HaltBlock(const GenesisResponse_AppState_HaltBlock& from);
  GenesisResponse_AppState_HaltBlock(GenesisResponse_AppState_HaltBlock&& from) noexcept
    : GenesisResponse_AppState_HaltBlock() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_HaltBlock& operator=(const GenesisResponse_AppState_HaltBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_HaltBlock& operator=(GenesisResponse_AppState_HaltBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_HaltBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_HaltBlock* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_HaltBlock*>(
               &_GenesisResponse_AppState_HaltBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GenesisResponse_AppState_HaltBlock& a, GenesisResponse_AppState_HaltBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_HaltBlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_HaltBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_HaltBlock* New() const final {
    return new GenesisResponse_AppState_HaltBlock();
  }

  GenesisResponse_AppState_HaltBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_HaltBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_HaltBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_HaltBlock& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_HaltBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.HaltBlock";
  }
  protected:
  explicit GenesisResponse_AppState_HaltBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateKeyFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // string candidate_key = 2 [json_name = "candidateKey"];
  void clear_candidate_key();
  const std::string& candidate_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_candidate_key();
  void set_allocated_candidate_key(std::string* candidate_key);
  private:
  const std::string& _internal_candidate_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate_key(const std::string& value);
  std::string* _internal_mutable_candidate_key();
  public:

  // uint64 height = 1 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.HaltBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Pool final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Pool) */ {
 public:
  inline GenesisResponse_AppState_Pool() : GenesisResponse_AppState_Pool(nullptr) {}
  ~GenesisResponse_AppState_Pool() override;
  explicit constexpr GenesisResponse_AppState_Pool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Pool(const GenesisResponse_AppState_Pool& from);
  GenesisResponse_AppState_Pool(GenesisResponse_AppState_Pool&& from) noexcept
    : GenesisResponse_AppState_Pool() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Pool& operator=(const GenesisResponse_AppState_Pool& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Pool& operator=(GenesisResponse_AppState_Pool&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Pool& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Pool* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Pool*>(
               &_GenesisResponse_AppState_Pool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GenesisResponse_AppState_Pool& a, GenesisResponse_AppState_Pool& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Pool* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Pool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Pool* New() const final {
    return new GenesisResponse_AppState_Pool();
  }

  GenesisResponse_AppState_Pool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Pool>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Pool& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Pool& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Pool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Pool";
  }
  protected:
  explicit GenesisResponse_AppState_Pool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReserve0FieldNumber = 3,
    kReserve1FieldNumber = 4,
    kCoin0FieldNumber = 1,
    kCoin1FieldNumber = 2,
    kIdFieldNumber = 5,
  };
  // string reserve0 = 3 [json_name = "reserve0"];
  void clear_reserve0();
  const std::string& reserve0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve0();
  PROTOBUF_MUST_USE_RESULT std::string* release_reserve0();
  void set_allocated_reserve0(std::string* reserve0);
  private:
  const std::string& _internal_reserve0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve0(const std::string& value);
  std::string* _internal_mutable_reserve0();
  public:

  // string reserve1 = 4 [json_name = "reserve1"];
  void clear_reserve1();
  const std::string& reserve1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve1();
  PROTOBUF_MUST_USE_RESULT std::string* release_reserve1();
  void set_allocated_reserve1(std::string* reserve1);
  private:
  const std::string& _internal_reserve1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve1(const std::string& value);
  std::string* _internal_mutable_reserve1();
  public:

  // uint64 coin0 = 1 [json_name = "coin0"];
  void clear_coin0();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin0() const;
  void set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin0() const;
  void _internal_set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 coin1 = 2 [json_name = "coin1"];
  void clear_coin1();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin1() const;
  void set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin1() const;
  void _internal_set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 id = 5 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Pool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve0_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin0_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_Commission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.Commission) */ {
 public:
  inline GenesisResponse_AppState_Commission() : GenesisResponse_AppState_Commission(nullptr) {}
  ~GenesisResponse_AppState_Commission() override;
  explicit constexpr GenesisResponse_AppState_Commission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_Commission(const GenesisResponse_AppState_Commission& from);
  GenesisResponse_AppState_Commission(GenesisResponse_AppState_Commission&& from) noexcept
    : GenesisResponse_AppState_Commission() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_Commission& operator=(const GenesisResponse_AppState_Commission& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_Commission& operator=(GenesisResponse_AppState_Commission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_Commission& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_Commission* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_Commission*>(
               &_GenesisResponse_AppState_Commission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GenesisResponse_AppState_Commission& a, GenesisResponse_AppState_Commission& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_Commission* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_Commission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_Commission* New() const final {
    return new GenesisResponse_AppState_Commission();
  }

  GenesisResponse_AppState_Commission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_Commission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_Commission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_Commission& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_Commission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.Commission";
  }
  protected:
  explicit GenesisResponse_AppState_Commission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadByteFieldNumber = 4,
    kSendFieldNumber = 5,
    kCreateTicker3FieldNumber = 7,
    kCreateTicker4FieldNumber = 8,
    kCreateTicker5FieldNumber = 9,
    kCreateTicker6FieldNumber = 10,
    kCreateTicker710FieldNumber = 11,
    kDeclareCandidacyFieldNumber = 13,
    kDelegateFieldNumber = 14,
    kUnbondFieldNumber = 15,
    kRedeemCheckFieldNumber = 16,
    kCreateMultisigFieldNumber = 18,
    kEditCandidateFieldNumber = 20,
    kSetHaltBlockFieldNumber = 21,
    kEditTickerOwnerFieldNumber = 22,
    kEditMultisigFieldNumber = 23,
    kEditCandidatePublicKeyFieldNumber = 25,
    kEditCandidateCommissionFieldNumber = 28,
    kVoteCommissionFieldNumber = 31,
    kVoteUpdateFieldNumber = 32,
    kCreateCoinFieldNumber = 34,
    kCreateTokenFieldNumber = 35,
    kRecreateCoinFieldNumber = 36,
    kRecreateTokenFieldNumber = 37,
    kBuyBancorFieldNumber = 38,
    kSellBancorFieldNumber = 39,
    kSellAllBancorFieldNumber = 40,
    kBuyPoolBaseFieldNumber = 41,
    kSellPoolBaseFieldNumber = 42,
    kSellAllPoolBaseFieldNumber = 43,
    kSetCandidateOnFieldNumber = 44,
    kSetCandidateOffFieldNumber = 45,
    kMintTokenFieldNumber = 46,
    kBurnTokenFieldNumber = 47,
    kCreateSwapPoolFieldNumber = 48,
    kAddLiquidityFieldNumber = 49,
    kRemoveLiquidityFieldNumber = 50,
    kMultisendBaseFieldNumber = 51,
    kMultisendDeltaFieldNumber = 52,
    kBuyPoolDeltaFieldNumber = 53,
    kSellPoolDeltaFieldNumber = 54,
    kSellAllPoolDeltaFieldNumber = 55,
    kFailedTxFieldNumber = 56,
    kAddLimitOrderFieldNumber = 57,
    kRemoveLimitOrderFieldNumber = 58,
    kCoinFieldNumber = 3,
  };
  // string payload_byte = 4 [json_name = "payloadByte"];
  void clear_payload_byte();
  const std::string& payload_byte() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload_byte(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload_byte();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload_byte();
  void set_allocated_payload_byte(std::string* payload_byte);
  private:
  const std::string& _internal_payload_byte() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload_byte(const std::string& value);
  std::string* _internal_mutable_payload_byte();
  public:

  // string send = 5 [json_name = "send"];
  void clear_send();
  const std::string& send() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_send(ArgT0&& arg0, ArgT... args);
  std::string* mutable_send();
  PROTOBUF_MUST_USE_RESULT std::string* release_send();
  void set_allocated_send(std::string* send);
  private:
  const std::string& _internal_send() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_send(const std::string& value);
  std::string* _internal_mutable_send();
  public:

  // string create_ticker3 = 7 [json_name = "createTicker3"];
  void clear_create_ticker3();
  const std::string& create_ticker3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker3();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker3();
  void set_allocated_create_ticker3(std::string* create_ticker3);
  private:
  const std::string& _internal_create_ticker3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker3(const std::string& value);
  std::string* _internal_mutable_create_ticker3();
  public:

  // string create_ticker4 = 8 [json_name = "createTicker4"];
  void clear_create_ticker4();
  const std::string& create_ticker4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker4();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker4();
  void set_allocated_create_ticker4(std::string* create_ticker4);
  private:
  const std::string& _internal_create_ticker4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker4(const std::string& value);
  std::string* _internal_mutable_create_ticker4();
  public:

  // string create_ticker5 = 9 [json_name = "createTicker5"];
  void clear_create_ticker5();
  const std::string& create_ticker5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker5();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker5();
  void set_allocated_create_ticker5(std::string* create_ticker5);
  private:
  const std::string& _internal_create_ticker5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker5(const std::string& value);
  std::string* _internal_mutable_create_ticker5();
  public:

  // string create_ticker6 = 10 [json_name = "createTicker6"];
  void clear_create_ticker6();
  const std::string& create_ticker6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker6();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker6();
  void set_allocated_create_ticker6(std::string* create_ticker6);
  private:
  const std::string& _internal_create_ticker6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker6(const std::string& value);
  std::string* _internal_mutable_create_ticker6();
  public:

  // string create_ticker7_10 = 11 [json_name = "createTicker710"];
  void clear_create_ticker7_10();
  const std::string& create_ticker7_10() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_ticker7_10(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_ticker7_10();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_ticker7_10();
  void set_allocated_create_ticker7_10(std::string* create_ticker7_10);
  private:
  const std::string& _internal_create_ticker7_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_ticker7_10(const std::string& value);
  std::string* _internal_mutable_create_ticker7_10();
  public:

  // string declare_candidacy = 13 [json_name = "declareCandidacy"];
  void clear_declare_candidacy();
  const std::string& declare_candidacy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_declare_candidacy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_declare_candidacy();
  PROTOBUF_MUST_USE_RESULT std::string* release_declare_candidacy();
  void set_allocated_declare_candidacy(std::string* declare_candidacy);
  private:
  const std::string& _internal_declare_candidacy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_declare_candidacy(const std::string& value);
  std::string* _internal_mutable_declare_candidacy();
  public:

  // string delegate = 14 [json_name = "delegate"];
  void clear_delegate();
  const std::string& delegate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate();
  PROTOBUF_MUST_USE_RESULT std::string* release_delegate();
  void set_allocated_delegate(std::string* delegate);
  private:
  const std::string& _internal_delegate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate(const std::string& value);
  std::string* _internal_mutable_delegate();
  public:

  // string unbond = 15 [json_name = "unbond"];
  void clear_unbond();
  const std::string& unbond() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unbond(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unbond();
  PROTOBUF_MUST_USE_RESULT std::string* release_unbond();
  void set_allocated_unbond(std::string* unbond);
  private:
  const std::string& _internal_unbond() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unbond(const std::string& value);
  std::string* _internal_mutable_unbond();
  public:

  // string redeem_check = 16 [json_name = "redeemCheck"];
  void clear_redeem_check();
  const std::string& redeem_check() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_redeem_check(ArgT0&& arg0, ArgT... args);
  std::string* mutable_redeem_check();
  PROTOBUF_MUST_USE_RESULT std::string* release_redeem_check();
  void set_allocated_redeem_check(std::string* redeem_check);
  private:
  const std::string& _internal_redeem_check() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_redeem_check(const std::string& value);
  std::string* _internal_mutable_redeem_check();
  public:

  // string create_multisig = 18 [json_name = "createMultisig"];
  void clear_create_multisig();
  const std::string& create_multisig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_multisig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_multisig();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_multisig();
  void set_allocated_create_multisig(std::string* create_multisig);
  private:
  const std::string& _internal_create_multisig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_multisig(const std::string& value);
  std::string* _internal_mutable_create_multisig();
  public:

  // string edit_candidate = 20 [json_name = "editCandidate"];
  void clear_edit_candidate();
  const std::string& edit_candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate();
  void set_allocated_edit_candidate(std::string* edit_candidate);
  private:
  const std::string& _internal_edit_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate(const std::string& value);
  std::string* _internal_mutable_edit_candidate();
  public:

  // string set_halt_block = 21 [json_name = "setHaltBlock"];
  void clear_set_halt_block();
  const std::string& set_halt_block() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_halt_block(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_halt_block();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_halt_block();
  void set_allocated_set_halt_block(std::string* set_halt_block);
  private:
  const std::string& _internal_set_halt_block() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_halt_block(const std::string& value);
  std::string* _internal_mutable_set_halt_block();
  public:

  // string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
  void clear_edit_ticker_owner();
  const std::string& edit_ticker_owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_ticker_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_ticker_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_ticker_owner();
  void set_allocated_edit_ticker_owner(std::string* edit_ticker_owner);
  private:
  const std::string& _internal_edit_ticker_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_ticker_owner(const std::string& value);
  std::string* _internal_mutable_edit_ticker_owner();
  public:

  // string edit_multisig = 23 [json_name = "editMultisig"];
  void clear_edit_multisig();
  const std::string& edit_multisig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_multisig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_multisig();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_multisig();
  void set_allocated_edit_multisig(std::string* edit_multisig);
  private:
  const std::string& _internal_edit_multisig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_multisig(const std::string& value);
  std::string* _internal_mutable_edit_multisig();
  public:

  // string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
  void clear_edit_candidate_public_key();
  const std::string& edit_candidate_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate_public_key();
  void set_allocated_edit_candidate_public_key(std::string* edit_candidate_public_key);
  private:
  const std::string& _internal_edit_candidate_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate_public_key(const std::string& value);
  std::string* _internal_mutable_edit_candidate_public_key();
  public:

  // string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
  void clear_edit_candidate_commission();
  const std::string& edit_candidate_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_edit_candidate_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_edit_candidate_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_edit_candidate_commission();
  void set_allocated_edit_candidate_commission(std::string* edit_candidate_commission);
  private:
  const std::string& _internal_edit_candidate_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_edit_candidate_commission(const std::string& value);
  std::string* _internal_mutable_edit_candidate_commission();
  public:

  // string vote_commission = 31 [json_name = "voteCommission"];
  void clear_vote_commission();
  const std::string& vote_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vote_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vote_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_vote_commission();
  void set_allocated_vote_commission(std::string* vote_commission);
  private:
  const std::string& _internal_vote_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_commission(const std::string& value);
  std::string* _internal_mutable_vote_commission();
  public:

  // string vote_update = 32 [json_name = "voteUpdate"];
  void clear_vote_update();
  const std::string& vote_update() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vote_update(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vote_update();
  PROTOBUF_MUST_USE_RESULT std::string* release_vote_update();
  void set_allocated_vote_update(std::string* vote_update);
  private:
  const std::string& _internal_vote_update() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vote_update(const std::string& value);
  std::string* _internal_mutable_vote_update();
  public:

  // string create_coin = 34 [json_name = "createCoin"];
  void clear_create_coin();
  const std::string& create_coin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_coin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_coin();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_coin();
  void set_allocated_create_coin(std::string* create_coin);
  private:
  const std::string& _internal_create_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_coin(const std::string& value);
  std::string* _internal_mutable_create_coin();
  public:

  // string create_token = 35 [json_name = "createToken"];
  void clear_create_token();
  const std::string& create_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_token();
  void set_allocated_create_token(std::string* create_token);
  private:
  const std::string& _internal_create_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_token(const std::string& value);
  std::string* _internal_mutable_create_token();
  public:

  // string recreate_coin = 36 [json_name = "recreateCoin"];
  void clear_recreate_coin();
  const std::string& recreate_coin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recreate_coin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recreate_coin();
  PROTOBUF_MUST_USE_RESULT std::string* release_recreate_coin();
  void set_allocated_recreate_coin(std::string* recreate_coin);
  private:
  const std::string& _internal_recreate_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recreate_coin(const std::string& value);
  std::string* _internal_mutable_recreate_coin();
  public:

  // string recreate_token = 37 [json_name = "recreateToken"];
  void clear_recreate_token();
  const std::string& recreate_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_recreate_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_recreate_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_recreate_token();
  void set_allocated_recreate_token(std::string* recreate_token);
  private:
  const std::string& _internal_recreate_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recreate_token(const std::string& value);
  std::string* _internal_mutable_recreate_token();
  public:

  // string buy_bancor = 38 [json_name = "buyBancor"];
  void clear_buy_bancor();
  const std::string& buy_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_bancor();
  void set_allocated_buy_bancor(std::string* buy_bancor);
  private:
  const std::string& _internal_buy_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_bancor(const std::string& value);
  std::string* _internal_mutable_buy_bancor();
  public:

  // string sell_bancor = 39 [json_name = "sellBancor"];
  void clear_sell_bancor();
  const std::string& sell_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_bancor();
  void set_allocated_sell_bancor(std::string* sell_bancor);
  private:
  const std::string& _internal_sell_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_bancor(const std::string& value);
  std::string* _internal_mutable_sell_bancor();
  public:

  // string sell_all_bancor = 40 [json_name = "sellAllBancor"];
  void clear_sell_all_bancor();
  const std::string& sell_all_bancor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_bancor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_bancor();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_bancor();
  void set_allocated_sell_all_bancor(std::string* sell_all_bancor);
  private:
  const std::string& _internal_sell_all_bancor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_bancor(const std::string& value);
  std::string* _internal_mutable_sell_all_bancor();
  public:

  // string buy_pool_base = 41 [json_name = "buyPoolBase"];
  void clear_buy_pool_base();
  const std::string& buy_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_pool_base();
  void set_allocated_buy_pool_base(std::string* buy_pool_base);
  private:
  const std::string& _internal_buy_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_pool_base(const std::string& value);
  std::string* _internal_mutable_buy_pool_base();
  public:

  // string sell_pool_base = 42 [json_name = "sellPoolBase"];
  void clear_sell_pool_base();
  const std::string& sell_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_pool_base();
  void set_allocated_sell_pool_base(std::string* sell_pool_base);
  private:
  const std::string& _internal_sell_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_pool_base(const std::string& value);
  std::string* _internal_mutable_sell_pool_base();
  public:

  // string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
  void clear_sell_all_pool_base();
  const std::string& sell_all_pool_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_pool_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_pool_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_pool_base();
  void set_allocated_sell_all_pool_base(std::string* sell_all_pool_base);
  private:
  const std::string& _internal_sell_all_pool_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_pool_base(const std::string& value);
  std::string* _internal_mutable_sell_all_pool_base();
  public:

  // string set_candidate_on = 44 [json_name = "setCandidateOn"];
  void clear_set_candidate_on();
  const std::string& set_candidate_on() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_candidate_on(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_candidate_on();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_candidate_on();
  void set_allocated_set_candidate_on(std::string* set_candidate_on);
  private:
  const std::string& _internal_set_candidate_on() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_candidate_on(const std::string& value);
  std::string* _internal_mutable_set_candidate_on();
  public:

  // string set_candidate_off = 45 [json_name = "setCandidateOff"];
  void clear_set_candidate_off();
  const std::string& set_candidate_off() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_set_candidate_off(ArgT0&& arg0, ArgT... args);
  std::string* mutable_set_candidate_off();
  PROTOBUF_MUST_USE_RESULT std::string* release_set_candidate_off();
  void set_allocated_set_candidate_off(std::string* set_candidate_off);
  private:
  const std::string& _internal_set_candidate_off() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_set_candidate_off(const std::string& value);
  std::string* _internal_mutable_set_candidate_off();
  public:

  // string mint_token = 46 [json_name = "mintToken"];
  void clear_mint_token();
  const std::string& mint_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mint_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mint_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_mint_token();
  void set_allocated_mint_token(std::string* mint_token);
  private:
  const std::string& _internal_mint_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mint_token(const std::string& value);
  std::string* _internal_mutable_mint_token();
  public:

  // string burn_token = 47 [json_name = "burnToken"];
  void clear_burn_token();
  const std::string& burn_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_burn_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_burn_token();
  PROTOBUF_MUST_USE_RESULT std::string* release_burn_token();
  void set_allocated_burn_token(std::string* burn_token);
  private:
  const std::string& _internal_burn_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_burn_token(const std::string& value);
  std::string* _internal_mutable_burn_token();
  public:

  // string create_swap_pool = 48 [json_name = "createSwapPool"];
  void clear_create_swap_pool();
  const std::string& create_swap_pool() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_swap_pool(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_swap_pool();
  PROTOBUF_MUST_USE_RESULT std::string* release_create_swap_pool();
  void set_allocated_create_swap_pool(std::string* create_swap_pool);
  private:
  const std::string& _internal_create_swap_pool() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_swap_pool(const std::string& value);
  std::string* _internal_mutable_create_swap_pool();
  public:

  // string add_liquidity = 49 [json_name = "addLiquidity"];
  void clear_add_liquidity();
  const std::string& add_liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_liquidity();
  void set_allocated_add_liquidity(std::string* add_liquidity);
  private:
  const std::string& _internal_add_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_liquidity(const std::string& value);
  std::string* _internal_mutable_add_liquidity();
  public:

  // string remove_liquidity = 50 [json_name = "removeLiquidity"];
  void clear_remove_liquidity();
  const std::string& remove_liquidity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remove_liquidity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remove_liquidity();
  PROTOBUF_MUST_USE_RESULT std::string* release_remove_liquidity();
  void set_allocated_remove_liquidity(std::string* remove_liquidity);
  private:
  const std::string& _internal_remove_liquidity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remove_liquidity(const std::string& value);
  std::string* _internal_mutable_remove_liquidity();
  public:

  // string multisend_base = 51 [json_name = "multisendBase"];
  void clear_multisend_base();
  const std::string& multisend_base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multisend_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multisend_base();
  PROTOBUF_MUST_USE_RESULT std::string* release_multisend_base();
  void set_allocated_multisend_base(std::string* multisend_base);
  private:
  const std::string& _internal_multisend_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multisend_base(const std::string& value);
  std::string* _internal_mutable_multisend_base();
  public:

  // string multisend_delta = 52 [json_name = "multisendDelta"];
  void clear_multisend_delta();
  const std::string& multisend_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multisend_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multisend_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_multisend_delta();
  void set_allocated_multisend_delta(std::string* multisend_delta);
  private:
  const std::string& _internal_multisend_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multisend_delta(const std::string& value);
  std::string* _internal_mutable_multisend_delta();
  public:

  // string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
  void clear_buy_pool_delta();
  const std::string& buy_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buy_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buy_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_buy_pool_delta();
  void set_allocated_buy_pool_delta(std::string* buy_pool_delta);
  private:
  const std::string& _internal_buy_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buy_pool_delta(const std::string& value);
  std::string* _internal_mutable_buy_pool_delta();
  public:

  // string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
  void clear_sell_pool_delta();
  const std::string& sell_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_pool_delta();
  void set_allocated_sell_pool_delta(std::string* sell_pool_delta);
  private:
  const std::string& _internal_sell_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_pool_delta(const std::string& value);
  std::string* _internal_mutable_sell_pool_delta();
  public:

  // string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
  void clear_sell_all_pool_delta();
  const std::string& sell_all_pool_delta() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sell_all_pool_delta(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sell_all_pool_delta();
  PROTOBUF_MUST_USE_RESULT std::string* release_sell_all_pool_delta();
  void set_allocated_sell_all_pool_delta(std::string* sell_all_pool_delta);
  private:
  const std::string& _internal_sell_all_pool_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sell_all_pool_delta(const std::string& value);
  std::string* _internal_mutable_sell_all_pool_delta();
  public:

  // string failed_tx = 56 [json_name = "failedTx"];
  void clear_failed_tx();
  const std::string& failed_tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_failed_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_failed_tx();
  PROTOBUF_MUST_USE_RESULT std::string* release_failed_tx();
  void set_allocated_failed_tx(std::string* failed_tx);
  private:
  const std::string& _internal_failed_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_failed_tx(const std::string& value);
  std::string* _internal_mutable_failed_tx();
  public:

  // string add_limit_order = 57 [json_name = "addLimitOrder"];
  void clear_add_limit_order();
  const std::string& add_limit_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_add_limit_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_add_limit_order();
  PROTOBUF_MUST_USE_RESULT std::string* release_add_limit_order();
  void set_allocated_add_limit_order(std::string* add_limit_order);
  private:
  const std::string& _internal_add_limit_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_add_limit_order(const std::string& value);
  std::string* _internal_mutable_add_limit_order();
  public:

  // string remove_limit_order = 58 [json_name = "removeLimitOrder"];
  void clear_remove_limit_order();
  const std::string& remove_limit_order() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remove_limit_order(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remove_limit_order();
  PROTOBUF_MUST_USE_RESULT std::string* release_remove_limit_order();
  void set_allocated_remove_limit_order(std::string* remove_limit_order);
  private:
  const std::string& _internal_remove_limit_order() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remove_limit_order(const std::string& value);
  std::string* _internal_mutable_remove_limit_order();
  public:

  // uint64 coin = 3 [json_name = "coin"];
  void clear_coin();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin() const;
  void set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin() const;
  void _internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.Commission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_byte_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr send_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_ticker7_10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr declare_candidacy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unbond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redeem_check_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_multisig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_halt_block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_ticker_owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_multisig_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_candidate_commission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_commission_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_update_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recreate_coin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recreate_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_bancor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_pool_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_candidate_on_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_candidate_off_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mint_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr burn_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_swap_pool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remove_liquidity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multisend_base_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multisend_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buy_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sell_all_pool_delta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failed_tx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_limit_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remove_limit_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState_CommissionVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState.CommissionVote) */ {
 public:
  inline GenesisResponse_AppState_CommissionVote() : GenesisResponse_AppState_CommissionVote(nullptr) {}
  ~GenesisResponse_AppState_CommissionVote() override;
  explicit constexpr GenesisResponse_AppState_CommissionVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState_CommissionVote(const GenesisResponse_AppState_CommissionVote& from);
  GenesisResponse_AppState_CommissionVote(GenesisResponse_AppState_CommissionVote&& from) noexcept
    : GenesisResponse_AppState_CommissionVote() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState_CommissionVote& operator=(const GenesisResponse_AppState_CommissionVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState_CommissionVote& operator=(GenesisResponse_AppState_CommissionVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState_CommissionVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState_CommissionVote* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState_CommissionVote*>(
               &_GenesisResponse_AppState_CommissionVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GenesisResponse_AppState_CommissionVote& a, GenesisResponse_AppState_CommissionVote& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState_CommissionVote* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState_CommissionVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState_CommissionVote* New() const final {
    return new GenesisResponse_AppState_CommissionVote();
  }

  GenesisResponse_AppState_CommissionVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState_CommissionVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState_CommissionVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState_CommissionVote& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState_CommissionVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState.CommissionVote";
  }
  protected:
  explicit GenesisResponse_AppState_CommissionVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 2,
    kCommissionFieldNumber = 3,
    kHeightFieldNumber = 1,
  };
  // repeated string votes = 2 [json_name = "votes"];
  int votes_size() const;
  private:
  int _internal_votes_size() const;
  public:
  void clear_votes();
  const std::string& votes(int index) const;
  std::string* mutable_votes(int index);
  void set_votes(int index, const std::string& value);
  void set_votes(int index, std::string&& value);
  void set_votes(int index, const char* value);
  void set_votes(int index, const char* value, size_t size);
  std::string* add_votes();
  void add_votes(const std::string& value);
  void add_votes(std::string&& value);
  void add_votes(const char* value);
  void add_votes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_votes();
  private:
  const std::string& _internal_votes(int index) const;
  std::string* _internal_add_votes();
  public:

  // .api_pb.GenesisResponse.AppState.Commission commission = 3 [json_name = "commission"];
  bool has_commission() const;
  private:
  bool _internal_has_commission() const;
  public:
  void clear_commission();
  const ::api_pb::GenesisResponse_AppState_Commission& commission() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_AppState_Commission* release_commission();
  ::api_pb::GenesisResponse_AppState_Commission* mutable_commission();
  void set_allocated_commission(::api_pb::GenesisResponse_AppState_Commission* commission);
  private:
  const ::api_pb::GenesisResponse_AppState_Commission& _internal_commission() const;
  ::api_pb::GenesisResponse_AppState_Commission* _internal_mutable_commission();
  public:
  void unsafe_arena_set_allocated_commission(
      ::api_pb::GenesisResponse_AppState_Commission* commission);
  ::api_pb::GenesisResponse_AppState_Commission* unsafe_arena_release_commission();

  // uint64 height = 1 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState.CommissionVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> votes_;
  ::api_pb::GenesisResponse_AppState_Commission* commission_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse_AppState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse.AppState) */ {
 public:
  inline GenesisResponse_AppState() : GenesisResponse_AppState(nullptr) {}
  ~GenesisResponse_AppState() override;
  explicit constexpr GenesisResponse_AppState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse_AppState(const GenesisResponse_AppState& from);
  GenesisResponse_AppState(GenesisResponse_AppState&& from) noexcept
    : GenesisResponse_AppState() {
    *this = ::std::move(from);
  }

  inline GenesisResponse_AppState& operator=(const GenesisResponse_AppState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse_AppState& operator=(GenesisResponse_AppState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse_AppState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse_AppState* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse_AppState*>(
               &_GenesisResponse_AppState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GenesisResponse_AppState& a, GenesisResponse_AppState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse_AppState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse_AppState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse_AppState* New() const final {
    return new GenesisResponse_AppState();
  }

  GenesisResponse_AppState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse_AppState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse_AppState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse_AppState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse_AppState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse.AppState";
  }
  protected:
  explicit GenesisResponse_AppState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenesisResponse_AppState_Validators Validators;
  typedef GenesisResponse_AppState_Candidate Candidate;
  typedef GenesisResponse_AppState_Coin Coin;
  typedef GenesisResponse_AppState_FrozenFund FrozenFund;
  typedef GenesisResponse_AppState_Waitlist Waitlist;
  typedef GenesisResponse_AppState_Account Account;
  typedef GenesisResponse_AppState_HaltBlock HaltBlock;
  typedef GenesisResponse_AppState_Pool Pool;
  typedef GenesisResponse_AppState_Commission Commission;
  typedef GenesisResponse_AppState_CommissionVote CommissionVote;

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 2,
    kCandidatesFieldNumber = 3,
    kCoinsFieldNumber = 5,
    kFrozenFundsFieldNumber = 6,
    kUsedChecksFieldNumber = 11,
    kHaltBlocksFieldNumber = 12,
    kWaitlistFieldNumber = 13,
    kAccountsFieldNumber = 14,
    kPoolsFieldNumber = 15,
    kCommissionVotesFieldNumber = 17,
    kBlockListCandidatesFieldNumber = 18,
    kTotalSlashedFieldNumber = 8,
    kNoteFieldNumber = 10,
    kVersionFieldNumber = 19,
    kCommissionFieldNumber = 16,
    kMaxGasFieldNumber = 7,
  };
  // repeated .api_pb.GenesisResponse.AppState.Validators validators = 2 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::api_pb::GenesisResponse_AppState_Validators* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Validators >*
      mutable_validators();
  private:
  const ::api_pb::GenesisResponse_AppState_Validators& _internal_validators(int index) const;
  ::api_pb::GenesisResponse_AppState_Validators* _internal_add_validators();
  public:
  const ::api_pb::GenesisResponse_AppState_Validators& validators(int index) const;
  ::api_pb::GenesisResponse_AppState_Validators* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Validators >&
      validators() const;

  // repeated .api_pb.GenesisResponse.AppState.Candidate candidates = 3 [json_name = "candidates"];
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::api_pb::GenesisResponse_AppState_Candidate* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate >*
      mutable_candidates();
  private:
  const ::api_pb::GenesisResponse_AppState_Candidate& _internal_candidates(int index) const;
  ::api_pb::GenesisResponse_AppState_Candidate* _internal_add_candidates();
  public:
  const ::api_pb::GenesisResponse_AppState_Candidate& candidates(int index) const;
  ::api_pb::GenesisResponse_AppState_Candidate* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate >&
      candidates() const;

  // repeated .api_pb.GenesisResponse.AppState.Coin coins = 5 [json_name = "coins"];
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::api_pb::GenesisResponse_AppState_Coin* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Coin >*
      mutable_coins();
  private:
  const ::api_pb::GenesisResponse_AppState_Coin& _internal_coins(int index) const;
  ::api_pb::GenesisResponse_AppState_Coin* _internal_add_coins();
  public:
  const ::api_pb::GenesisResponse_AppState_Coin& coins(int index) const;
  ::api_pb::GenesisResponse_AppState_Coin* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Coin >&
      coins() const;

  // repeated .api_pb.GenesisResponse.AppState.FrozenFund frozen_funds = 6 [json_name = "frozenFunds"];
  int frozen_funds_size() const;
  private:
  int _internal_frozen_funds_size() const;
  public:
  void clear_frozen_funds();
  ::api_pb::GenesisResponse_AppState_FrozenFund* mutable_frozen_funds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_FrozenFund >*
      mutable_frozen_funds();
  private:
  const ::api_pb::GenesisResponse_AppState_FrozenFund& _internal_frozen_funds(int index) const;
  ::api_pb::GenesisResponse_AppState_FrozenFund* _internal_add_frozen_funds();
  public:
  const ::api_pb::GenesisResponse_AppState_FrozenFund& frozen_funds(int index) const;
  ::api_pb::GenesisResponse_AppState_FrozenFund* add_frozen_funds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_FrozenFund >&
      frozen_funds() const;

  // repeated string used_checks = 11 [json_name = "usedChecks"];
  int used_checks_size() const;
  private:
  int _internal_used_checks_size() const;
  public:
  void clear_used_checks();
  const std::string& used_checks(int index) const;
  std::string* mutable_used_checks(int index);
  void set_used_checks(int index, const std::string& value);
  void set_used_checks(int index, std::string&& value);
  void set_used_checks(int index, const char* value);
  void set_used_checks(int index, const char* value, size_t size);
  std::string* add_used_checks();
  void add_used_checks(const std::string& value);
  void add_used_checks(std::string&& value);
  void add_used_checks(const char* value);
  void add_used_checks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& used_checks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_used_checks();
  private:
  const std::string& _internal_used_checks(int index) const;
  std::string* _internal_add_used_checks();
  public:

  // repeated .api_pb.GenesisResponse.AppState.HaltBlock halt_blocks = 12 [json_name = "haltBlocks"];
  int halt_blocks_size() const;
  private:
  int _internal_halt_blocks_size() const;
  public:
  void clear_halt_blocks();
  ::api_pb::GenesisResponse_AppState_HaltBlock* mutable_halt_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_HaltBlock >*
      mutable_halt_blocks();
  private:
  const ::api_pb::GenesisResponse_AppState_HaltBlock& _internal_halt_blocks(int index) const;
  ::api_pb::GenesisResponse_AppState_HaltBlock* _internal_add_halt_blocks();
  public:
  const ::api_pb::GenesisResponse_AppState_HaltBlock& halt_blocks(int index) const;
  ::api_pb::GenesisResponse_AppState_HaltBlock* add_halt_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_HaltBlock >&
      halt_blocks() const;

  // repeated .api_pb.GenesisResponse.AppState.Waitlist waitlist = 13 [json_name = "waitlist"];
  int waitlist_size() const;
  private:
  int _internal_waitlist_size() const;
  public:
  void clear_waitlist();
  ::api_pb::GenesisResponse_AppState_Waitlist* mutable_waitlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Waitlist >*
      mutable_waitlist();
  private:
  const ::api_pb::GenesisResponse_AppState_Waitlist& _internal_waitlist(int index) const;
  ::api_pb::GenesisResponse_AppState_Waitlist* _internal_add_waitlist();
  public:
  const ::api_pb::GenesisResponse_AppState_Waitlist& waitlist(int index) const;
  ::api_pb::GenesisResponse_AppState_Waitlist* add_waitlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Waitlist >&
      waitlist() const;

  // repeated .api_pb.GenesisResponse.AppState.Account accounts = 14 [json_name = "accounts"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::api_pb::GenesisResponse_AppState_Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account >*
      mutable_accounts();
  private:
  const ::api_pb::GenesisResponse_AppState_Account& _internal_accounts(int index) const;
  ::api_pb::GenesisResponse_AppState_Account* _internal_add_accounts();
  public:
  const ::api_pb::GenesisResponse_AppState_Account& accounts(int index) const;
  ::api_pb::GenesisResponse_AppState_Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account >&
      accounts() const;

  // repeated .api_pb.GenesisResponse.AppState.Pool pools = 15 [json_name = "pools"];
  int pools_size() const;
  private:
  int _internal_pools_size() const;
  public:
  void clear_pools();
  ::api_pb::GenesisResponse_AppState_Pool* mutable_pools(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Pool >*
      mutable_pools();
  private:
  const ::api_pb::GenesisResponse_AppState_Pool& _internal_pools(int index) const;
  ::api_pb::GenesisResponse_AppState_Pool* _internal_add_pools();
  public:
  const ::api_pb::GenesisResponse_AppState_Pool& pools(int index) const;
  ::api_pb::GenesisResponse_AppState_Pool* add_pools();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Pool >&
      pools() const;

  // repeated .api_pb.GenesisResponse.AppState.CommissionVote commission_votes = 17 [json_name = "commissionVotes"];
  int commission_votes_size() const;
  private:
  int _internal_commission_votes_size() const;
  public:
  void clear_commission_votes();
  ::api_pb::GenesisResponse_AppState_CommissionVote* mutable_commission_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_CommissionVote >*
      mutable_commission_votes();
  private:
  const ::api_pb::GenesisResponse_AppState_CommissionVote& _internal_commission_votes(int index) const;
  ::api_pb::GenesisResponse_AppState_CommissionVote* _internal_add_commission_votes();
  public:
  const ::api_pb::GenesisResponse_AppState_CommissionVote& commission_votes(int index) const;
  ::api_pb::GenesisResponse_AppState_CommissionVote* add_commission_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_CommissionVote >&
      commission_votes() const;

  // repeated string block_list_candidates = 18 [json_name = "blockListCandidates"];
  int block_list_candidates_size() const;
  private:
  int _internal_block_list_candidates_size() const;
  public:
  void clear_block_list_candidates();
  const std::string& block_list_candidates(int index) const;
  std::string* mutable_block_list_candidates(int index);
  void set_block_list_candidates(int index, const std::string& value);
  void set_block_list_candidates(int index, std::string&& value);
  void set_block_list_candidates(int index, const char* value);
  void set_block_list_candidates(int index, const char* value, size_t size);
  std::string* add_block_list_candidates();
  void add_block_list_candidates(const std::string& value);
  void add_block_list_candidates(std::string&& value);
  void add_block_list_candidates(const char* value);
  void add_block_list_candidates(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& block_list_candidates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_block_list_candidates();
  private:
  const std::string& _internal_block_list_candidates(int index) const;
  std::string* _internal_add_block_list_candidates();
  public:

  // string total_slashed = 8 [json_name = "totalSlashed"];
  void clear_total_slashed();
  const std::string& total_slashed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_total_slashed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_total_slashed();
  PROTOBUF_MUST_USE_RESULT std::string* release_total_slashed();
  void set_allocated_total_slashed(std::string* total_slashed);
  private:
  const std::string& _internal_total_slashed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_slashed(const std::string& value);
  std::string* _internal_mutable_total_slashed();
  public:

  // string note = 10 [json_name = "note"];
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_MUST_USE_RESULT std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // string version = 19 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .api_pb.GenesisResponse.AppState.Commission commission = 16 [json_name = "commission"];
  bool has_commission() const;
  private:
  bool _internal_has_commission() const;
  public:
  void clear_commission();
  const ::api_pb::GenesisResponse_AppState_Commission& commission() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_AppState_Commission* release_commission();
  ::api_pb::GenesisResponse_AppState_Commission* mutable_commission();
  void set_allocated_commission(::api_pb::GenesisResponse_AppState_Commission* commission);
  private:
  const ::api_pb::GenesisResponse_AppState_Commission& _internal_commission() const;
  ::api_pb::GenesisResponse_AppState_Commission* _internal_mutable_commission();
  public:
  void unsafe_arena_set_allocated_commission(
      ::api_pb::GenesisResponse_AppState_Commission* commission);
  ::api_pb::GenesisResponse_AppState_Commission* unsafe_arena_release_commission();

  // uint64 max_gas = 7 [json_name = "maxGas"];
  void clear_max_gas();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_gas() const;
  void set_max_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_gas() const;
  void _internal_set_max_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse.AppState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Validators > validators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate > candidates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Coin > coins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_FrozenFund > frozen_funds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> used_checks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_HaltBlock > halt_blocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Waitlist > waitlist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account > accounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Pool > pools_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_CommissionVote > commission_votes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> block_list_candidates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_slashed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::api_pb::GenesisResponse_AppState_Commission* commission_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_gas_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class GenesisResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.GenesisResponse) */ {
 public:
  inline GenesisResponse() : GenesisResponse(nullptr) {}
  ~GenesisResponse() override;
  explicit constexpr GenesisResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisResponse(const GenesisResponse& from);
  GenesisResponse(GenesisResponse&& from) noexcept
    : GenesisResponse() {
    *this = ::std::move(from);
  }

  inline GenesisResponse& operator=(const GenesisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisResponse& operator=(GenesisResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisResponse* internal_default_instance() {
    return reinterpret_cast<const GenesisResponse*>(
               &_GenesisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GenesisResponse& a, GenesisResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenesisResponse* New() const final {
    return new GenesisResponse();
  }

  GenesisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenesisResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GenesisResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.GenesisResponse";
  }
  protected:
  explicit GenesisResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GenesisResponse_ConsensusParams ConsensusParams;
  typedef GenesisResponse_AppState AppState;

  // accessors -------------------------------------------------------

  enum : int {
    kGenesisTimeFieldNumber = 1,
    kChainIdFieldNumber = 2,
    kAppHashFieldNumber = 4,
    kConsensusParamsFieldNumber = 3,
    kAppStateFieldNumber = 5,
    kInitialHeightFieldNumber = 6,
  };
  // string genesis_time = 1 [json_name = "genesisTime"];
  void clear_genesis_time();
  const std::string& genesis_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_genesis_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_genesis_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_genesis_time();
  void set_allocated_genesis_time(std::string* genesis_time);
  private:
  const std::string& _internal_genesis_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_genesis_time(const std::string& value);
  std::string* _internal_mutable_genesis_time();
  public:

  // string chain_id = 2 [json_name = "chainId"];
  void clear_chain_id();
  const std::string& chain_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chain_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chain_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_chain_id();
  void set_allocated_chain_id(std::string* chain_id);
  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(const std::string& value);
  std::string* _internal_mutable_chain_id();
  public:

  // string app_hash = 4 [json_name = "appHash"];
  void clear_app_hash();
  const std::string& app_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_app_hash();
  void set_allocated_app_hash(std::string* app_hash);
  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(const std::string& value);
  std::string* _internal_mutable_app_hash();
  public:

  // .api_pb.GenesisResponse.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
  bool has_consensus_params() const;
  private:
  bool _internal_has_consensus_params() const;
  public:
  void clear_consensus_params();
  const ::api_pb::GenesisResponse_ConsensusParams& consensus_params() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_ConsensusParams* release_consensus_params();
  ::api_pb::GenesisResponse_ConsensusParams* mutable_consensus_params();
  void set_allocated_consensus_params(::api_pb::GenesisResponse_ConsensusParams* consensus_params);
  private:
  const ::api_pb::GenesisResponse_ConsensusParams& _internal_consensus_params() const;
  ::api_pb::GenesisResponse_ConsensusParams* _internal_mutable_consensus_params();
  public:
  void unsafe_arena_set_allocated_consensus_params(
      ::api_pb::GenesisResponse_ConsensusParams* consensus_params);
  ::api_pb::GenesisResponse_ConsensusParams* unsafe_arena_release_consensus_params();

  // .api_pb.GenesisResponse.AppState app_state = 5 [json_name = "appState"];
  bool has_app_state() const;
  private:
  bool _internal_has_app_state() const;
  public:
  void clear_app_state();
  const ::api_pb::GenesisResponse_AppState& app_state() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::GenesisResponse_AppState* release_app_state();
  ::api_pb::GenesisResponse_AppState* mutable_app_state();
  void set_allocated_app_state(::api_pb::GenesisResponse_AppState* app_state);
  private:
  const ::api_pb::GenesisResponse_AppState& _internal_app_state() const;
  ::api_pb::GenesisResponse_AppState* _internal_mutable_app_state();
  public:
  void unsafe_arena_set_allocated_app_state(
      ::api_pb::GenesisResponse_AppState* app_state);
  ::api_pb::GenesisResponse_AppState* unsafe_arena_release_app_state();

  // uint64 initial_height = 6 [json_name = "initialHeight"];
  void clear_initial_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_height() const;
  void set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initial_height() const;
  void _internal_set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.GenesisResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr genesis_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_hash_;
  ::api_pb::GenesisResponse_ConsensusParams* consensus_params_;
  ::api_pb::GenesisResponse_AppState* app_state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initial_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class MinGasPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.MinGasPriceResponse) */ {
 public:
  inline MinGasPriceResponse() : MinGasPriceResponse(nullptr) {}
  ~MinGasPriceResponse() override;
  explicit constexpr MinGasPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MinGasPriceResponse(const MinGasPriceResponse& from);
  MinGasPriceResponse(MinGasPriceResponse&& from) noexcept
    : MinGasPriceResponse() {
    *this = ::std::move(from);
  }

  inline MinGasPriceResponse& operator=(const MinGasPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinGasPriceResponse& operator=(MinGasPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MinGasPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MinGasPriceResponse* internal_default_instance() {
    return reinterpret_cast<const MinGasPriceResponse*>(
               &_MinGasPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(MinGasPriceResponse& a, MinGasPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MinGasPriceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinGasPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinGasPriceResponse* New() const final {
    return new MinGasPriceResponse();
  }

  MinGasPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinGasPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MinGasPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MinGasPriceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinGasPriceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.MinGasPriceResponse";
  }
  protected:
  explicit MinGasPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinGasPriceFieldNumber = 3,
  };
  // uint64 min_gas_price = 3 [json_name = "minGasPrice"];
  void clear_min_gas_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_gas_price() const;
  void set_min_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_gas_price() const;
  void _internal_set_min_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.MinGasPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_gas_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class BlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.BlockRequest) */ {
 public:
  inline BlockRequest() : BlockRequest(nullptr) {}
  ~BlockRequest() override;
  explicit constexpr BlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockRequest(const BlockRequest& from);
  BlockRequest(BlockRequest&& from) noexcept
    : BlockRequest() {
    *this = ::std::move(from);
  }

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRequest& operator=(BlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockRequest* internal_default_instance() {
    return reinterpret_cast<const BlockRequest*>(
               &_BlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(BlockRequest& a, BlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockRequest* New() const final {
    return new BlockRequest();
  }

  BlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.BlockRequest";
  }
  protected:
  explicit BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kHeightFieldNumber = 1,
    kFailedTxsFieldNumber = 3,
    kEventsFieldNumber = 4,
  };
  // repeated .api_pb.BlockField fields = 2 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  ::api_pb::BlockField _internal_fields(int index) const;
  void _internal_add_fields(::api_pb::BlockField value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_fields();
  public:
  ::api_pb::BlockField fields(int index) const;
  void set_fields(int index, ::api_pb::BlockField value);
  void add_fields(::api_pb::BlockField value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_fields();

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool failed_txs = 3 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_failed_txs();
  bool failed_txs() const;
  void set_failed_txs(bool value);
  private:
  bool _internal_failed_txs() const;
  void _internal_set_failed_txs(bool value);
  public:

  // bool events = 4 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_events();
  bool events() const;
  void set_events(bool value);
  private:
  bool _internal_events() const;
  void _internal_set_events(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.BlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> fields_;
  mutable std::atomic<int> _fields_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  bool failed_txs_;
  bool events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class BlockResponse_Validator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.BlockResponse.Validator) */ {
 public:
  inline BlockResponse_Validator() : BlockResponse_Validator(nullptr) {}
  ~BlockResponse_Validator() override;
  explicit constexpr BlockResponse_Validator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockResponse_Validator(const BlockResponse_Validator& from);
  BlockResponse_Validator(BlockResponse_Validator&& from) noexcept
    : BlockResponse_Validator() {
    *this = ::std::move(from);
  }

  inline BlockResponse_Validator& operator=(const BlockResponse_Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockResponse_Validator& operator=(BlockResponse_Validator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockResponse_Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockResponse_Validator* internal_default_instance() {
    return reinterpret_cast<const BlockResponse_Validator*>(
               &_BlockResponse_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(BlockResponse_Validator& a, BlockResponse_Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockResponse_Validator* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockResponse_Validator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockResponse_Validator* New() const final {
    return new BlockResponse_Validator();
  }

  BlockResponse_Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockResponse_Validator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockResponse_Validator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockResponse_Validator& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockResponse_Validator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.BlockResponse.Validator";
  }
  protected:
  explicit BlockResponse_Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignedFieldNumber = 2,
  };
  // string public_key = 1 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bool signed = 2 [json_name = "signed"];
  void clear_signed_();
  bool signed_() const;
  void set_signed_(bool value);
  private:
  bool _internal_signed_() const;
  void _internal_set_signed_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.BlockResponse.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  bool signed__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class BlockResponse_Evidence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.BlockResponse.Evidence) */ {
 public:
  inline BlockResponse_Evidence() : BlockResponse_Evidence(nullptr) {}
  ~BlockResponse_Evidence() override;
  explicit constexpr BlockResponse_Evidence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockResponse_Evidence(const BlockResponse_Evidence& from);
  BlockResponse_Evidence(BlockResponse_Evidence&& from) noexcept
    : BlockResponse_Evidence() {
    *this = ::std::move(from);
  }

  inline BlockResponse_Evidence& operator=(const BlockResponse_Evidence& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockResponse_Evidence& operator=(BlockResponse_Evidence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockResponse_Evidence& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockResponse_Evidence* internal_default_instance() {
    return reinterpret_cast<const BlockResponse_Evidence*>(
               &_BlockResponse_Evidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(BlockResponse_Evidence& a, BlockResponse_Evidence& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockResponse_Evidence* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockResponse_Evidence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockResponse_Evidence* New() const final {
    return new BlockResponse_Evidence();
  }

  BlockResponse_Evidence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockResponse_Evidence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockResponse_Evidence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockResponse_Evidence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockResponse_Evidence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.BlockResponse.Evidence";
  }
  protected:
  explicit BlockResponse_Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvidenceFieldNumber = 1,
  };
  // repeated .google.protobuf.Struct evidence = 1 [json_name = "evidence"];
  int evidence_size() const;
  private:
  int _internal_evidence_size() const;
  public:
  void clear_evidence();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_evidence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >*
      mutable_evidence();
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_evidence(int index) const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_add_evidence();
  public:
  const PROTOBUF_NAMESPACE_ID::Struct& evidence(int index) const;
  PROTOBUF_NAMESPACE_ID::Struct* add_evidence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >&
      evidence() const;

  // @@protoc_insertion_point(class_scope:api_pb.BlockResponse.Evidence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct > evidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class BlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.BlockResponse) */ {
 public:
  inline BlockResponse() : BlockResponse(nullptr) {}
  ~BlockResponse() override;
  explicit constexpr BlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockResponse(const BlockResponse& from);
  BlockResponse(BlockResponse&& from) noexcept
    : BlockResponse() {
    *this = ::std::move(from);
  }

  inline BlockResponse& operator=(const BlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockResponse& operator=(BlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockResponse* internal_default_instance() {
    return reinterpret_cast<const BlockResponse*>(
               &_BlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(BlockResponse& a, BlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockResponse* New() const final {
    return new BlockResponse();
  }

  BlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.BlockResponse";
  }
  protected:
  explicit BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlockResponse_Validator Validator;
  typedef BlockResponse_Evidence Evidence;

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 6,
    kValidatorsFieldNumber = 10,
    kMissedFieldNumber = 12,
    kEventsFieldNumber = 14,
    kHashFieldNumber = 1,
    kTimeFieldNumber = 3,
    kBlockRewardFieldNumber = 7,
    kProposerFieldNumber = 9,
    kEvidenceFieldNumber = 13,
    kHeightFieldNumber = 2,
    kTransactionCountFieldNumber = 4,
    kSizeFieldNumber = 8,
  };
  // repeated .api_pb.TransactionResponse transactions = 6 [json_name = "transactions"];
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::api_pb::TransactionResponse* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >*
      mutable_transactions();
  private:
  const ::api_pb::TransactionResponse& _internal_transactions(int index) const;
  ::api_pb::TransactionResponse* _internal_add_transactions();
  public:
  const ::api_pb::TransactionResponse& transactions(int index) const;
  ::api_pb::TransactionResponse* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >&
      transactions() const;

  // repeated .api_pb.BlockResponse.Validator validators = 10 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::api_pb::BlockResponse_Validator* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse_Validator >*
      mutable_validators();
  private:
  const ::api_pb::BlockResponse_Validator& _internal_validators(int index) const;
  ::api_pb::BlockResponse_Validator* _internal_add_validators();
  public:
  const ::api_pb::BlockResponse_Validator& validators(int index) const;
  ::api_pb::BlockResponse_Validator* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse_Validator >&
      validators() const;

  // repeated string missed = 12 [json_name = "missed"];
  int missed_size() const;
  private:
  int _internal_missed_size() const;
  public:
  void clear_missed();
  const std::string& missed(int index) const;
  std::string* mutable_missed(int index);
  void set_missed(int index, const std::string& value);
  void set_missed(int index, std::string&& value);
  void set_missed(int index, const char* value);
  void set_missed(int index, const char* value, size_t size);
  std::string* add_missed();
  void add_missed(const std::string& value);
  void add_missed(std::string&& value);
  void add_missed(const char* value);
  void add_missed(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& missed() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_missed();
  private:
  const std::string& _internal_missed(int index) const;
  std::string* _internal_add_missed();
  public:

  // repeated .google.protobuf.Any events = 14 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  PROTOBUF_NAMESPACE_ID::Any* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_events();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_events(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_events();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& events(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      events() const;

  // string hash = 1 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string time = 3 [json_name = "time"];
  void clear_time();
  const std::string& time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time();
  PROTOBUF_MUST_USE_RESULT std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // string block_reward = 7 [json_name = "blockReward"];
  void clear_block_reward();
  const std::string& block_reward() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_reward(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_reward();
  PROTOBUF_MUST_USE_RESULT std::string* release_block_reward();
  void set_allocated_block_reward(std::string* block_reward);
  private:
  const std::string& _internal_block_reward() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_reward(const std::string& value);
  std::string* _internal_mutable_block_reward();
  public:

  // string proposer = 9 [json_name = "proposer"];
  void clear_proposer();
  const std::string& proposer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proposer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proposer();
  PROTOBUF_MUST_USE_RESULT std::string* release_proposer();
  void set_allocated_proposer(std::string* proposer);
  private:
  const std::string& _internal_proposer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer(const std::string& value);
  std::string* _internal_mutable_proposer();
  public:

  // .api_pb.BlockResponse.Evidence evidence = 13 [json_name = "evidence"];
  bool has_evidence() const;
  private:
  bool _internal_has_evidence() const;
  public:
  void clear_evidence();
  const ::api_pb::BlockResponse_Evidence& evidence() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::BlockResponse_Evidence* release_evidence();
  ::api_pb::BlockResponse_Evidence* mutable_evidence();
  void set_allocated_evidence(::api_pb::BlockResponse_Evidence* evidence);
  private:
  const ::api_pb::BlockResponse_Evidence& _internal_evidence() const;
  ::api_pb::BlockResponse_Evidence* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::api_pb::BlockResponse_Evidence* evidence);
  ::api_pb::BlockResponse_Evidence* unsafe_arena_release_evidence();

  // uint64 height = 2 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 transaction_count = 4 [json_name = "transactionCount"];
  void clear_transaction_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count() const;
  void set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transaction_count() const;
  void _internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 8 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.BlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse > transactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse_Validator > validators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> missed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_;
  ::api_pb::BlockResponse_Evidence* evidence_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class MaxGasPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.MaxGasPriceRequest) */ {
 public:
  inline MaxGasPriceRequest() : MaxGasPriceRequest(nullptr) {}
  ~MaxGasPriceRequest() override;
  explicit constexpr MaxGasPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MaxGasPriceRequest(const MaxGasPriceRequest& from);
  MaxGasPriceRequest(MaxGasPriceRequest&& from) noexcept
    : MaxGasPriceRequest() {
    *this = ::std::move(from);
  }

  inline MaxGasPriceRequest& operator=(const MaxGasPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaxGasPriceRequest& operator=(MaxGasPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MaxGasPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MaxGasPriceRequest* internal_default_instance() {
    return reinterpret_cast<const MaxGasPriceRequest*>(
               &_MaxGasPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(MaxGasPriceRequest& a, MaxGasPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MaxGasPriceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaxGasPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaxGasPriceRequest* New() const final {
    return new MaxGasPriceRequest();
  }

  MaxGasPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaxGasPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MaxGasPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MaxGasPriceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxGasPriceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.MaxGasPriceRequest";
  }
  protected:
  explicit MaxGasPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.MaxGasPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class MaxGasPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.MaxGasPriceResponse) */ {
 public:
  inline MaxGasPriceResponse() : MaxGasPriceResponse(nullptr) {}
  ~MaxGasPriceResponse() override;
  explicit constexpr MaxGasPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MaxGasPriceResponse(const MaxGasPriceResponse& from);
  MaxGasPriceResponse(MaxGasPriceResponse&& from) noexcept
    : MaxGasPriceResponse() {
    *this = ::std::move(from);
  }

  inline MaxGasPriceResponse& operator=(const MaxGasPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaxGasPriceResponse& operator=(MaxGasPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MaxGasPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MaxGasPriceResponse* internal_default_instance() {
    return reinterpret_cast<const MaxGasPriceResponse*>(
               &_MaxGasPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(MaxGasPriceResponse& a, MaxGasPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MaxGasPriceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaxGasPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MaxGasPriceResponse* New() const final {
    return new MaxGasPriceResponse();
  }

  MaxGasPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MaxGasPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MaxGasPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MaxGasPriceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxGasPriceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.MaxGasPriceResponse";
  }
  protected:
  explicit MaxGasPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxGasPriceFieldNumber = 3,
  };
  // uint64 max_gas_price = 3 [json_name = "maxGasPrice"];
  void clear_max_gas_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_gas_price() const;
  void set_max_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_gas_price() const;
  void _internal_set_max_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.MaxGasPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_gas_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressRequest) */ {
 public:
  inline AddressRequest() : AddressRequest(nullptr) {}
  ~AddressRequest() override;
  explicit constexpr AddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressRequest(const AddressRequest& from);
  AddressRequest(AddressRequest&& from) noexcept
    : AddressRequest() {
    *this = ::std::move(from);
  }

  inline AddressRequest& operator=(const AddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressRequest& operator=(AddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressRequest* internal_default_instance() {
    return reinterpret_cast<const AddressRequest*>(
               &_AddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(AddressRequest& a, AddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressRequest* New() const final {
    return new AddressRequest();
  }

  AddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressRequest";
  }
  protected:
  explicit AddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDelegatedFieldNumber = 4,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_delegated();
  bool delegated() const;
  void set_delegated(bool value);
  private:
  bool _internal_delegated() const;
  void _internal_set_delegated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.AddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  bool delegated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressBalance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressBalance) */ {
 public:
  inline AddressBalance() : AddressBalance(nullptr) {}
  ~AddressBalance() override;
  explicit constexpr AddressBalance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressBalance(const AddressBalance& from);
  AddressBalance(AddressBalance&& from) noexcept
    : AddressBalance() {
    *this = ::std::move(from);
  }

  inline AddressBalance& operator=(const AddressBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBalance& operator=(AddressBalance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressBalance& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressBalance* internal_default_instance() {
    return reinterpret_cast<const AddressBalance*>(
               &_AddressBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(AddressBalance& a, AddressBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBalance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressBalance* New() const final {
    return new AddressBalance();
  }

  AddressBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressBalance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressBalance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressBalance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressBalance";
  }
  protected:
  explicit AddressBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kBipValueFieldNumber = 3,
    kCoinFieldNumber = 1,
  };
  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string bip_value = 3 [json_name = "bipValue"];
  void clear_bip_value();
  const std::string& bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bip_value();
  void set_allocated_bip_value(std::string* bip_value);
  private:
  const std::string& _internal_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bip_value(const std::string& value);
  std::string* _internal_mutable_bip_value();
  public:

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  bool has_coin() const;
  private:
  bool _internal_has_coin() const;
  public:
  void clear_coin();
  const ::api_pb::Coin& coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin();
  ::api_pb::Coin* mutable_coin();
  void set_allocated_coin(::api_pb::Coin* coin);
  private:
  const ::api_pb::Coin& _internal_coin() const;
  ::api_pb::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::api_pb::Coin* coin);
  ::api_pb::Coin* unsafe_arena_release_coin();

  // @@protoc_insertion_point(class_scope:api_pb.AddressBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bip_value_;
  ::api_pb::Coin* coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressDelegatedBalance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressDelegatedBalance) */ {
 public:
  inline AddressDelegatedBalance() : AddressDelegatedBalance(nullptr) {}
  ~AddressDelegatedBalance() override;
  explicit constexpr AddressDelegatedBalance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressDelegatedBalance(const AddressDelegatedBalance& from);
  AddressDelegatedBalance(AddressDelegatedBalance&& from) noexcept
    : AddressDelegatedBalance() {
    *this = ::std::move(from);
  }

  inline AddressDelegatedBalance& operator=(const AddressDelegatedBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressDelegatedBalance& operator=(AddressDelegatedBalance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressDelegatedBalance& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressDelegatedBalance* internal_default_instance() {
    return reinterpret_cast<const AddressDelegatedBalance*>(
               &_AddressDelegatedBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(AddressDelegatedBalance& a, AddressDelegatedBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressDelegatedBalance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressDelegatedBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressDelegatedBalance* New() const final {
    return new AddressDelegatedBalance();
  }

  AddressDelegatedBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressDelegatedBalance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressDelegatedBalance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressDelegatedBalance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressDelegatedBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressDelegatedBalance";
  }
  protected:
  explicit AddressDelegatedBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kBipValueFieldNumber = 3,
    kDelegateBipValueFieldNumber = 4,
    kCoinFieldNumber = 1,
  };
  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string bip_value = 3 [json_name = "bipValue"];
  void clear_bip_value();
  const std::string& bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bip_value();
  void set_allocated_bip_value(std::string* bip_value);
  private:
  const std::string& _internal_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bip_value(const std::string& value);
  std::string* _internal_mutable_bip_value();
  public:

  // string delegate_bip_value = 4 [json_name = "delegateBipValue"];
  void clear_delegate_bip_value();
  const std::string& delegate_bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delegate_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delegate_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_delegate_bip_value();
  void set_allocated_delegate_bip_value(std::string* delegate_bip_value);
  private:
  const std::string& _internal_delegate_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegate_bip_value(const std::string& value);
  std::string* _internal_mutable_delegate_bip_value();
  public:

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  bool has_coin() const;
  private:
  bool _internal_has_coin() const;
  public:
  void clear_coin();
  const ::api_pb::Coin& coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin();
  ::api_pb::Coin* mutable_coin();
  void set_allocated_coin(::api_pb::Coin* coin);
  private:
  const ::api_pb::Coin& _internal_coin() const;
  ::api_pb::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::api_pb::Coin* coin);
  ::api_pb::Coin* unsafe_arena_release_coin();

  // @@protoc_insertion_point(class_scope:api_pb.AddressDelegatedBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bip_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_bip_value_;
  ::api_pb::Coin* coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressResponse) */ {
 public:
  inline AddressResponse() : AddressResponse(nullptr) {}
  ~AddressResponse() override;
  explicit constexpr AddressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressResponse(const AddressResponse& from);
  AddressResponse(AddressResponse&& from) noexcept
    : AddressResponse() {
    *this = ::std::move(from);
  }

  inline AddressResponse& operator=(const AddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressResponse& operator=(AddressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressResponse* internal_default_instance() {
    return reinterpret_cast<const AddressResponse*>(
               &_AddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(AddressResponse& a, AddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressResponse* New() const final {
    return new AddressResponse();
  }

  AddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressResponse";
  }
  protected:
  explicit AddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 1,
    kDelegatedFieldNumber = 3,
    kTotalFieldNumber = 4,
    kBipValueFieldNumber = 5,
    kMultisigFieldNumber = 6,
    kTransactionCountFieldNumber = 2,
  };
  // repeated .api_pb.AddressBalance balance = 1 [json_name = "balance"];
  int balance_size() const;
  private:
  int _internal_balance_size() const;
  public:
  void clear_balance();
  ::api_pb::AddressBalance* mutable_balance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
      mutable_balance();
  private:
  const ::api_pb::AddressBalance& _internal_balance(int index) const;
  ::api_pb::AddressBalance* _internal_add_balance();
  public:
  const ::api_pb::AddressBalance& balance(int index) const;
  ::api_pb::AddressBalance* add_balance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
      balance() const;

  // repeated .api_pb.AddressDelegatedBalance delegated = 3 [json_name = "delegated"];
  int delegated_size() const;
  private:
  int _internal_delegated_size() const;
  public:
  void clear_delegated();
  ::api_pb::AddressDelegatedBalance* mutable_delegated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >*
      mutable_delegated();
  private:
  const ::api_pb::AddressDelegatedBalance& _internal_delegated(int index) const;
  ::api_pb::AddressDelegatedBalance* _internal_add_delegated();
  public:
  const ::api_pb::AddressDelegatedBalance& delegated(int index) const;
  ::api_pb::AddressDelegatedBalance* add_delegated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >&
      delegated() const;

  // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
  int total_size() const;
  private:
  int _internal_total_size() const;
  public:
  void clear_total();
  ::api_pb::AddressBalance* mutable_total(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
      mutable_total();
  private:
  const ::api_pb::AddressBalance& _internal_total(int index) const;
  ::api_pb::AddressBalance* _internal_add_total();
  public:
  const ::api_pb::AddressBalance& total(int index) const;
  ::api_pb::AddressBalance* add_total();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
      total() const;

  // string bip_value = 5 [json_name = "bipValue"];
  void clear_bip_value();
  const std::string& bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bip_value();
  void set_allocated_bip_value(std::string* bip_value);
  private:
  const std::string& _internal_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bip_value(const std::string& value);
  std::string* _internal_mutable_bip_value();
  public:

  // .api_pb.Multisig multisig = 6 [json_name = "multisig"];
  bool has_multisig() const;
  private:
  bool _internal_has_multisig() const;
  public:
  void clear_multisig();
  const ::api_pb::Multisig& multisig() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Multisig* release_multisig();
  ::api_pb::Multisig* mutable_multisig();
  void set_allocated_multisig(::api_pb::Multisig* multisig);
  private:
  const ::api_pb::Multisig& _internal_multisig() const;
  ::api_pb::Multisig* _internal_mutable_multisig();
  public:
  void unsafe_arena_set_allocated_multisig(
      ::api_pb::Multisig* multisig);
  ::api_pb::Multisig* unsafe_arena_release_multisig();

  // uint64 transaction_count = 2 [json_name = "transactionCount"];
  void clear_transaction_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count() const;
  void set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transaction_count() const;
  void _internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.AddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance > balance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance > delegated_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance > total_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bip_value_;
  ::api_pb::Multisig* multisig_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class Multisig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.Multisig) */ {
 public:
  inline Multisig() : Multisig(nullptr) {}
  ~Multisig() override;
  explicit constexpr Multisig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Multisig(const Multisig& from);
  Multisig(Multisig&& from) noexcept
    : Multisig() {
    *this = ::std::move(from);
  }

  inline Multisig& operator=(const Multisig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Multisig& operator=(Multisig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Multisig& default_instance() {
    return *internal_default_instance();
  }
  static inline const Multisig* internal_default_instance() {
    return reinterpret_cast<const Multisig*>(
               &_Multisig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(Multisig& a, Multisig& b) {
    a.Swap(&b);
  }
  inline void Swap(Multisig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Multisig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Multisig* New() const final {
    return new Multisig();
  }

  Multisig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Multisig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Multisig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Multisig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Multisig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.Multisig";
  }
  protected:
  explicit Multisig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 2,
    kAddressesFieldNumber = 3,
    kThresholdFieldNumber = 1,
  };
  // repeated uint64 weights = 2 [json_name = "weights"];
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_weights() const;
  void _internal_add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_weights();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 weights(int index) const;
  void set_weights(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_weights();

  // repeated string addresses = 3 [json_name = "addresses"];
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // uint64 threshold = 1 [json_name = "threshold"];
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.Multisig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressesRequest) */ {
 public:
  inline AddressesRequest() : AddressesRequest(nullptr) {}
  ~AddressesRequest() override;
  explicit constexpr AddressesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressesRequest(const AddressesRequest& from);
  AddressesRequest(AddressesRequest&& from) noexcept
    : AddressesRequest() {
    *this = ::std::move(from);
  }

  inline AddressesRequest& operator=(const AddressesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressesRequest& operator=(AddressesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressesRequest* internal_default_instance() {
    return reinterpret_cast<const AddressesRequest*>(
               &_AddressesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(AddressesRequest& a, AddressesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressesRequest* New() const final {
    return new AddressesRequest();
  }

  AddressesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressesRequest";
  }
  protected:
  explicit AddressesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kHeightFieldNumber = 2,
    kDelegatedFieldNumber = 4,
  };
  // repeated string addresses = 1 [json_name = "addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_delegated();
  bool delegated() const;
  void set_delegated(bool value);
  private:
  bool _internal_delegated() const;
  void _internal_set_delegated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.AddressesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  bool delegated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressesResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressesResponse.Result) */ {
 public:
  inline AddressesResponse_Result() : AddressesResponse_Result(nullptr) {}
  ~AddressesResponse_Result() override;
  explicit constexpr AddressesResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressesResponse_Result(const AddressesResponse_Result& from);
  AddressesResponse_Result(AddressesResponse_Result&& from) noexcept
    : AddressesResponse_Result() {
    *this = ::std::move(from);
  }

  inline AddressesResponse_Result& operator=(const AddressesResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressesResponse_Result& operator=(AddressesResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressesResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressesResponse_Result* internal_default_instance() {
    return reinterpret_cast<const AddressesResponse_Result*>(
               &_AddressesResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(AddressesResponse_Result& a, AddressesResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressesResponse_Result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressesResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressesResponse_Result* New() const final {
    return new AddressesResponse_Result();
  }

  AddressesResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressesResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressesResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressesResponse_Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressesResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressesResponse.Result";
  }
  protected:
  explicit AddressesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalanceFieldNumber = 2,
    kTotalFieldNumber = 4,
    kDelegatedFieldNumber = 6,
    kBipValueFieldNumber = 5,
    kMultisigFieldNumber = 7,
    kTransactionCountFieldNumber = 3,
  };
  // repeated .api_pb.AddressBalance balance = 2 [json_name = "balance"];
  int balance_size() const;
  private:
  int _internal_balance_size() const;
  public:
  void clear_balance();
  ::api_pb::AddressBalance* mutable_balance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
      mutable_balance();
  private:
  const ::api_pb::AddressBalance& _internal_balance(int index) const;
  ::api_pb::AddressBalance* _internal_add_balance();
  public:
  const ::api_pb::AddressBalance& balance(int index) const;
  ::api_pb::AddressBalance* add_balance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
      balance() const;

  // repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
  int total_size() const;
  private:
  int _internal_total_size() const;
  public:
  void clear_total();
  ::api_pb::AddressBalance* mutable_total(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
      mutable_total();
  private:
  const ::api_pb::AddressBalance& _internal_total(int index) const;
  ::api_pb::AddressBalance* _internal_add_total();
  public:
  const ::api_pb::AddressBalance& total(int index) const;
  ::api_pb::AddressBalance* add_total();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
      total() const;

  // repeated .api_pb.AddressDelegatedBalance delegated = 6 [json_name = "delegated"];
  int delegated_size() const;
  private:
  int _internal_delegated_size() const;
  public:
  void clear_delegated();
  ::api_pb::AddressDelegatedBalance* mutable_delegated(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >*
      mutable_delegated();
  private:
  const ::api_pb::AddressDelegatedBalance& _internal_delegated(int index) const;
  ::api_pb::AddressDelegatedBalance* _internal_add_delegated();
  public:
  const ::api_pb::AddressDelegatedBalance& delegated(int index) const;
  ::api_pb::AddressDelegatedBalance* add_delegated();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >&
      delegated() const;

  // string bip_value = 5 [json_name = "bipValue"];
  void clear_bip_value();
  const std::string& bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bip_value();
  void set_allocated_bip_value(std::string* bip_value);
  private:
  const std::string& _internal_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bip_value(const std::string& value);
  std::string* _internal_mutable_bip_value();
  public:

  // .api_pb.Multisig multisig = 7 [json_name = "multisig"];
  bool has_multisig() const;
  private:
  bool _internal_has_multisig() const;
  public:
  void clear_multisig();
  const ::api_pb::Multisig& multisig() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Multisig* release_multisig();
  ::api_pb::Multisig* mutable_multisig();
  void set_allocated_multisig(::api_pb::Multisig* multisig);
  private:
  const ::api_pb::Multisig& _internal_multisig() const;
  ::api_pb::Multisig* _internal_mutable_multisig();
  public:
  void unsafe_arena_set_allocated_multisig(
      ::api_pb::Multisig* multisig);
  ::api_pb::Multisig* unsafe_arena_release_multisig();

  // uint64 transaction_count = 3 [json_name = "transactionCount"];
  void clear_transaction_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count() const;
  void set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transaction_count() const;
  void _internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.AddressesResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance > balance_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance > total_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance > delegated_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bip_value_;
  ::api_pb::Multisig* multisig_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class AddressesResponse_AddressesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddressesResponse_AddressesEntry_DoNotUse, 
    std::string, ::api_pb::AddressesResponse_Result,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AddressesResponse_AddressesEntry_DoNotUse, 
    std::string, ::api_pb::AddressesResponse_Result,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AddressesResponse_AddressesEntry_DoNotUse();
  explicit constexpr AddressesResponse_AddressesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AddressesResponse_AddressesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AddressesResponse_AddressesEntry_DoNotUse& other);
  static const AddressesResponse_AddressesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AddressesResponse_AddressesEntry_DoNotUse*>(&_AddressesResponse_AddressesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api_pb.AddressesResponse.AddressesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AddressesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.AddressesResponse) */ {
 public:
  inline AddressesResponse() : AddressesResponse(nullptr) {}
  ~AddressesResponse() override;
  explicit constexpr AddressesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressesResponse(const AddressesResponse& from);
  AddressesResponse(AddressesResponse&& from) noexcept
    : AddressesResponse() {
    *this = ::std::move(from);
  }

  inline AddressesResponse& operator=(const AddressesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressesResponse& operator=(AddressesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressesResponse* internal_default_instance() {
    return reinterpret_cast<const AddressesResponse*>(
               &_AddressesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(AddressesResponse& a, AddressesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressesResponse* New() const final {
    return new AddressesResponse();
  }

  AddressesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddressesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.AddressesResponse";
  }
  protected:
  explicit AddressesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddressesResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 3,
  };
  // map<string, .api_pb.AddressesResponse.Result> addresses = 3 [json_name = "addresses"];
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >&
      _internal_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >*
      _internal_mutable_addresses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >&
      addresses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >*
      mutable_addresses();

  // @@protoc_insertion_point(class_scope:api_pb.AddressesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AddressesResponse_AddressesEntry_DoNotUse,
      std::string, ::api_pb::AddressesResponse_Result,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CandidateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CandidateRequest) */ {
 public:
  inline CandidateRequest() : CandidateRequest(nullptr) {}
  ~CandidateRequest() override;
  explicit constexpr CandidateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidateRequest(const CandidateRequest& from);
  CandidateRequest(CandidateRequest&& from) noexcept
    : CandidateRequest() {
    *this = ::std::move(from);
  }

  inline CandidateRequest& operator=(const CandidateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateRequest& operator=(CandidateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidateRequest* internal_default_instance() {
    return reinterpret_cast<const CandidateRequest*>(
               &_CandidateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CandidateRequest& a, CandidateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateRequest* New() const final {
    return new CandidateRequest();
  }

  CandidateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CandidateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CandidateRequest";
  }
  protected:
  explicit CandidateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kHeightFieldNumber = 2,
    kNotShowStakesFieldNumber = 4,
  };
  // string public_key = 1 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_not_show_stakes();
  bool not_show_stakes() const;
  void set_not_show_stakes(bool value);
  private:
  bool _internal_not_show_stakes() const;
  void _internal_set_not_show_stakes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CandidateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  bool not_show_stakes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CandidateResponse_Stake final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CandidateResponse.Stake) */ {
 public:
  inline CandidateResponse_Stake() : CandidateResponse_Stake(nullptr) {}
  ~CandidateResponse_Stake() override;
  explicit constexpr CandidateResponse_Stake(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidateResponse_Stake(const CandidateResponse_Stake& from);
  CandidateResponse_Stake(CandidateResponse_Stake&& from) noexcept
    : CandidateResponse_Stake() {
    *this = ::std::move(from);
  }

  inline CandidateResponse_Stake& operator=(const CandidateResponse_Stake& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateResponse_Stake& operator=(CandidateResponse_Stake&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidateResponse_Stake& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidateResponse_Stake* internal_default_instance() {
    return reinterpret_cast<const CandidateResponse_Stake*>(
               &_CandidateResponse_Stake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CandidateResponse_Stake& a, CandidateResponse_Stake& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateResponse_Stake* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateResponse_Stake* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateResponse_Stake* New() const final {
    return new CandidateResponse_Stake();
  }

  CandidateResponse_Stake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateResponse_Stake>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidateResponse_Stake& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CandidateResponse_Stake& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateResponse_Stake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CandidateResponse.Stake";
  }
  protected:
  explicit CandidateResponse_Stake(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kValueFieldNumber = 3,
    kBipValueFieldNumber = 4,
    kCoinFieldNumber = 2,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // string value = 3 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string bip_value = 4 [json_name = "bipValue"];
  void clear_bip_value();
  const std::string& bip_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bip_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bip_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_bip_value();
  void set_allocated_bip_value(std::string* bip_value);
  private:
  const std::string& _internal_bip_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bip_value(const std::string& value);
  std::string* _internal_mutable_bip_value();
  public:

  // .api_pb.Coin coin = 2 [json_name = "coin"];
  bool has_coin() const;
  private:
  bool _internal_has_coin() const;
  public:
  void clear_coin();
  const ::api_pb::Coin& coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin();
  ::api_pb::Coin* mutable_coin();
  void set_allocated_coin(::api_pb::Coin* coin);
  private:
  const ::api_pb::Coin& _internal_coin() const;
  ::api_pb::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::api_pb::Coin* coin);
  ::api_pb::Coin* unsafe_arena_release_coin();

  // @@protoc_insertion_point(class_scope:api_pb.CandidateResponse.Stake)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bip_value_;
  ::api_pb::Coin* coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CandidateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CandidateResponse) */ {
 public:
  inline CandidateResponse() : CandidateResponse(nullptr) {}
  ~CandidateResponse() override;
  explicit constexpr CandidateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidateResponse(const CandidateResponse& from);
  CandidateResponse(CandidateResponse&& from) noexcept
    : CandidateResponse() {
    *this = ::std::move(from);
  }

  inline CandidateResponse& operator=(const CandidateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateResponse& operator=(CandidateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidateResponse* internal_default_instance() {
    return reinterpret_cast<const CandidateResponse*>(
               &_CandidateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CandidateResponse& a, CandidateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateResponse* New() const final {
    return new CandidateResponse();
  }

  CandidateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CandidateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CandidateResponse";
  }
  protected:
  explicit CandidateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CandidateResponse_Stake Stake;

  // accessors -------------------------------------------------------

  enum : int {
    kStakesFieldNumber = 5,
    kRewardAddressFieldNumber = 1,
    kTotalStakeFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kOwnerAddressFieldNumber = 10,
    kControlAddressFieldNumber = 11,
    kUsedSlotsFieldNumber = 7,
    kUniqUsersFieldNumber = 8,
    kMinStakeFieldNumber = 9,
    kCommissionFieldNumber = 4,
    kStatusFieldNumber = 6,
    kJailedUntilFieldNumber = 13,
    kIdFieldNumber = 14,
    kValidatorFieldNumber = 12,
  };
  // repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];
  int stakes_size() const;
  private:
  int _internal_stakes_size() const;
  public:
  void clear_stakes();
  ::api_pb::CandidateResponse_Stake* mutable_stakes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse_Stake >*
      mutable_stakes();
  private:
  const ::api_pb::CandidateResponse_Stake& _internal_stakes(int index) const;
  ::api_pb::CandidateResponse_Stake* _internal_add_stakes();
  public:
  const ::api_pb::CandidateResponse_Stake& stakes(int index) const;
  ::api_pb::CandidateResponse_Stake* add_stakes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse_Stake >&
      stakes() const;

  // string reward_address = 1 [json_name = "rewardAddress"];
  void clear_reward_address();
  const std::string& reward_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_reward_address();
  void set_allocated_reward_address(std::string* reward_address);
  private:
  const std::string& _internal_reward_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_address(const std::string& value);
  std::string* _internal_mutable_reward_address();
  public:

  // string total_stake = 2 [json_name = "totalStake"];
  void clear_total_stake();
  const std::string& total_stake() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_total_stake(ArgT0&& arg0, ArgT... args);
  std::string* mutable_total_stake();
  PROTOBUF_MUST_USE_RESULT std::string* release_total_stake();
  void set_allocated_total_stake(std::string* total_stake);
  private:
  const std::string& _internal_total_stake() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_total_stake(const std::string& value);
  std::string* _internal_mutable_total_stake();
  public:

  // string public_key = 3 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string owner_address = 10 [json_name = "ownerAddress"];
  void clear_owner_address();
  const std::string& owner_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);
  private:
  const std::string& _internal_owner_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_address(const std::string& value);
  std::string* _internal_mutable_owner_address();
  public:

  // string control_address = 11 [json_name = "controlAddress"];
  void clear_control_address();
  const std::string& control_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_control_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_control_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_control_address();
  void set_allocated_control_address(std::string* control_address);
  private:
  const std::string& _internal_control_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_address(const std::string& value);
  std::string* _internal_mutable_control_address();
  public:

  // .google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];
  bool has_used_slots() const;
  private:
  bool _internal_has_used_slots() const;
  public:
  void clear_used_slots();
  const PROTOBUF_NAMESPACE_ID::UInt64Value& used_slots() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::UInt64Value* release_used_slots();
  PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_used_slots();
  void set_allocated_used_slots(PROTOBUF_NAMESPACE_ID::UInt64Value* used_slots);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_used_slots() const;
  PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_used_slots();
  public:
  void unsafe_arena_set_allocated_used_slots(
      PROTOBUF_NAMESPACE_ID::UInt64Value* used_slots);
  PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_used_slots();

  // .google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];
  bool has_uniq_users() const;
  private:
  bool _internal_has_uniq_users() const;
  public:
  void clear_uniq_users();
  const PROTOBUF_NAMESPACE_ID::UInt64Value& uniq_users() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::UInt64Value* release_uniq_users();
  PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_uniq_users();
  void set_allocated_uniq_users(PROTOBUF_NAMESPACE_ID::UInt64Value* uniq_users);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_uniq_users() const;
  PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_uniq_users();
  public:
  void unsafe_arena_set_allocated_uniq_users(
      PROTOBUF_NAMESPACE_ID::UInt64Value* uniq_users);
  PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_uniq_users();

  // .google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];
  bool has_min_stake() const;
  private:
  bool _internal_has_min_stake() const;
  public:
  void clear_min_stake();
  const PROTOBUF_NAMESPACE_ID::StringValue& min_stake() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::StringValue* release_min_stake();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_min_stake();
  void set_allocated_min_stake(PROTOBUF_NAMESPACE_ID::StringValue* min_stake);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_min_stake() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_min_stake();
  public:
  void unsafe_arena_set_allocated_min_stake(
      PROTOBUF_NAMESPACE_ID::StringValue* min_stake);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_min_stake();

  // uint64 commission = 4 [json_name = "commission"];
  void clear_commission();
  ::PROTOBUF_NAMESPACE_ID::uint64 commission() const;
  void set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commission() const;
  void _internal_set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 status = 6 [json_name = "status"];
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 jailed_until = 13 [json_name = "jailedUntil"];
  void clear_jailed_until();
  ::PROTOBUF_NAMESPACE_ID::uint64 jailed_until() const;
  void set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_jailed_until() const;
  void _internal_set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 id = 14 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool validator = 12 [json_name = "validator"];
  void clear_validator();
  bool validator() const;
  void set_validator(bool value);
  private:
  bool _internal_validator() const;
  void _internal_set_validator(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CandidateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse_Stake > stakes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_stake_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_address_;
  PROTOBUF_NAMESPACE_ID::UInt64Value* used_slots_;
  PROTOBUF_NAMESPACE_ID::UInt64Value* uniq_users_;
  PROTOBUF_NAMESPACE_ID::StringValue* min_stake_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commission_;
  ::PROTOBUF_NAMESPACE_ID::uint64 status_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jailed_until_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool validator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CandidatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CandidatesRequest) */ {
 public:
  inline CandidatesRequest() : CandidatesRequest(nullptr) {}
  ~CandidatesRequest() override;
  explicit constexpr CandidatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidatesRequest(const CandidatesRequest& from);
  CandidatesRequest(CandidatesRequest&& from) noexcept
    : CandidatesRequest() {
    *this = ::std::move(from);
  }

  inline CandidatesRequest& operator=(const CandidatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidatesRequest& operator=(CandidatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidatesRequest* internal_default_instance() {
    return reinterpret_cast<const CandidatesRequest*>(
               &_CandidatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CandidatesRequest& a, CandidatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidatesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidatesRequest* New() const final {
    return new CandidatesRequest();
  }

  CandidatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CandidatesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidatesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CandidatesRequest";
  }
  protected:
  explicit CandidatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CandidatesRequest_CandidateStatus CandidateStatus;
  static constexpr CandidateStatus all =
    CandidatesRequest_CandidateStatus_all;
  static constexpr CandidateStatus off =
    CandidatesRequest_CandidateStatus_off;
  static constexpr CandidateStatus on =
    CandidatesRequest_CandidateStatus_on;
  static constexpr CandidateStatus validator =
    CandidatesRequest_CandidateStatus_validator;
  static inline bool CandidateStatus_IsValid(int value) {
    return CandidatesRequest_CandidateStatus_IsValid(value);
  }
  static constexpr CandidateStatus CandidateStatus_MIN =
    CandidatesRequest_CandidateStatus_CandidateStatus_MIN;
  static constexpr CandidateStatus CandidateStatus_MAX =
    CandidatesRequest_CandidateStatus_CandidateStatus_MAX;
  static constexpr int CandidateStatus_ARRAYSIZE =
    CandidatesRequest_CandidateStatus_CandidateStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CandidateStatus_descriptor() {
    return CandidatesRequest_CandidateStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& CandidateStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CandidateStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CandidateStatus_Name.");
    return CandidatesRequest_CandidateStatus_Name(enum_t_value);
  }
  static inline bool CandidateStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CandidateStatus* value) {
    return CandidatesRequest_CandidateStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kStatusFieldNumber = 3,
    kIncludeStakesFieldNumber = 2,
    kNotShowStakesFieldNumber = 4,
  };
  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .api_pb.CandidatesRequest.CandidateStatus status = 3 [json_name = "status"];
  void clear_status();
  ::api_pb::CandidatesRequest_CandidateStatus status() const;
  void set_status(::api_pb::CandidatesRequest_CandidateStatus value);
  private:
  ::api_pb::CandidatesRequest_CandidateStatus _internal_status() const;
  void _internal_set_status(::api_pb::CandidatesRequest_CandidateStatus value);
  public:

  // bool include_stakes = 2 [json_name = "includeStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_include_stakes();
  bool include_stakes() const;
  void set_include_stakes(bool value);
  private:
  bool _internal_include_stakes() const;
  void _internal_set_include_stakes(bool value);
  public:

  // bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_not_show_stakes();
  bool not_show_stakes() const;
  void set_not_show_stakes(bool value);
  private:
  bool _internal_not_show_stakes() const;
  void _internal_set_not_show_stakes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CandidatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  int status_;
  bool include_stakes_;
  bool not_show_stakes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CandidatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CandidatesResponse) */ {
 public:
  inline CandidatesResponse() : CandidatesResponse(nullptr) {}
  ~CandidatesResponse() override;
  explicit constexpr CandidatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CandidatesResponse(const CandidatesResponse& from);
  CandidatesResponse(CandidatesResponse&& from) noexcept
    : CandidatesResponse() {
    *this = ::std::move(from);
  }

  inline CandidatesResponse& operator=(const CandidatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidatesResponse& operator=(CandidatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandidatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandidatesResponse* internal_default_instance() {
    return reinterpret_cast<const CandidatesResponse*>(
               &_CandidatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CandidatesResponse& a, CandidatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidatesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandidatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidatesResponse* New() const final {
    return new CandidatesResponse();
  }

  CandidatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CandidatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CandidatesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidatesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CandidatesResponse";
  }
  protected:
  explicit CandidatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidatesFieldNumber = 3,
  };
  // repeated .api_pb.CandidateResponse candidates = 3 [json_name = "candidates"];
  int candidates_size() const;
  private:
  int _internal_candidates_size() const;
  public:
  void clear_candidates();
  ::api_pb::CandidateResponse* mutable_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse >*
      mutable_candidates();
  private:
  const ::api_pb::CandidateResponse& _internal_candidates(int index) const;
  ::api_pb::CandidateResponse* _internal_add_candidates();
  public:
  const ::api_pb::CandidateResponse& candidates(int index) const;
  ::api_pb::CandidateResponse* add_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse >&
      candidates() const;

  // @@protoc_insertion_point(class_scope:api_pb.CandidatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse > candidates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CoinIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CoinIdRequest) */ {
 public:
  inline CoinIdRequest() : CoinIdRequest(nullptr) {}
  ~CoinIdRequest() override;
  explicit constexpr CoinIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoinIdRequest(const CoinIdRequest& from);
  CoinIdRequest(CoinIdRequest&& from) noexcept
    : CoinIdRequest() {
    *this = ::std::move(from);
  }

  inline CoinIdRequest& operator=(const CoinIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoinIdRequest& operator=(CoinIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoinIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoinIdRequest* internal_default_instance() {
    return reinterpret_cast<const CoinIdRequest*>(
               &_CoinIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CoinIdRequest& a, CoinIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CoinIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoinIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoinIdRequest* New() const final {
    return new CoinIdRequest();
  }

  CoinIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoinIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoinIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoinIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CoinIdRequest";
  }
  protected:
  explicit CoinIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 id = 2 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CoinIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CoinInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CoinInfoRequest) */ {
 public:
  inline CoinInfoRequest() : CoinInfoRequest(nullptr) {}
  ~CoinInfoRequest() override;
  explicit constexpr CoinInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoinInfoRequest(const CoinInfoRequest& from);
  CoinInfoRequest(CoinInfoRequest&& from) noexcept
    : CoinInfoRequest() {
    *this = ::std::move(from);
  }

  inline CoinInfoRequest& operator=(const CoinInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoinInfoRequest& operator=(CoinInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoinInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoinInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CoinInfoRequest*>(
               &_CoinInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CoinInfoRequest& a, CoinInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CoinInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoinInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoinInfoRequest* New() const final {
    return new CoinInfoRequest();
  }

  CoinInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoinInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoinInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoinInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CoinInfoRequest";
  }
  protected:
  explicit CoinInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CoinInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class CoinInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.CoinInfoResponse) */ {
 public:
  inline CoinInfoResponse() : CoinInfoResponse(nullptr) {}
  ~CoinInfoResponse() override;
  explicit constexpr CoinInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CoinInfoResponse(const CoinInfoResponse& from);
  CoinInfoResponse(CoinInfoResponse&& from) noexcept
    : CoinInfoResponse() {
    *this = ::std::move(from);
  }

  inline CoinInfoResponse& operator=(const CoinInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoinInfoResponse& operator=(CoinInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CoinInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CoinInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CoinInfoResponse*>(
               &_CoinInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CoinInfoResponse& a, CoinInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CoinInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CoinInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CoinInfoResponse* New() const final {
    return new CoinInfoResponse();
  }

  CoinInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoinInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CoinInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CoinInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoinInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.CoinInfoResponse";
  }
  protected:
  explicit CoinInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kReserveBalanceFieldNumber = 5,
    kMaxSupplyFieldNumber = 8,
    kOwnerAddressFieldNumber = 7,
    kCrrFieldNumber = 4,
    kIdFieldNumber = 6,
    kMintableFieldNumber = 9,
    kBurnableFieldNumber = 10,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string volume = 3 [json_name = "volume"];
  void clear_volume();
  const std::string& volume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume();
  PROTOBUF_MUST_USE_RESULT std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // string reserve_balance = 5 [json_name = "reserveBalance"];
  void clear_reserve_balance();
  const std::string& reserve_balance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reserve_balance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reserve_balance();
  PROTOBUF_MUST_USE_RESULT std::string* release_reserve_balance();
  void set_allocated_reserve_balance(std::string* reserve_balance);
  private:
  const std::string& _internal_reserve_balance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reserve_balance(const std::string& value);
  std::string* _internal_mutable_reserve_balance();
  public:

  // string max_supply = 8 [json_name = "maxSupply"];
  void clear_max_supply();
  const std::string& max_supply() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max_supply(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max_supply();
  PROTOBUF_MUST_USE_RESULT std::string* release_max_supply();
  void set_allocated_max_supply(std::string* max_supply);
  private:
  const std::string& _internal_max_supply() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max_supply(const std::string& value);
  std::string* _internal_mutable_max_supply();
  public:

  // .google.protobuf.StringValue owner_address = 7 [json_name = "ownerAddress"];
  bool has_owner_address() const;
  private:
  bool _internal_has_owner_address() const;
  public:
  void clear_owner_address();
  const PROTOBUF_NAMESPACE_ID::StringValue& owner_address() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::StringValue* release_owner_address();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_owner_address();
  void set_allocated_owner_address(PROTOBUF_NAMESPACE_ID::StringValue* owner_address);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_owner_address() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_owner_address();
  public:
  void unsafe_arena_set_allocated_owner_address(
      PROTOBUF_NAMESPACE_ID::StringValue* owner_address);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_owner_address();

  // uint64 crr = 4 [json_name = "crr"];
  void clear_crr();
  ::PROTOBUF_NAMESPACE_ID::uint64 crr() const;
  void set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_crr() const;
  void _internal_set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 id = 6 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool mintable = 9 [json_name = "mintable"];
  void clear_mintable();
  bool mintable() const;
  void set_mintable(bool value);
  private:
  bool _internal_mintable() const;
  void _internal_set_mintable(bool value);
  public:

  // bool burnable = 10 [json_name = "burnable"];
  void clear_burnable();
  bool burnable() const;
  void set_burnable(bool value);
  private:
  bool _internal_burnable() const;
  void _internal_set_burnable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.CoinInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserve_balance_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_supply_;
  PROTOBUF_NAMESPACE_ID::StringValue* owner_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 crr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool mintable_;
  bool burnable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SendTransactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SendTransactionResponse) */ {
 public:
  inline SendTransactionResponse() : SendTransactionResponse(nullptr) {}
  ~SendTransactionResponse() override;
  explicit constexpr SendTransactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendTransactionResponse(const SendTransactionResponse& from);
  SendTransactionResponse(SendTransactionResponse&& from) noexcept
    : SendTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SendTransactionResponse& operator=(const SendTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendTransactionResponse& operator=(SendTransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendTransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SendTransactionResponse*>(
               &_SendTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(SendTransactionResponse& a, SendTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendTransactionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendTransactionResponse* New() const final {
    return new SendTransactionResponse();
  }

  SendTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendTransactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendTransactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendTransactionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SendTransactionResponse";
  }
  protected:
  explicit SendTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 3,
    kHashFieldNumber = 4,
    kCodeFieldNumber = 1,
  };
  // string log = 3 [json_name = "log"];
  void clear_log();
  const std::string& log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log();
  PROTOBUF_MUST_USE_RESULT std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // string hash = 4 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // uint64 code = 1 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SendTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::uint64 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SendTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SendTransactionRequest) */ {
 public:
  inline SendTransactionRequest() : SendTransactionRequest(nullptr) {}
  ~SendTransactionRequest() override;
  explicit constexpr SendTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendTransactionRequest(const SendTransactionRequest& from);
  SendTransactionRequest(SendTransactionRequest&& from) noexcept
    : SendTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SendTransactionRequest& operator=(const SendTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendTransactionRequest& operator=(SendTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SendTransactionRequest*>(
               &_SendTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SendTransactionRequest& a, SendTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendTransactionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendTransactionRequest* New() const final {
    return new SendTransactionRequest();
  }

  SendTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendTransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendTransactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendTransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SendTransactionRequest";
  }
  protected:
  explicit SendTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // string tx = 1 [json_name = "tx"];
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_MUST_USE_RESULT std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SendTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class TransactionResponse_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransactionResponse_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TransactionResponse_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TransactionResponse_TagsEntry_DoNotUse();
  explicit constexpr TransactionResponse_TagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TransactionResponse_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TransactionResponse_TagsEntry_DoNotUse& other);
  static const TransactionResponse_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TransactionResponse_TagsEntry_DoNotUse*>(&_TransactionResponse_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api_pb.TransactionResponse.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api_pb.TransactionResponse.TagsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class TransactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.TransactionResponse) */ {
 public:
  inline TransactionResponse() : TransactionResponse(nullptr) {}
  ~TransactionResponse() override;
  explicit constexpr TransactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionResponse(const TransactionResponse& from);
  TransactionResponse(TransactionResponse&& from) noexcept
    : TransactionResponse() {
    *this = ::std::move(from);
  }

  inline TransactionResponse& operator=(const TransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionResponse& operator=(TransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionResponse* internal_default_instance() {
    return reinterpret_cast<const TransactionResponse*>(
               &_TransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TransactionResponse& a, TransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionResponse* New() const final {
    return new TransactionResponse();
  }

  TransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.TransactionResponse";
  }
  protected:
  explicit TransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef TransactionResponse_Type Type;
  static constexpr Type unknown =
    TransactionResponse_Type_unknown;
  static constexpr Type Send =
    TransactionResponse_Type_Send;
  static constexpr Type SellCoin =
    TransactionResponse_Type_SellCoin;
  static constexpr Type SellAllCoin =
    TransactionResponse_Type_SellAllCoin;
  static constexpr Type BuyCoin =
    TransactionResponse_Type_BuyCoin;
  static constexpr Type CreateCoin =
    TransactionResponse_Type_CreateCoin;
  static constexpr Type DeclareCandidacy =
    TransactionResponse_Type_DeclareCandidacy;
  static constexpr Type Delegate =
    TransactionResponse_Type_Delegate;
  static constexpr Type Unbond =
    TransactionResponse_Type_Unbond;
  static constexpr Type RedeemCheck =
    TransactionResponse_Type_RedeemCheck;
  static constexpr Type SetCandidateOnline =
    TransactionResponse_Type_SetCandidateOnline;
  static constexpr Type SetCandidateOffline =
    TransactionResponse_Type_SetCandidateOffline;
  static constexpr Type CreateMultisig =
    TransactionResponse_Type_CreateMultisig;
  static constexpr Type Multisend =
    TransactionResponse_Type_Multisend;
  static constexpr Type EditCandidate =
    TransactionResponse_Type_EditCandidate;
  static constexpr Type SetHaltBlock =
    TransactionResponse_Type_SetHaltBlock;
  static constexpr Type RecreateCoin =
    TransactionResponse_Type_RecreateCoin;
  static constexpr Type EditCoinOwner =
    TransactionResponse_Type_EditCoinOwner;
  static constexpr Type EditMultisig =
    TransactionResponse_Type_EditMultisig;
  static constexpr Type PriceVote =
    TransactionResponse_Type_PriceVote;
  static constexpr Type EditCandidatePublicKey =
    TransactionResponse_Type_EditCandidatePublicKey;
  static constexpr Type AddLiquidity =
    TransactionResponse_Type_AddLiquidity;
  static constexpr Type RemoveLiquidity =
    TransactionResponse_Type_RemoveLiquidity;
  static constexpr Type SellSwapPool =
    TransactionResponse_Type_SellSwapPool;
  static constexpr Type BuySwapPool =
    TransactionResponse_Type_BuySwapPool;
  static constexpr Type SellAllSwapPool =
    TransactionResponse_Type_SellAllSwapPool;
  static constexpr Type EditCommissionCandidate =
    TransactionResponse_Type_EditCommissionCandidate;
  static constexpr Type MoveStake =
    TransactionResponse_Type_MoveStake;
  static constexpr Type MintToken =
    TransactionResponse_Type_MintToken;
  static constexpr Type BurnToken =
    TransactionResponse_Type_BurnToken;
  static constexpr Type CreateToken =
    TransactionResponse_Type_CreateToken;
  static constexpr Type RecreateToken =
    TransactionResponse_Type_RecreateToken;
  static constexpr Type VoteCommission =
    TransactionResponse_Type_VoteCommission;
  static constexpr Type VoteUpdate =
    TransactionResponse_Type_VoteUpdate;
  static constexpr Type CreateSwapPool =
    TransactionResponse_Type_CreateSwapPool;
  static constexpr Type AddLimitOrder =
    TransactionResponse_Type_AddLimitOrder;
  static constexpr Type RemoveLimitOrder =
    TransactionResponse_Type_RemoveLimitOrder;
  static inline bool Type_IsValid(int value) {
    return TransactionResponse_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    TransactionResponse_Type_Type_MIN;
  static constexpr Type Type_MAX =
    TransactionResponse_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    TransactionResponse_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return TransactionResponse_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return TransactionResponse_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return TransactionResponse_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 13,
    kHashFieldNumber = 1,
    kRawTxFieldNumber = 2,
    kFromFieldNumber = 5,
    kPayloadFieldNumber = 12,
    kLogFieldNumber = 15,
    kServiceDataFieldNumber = 16,
    kTypeHexFieldNumber = 17,
    kGasCoinFieldNumber = 9,
    kDataFieldNumber = 11,
    kHeightFieldNumber = 3,
    kIndexFieldNumber = 4,
    kNonceFieldNumber = 6,
    kGasFieldNumber = 7,
    kGasPriceFieldNumber = 8,
    kTypeFieldNumber = 10,
    kCodeFieldNumber = 14,
  };
  // map<string, string> tags = 13 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string hash = 1 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // string raw_tx = 2 [json_name = "rawTx"];
  void clear_raw_tx();
  const std::string& raw_tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_tx();
  PROTOBUF_MUST_USE_RESULT std::string* release_raw_tx();
  void set_allocated_raw_tx(std::string* raw_tx);
  private:
  const std::string& _internal_raw_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_tx(const std::string& value);
  std::string* _internal_mutable_raw_tx();
  public:

  // string from = 5 [json_name = "from"];
  void clear_from();
  const std::string& from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes payload = 12 [json_name = "payload"];
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // string log = 15 [json_name = "log"];
  void clear_log();
  const std::string& log() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log();
  PROTOBUF_MUST_USE_RESULT std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // bytes service_data = 16 [json_name = "serviceData"];
  void clear_service_data();
  const std::string& service_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_service_data();
  void set_allocated_service_data(std::string* service_data);
  private:
  const std::string& _internal_service_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_data(const std::string& value);
  std::string* _internal_mutable_service_data();
  public:

  // string type_hex = 17 [json_name = "typeHex"];
  void clear_type_hex();
  const std::string& type_hex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_hex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_hex();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_hex();
  void set_allocated_type_hex(std::string* type_hex);
  private:
  const std::string& _internal_type_hex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_hex(const std::string& value);
  std::string* _internal_mutable_type_hex();
  public:

  // .api_pb.Coin gas_coin = 9 [json_name = "gasCoin"];
  bool has_gas_coin() const;
  private:
  bool _internal_has_gas_coin() const;
  public:
  void clear_gas_coin();
  const ::api_pb::Coin& gas_coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_gas_coin();
  ::api_pb::Coin* mutable_gas_coin();
  void set_allocated_gas_coin(::api_pb::Coin* gas_coin);
  private:
  const ::api_pb::Coin& _internal_gas_coin() const;
  ::api_pb::Coin* _internal_mutable_gas_coin();
  public:
  void unsafe_arena_set_allocated_gas_coin(
      ::api_pb::Coin* gas_coin);
  ::api_pb::Coin* unsafe_arena_release_gas_coin();

  // .google.protobuf.Any data = 11 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Any& data() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Any* release_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Any* data);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_data();

  // uint64 height = 3 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 index = 4 [json_name = "index"];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 nonce = 6 [json_name = "nonce"];
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gas = 7 [json_name = "gas"];
  void clear_gas();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas() const;
  void set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas() const;
  void _internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gas_price = 8 [json_name = "gasPrice"];
  void clear_gas_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_price() const;
  void set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas_price() const;
  void _internal_set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 type = 10 [json_name = "type"];
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 code = 14 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.TransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TransactionResponse_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_tx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_hex_;
  ::api_pb::Coin* gas_coin_;
  PROTOBUF_NAMESPACE_ID::Any* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class TransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.TransactionRequest) */ {
 public:
  inline TransactionRequest() : TransactionRequest(nullptr) {}
  ~TransactionRequest() override;
  explicit constexpr TransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionRequest(const TransactionRequest& from);
  TransactionRequest(TransactionRequest&& from) noexcept
    : TransactionRequest() {
    *this = ::std::move(from);
  }

  inline TransactionRequest& operator=(const TransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRequest& operator=(TransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionRequest*>(
               &_TransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TransactionRequest& a, TransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionRequest* New() const final {
    return new TransactionRequest();
  }

  TransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.TransactionRequest";
  }
  protected:
  explicit TransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // string hash = 1 [json_name = "hash"];
  void clear_hash();
  const std::string& hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash();
  PROTOBUF_MUST_USE_RESULT std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.TransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class TransactionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.TransactionsResponse) */ {
 public:
  inline TransactionsResponse() : TransactionsResponse(nullptr) {}
  ~TransactionsResponse() override;
  explicit constexpr TransactionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionsResponse(const TransactionsResponse& from);
  TransactionsResponse(TransactionsResponse&& from) noexcept
    : TransactionsResponse() {
    *this = ::std::move(from);
  }

  inline TransactionsResponse& operator=(const TransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsResponse& operator=(TransactionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const TransactionsResponse*>(
               &_TransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TransactionsResponse& a, TransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionsResponse* New() const final {
    return new TransactionsResponse();
  }

  TransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.TransactionsResponse";
  }
  protected:
  explicit TransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 3,
  };
  // repeated .api_pb.TransactionResponse transactions = 3 [json_name = "transactions"];
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::api_pb::TransactionResponse* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >*
      mutable_transactions();
  private:
  const ::api_pb::TransactionResponse& _internal_transactions(int index) const;
  ::api_pb::TransactionResponse* _internal_add_transactions();
  public:
  const ::api_pb::TransactionResponse& transactions(int index) const;
  ::api_pb::TransactionResponse* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:api_pb.TransactionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class TransactionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.TransactionsRequest) */ {
 public:
  inline TransactionsRequest() : TransactionsRequest(nullptr) {}
  ~TransactionsRequest() override;
  explicit constexpr TransactionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionsRequest(const TransactionsRequest& from);
  TransactionsRequest(TransactionsRequest&& from) noexcept
    : TransactionsRequest() {
    *this = ::std::move(from);
  }

  inline TransactionsRequest& operator=(const TransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionsRequest& operator=(TransactionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const TransactionsRequest*>(
               &_TransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(TransactionsRequest& a, TransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionsRequest* New() const final {
    return new TransactionsRequest();
  }

  TransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransactionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransactionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.TransactionsRequest";
  }
  protected:
  explicit TransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPageFieldNumber = 2,
    kPerPageFieldNumber = 3,
  };
  // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // int32 page = 2 [json_name = "page", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::int32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 per_page = 3 [json_name = "perPage", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_per_page();
  ::PROTOBUF_NAMESPACE_ID::int32 per_page() const;
  void set_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_per_page() const;
  void _internal_set_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.TransactionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_;
  ::PROTOBUF_NAMESPACE_ID::int32 per_page_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateCoinBuyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateCoinBuyRequest) */ {
 public:
  inline EstimateCoinBuyRequest() : EstimateCoinBuyRequest(nullptr) {}
  ~EstimateCoinBuyRequest() override;
  explicit constexpr EstimateCoinBuyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateCoinBuyRequest(const EstimateCoinBuyRequest& from);
  EstimateCoinBuyRequest(EstimateCoinBuyRequest&& from) noexcept
    : EstimateCoinBuyRequest() {
    *this = ::std::move(from);
  }

  inline EstimateCoinBuyRequest& operator=(const EstimateCoinBuyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateCoinBuyRequest& operator=(EstimateCoinBuyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateCoinBuyRequest& default_instance() {
    return *internal_default_instance();
  }
  enum BuyCase {
    kCoinIdToBuy = 1,
    kCoinToBuy = 5,
    BUY_NOT_SET = 0,
  };

  enum SellCase {
    kCoinIdToSell = 2,
    kCoinToSell = 6,
    SELL_NOT_SET = 0,
  };

  enum CommissionCase {
    kCoinIdCommission = 9,
    kCoinCommission = 10,
    COMMISSION_NOT_SET = 0,
  };

  static inline const EstimateCoinBuyRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateCoinBuyRequest*>(
               &_EstimateCoinBuyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(EstimateCoinBuyRequest& a, EstimateCoinBuyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateCoinBuyRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateCoinBuyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateCoinBuyRequest* New() const final {
    return new EstimateCoinBuyRequest();
  }

  EstimateCoinBuyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateCoinBuyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateCoinBuyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateCoinBuyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateCoinBuyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateCoinBuyRequest";
  }
  protected:
  explicit EstimateCoinBuyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 11,
    kValueToBuyFieldNumber = 3,
    kHeightFieldNumber = 4,
    kSwapFromFieldNumber = 8,
    kCoinIdToBuyFieldNumber = 1,
    kCoinToBuyFieldNumber = 5,
    kCoinIdToSellFieldNumber = 2,
    kCoinToSellFieldNumber = 6,
    kCoinIdCommissionFieldNumber = 9,
    kCoinCommissionFieldNumber = 10,
  };
  // repeated uint64 route = 11 [json_name = "route"];
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_route() const;
  void _internal_add_route(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_route();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 route(int index) const;
  void set_route(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_route(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_route();

  // string value_to_buy = 3 [json_name = "valueToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_value_to_buy();
  const std::string& value_to_buy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_to_buy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_to_buy();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_to_buy();
  void set_allocated_value_to_buy(std::string* value_to_buy);
  private:
  const std::string& _internal_value_to_buy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_to_buy(const std::string& value);
  std::string* _internal_mutable_value_to_buy();
  public:

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  void clear_swap_from();
  ::api_pb::SwapFrom swap_from() const;
  void set_swap_from(::api_pb::SwapFrom value);
  private:
  ::api_pb::SwapFrom _internal_swap_from() const;
  void _internal_set_swap_from(::api_pb::SwapFrom value);
  public:

  // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_to_buy() const;
  private:
  bool _internal_has_coin_id_to_buy() const;
  public:
  void clear_coin_id_to_buy();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_buy() const;
  void set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_to_buy() const;
  void _internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_to_buy = 5 [json_name = "coinToBuy"];
  bool has_coin_to_buy() const;
  private:
  bool _internal_has_coin_to_buy() const;
  public:
  void clear_coin_to_buy();
  const std::string& coin_to_buy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_to_buy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_to_buy();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_to_buy();
  void set_allocated_coin_to_buy(std::string* coin_to_buy);
  private:
  const std::string& _internal_coin_to_buy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_to_buy(const std::string& value);
  std::string* _internal_mutable_coin_to_buy();
  public:

  // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_to_sell() const;
  private:
  bool _internal_has_coin_id_to_sell() const;
  public:
  void clear_coin_id_to_sell();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_sell() const;
  void set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_to_sell() const;
  void _internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_to_sell = 6 [json_name = "coinToSell"];
  bool has_coin_to_sell() const;
  private:
  bool _internal_has_coin_to_sell() const;
  public:
  void clear_coin_to_sell();
  const std::string& coin_to_sell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_to_sell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_to_sell();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_to_sell();
  void set_allocated_coin_to_sell(std::string* coin_to_sell);
  private:
  const std::string& _internal_coin_to_sell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_to_sell(const std::string& value);
  std::string* _internal_mutable_coin_to_sell();
  public:

  // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_commission() const;
  private:
  bool _internal_has_coin_id_commission() const;
  public:
  void clear_coin_id_commission();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_commission() const;
  void set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_commission() const;
  void _internal_set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_commission = 10 [json_name = "coinCommission"];
  bool has_coin_commission() const;
  private:
  bool _internal_has_coin_commission() const;
  public:
  void clear_coin_commission();
  const std::string& coin_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_commission();
  void set_allocated_coin_commission(std::string* coin_commission);
  private:
  const std::string& _internal_coin_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_commission(const std::string& value);
  std::string* _internal_mutable_coin_commission();
  public:

  void clear_buy();
  BuyCase buy_case() const;
  void clear_sell();
  SellCase sell_case() const;
  void clear_commission();
  CommissionCase commission_case() const;
  // @@protoc_insertion_point(class_scope:api_pb.EstimateCoinBuyRequest)
 private:
  class _Internal;
  void set_has_coin_id_to_buy();
  void set_has_coin_to_buy();
  void set_has_coin_id_to_sell();
  void set_has_coin_to_sell();
  void set_has_coin_id_commission();
  void set_has_coin_commission();

  inline bool has_buy() const;
  inline void clear_has_buy();

  inline bool has_sell() const;
  inline void clear_has_sell();

  inline bool has_commission() const;
  inline void clear_has_commission();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > route_;
  mutable std::atomic<int> _route_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_to_buy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  int swap_from_;
  union BuyUnion {
    constexpr BuyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_buy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_to_buy_;
  } buy_;
  union SellUnion {
    constexpr SellUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_sell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_to_sell_;
  } sell_;
  union CommissionUnion {
    constexpr CommissionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_commission_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_commission_;
  } commission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateCoinBuyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateCoinBuyResponse) */ {
 public:
  inline EstimateCoinBuyResponse() : EstimateCoinBuyResponse(nullptr) {}
  ~EstimateCoinBuyResponse() override;
  explicit constexpr EstimateCoinBuyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateCoinBuyResponse(const EstimateCoinBuyResponse& from);
  EstimateCoinBuyResponse(EstimateCoinBuyResponse&& from) noexcept
    : EstimateCoinBuyResponse() {
    *this = ::std::move(from);
  }

  inline EstimateCoinBuyResponse& operator=(const EstimateCoinBuyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateCoinBuyResponse& operator=(EstimateCoinBuyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateCoinBuyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateCoinBuyResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateCoinBuyResponse*>(
               &_EstimateCoinBuyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(EstimateCoinBuyResponse& a, EstimateCoinBuyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateCoinBuyResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateCoinBuyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateCoinBuyResponse* New() const final {
    return new EstimateCoinBuyResponse();
  }

  EstimateCoinBuyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateCoinBuyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateCoinBuyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateCoinBuyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateCoinBuyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateCoinBuyResponse";
  }
  protected:
  explicit EstimateCoinBuyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWillPayFieldNumber = 1,
    kCommissionFieldNumber = 2,
    kSwapFromFieldNumber = 3,
  };
  // string will_pay = 1 [json_name = "willPay"];
  void clear_will_pay();
  const std::string& will_pay() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_will_pay(ArgT0&& arg0, ArgT... args);
  std::string* mutable_will_pay();
  PROTOBUF_MUST_USE_RESULT std::string* release_will_pay();
  void set_allocated_will_pay(std::string* will_pay);
  private:
  const std::string& _internal_will_pay() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_will_pay(const std::string& value);
  std::string* _internal_mutable_will_pay();
  public:

  // string commission = 2 [json_name = "commission"];
  void clear_commission();
  const std::string& commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_commission();
  void set_allocated_commission(std::string* commission);
  private:
  const std::string& _internal_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commission(const std::string& value);
  std::string* _internal_mutable_commission();
  public:

  // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
  void clear_swap_from();
  ::api_pb::SwapFrom swap_from() const;
  void set_swap_from(::api_pb::SwapFrom value);
  private:
  ::api_pb::SwapFrom _internal_swap_from() const;
  void _internal_set_swap_from(::api_pb::SwapFrom value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.EstimateCoinBuyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr will_pay_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commission_;
  int swap_from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateCoinSellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateCoinSellRequest) */ {
 public:
  inline EstimateCoinSellRequest() : EstimateCoinSellRequest(nullptr) {}
  ~EstimateCoinSellRequest() override;
  explicit constexpr EstimateCoinSellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateCoinSellRequest(const EstimateCoinSellRequest& from);
  EstimateCoinSellRequest(EstimateCoinSellRequest&& from) noexcept
    : EstimateCoinSellRequest() {
    *this = ::std::move(from);
  }

  inline EstimateCoinSellRequest& operator=(const EstimateCoinSellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateCoinSellRequest& operator=(EstimateCoinSellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateCoinSellRequest& default_instance() {
    return *internal_default_instance();
  }
  enum BuyCase {
    kCoinIdToBuy = 1,
    kCoinToBuy = 5,
    BUY_NOT_SET = 0,
  };

  enum SellCase {
    kCoinIdToSell = 2,
    kCoinToSell = 6,
    SELL_NOT_SET = 0,
  };

  enum CommissionCase {
    kCoinIdCommission = 9,
    kCoinCommission = 10,
    COMMISSION_NOT_SET = 0,
  };

  static inline const EstimateCoinSellRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateCoinSellRequest*>(
               &_EstimateCoinSellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(EstimateCoinSellRequest& a, EstimateCoinSellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateCoinSellRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateCoinSellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateCoinSellRequest* New() const final {
    return new EstimateCoinSellRequest();
  }

  EstimateCoinSellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateCoinSellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateCoinSellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateCoinSellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateCoinSellRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateCoinSellRequest";
  }
  protected:
  explicit EstimateCoinSellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 11,
    kValueToSellFieldNumber = 3,
    kHeightFieldNumber = 4,
    kSwapFromFieldNumber = 8,
    kCoinIdToBuyFieldNumber = 1,
    kCoinToBuyFieldNumber = 5,
    kCoinIdToSellFieldNumber = 2,
    kCoinToSellFieldNumber = 6,
    kCoinIdCommissionFieldNumber = 9,
    kCoinCommissionFieldNumber = 10,
  };
  // repeated uint64 route = 11 [json_name = "route"];
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_route() const;
  void _internal_add_route(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_route();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 route(int index) const;
  void set_route(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_route(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_route();

  // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_value_to_sell();
  const std::string& value_to_sell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_to_sell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_to_sell();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_to_sell();
  void set_allocated_value_to_sell(std::string* value_to_sell);
  private:
  const std::string& _internal_value_to_sell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_to_sell(const std::string& value);
  std::string* _internal_mutable_value_to_sell();
  public:

  // uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  void clear_swap_from();
  ::api_pb::SwapFrom swap_from() const;
  void set_swap_from(::api_pb::SwapFrom value);
  private:
  ::api_pb::SwapFrom _internal_swap_from() const;
  void _internal_set_swap_from(::api_pb::SwapFrom value);
  public:

  // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_to_buy() const;
  private:
  bool _internal_has_coin_id_to_buy() const;
  public:
  void clear_coin_id_to_buy();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_buy() const;
  void set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_to_buy() const;
  void _internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_to_buy = 5 [json_name = "coinToBuy"];
  bool has_coin_to_buy() const;
  private:
  bool _internal_has_coin_to_buy() const;
  public:
  void clear_coin_to_buy();
  const std::string& coin_to_buy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_to_buy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_to_buy();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_to_buy();
  void set_allocated_coin_to_buy(std::string* coin_to_buy);
  private:
  const std::string& _internal_coin_to_buy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_to_buy(const std::string& value);
  std::string* _internal_mutable_coin_to_buy();
  public:

  // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_to_sell() const;
  private:
  bool _internal_has_coin_id_to_sell() const;
  public:
  void clear_coin_id_to_sell();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_sell() const;
  void set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_to_sell() const;
  void _internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_to_sell = 6 [json_name = "coinToSell"];
  bool has_coin_to_sell() const;
  private:
  bool _internal_has_coin_to_sell() const;
  public:
  void clear_coin_to_sell();
  const std::string& coin_to_sell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_to_sell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_to_sell();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_to_sell();
  void set_allocated_coin_to_sell(std::string* coin_to_sell);
  private:
  const std::string& _internal_coin_to_sell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_to_sell(const std::string& value);
  std::string* _internal_mutable_coin_to_sell();
  public:

  // uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_commission() const;
  private:
  bool _internal_has_coin_id_commission() const;
  public:
  void clear_coin_id_commission();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_commission() const;
  void set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_commission() const;
  void _internal_set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_commission = 10 [json_name = "coinCommission"];
  bool has_coin_commission() const;
  private:
  bool _internal_has_coin_commission() const;
  public:
  void clear_coin_commission();
  const std::string& coin_commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_commission();
  void set_allocated_coin_commission(std::string* coin_commission);
  private:
  const std::string& _internal_coin_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_commission(const std::string& value);
  std::string* _internal_mutable_coin_commission();
  public:

  void clear_buy();
  BuyCase buy_case() const;
  void clear_sell();
  SellCase sell_case() const;
  void clear_commission();
  CommissionCase commission_case() const;
  // @@protoc_insertion_point(class_scope:api_pb.EstimateCoinSellRequest)
 private:
  class _Internal;
  void set_has_coin_id_to_buy();
  void set_has_coin_to_buy();
  void set_has_coin_id_to_sell();
  void set_has_coin_to_sell();
  void set_has_coin_id_commission();
  void set_has_coin_commission();

  inline bool has_buy() const;
  inline void clear_has_buy();

  inline bool has_sell() const;
  inline void clear_has_sell();

  inline bool has_commission() const;
  inline void clear_has_commission();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > route_;
  mutable std::atomic<int> _route_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_to_sell_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  int swap_from_;
  union BuyUnion {
    constexpr BuyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_buy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_to_buy_;
  } buy_;
  union SellUnion {
    constexpr SellUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_sell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_to_sell_;
  } sell_;
  union CommissionUnion {
    constexpr CommissionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_commission_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_commission_;
  } commission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[3];

  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateCoinSellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateCoinSellResponse) */ {
 public:
  inline EstimateCoinSellResponse() : EstimateCoinSellResponse(nullptr) {}
  ~EstimateCoinSellResponse() override;
  explicit constexpr EstimateCoinSellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateCoinSellResponse(const EstimateCoinSellResponse& from);
  EstimateCoinSellResponse(EstimateCoinSellResponse&& from) noexcept
    : EstimateCoinSellResponse() {
    *this = ::std::move(from);
  }

  inline EstimateCoinSellResponse& operator=(const EstimateCoinSellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateCoinSellResponse& operator=(EstimateCoinSellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateCoinSellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateCoinSellResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateCoinSellResponse*>(
               &_EstimateCoinSellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(EstimateCoinSellResponse& a, EstimateCoinSellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateCoinSellResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateCoinSellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateCoinSellResponse* New() const final {
    return new EstimateCoinSellResponse();
  }

  EstimateCoinSellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateCoinSellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateCoinSellResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateCoinSellResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateCoinSellResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateCoinSellResponse";
  }
  protected:
  explicit EstimateCoinSellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWillGetFieldNumber = 1,
    kCommissionFieldNumber = 2,
    kSwapFromFieldNumber = 3,
  };
  // string will_get = 1 [json_name = "willGet"];
  void clear_will_get();
  const std::string& will_get() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_will_get(ArgT0&& arg0, ArgT... args);
  std::string* mutable_will_get();
  PROTOBUF_MUST_USE_RESULT std::string* release_will_get();
  void set_allocated_will_get(std::string* will_get);
  private:
  const std::string& _internal_will_get() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_will_get(const std::string& value);
  std::string* _internal_mutable_will_get();
  public:

  // string commission = 2 [json_name = "commission"];
  void clear_commission();
  const std::string& commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_commission();
  void set_allocated_commission(std::string* commission);
  private:
  const std::string& _internal_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commission(const std::string& value);
  std::string* _internal_mutable_commission();
  public:

  // .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
  void clear_swap_from();
  ::api_pb::SwapFrom swap_from() const;
  void set_swap_from(::api_pb::SwapFrom value);
  private:
  ::api_pb::SwapFrom _internal_swap_from() const;
  void _internal_set_swap_from(::api_pb::SwapFrom value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.EstimateCoinSellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr will_get_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commission_;
  int swap_from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateCoinSellAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateCoinSellAllRequest) */ {
 public:
  inline EstimateCoinSellAllRequest() : EstimateCoinSellAllRequest(nullptr) {}
  ~EstimateCoinSellAllRequest() override;
  explicit constexpr EstimateCoinSellAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateCoinSellAllRequest(const EstimateCoinSellAllRequest& from);
  EstimateCoinSellAllRequest(EstimateCoinSellAllRequest&& from) noexcept
    : EstimateCoinSellAllRequest() {
    *this = ::std::move(from);
  }

  inline EstimateCoinSellAllRequest& operator=(const EstimateCoinSellAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateCoinSellAllRequest& operator=(EstimateCoinSellAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateCoinSellAllRequest& default_instance() {
    return *internal_default_instance();
  }
  enum BuyCase {
    kCoinIdToBuy = 1,
    kCoinToBuy = 7,
    BUY_NOT_SET = 0,
  };

  enum SellCase {
    kCoinIdToSell = 2,
    kCoinToSell = 6,
    SELL_NOT_SET = 0,
  };

  static inline const EstimateCoinSellAllRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateCoinSellAllRequest*>(
               &_EstimateCoinSellAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(EstimateCoinSellAllRequest& a, EstimateCoinSellAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateCoinSellAllRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateCoinSellAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateCoinSellAllRequest* New() const final {
    return new EstimateCoinSellAllRequest();
  }

  EstimateCoinSellAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateCoinSellAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateCoinSellAllRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateCoinSellAllRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateCoinSellAllRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateCoinSellAllRequest";
  }
  protected:
  explicit EstimateCoinSellAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 11,
    kValueToSellFieldNumber = 3,
    kGasPriceFieldNumber = 4,
    kHeightFieldNumber = 5,
    kSwapFromFieldNumber = 8,
    kCoinIdToBuyFieldNumber = 1,
    kCoinToBuyFieldNumber = 7,
    kCoinIdToSellFieldNumber = 2,
    kCoinToSellFieldNumber = 6,
  };
  // repeated uint64 route = 11 [json_name = "route"];
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_route(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_route() const;
  void _internal_add_route(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_route();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 route(int index) const;
  void set_route(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_route(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_route();

  // string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_value_to_sell();
  const std::string& value_to_sell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_to_sell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_to_sell();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_to_sell();
  void set_allocated_value_to_sell(std::string* value_to_sell);
  private:
  const std::string& _internal_value_to_sell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_to_sell(const std::string& value);
  std::string* _internal_mutable_value_to_sell();
  public:

  // uint64 gas_price = 4 [json_name = "gasPrice", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_gas_price();
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_price() const;
  void set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gas_price() const;
  void _internal_set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 5 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
  void clear_swap_from();
  ::api_pb::SwapFrom swap_from() const;
  void set_swap_from(::api_pb::SwapFrom value);
  private:
  ::api_pb::SwapFrom _internal_swap_from() const;
  void _internal_set_swap_from(::api_pb::SwapFrom value);
  public:

  // uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_to_buy() const;
  private:
  bool _internal_has_coin_id_to_buy() const;
  public:
  void clear_coin_id_to_buy();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_buy() const;
  void set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_to_buy() const;
  void _internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_to_buy = 7 [json_name = "coinToBuy"];
  bool has_coin_to_buy() const;
  private:
  bool _internal_has_coin_to_buy() const;
  public:
  void clear_coin_to_buy();
  const std::string& coin_to_buy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_to_buy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_to_buy();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_to_buy();
  void set_allocated_coin_to_buy(std::string* coin_to_buy);
  private:
  const std::string& _internal_coin_to_buy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_to_buy(const std::string& value);
  std::string* _internal_mutable_coin_to_buy();
  public:

  // uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id_to_sell() const;
  private:
  bool _internal_has_coin_id_to_sell() const;
  public:
  void clear_coin_id_to_sell();
  ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_sell() const;
  void set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coin_id_to_sell() const;
  void _internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string coin_to_sell = 6 [json_name = "coinToSell"];
  bool has_coin_to_sell() const;
  private:
  bool _internal_has_coin_to_sell() const;
  public:
  void clear_coin_to_sell();
  const std::string& coin_to_sell() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coin_to_sell(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coin_to_sell();
  PROTOBUF_MUST_USE_RESULT std::string* release_coin_to_sell();
  void set_allocated_coin_to_sell(std::string* coin_to_sell);
  private:
  const std::string& _internal_coin_to_sell() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_to_sell(const std::string& value);
  std::string* _internal_mutable_coin_to_sell();
  public:

  void clear_buy();
  BuyCase buy_case() const;
  void clear_sell();
  SellCase sell_case() const;
  // @@protoc_insertion_point(class_scope:api_pb.EstimateCoinSellAllRequest)
 private:
  class _Internal;
  void set_has_coin_id_to_buy();
  void set_has_coin_to_buy();
  void set_has_coin_id_to_sell();
  void set_has_coin_to_sell();

  inline bool has_buy() const;
  inline void clear_has_buy();

  inline bool has_sell() const;
  inline void clear_has_sell();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > route_;
  mutable std::atomic<int> _route_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_to_sell_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gas_price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  int swap_from_;
  union BuyUnion {
    constexpr BuyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_buy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_to_buy_;
  } buy_;
  union SellUnion {
    constexpr SellUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint64 coin_id_to_sell_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coin_to_sell_;
  } sell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateCoinSellAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateCoinSellAllResponse) */ {
 public:
  inline EstimateCoinSellAllResponse() : EstimateCoinSellAllResponse(nullptr) {}
  ~EstimateCoinSellAllResponse() override;
  explicit constexpr EstimateCoinSellAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateCoinSellAllResponse(const EstimateCoinSellAllResponse& from);
  EstimateCoinSellAllResponse(EstimateCoinSellAllResponse&& from) noexcept
    : EstimateCoinSellAllResponse() {
    *this = ::std::move(from);
  }

  inline EstimateCoinSellAllResponse& operator=(const EstimateCoinSellAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateCoinSellAllResponse& operator=(EstimateCoinSellAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateCoinSellAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateCoinSellAllResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateCoinSellAllResponse*>(
               &_EstimateCoinSellAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(EstimateCoinSellAllResponse& a, EstimateCoinSellAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateCoinSellAllResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateCoinSellAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateCoinSellAllResponse* New() const final {
    return new EstimateCoinSellAllResponse();
  }

  EstimateCoinSellAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateCoinSellAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateCoinSellAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateCoinSellAllResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateCoinSellAllResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateCoinSellAllResponse";
  }
  protected:
  explicit EstimateCoinSellAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWillGetFieldNumber = 1,
    kSwapFromFieldNumber = 2,
  };
  // string will_get = 1 [json_name = "willGet"];
  void clear_will_get();
  const std::string& will_get() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_will_get(ArgT0&& arg0, ArgT... args);
  std::string* mutable_will_get();
  PROTOBUF_MUST_USE_RESULT std::string* release_will_get();
  void set_allocated_will_get(std::string* will_get);
  private:
  const std::string& _internal_will_get() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_will_get(const std::string& value);
  std::string* _internal_mutable_will_get();
  public:

  // .api_pb.SwapFrom swap_from = 2 [json_name = "swapFrom"];
  void clear_swap_from();
  ::api_pb::SwapFrom swap_from() const;
  void set_swap_from(::api_pb::SwapFrom value);
  private:
  ::api_pb::SwapFrom _internal_swap_from() const;
  void _internal_set_swap_from(::api_pb::SwapFrom value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.EstimateCoinSellAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr will_get_;
  int swap_from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateTxCommissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateTxCommissionRequest) */ {
 public:
  inline EstimateTxCommissionRequest() : EstimateTxCommissionRequest(nullptr) {}
  ~EstimateTxCommissionRequest() override;
  explicit constexpr EstimateTxCommissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateTxCommissionRequest(const EstimateTxCommissionRequest& from);
  EstimateTxCommissionRequest(EstimateTxCommissionRequest&& from) noexcept
    : EstimateTxCommissionRequest() {
    *this = ::std::move(from);
  }

  inline EstimateTxCommissionRequest& operator=(const EstimateTxCommissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateTxCommissionRequest& operator=(EstimateTxCommissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateTxCommissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateTxCommissionRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateTxCommissionRequest*>(
               &_EstimateTxCommissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(EstimateTxCommissionRequest& a, EstimateTxCommissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateTxCommissionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateTxCommissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateTxCommissionRequest* New() const final {
    return new EstimateTxCommissionRequest();
  }

  EstimateTxCommissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateTxCommissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateTxCommissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateTxCommissionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateTxCommissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateTxCommissionRequest";
  }
  protected:
  explicit EstimateTxCommissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string tx = 1 [json_name = "tx", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_tx();
  const std::string& tx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tx();
  PROTOBUF_MUST_USE_RESULT std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.EstimateTxCommissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EstimateTxCommissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EstimateTxCommissionResponse) */ {
 public:
  inline EstimateTxCommissionResponse() : EstimateTxCommissionResponse(nullptr) {}
  ~EstimateTxCommissionResponse() override;
  explicit constexpr EstimateTxCommissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EstimateTxCommissionResponse(const EstimateTxCommissionResponse& from);
  EstimateTxCommissionResponse(EstimateTxCommissionResponse&& from) noexcept
    : EstimateTxCommissionResponse() {
    *this = ::std::move(from);
  }

  inline EstimateTxCommissionResponse& operator=(const EstimateTxCommissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateTxCommissionResponse& operator=(EstimateTxCommissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EstimateTxCommissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EstimateTxCommissionResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateTxCommissionResponse*>(
               &_EstimateTxCommissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(EstimateTxCommissionResponse& a, EstimateTxCommissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateTxCommissionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EstimateTxCommissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateTxCommissionResponse* New() const final {
    return new EstimateTxCommissionResponse();
  }

  EstimateTxCommissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateTxCommissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EstimateTxCommissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EstimateTxCommissionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateTxCommissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EstimateTxCommissionResponse";
  }
  protected:
  explicit EstimateTxCommissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommissionFieldNumber = 1,
  };
  // string commission = 1 [json_name = "commission"];
  void clear_commission();
  const std::string& commission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commission();
  PROTOBUF_MUST_USE_RESULT std::string* release_commission();
  void set_allocated_commission(std::string* commission);
  private:
  const std::string& _internal_commission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commission(const std::string& value);
  std::string* _internal_mutable_commission();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.EstimateTxCommissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EventsRequest) */ {
 public:
  inline EventsRequest() : EventsRequest(nullptr) {}
  ~EventsRequest() override;
  explicit constexpr EventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventsRequest(const EventsRequest& from);
  EventsRequest(EventsRequest&& from) noexcept
    : EventsRequest() {
    *this = ::std::move(from);
  }

  inline EventsRequest& operator=(const EventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventsRequest& operator=(EventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventsRequest* internal_default_instance() {
    return reinterpret_cast<const EventsRequest*>(
               &_EventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(EventsRequest& a, EventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EventsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventsRequest* New() const final {
    return new EventsRequest();
  }

  EventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EventsRequest";
  }
  protected:
  explicit EventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // repeated string search = 2 [json_name = "search"];
  int search_size() const;
  private:
  int _internal_search_size() const;
  public:
  void clear_search();
  const std::string& search(int index) const;
  std::string* mutable_search(int index);
  void set_search(int index, const std::string& value);
  void set_search(int index, std::string&& value);
  void set_search(int index, const char* value);
  void set_search(int index, const char* value, size_t size);
  std::string* add_search();
  void add_search(const std::string& value);
  void add_search(std::string&& value);
  void add_search(const char* value);
  void add_search(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& search() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_search();
  private:
  const std::string& _internal_search(int index) const;
  std::string* _internal_add_search();
  public:

  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.EventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> search_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class EventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.EventsResponse) */ {
 public:
  inline EventsResponse() : EventsResponse(nullptr) {}
  ~EventsResponse() override;
  explicit constexpr EventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventsResponse(const EventsResponse& from);
  EventsResponse(EventsResponse&& from) noexcept
    : EventsResponse() {
    *this = ::std::move(from);
  }

  inline EventsResponse& operator=(const EventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventsResponse& operator=(EventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventsResponse* internal_default_instance() {
    return reinterpret_cast<const EventsResponse*>(
               &_EventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(EventsResponse& a, EventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EventsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventsResponse* New() const final {
    return new EventsResponse();
  }

  EventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.EventsResponse";
  }
  protected:
  explicit EventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .google.protobuf.Struct events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >*
      mutable_events();
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_events(int index) const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_add_events();
  public:
  const PROTOBUF_NAMESPACE_ID::Struct& events(int index) const;
  PROTOBUF_NAMESPACE_ID::Struct* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >&
      events() const;

  // @@protoc_insertion_point(class_scope:api_pb.EventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class MissedBlocksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.MissedBlocksRequest) */ {
 public:
  inline MissedBlocksRequest() : MissedBlocksRequest(nullptr) {}
  ~MissedBlocksRequest() override;
  explicit constexpr MissedBlocksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissedBlocksRequest(const MissedBlocksRequest& from);
  MissedBlocksRequest(MissedBlocksRequest&& from) noexcept
    : MissedBlocksRequest() {
    *this = ::std::move(from);
  }

  inline MissedBlocksRequest& operator=(const MissedBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissedBlocksRequest& operator=(MissedBlocksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissedBlocksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissedBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const MissedBlocksRequest*>(
               &_MissedBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(MissedBlocksRequest& a, MissedBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MissedBlocksRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissedBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissedBlocksRequest* New() const final {
    return new MissedBlocksRequest();
  }

  MissedBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissedBlocksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissedBlocksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissedBlocksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissedBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.MissedBlocksRequest";
  }
  protected:
  explicit MissedBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string public_key = 1 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.MissedBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class MissedBlocksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.MissedBlocksResponse) */ {
 public:
  inline MissedBlocksResponse() : MissedBlocksResponse(nullptr) {}
  ~MissedBlocksResponse() override;
  explicit constexpr MissedBlocksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissedBlocksResponse(const MissedBlocksResponse& from);
  MissedBlocksResponse(MissedBlocksResponse&& from) noexcept
    : MissedBlocksResponse() {
    *this = ::std::move(from);
  }

  inline MissedBlocksResponse& operator=(const MissedBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissedBlocksResponse& operator=(MissedBlocksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissedBlocksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissedBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const MissedBlocksResponse*>(
               &_MissedBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(MissedBlocksResponse& a, MissedBlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MissedBlocksResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissedBlocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissedBlocksResponse* New() const final {
    return new MissedBlocksResponse();
  }

  MissedBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissedBlocksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissedBlocksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MissedBlocksResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissedBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.MissedBlocksResponse";
  }
  protected:
  explicit MissedBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissedBlocksFieldNumber = 1,
    kMissedBlocksCountFieldNumber = 2,
  };
  // string missed_blocks = 1 [json_name = "missedBlocks"];
  void clear_missed_blocks();
  const std::string& missed_blocks() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_missed_blocks(ArgT0&& arg0, ArgT... args);
  std::string* mutable_missed_blocks();
  PROTOBUF_MUST_USE_RESULT std::string* release_missed_blocks();
  void set_allocated_missed_blocks(std::string* missed_blocks);
  private:
  const std::string& _internal_missed_blocks() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_missed_blocks(const std::string& value);
  std::string* _internal_mutable_missed_blocks();
  public:

  // int64 missed_blocks_count = 2 [json_name = "missedBlocksCount"];
  void clear_missed_blocks_count();
  ::PROTOBUF_NAMESPACE_ID::int64 missed_blocks_count() const;
  void set_missed_blocks_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_missed_blocks_count() const;
  void _internal_set_missed_blocks_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.MissedBlocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr missed_blocks_;
  ::PROTOBUF_NAMESPACE_ID::int64 missed_blocks_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class UnconfirmedTxsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UnconfirmedTxsResponse) */ {
 public:
  inline UnconfirmedTxsResponse() : UnconfirmedTxsResponse(nullptr) {}
  ~UnconfirmedTxsResponse() override;
  explicit constexpr UnconfirmedTxsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnconfirmedTxsResponse(const UnconfirmedTxsResponse& from);
  UnconfirmedTxsResponse(UnconfirmedTxsResponse&& from) noexcept
    : UnconfirmedTxsResponse() {
    *this = ::std::move(from);
  }

  inline UnconfirmedTxsResponse& operator=(const UnconfirmedTxsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnconfirmedTxsResponse& operator=(UnconfirmedTxsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnconfirmedTxsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnconfirmedTxsResponse* internal_default_instance() {
    return reinterpret_cast<const UnconfirmedTxsResponse*>(
               &_UnconfirmedTxsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(UnconfirmedTxsResponse& a, UnconfirmedTxsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnconfirmedTxsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnconfirmedTxsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnconfirmedTxsResponse* New() const final {
    return new UnconfirmedTxsResponse();
  }

  UnconfirmedTxsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnconfirmedTxsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnconfirmedTxsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnconfirmedTxsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnconfirmedTxsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UnconfirmedTxsResponse";
  }
  protected:
  explicit UnconfirmedTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 4,
    kTransactionCountFieldNumber = 1,
    kTotalTransactionsFieldNumber = 2,
    kTotalBytesFieldNumber = 3,
  };
  // repeated string transactions = 4 [json_name = "transactions"];
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const char* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // uint64 transaction_count = 1 [json_name = "transactionCount"];
  void clear_transaction_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count() const;
  void set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transaction_count() const;
  void _internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_transactions = 2 [json_name = "totalTransactions"];
  void clear_total_transactions();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_transactions() const;
  void set_total_transactions(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_transactions() const;
  void _internal_set_total_transactions(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 total_bytes = 3 [json_name = "totalBytes"];
  void clear_total_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 total_bytes() const;
  void set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_total_bytes() const;
  void _internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UnconfirmedTxsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_transactions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 total_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class UnconfirmedTxsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.UnconfirmedTxsRequest) */ {
 public:
  inline UnconfirmedTxsRequest() : UnconfirmedTxsRequest(nullptr) {}
  ~UnconfirmedTxsRequest() override;
  explicit constexpr UnconfirmedTxsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnconfirmedTxsRequest(const UnconfirmedTxsRequest& from);
  UnconfirmedTxsRequest(UnconfirmedTxsRequest&& from) noexcept
    : UnconfirmedTxsRequest() {
    *this = ::std::move(from);
  }

  inline UnconfirmedTxsRequest& operator=(const UnconfirmedTxsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnconfirmedTxsRequest& operator=(UnconfirmedTxsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnconfirmedTxsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnconfirmedTxsRequest* internal_default_instance() {
    return reinterpret_cast<const UnconfirmedTxsRequest*>(
               &_UnconfirmedTxsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(UnconfirmedTxsRequest& a, UnconfirmedTxsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnconfirmedTxsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnconfirmedTxsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnconfirmedTxsRequest* New() const final {
    return new UnconfirmedTxsRequest();
  }

  UnconfirmedTxsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnconfirmedTxsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnconfirmedTxsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UnconfirmedTxsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnconfirmedTxsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.UnconfirmedTxsRequest";
  }
  protected:
  explicit UnconfirmedTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
  };
  // int32 limit = 1 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.UnconfirmedTxsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class ValidatorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.ValidatorsRequest) */ {
 public:
  inline ValidatorsRequest() : ValidatorsRequest(nullptr) {}
  ~ValidatorsRequest() override;
  explicit constexpr ValidatorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorsRequest(const ValidatorsRequest& from);
  ValidatorsRequest(ValidatorsRequest&& from) noexcept
    : ValidatorsRequest() {
    *this = ::std::move(from);
  }

  inline ValidatorsRequest& operator=(const ValidatorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorsRequest& operator=(ValidatorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorsRequest* internal_default_instance() {
    return reinterpret_cast<const ValidatorsRequest*>(
               &_ValidatorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ValidatorsRequest& a, ValidatorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorsRequest* New() const final {
    return new ValidatorsRequest();
  }

  ValidatorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidatorsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.ValidatorsRequest";
  }
  protected:
  explicit ValidatorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.ValidatorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class ValidatorsResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.ValidatorsResponse.Result) */ {
 public:
  inline ValidatorsResponse_Result() : ValidatorsResponse_Result(nullptr) {}
  ~ValidatorsResponse_Result() override;
  explicit constexpr ValidatorsResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorsResponse_Result(const ValidatorsResponse_Result& from);
  ValidatorsResponse_Result(ValidatorsResponse_Result&& from) noexcept
    : ValidatorsResponse_Result() {
    *this = ::std::move(from);
  }

  inline ValidatorsResponse_Result& operator=(const ValidatorsResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorsResponse_Result& operator=(ValidatorsResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorsResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorsResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ValidatorsResponse_Result*>(
               &_ValidatorsResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(ValidatorsResponse_Result& a, ValidatorsResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorsResponse_Result* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorsResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorsResponse_Result* New() const final {
    return new ValidatorsResponse_Result();
  }

  ValidatorsResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorsResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorsResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidatorsResponse_Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorsResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.ValidatorsResponse.Result";
  }
  protected:
  explicit ValidatorsResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kVotingPowerFieldNumber = 2,
  };
  // string public_key = 1 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // uint64 voting_power = 2 [json_name = "votingPower"];
  void clear_voting_power();
  ::PROTOBUF_NAMESPACE_ID::uint64 voting_power() const;
  void set_voting_power(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_voting_power() const;
  void _internal_set_voting_power(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.ValidatorsResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 voting_power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class ValidatorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.ValidatorsResponse) */ {
 public:
  inline ValidatorsResponse() : ValidatorsResponse(nullptr) {}
  ~ValidatorsResponse() override;
  explicit constexpr ValidatorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorsResponse(const ValidatorsResponse& from);
  ValidatorsResponse(ValidatorsResponse&& from) noexcept
    : ValidatorsResponse() {
    *this = ::std::move(from);
  }

  inline ValidatorsResponse& operator=(const ValidatorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorsResponse& operator=(ValidatorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorsResponse* internal_default_instance() {
    return reinterpret_cast<const ValidatorsResponse*>(
               &_ValidatorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ValidatorsResponse& a, ValidatorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidatorsResponse* New() const final {
    return new ValidatorsResponse();
  }

  ValidatorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidatorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidatorsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.ValidatorsResponse";
  }
  protected:
  explicit ValidatorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValidatorsResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 3,
  };
  // repeated .api_pb.ValidatorsResponse.Result validators = 3 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;
  public:
  void clear_validators();
  ::api_pb::ValidatorsResponse_Result* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::ValidatorsResponse_Result >*
      mutable_validators();
  private:
  const ::api_pb::ValidatorsResponse_Result& _internal_validators(int index) const;
  ::api_pb::ValidatorsResponse_Result* _internal_add_validators();
  public:
  const ::api_pb::ValidatorsResponse_Result& validators(int index) const;
  ::api_pb::ValidatorsResponse_Result* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::ValidatorsResponse_Result >&
      validators() const;

  // @@protoc_insertion_point(class_scope:api_pb.ValidatorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::ValidatorsResponse_Result > validators_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SubscribeRequest) */ {
 public:
  inline SubscribeRequest() : SubscribeRequest(nullptr) {}
  ~SubscribeRequest() override;
  explicit constexpr SubscribeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeRequest(const SubscribeRequest& from);
  SubscribeRequest(SubscribeRequest&& from) noexcept
    : SubscribeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRequest& operator=(const SubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRequest& operator=(SubscribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRequest*>(
               &_SubscribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(SubscribeRequest& a, SubscribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRequest* New() const final {
    return new SubscribeRequest();
  }

  SubscribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SubscribeRequest";
  }
  protected:
  explicit SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SubscribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse_Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SubscribeResponse.Event) */ {
 public:
  inline SubscribeResponse_Event() : SubscribeResponse_Event(nullptr) {}
  ~SubscribeResponse_Event() override;
  explicit constexpr SubscribeResponse_Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeResponse_Event(const SubscribeResponse_Event& from);
  SubscribeResponse_Event(SubscribeResponse_Event&& from) noexcept
    : SubscribeResponse_Event() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse_Event& operator=(const SubscribeResponse_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse_Event& operator=(SubscribeResponse_Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeResponse_Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeResponse_Event* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse_Event*>(
               &_SubscribeResponse_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(SubscribeResponse_Event& a, SubscribeResponse_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse_Event* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeResponse_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResponse_Event* New() const final {
    return new SubscribeResponse_Event();
  }

  SubscribeResponse_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResponse_Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeResponse_Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeResponse_Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SubscribeResponse.Event";
  }
  protected:
  explicit SubscribeResponse_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string events = 2 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const char* value, size_t size);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();
  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  public:

  // string key = 1 [json_name = "key"];
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.SubscribeResponse.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.SubscribeResponse) */ {
 public:
  inline SubscribeResponse() : SubscribeResponse(nullptr) {}
  ~SubscribeResponse() override;
  explicit constexpr SubscribeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeResponse(const SubscribeResponse& from);
  SubscribeResponse(SubscribeResponse&& from) noexcept
    : SubscribeResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse& operator=(SubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse*>(
               &_SubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(SubscribeResponse& a, SubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResponse* New() const final {
    return new SubscribeResponse();
  }

  SubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubscribeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SubscribeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.SubscribeResponse";
  }
  protected:
  explicit SubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SubscribeResponse_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kQueryFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // repeated .api_pb.SubscribeResponse.Event events = 3 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::api_pb::SubscribeResponse_Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::SubscribeResponse_Event >*
      mutable_events();
  private:
  const ::api_pb::SubscribeResponse_Event& _internal_events(int index) const;
  ::api_pb::SubscribeResponse_Event* _internal_add_events();
  public:
  const ::api_pb::SubscribeResponse_Event& events(int index) const;
  ::api_pb::SubscribeResponse_Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::SubscribeResponse_Event >&
      events() const;

  // string query = 1 [json_name = "query"];
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .google.protobuf.Struct data = 2 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const PROTOBUF_NAMESPACE_ID::Struct& data() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Struct* release_data();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_data();
  void set_allocated_data(PROTOBUF_NAMESPACE_ID::Struct* data);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_data() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      PROTOBUF_NAMESPACE_ID::Struct* data);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:api_pb.SubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::SubscribeResponse_Event > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  PROTOBUF_NAMESPACE_ID::Struct* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class HaltsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.HaltsRequest) */ {
 public:
  inline HaltsRequest() : HaltsRequest(nullptr) {}
  ~HaltsRequest() override;
  explicit constexpr HaltsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HaltsRequest(const HaltsRequest& from);
  HaltsRequest(HaltsRequest&& from) noexcept
    : HaltsRequest() {
    *this = ::std::move(from);
  }

  inline HaltsRequest& operator=(const HaltsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HaltsRequest& operator=(HaltsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HaltsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HaltsRequest* internal_default_instance() {
    return reinterpret_cast<const HaltsRequest*>(
               &_HaltsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(HaltsRequest& a, HaltsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HaltsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HaltsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HaltsRequest* New() const final {
    return new HaltsRequest();
  }

  HaltsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HaltsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HaltsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HaltsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HaltsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.HaltsRequest";
  }
  protected:
  explicit HaltsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.HaltsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class HaltsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.HaltsResponse) */ {
 public:
  inline HaltsResponse() : HaltsResponse(nullptr) {}
  ~HaltsResponse() override;
  explicit constexpr HaltsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HaltsResponse(const HaltsResponse& from);
  HaltsResponse(HaltsResponse&& from) noexcept
    : HaltsResponse() {
    *this = ::std::move(from);
  }

  inline HaltsResponse& operator=(const HaltsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HaltsResponse& operator=(HaltsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HaltsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HaltsResponse* internal_default_instance() {
    return reinterpret_cast<const HaltsResponse*>(
               &_HaltsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(HaltsResponse& a, HaltsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HaltsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HaltsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HaltsResponse* New() const final {
    return new HaltsResponse();
  }

  HaltsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HaltsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HaltsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HaltsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HaltsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.HaltsResponse";
  }
  protected:
  explicit HaltsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeysFieldNumber = 1,
  };
  // repeated string public_keys = 1 [json_name = "publicKeys"];
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;
  public:
  void clear_public_keys();
  const std::string& public_keys(int index) const;
  std::string* mutable_public_keys(int index);
  void set_public_keys(int index, const std::string& value);
  void set_public_keys(int index, std::string&& value);
  void set_public_keys(int index, const char* value);
  void set_public_keys(int index, const char* value, size_t size);
  std::string* add_public_keys();
  void add_public_keys(const std::string& value);
  void add_public_keys(std::string&& value);
  void add_public_keys(const char* value);
  void add_public_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_public_keys();
  private:
  const std::string& _internal_public_keys(int index) const;
  std::string* _internal_add_public_keys();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.HaltsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> public_keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class FrozenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.FrozenRequest) */ {
 public:
  inline FrozenRequest() : FrozenRequest(nullptr) {}
  ~FrozenRequest() override;
  explicit constexpr FrozenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrozenRequest(const FrozenRequest& from);
  FrozenRequest(FrozenRequest&& from) noexcept
    : FrozenRequest() {
    *this = ::std::move(from);
  }

  inline FrozenRequest& operator=(const FrozenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrozenRequest& operator=(FrozenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrozenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrozenRequest* internal_default_instance() {
    return reinterpret_cast<const FrozenRequest*>(
               &_FrozenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(FrozenRequest& a, FrozenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrozenRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrozenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrozenRequest* New() const final {
    return new FrozenRequest();
  }

  FrozenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrozenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrozenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrozenRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrozenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.FrozenRequest";
  }
  protected:
  explicit FrozenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCoinIdFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string address = 1 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .google.protobuf.UInt64Value coin_id = 2 [json_name = "coinId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_coin_id() const;
  private:
  bool _internal_has_coin_id() const;
  public:
  void clear_coin_id();
  const PROTOBUF_NAMESPACE_ID::UInt64Value& coin_id() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::UInt64Value* release_coin_id();
  PROTOBUF_NAMESPACE_ID::UInt64Value* mutable_coin_id();
  void set_allocated_coin_id(PROTOBUF_NAMESPACE_ID::UInt64Value* coin_id);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt64Value& _internal_coin_id() const;
  PROTOBUF_NAMESPACE_ID::UInt64Value* _internal_mutable_coin_id();
  public:
  void unsafe_arena_set_allocated_coin_id(
      PROTOBUF_NAMESPACE_ID::UInt64Value* coin_id);
  PROTOBUF_NAMESPACE_ID::UInt64Value* unsafe_arena_release_coin_id();

  // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.FrozenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  PROTOBUF_NAMESPACE_ID::UInt64Value* coin_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class FrozenResponse_Frozen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.FrozenResponse.Frozen) */ {
 public:
  inline FrozenResponse_Frozen() : FrozenResponse_Frozen(nullptr) {}
  ~FrozenResponse_Frozen() override;
  explicit constexpr FrozenResponse_Frozen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrozenResponse_Frozen(const FrozenResponse_Frozen& from);
  FrozenResponse_Frozen(FrozenResponse_Frozen&& from) noexcept
    : FrozenResponse_Frozen() {
    *this = ::std::move(from);
  }

  inline FrozenResponse_Frozen& operator=(const FrozenResponse_Frozen& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrozenResponse_Frozen& operator=(FrozenResponse_Frozen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrozenResponse_Frozen& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrozenResponse_Frozen* internal_default_instance() {
    return reinterpret_cast<const FrozenResponse_Frozen*>(
               &_FrozenResponse_Frozen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(FrozenResponse_Frozen& a, FrozenResponse_Frozen& b) {
    a.Swap(&b);
  }
  inline void Swap(FrozenResponse_Frozen* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrozenResponse_Frozen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrozenResponse_Frozen* New() const final {
    return new FrozenResponse_Frozen();
  }

  FrozenResponse_Frozen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrozenResponse_Frozen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrozenResponse_Frozen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrozenResponse_Frozen& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrozenResponse_Frozen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.FrozenResponse.Frozen";
  }
  protected:
  explicit FrozenResponse_Frozen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kCandidateKeyFieldNumber = 3,
    kValueFieldNumber = 5,
    kCoinFieldNumber = 4,
    kHeightFieldNumber = 1,
  };
  // string address = 2 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string candidate_key = 3 [json_name = "candidateKey"];
  void clear_candidate_key();
  const std::string& candidate_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_candidate_key();
  void set_allocated_candidate_key(std::string* candidate_key);
  private:
  const std::string& _internal_candidate_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate_key(const std::string& value);
  std::string* _internal_mutable_candidate_key();
  public:

  // string value = 5 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .api_pb.Coin coin = 4 [json_name = "coin"];
  bool has_coin() const;
  private:
  bool _internal_has_coin() const;
  public:
  void clear_coin();
  const ::api_pb::Coin& coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin();
  ::api_pb::Coin* mutable_coin();
  void set_allocated_coin(::api_pb::Coin* coin);
  private:
  const ::api_pb::Coin& _internal_coin() const;
  ::api_pb::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::api_pb::Coin* coin);
  ::api_pb::Coin* unsafe_arena_release_coin();

  // uint64 height = 1 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.FrozenResponse.Frozen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::api_pb::Coin* coin_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class FrozenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.FrozenResponse) */ {
 public:
  inline FrozenResponse() : FrozenResponse(nullptr) {}
  ~FrozenResponse() override;
  explicit constexpr FrozenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrozenResponse(const FrozenResponse& from);
  FrozenResponse(FrozenResponse&& from) noexcept
    : FrozenResponse() {
    *this = ::std::move(from);
  }

  inline FrozenResponse& operator=(const FrozenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrozenResponse& operator=(FrozenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrozenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrozenResponse* internal_default_instance() {
    return reinterpret_cast<const FrozenResponse*>(
               &_FrozenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(FrozenResponse& a, FrozenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FrozenResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrozenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrozenResponse* New() const final {
    return new FrozenResponse();
  }

  FrozenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrozenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrozenResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrozenResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrozenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.FrozenResponse";
  }
  protected:
  explicit FrozenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FrozenResponse_Frozen Frozen;

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenFieldNumber = 1,
  };
  // repeated .api_pb.FrozenResponse.Frozen frozen = 1 [json_name = "frozen"];
  int frozen_size() const;
  private:
  int _internal_frozen_size() const;
  public:
  void clear_frozen();
  ::api_pb::FrozenResponse_Frozen* mutable_frozen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::FrozenResponse_Frozen >*
      mutable_frozen();
  private:
  const ::api_pb::FrozenResponse_Frozen& _internal_frozen(int index) const;
  ::api_pb::FrozenResponse_Frozen* _internal_add_frozen();
  public:
  const ::api_pb::FrozenResponse_Frozen& frozen(int index) const;
  ::api_pb::FrozenResponse_Frozen* add_frozen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::FrozenResponse_Frozen >&
      frozen() const;

  // @@protoc_insertion_point(class_scope:api_pb.FrozenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::FrozenResponse_Frozen > frozen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class WaitListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.WaitListRequest) */ {
 public:
  inline WaitListRequest() : WaitListRequest(nullptr) {}
  ~WaitListRequest() override;
  explicit constexpr WaitListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitListRequest(const WaitListRequest& from);
  WaitListRequest(WaitListRequest&& from) noexcept
    : WaitListRequest() {
    *this = ::std::move(from);
  }

  inline WaitListRequest& operator=(const WaitListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitListRequest& operator=(WaitListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitListRequest* internal_default_instance() {
    return reinterpret_cast<const WaitListRequest*>(
               &_WaitListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(WaitListRequest& a, WaitListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitListRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitListRequest* New() const final {
    return new WaitListRequest();
  }

  WaitListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitListRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.WaitListRequest";
  }
  protected:
  explicit WaitListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kAddressFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string public_key = 1 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string address = 2 [json_name = "address"];
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_MUST_USE_RESULT std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:api_pb.WaitListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class WaitListResponse_Wait final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.WaitListResponse.Wait) */ {
 public:
  inline WaitListResponse_Wait() : WaitListResponse_Wait(nullptr) {}
  ~WaitListResponse_Wait() override;
  explicit constexpr WaitListResponse_Wait(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitListResponse_Wait(const WaitListResponse_Wait& from);
  WaitListResponse_Wait(WaitListResponse_Wait&& from) noexcept
    : WaitListResponse_Wait() {
    *this = ::std::move(from);
  }

  inline WaitListResponse_Wait& operator=(const WaitListResponse_Wait& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitListResponse_Wait& operator=(WaitListResponse_Wait&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitListResponse_Wait& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitListResponse_Wait* internal_default_instance() {
    return reinterpret_cast<const WaitListResponse_Wait*>(
               &_WaitListResponse_Wait_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(WaitListResponse_Wait& a, WaitListResponse_Wait& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitListResponse_Wait* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitListResponse_Wait* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitListResponse_Wait* New() const final {
    return new WaitListResponse_Wait();
  }

  WaitListResponse_Wait* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitListResponse_Wait>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitListResponse_Wait& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitListResponse_Wait& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitListResponse_Wait* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.WaitListResponse.Wait";
  }
  protected:
  explicit WaitListResponse_Wait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
    kCoinFieldNumber = 1,
  };
  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string public_key = 3 [json_name = "publicKey"];
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // .api_pb.Coin coin = 1 [json_name = "coin"];
  bool has_coin() const;
  private:
  bool _internal_has_coin() const;
  public:
  void clear_coin();
  const ::api_pb::Coin& coin() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::Coin* release_coin();
  ::api_pb::Coin* mutable_coin();
  void set_allocated_coin(::api_pb::Coin* coin);
  private:
  const ::api_pb::Coin& _internal_coin() const;
  ::api_pb::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::api_pb::Coin* coin);
  ::api_pb::Coin* unsafe_arena_release_coin();

  // @@protoc_insertion_point(class_scope:api_pb.WaitListResponse.Wait)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::api_pb::Coin* coin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// -------------------------------------------------------------------

class WaitListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.WaitListResponse) */ {
 public:
  inline WaitListResponse() : WaitListResponse(nullptr) {}
  ~WaitListResponse() override;
  explicit constexpr WaitListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitListResponse(const WaitListResponse& from);
  WaitListResponse(WaitListResponse&& from) noexcept
    : WaitListResponse() {
    *this = ::std::move(from);
  }

  inline WaitListResponse& operator=(const WaitListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitListResponse& operator=(WaitListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitListResponse* internal_default_instance() {
    return reinterpret_cast<const WaitListResponse*>(
               &_WaitListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(WaitListResponse& a, WaitListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitListResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitListResponse* New() const final {
    return new WaitListResponse();
  }

  WaitListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitListResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.WaitListResponse";
  }
  protected:
  explicit WaitListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WaitListResponse_Wait Wait;

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .api_pb.WaitListResponse.Wait list = 1 [json_name = "list"];
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::api_pb::WaitListResponse_Wait* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::WaitListResponse_Wait >*
      mutable_list();
  private:
  const ::api_pb::WaitListResponse_Wait& _internal_list(int index) const;
  ::api_pb::WaitListResponse_Wait* _internal_add_list();
  public:
  const ::api_pb::WaitListResponse_Wait& list(int index) const;
  ::api_pb::WaitListResponse_Wait* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::WaitListResponse_Wait >&
      list() const;

  // @@protoc_insertion_point(class_scope:api_pb.WaitListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::WaitListResponse_Wait > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_resources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coin

// uint64 id = 1 [json_name = "id"];
inline void Coin::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Coin::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Coin::id() const {
  // @@protoc_insertion_point(field_get:api_pb.Coin.id)
  return _internal_id();
}
inline void Coin::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Coin::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.Coin.id)
}

// string symbol = 2 [json_name = "symbol"];
inline void Coin::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Coin::symbol() const {
  // @@protoc_insertion_point(field_get:api_pb.Coin.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Coin::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.Coin.symbol)
}
inline std::string* Coin::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:api_pb.Coin.symbol)
  return _s;
}
inline const std::string& Coin::_internal_symbol() const {
  return symbol_.Get();
}
inline void Coin::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Coin::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Coin::release_symbol() {
  // @@protoc_insertion_point(field_release:api_pb.Coin.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Coin::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.Coin.symbol)
}

// -------------------------------------------------------------------

// BlocksRequest

// uint64 from_height = 1 [json_name = "fromHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlocksRequest::clear_from_height() {
  from_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlocksRequest::_internal_from_height() const {
  return from_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlocksRequest::from_height() const {
  // @@protoc_insertion_point(field_get:api_pb.BlocksRequest.from_height)
  return _internal_from_height();
}
inline void BlocksRequest::_internal_set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  from_height_ = value;
}
inline void BlocksRequest::set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_height(value);
  // @@protoc_insertion_point(field_set:api_pb.BlocksRequest.from_height)
}

// uint64 to_height = 2 [json_name = "toHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlocksRequest::clear_to_height() {
  to_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlocksRequest::_internal_to_height() const {
  return to_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlocksRequest::to_height() const {
  // @@protoc_insertion_point(field_get:api_pb.BlocksRequest.to_height)
  return _internal_to_height();
}
inline void BlocksRequest::_internal_set_to_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_height_ = value;
}
inline void BlocksRequest::set_to_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_to_height(value);
  // @@protoc_insertion_point(field_set:api_pb.BlocksRequest.to_height)
}

// repeated .api_pb.BlockField fields = 3 [json_name = "fields"];
inline int BlocksRequest::_internal_fields_size() const {
  return fields_.size();
}
inline int BlocksRequest::fields_size() const {
  return _internal_fields_size();
}
inline void BlocksRequest::clear_fields() {
  fields_.Clear();
}
inline ::api_pb::BlockField BlocksRequest::_internal_fields(int index) const {
  return static_cast< ::api_pb::BlockField >(fields_.Get(index));
}
inline ::api_pb::BlockField BlocksRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlocksRequest.fields)
  return _internal_fields(index);
}
inline void BlocksRequest::set_fields(int index, ::api_pb::BlockField value) {
  fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.BlocksRequest.fields)
}
inline void BlocksRequest::_internal_add_fields(::api_pb::BlockField value) {
  fields_.Add(value);
}
inline void BlocksRequest::add_fields(::api_pb::BlockField value) {
  _internal_add_fields(value);
  // @@protoc_insertion_point(field_add:api_pb.BlocksRequest.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BlocksRequest::fields() const {
  // @@protoc_insertion_point(field_list:api_pb.BlocksRequest.fields)
  return fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BlocksRequest::_internal_mutable_fields() {
  return &fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BlocksRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlocksRequest.fields)
  return _internal_mutable_fields();
}

// bool failed_txs = 4 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlocksRequest::clear_failed_txs() {
  failed_txs_ = false;
}
inline bool BlocksRequest::_internal_failed_txs() const {
  return failed_txs_;
}
inline bool BlocksRequest::failed_txs() const {
  // @@protoc_insertion_point(field_get:api_pb.BlocksRequest.failed_txs)
  return _internal_failed_txs();
}
inline void BlocksRequest::_internal_set_failed_txs(bool value) {
  
  failed_txs_ = value;
}
inline void BlocksRequest::set_failed_txs(bool value) {
  _internal_set_failed_txs(value);
  // @@protoc_insertion_point(field_set:api_pb.BlocksRequest.failed_txs)
}

// bool events = 5 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlocksRequest::clear_events() {
  events_ = false;
}
inline bool BlocksRequest::_internal_events() const {
  return events_;
}
inline bool BlocksRequest::events() const {
  // @@protoc_insertion_point(field_get:api_pb.BlocksRequest.events)
  return _internal_events();
}
inline void BlocksRequest::_internal_set_events(bool value) {
  
  events_ = value;
}
inline void BlocksRequest::set_events(bool value) {
  _internal_set_events(value);
  // @@protoc_insertion_point(field_set:api_pb.BlocksRequest.events)
}

// -------------------------------------------------------------------

// BlocksResponse

// repeated .api_pb.BlockResponse blocks = 1 [json_name = "blocks"];
inline int BlocksResponse::_internal_blocks_size() const {
  return blocks_.size();
}
inline int BlocksResponse::blocks_size() const {
  return _internal_blocks_size();
}
inline void BlocksResponse::clear_blocks() {
  blocks_.Clear();
}
inline ::api_pb::BlockResponse* BlocksResponse::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.BlocksResponse.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse >*
BlocksResponse::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlocksResponse.blocks)
  return &blocks_;
}
inline const ::api_pb::BlockResponse& BlocksResponse::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::api_pb::BlockResponse& BlocksResponse::blocks(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlocksResponse.blocks)
  return _internal_blocks(index);
}
inline ::api_pb::BlockResponse* BlocksResponse::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::api_pb::BlockResponse* BlocksResponse::add_blocks() {
  ::api_pb::BlockResponse* _add = _internal_add_blocks();
  // @@protoc_insertion_point(field_add:api_pb.BlocksResponse.blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse >&
BlocksResponse::blocks() const {
  // @@protoc_insertion_point(field_list:api_pb.BlocksResponse.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// CommissionVotesRequest

// uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CommissionVotesRequest::clear_target_version() {
  target_version_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommissionVotesRequest::_internal_target_version() const {
  return target_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommissionVotesRequest::target_version() const {
  // @@protoc_insertion_point(field_get:api_pb.CommissionVotesRequest.target_version)
  return _internal_target_version();
}
inline void CommissionVotesRequest::_internal_set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_version_ = value;
}
inline void CommissionVotesRequest::set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_version(value);
  // @@protoc_insertion_point(field_set:api_pb.CommissionVotesRequest.target_version)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CommissionVotesRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommissionVotesRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommissionVotesRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.CommissionVotesRequest.height)
  return _internal_height();
}
inline void CommissionVotesRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void CommissionVotesRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.CommissionVotesRequest.height)
}

// -------------------------------------------------------------------

// CommissionVotesResponse_Vote

// .api_pb.PriceCommissionResponse price = 2 [json_name = "price"];
inline bool CommissionVotesResponse_Vote::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool CommissionVotesResponse_Vote::has_price() const {
  return _internal_has_price();
}
inline void CommissionVotesResponse_Vote::clear_price() {
  if (GetArenaForAllocation() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::api_pb::PriceCommissionResponse& CommissionVotesResponse_Vote::_internal_price() const {
  const ::api_pb::PriceCommissionResponse* p = price_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::PriceCommissionResponse&>(
      ::api_pb::_PriceCommissionResponse_default_instance_);
}
inline const ::api_pb::PriceCommissionResponse& CommissionVotesResponse_Vote::price() const {
  // @@protoc_insertion_point(field_get:api_pb.CommissionVotesResponse.Vote.price)
  return _internal_price();
}
inline void CommissionVotesResponse_Vote::unsafe_arena_set_allocated_price(
    ::api_pb::PriceCommissionResponse* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.CommissionVotesResponse.Vote.price)
}
inline ::api_pb::PriceCommissionResponse* CommissionVotesResponse_Vote::release_price() {
  
  ::api_pb::PriceCommissionResponse* temp = price_;
  price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::PriceCommissionResponse* CommissionVotesResponse_Vote::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:api_pb.CommissionVotesResponse.Vote.price)
  
  ::api_pb::PriceCommissionResponse* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::api_pb::PriceCommissionResponse* CommissionVotesResponse_Vote::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::PriceCommissionResponse>(GetArenaForAllocation());
    price_ = p;
  }
  return price_;
}
inline ::api_pb::PriceCommissionResponse* CommissionVotesResponse_Vote::mutable_price() {
  ::api_pb::PriceCommissionResponse* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:api_pb.CommissionVotesResponse.Vote.price)
  return _msg;
}
inline void CommissionVotesResponse_Vote::set_allocated_price(::api_pb::PriceCommissionResponse* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::PriceCommissionResponse>::GetOwningArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:api_pb.CommissionVotesResponse.Vote.price)
}

// repeated string public_keys = 1 [json_name = "publicKeys"];
inline int CommissionVotesResponse_Vote::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int CommissionVotesResponse_Vote::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void CommissionVotesResponse_Vote::clear_public_keys() {
  public_keys_.Clear();
}
inline std::string* CommissionVotesResponse_Vote::add_public_keys() {
  std::string* _s = _internal_add_public_keys();
  // @@protoc_insertion_point(field_add_mutable:api_pb.CommissionVotesResponse.Vote.public_keys)
  return _s;
}
inline const std::string& CommissionVotesResponse_Vote::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline const std::string& CommissionVotesResponse_Vote::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.CommissionVotesResponse.Vote.public_keys)
  return _internal_public_keys(index);
}
inline std::string* CommissionVotesResponse_Vote::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.CommissionVotesResponse.Vote.public_keys)
  return public_keys_.Mutable(index);
}
inline void CommissionVotesResponse_Vote::set_public_keys(int index, const std::string& value) {
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline void CommissionVotesResponse_Vote::set_public_keys(int index, std::string&& value) {
  public_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline void CommissionVotesResponse_Vote::set_public_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline void CommissionVotesResponse_Vote::set_public_keys(int index, const char* value, size_t size) {
  public_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline std::string* CommissionVotesResponse_Vote::_internal_add_public_keys() {
  return public_keys_.Add();
}
inline void CommissionVotesResponse_Vote::add_public_keys(const std::string& value) {
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline void CommissionVotesResponse_Vote::add_public_keys(std::string&& value) {
  public_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline void CommissionVotesResponse_Vote::add_public_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline void CommissionVotesResponse_Vote::add_public_keys(const char* value, size_t size) {
  public_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.CommissionVotesResponse.Vote.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommissionVotesResponse_Vote::public_keys() const {
  // @@protoc_insertion_point(field_list:api_pb.CommissionVotesResponse.Vote.public_keys)
  return public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommissionVotesResponse_Vote::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.CommissionVotesResponse.Vote.public_keys)
  return &public_keys_;
}

// -------------------------------------------------------------------

// CommissionVotesResponse

// repeated .api_pb.CommissionVotesResponse.Vote votes = 1 [json_name = "votes"];
inline int CommissionVotesResponse::_internal_votes_size() const {
  return votes_.size();
}
inline int CommissionVotesResponse::votes_size() const {
  return _internal_votes_size();
}
inline void CommissionVotesResponse::clear_votes() {
  votes_.Clear();
}
inline ::api_pb::CommissionVotesResponse_Vote* CommissionVotesResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.CommissionVotesResponse.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CommissionVotesResponse_Vote >*
CommissionVotesResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.CommissionVotesResponse.votes)
  return &votes_;
}
inline const ::api_pb::CommissionVotesResponse_Vote& CommissionVotesResponse::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::api_pb::CommissionVotesResponse_Vote& CommissionVotesResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.CommissionVotesResponse.votes)
  return _internal_votes(index);
}
inline ::api_pb::CommissionVotesResponse_Vote* CommissionVotesResponse::_internal_add_votes() {
  return votes_.Add();
}
inline ::api_pb::CommissionVotesResponse_Vote* CommissionVotesResponse::add_votes() {
  ::api_pb::CommissionVotesResponse_Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:api_pb.CommissionVotesResponse.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CommissionVotesResponse_Vote >&
CommissionVotesResponse::votes() const {
  // @@protoc_insertion_point(field_list:api_pb.CommissionVotesResponse.votes)
  return votes_;
}

// -------------------------------------------------------------------

// LimitOrderRequest

// uint64 order_id = 1 [json_name = "orderId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrderRequest::clear_order_id() {
  order_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderRequest::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderRequest::order_id() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderRequest.order_id)
  return _internal_order_id();
}
inline void LimitOrderRequest::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  order_id_ = value;
}
inline void LimitOrderRequest::set_order_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderRequest.order_id)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrderRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderRequest.height)
  return _internal_height();
}
inline void LimitOrderRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void LimitOrderRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderRequest.height)
}

// -------------------------------------------------------------------

// LimitOrderResponse

// uint64 id = 7 [json_name = "id"];
inline void LimitOrderResponse::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderResponse::id() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.id)
  return _internal_id();
}
inline void LimitOrderResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void LimitOrderResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderResponse.id)
}

// .api_pb.Coin coin_sell = 1 [json_name = "coinSell"];
inline bool LimitOrderResponse::_internal_has_coin_sell() const {
  return this != internal_default_instance() && coin_sell_ != nullptr;
}
inline bool LimitOrderResponse::has_coin_sell() const {
  return _internal_has_coin_sell();
}
inline void LimitOrderResponse::clear_coin_sell() {
  if (GetArenaForAllocation() == nullptr && coin_sell_ != nullptr) {
    delete coin_sell_;
  }
  coin_sell_ = nullptr;
}
inline const ::api_pb::Coin& LimitOrderResponse::_internal_coin_sell() const {
  const ::api_pb::Coin* p = coin_sell_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& LimitOrderResponse::coin_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.coin_sell)
  return _internal_coin_sell();
}
inline void LimitOrderResponse::unsafe_arena_set_allocated_coin_sell(
    ::api_pb::Coin* coin_sell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_sell_);
  }
  coin_sell_ = coin_sell;
  if (coin_sell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.LimitOrderResponse.coin_sell)
}
inline ::api_pb::Coin* LimitOrderResponse::release_coin_sell() {
  
  ::api_pb::Coin* temp = coin_sell_;
  coin_sell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* LimitOrderResponse::unsafe_arena_release_coin_sell() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrderResponse.coin_sell)
  
  ::api_pb::Coin* temp = coin_sell_;
  coin_sell_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* LimitOrderResponse::_internal_mutable_coin_sell() {
  
  if (coin_sell_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_sell_ = p;
  }
  return coin_sell_;
}
inline ::api_pb::Coin* LimitOrderResponse::mutable_coin_sell() {
  ::api_pb::Coin* _msg = _internal_mutable_coin_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrderResponse.coin_sell)
  return _msg;
}
inline void LimitOrderResponse::set_allocated_coin_sell(::api_pb::Coin* coin_sell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_sell_;
  }
  if (coin_sell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin_sell);
    if (message_arena != submessage_arena) {
      coin_sell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin_sell, submessage_arena);
    }
    
  } else {
    
  }
  coin_sell_ = coin_sell;
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrderResponse.coin_sell)
}

// .api_pb.Coin coin_buy = 2 [json_name = "coinBuy"];
inline bool LimitOrderResponse::_internal_has_coin_buy() const {
  return this != internal_default_instance() && coin_buy_ != nullptr;
}
inline bool LimitOrderResponse::has_coin_buy() const {
  return _internal_has_coin_buy();
}
inline void LimitOrderResponse::clear_coin_buy() {
  if (GetArenaForAllocation() == nullptr && coin_buy_ != nullptr) {
    delete coin_buy_;
  }
  coin_buy_ = nullptr;
}
inline const ::api_pb::Coin& LimitOrderResponse::_internal_coin_buy() const {
  const ::api_pb::Coin* p = coin_buy_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& LimitOrderResponse::coin_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.coin_buy)
  return _internal_coin_buy();
}
inline void LimitOrderResponse::unsafe_arena_set_allocated_coin_buy(
    ::api_pb::Coin* coin_buy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_buy_);
  }
  coin_buy_ = coin_buy;
  if (coin_buy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.LimitOrderResponse.coin_buy)
}
inline ::api_pb::Coin* LimitOrderResponse::release_coin_buy() {
  
  ::api_pb::Coin* temp = coin_buy_;
  coin_buy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* LimitOrderResponse::unsafe_arena_release_coin_buy() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrderResponse.coin_buy)
  
  ::api_pb::Coin* temp = coin_buy_;
  coin_buy_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* LimitOrderResponse::_internal_mutable_coin_buy() {
  
  if (coin_buy_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_buy_ = p;
  }
  return coin_buy_;
}
inline ::api_pb::Coin* LimitOrderResponse::mutable_coin_buy() {
  ::api_pb::Coin* _msg = _internal_mutable_coin_buy();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrderResponse.coin_buy)
  return _msg;
}
inline void LimitOrderResponse::set_allocated_coin_buy(::api_pb::Coin* coin_buy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_buy_;
  }
  if (coin_buy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin_buy);
    if (message_arena != submessage_arena) {
      coin_buy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin_buy, submessage_arena);
    }
    
  } else {
    
  }
  coin_buy_ = coin_buy;
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrderResponse.coin_buy)
}

// string want_sell = 3 [json_name = "wantSell"];
inline void LimitOrderResponse::clear_want_sell() {
  want_sell_.ClearToEmpty();
}
inline const std::string& LimitOrderResponse::want_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.want_sell)
  return _internal_want_sell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LimitOrderResponse::set_want_sell(ArgT0&& arg0, ArgT... args) {
 
 want_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderResponse.want_sell)
}
inline std::string* LimitOrderResponse::mutable_want_sell() {
  std::string* _s = _internal_mutable_want_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrderResponse.want_sell)
  return _s;
}
inline const std::string& LimitOrderResponse::_internal_want_sell() const {
  return want_sell_.Get();
}
inline void LimitOrderResponse::_internal_set_want_sell(const std::string& value) {
  
  want_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::_internal_mutable_want_sell() {
  
  return want_sell_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::release_want_sell() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrderResponse.want_sell)
  return want_sell_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LimitOrderResponse::set_allocated_want_sell(std::string* want_sell) {
  if (want_sell != nullptr) {
    
  } else {
    
  }
  want_sell_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), want_sell,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrderResponse.want_sell)
}

// string want_buy = 4 [json_name = "wantBuy"];
inline void LimitOrderResponse::clear_want_buy() {
  want_buy_.ClearToEmpty();
}
inline const std::string& LimitOrderResponse::want_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.want_buy)
  return _internal_want_buy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LimitOrderResponse::set_want_buy(ArgT0&& arg0, ArgT... args) {
 
 want_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderResponse.want_buy)
}
inline std::string* LimitOrderResponse::mutable_want_buy() {
  std::string* _s = _internal_mutable_want_buy();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrderResponse.want_buy)
  return _s;
}
inline const std::string& LimitOrderResponse::_internal_want_buy() const {
  return want_buy_.Get();
}
inline void LimitOrderResponse::_internal_set_want_buy(const std::string& value) {
  
  want_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::_internal_mutable_want_buy() {
  
  return want_buy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::release_want_buy() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrderResponse.want_buy)
  return want_buy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LimitOrderResponse::set_allocated_want_buy(std::string* want_buy) {
  if (want_buy != nullptr) {
    
  } else {
    
  }
  want_buy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), want_buy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrderResponse.want_buy)
}

// string price = 8 [json_name = "price"];
inline void LimitOrderResponse::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& LimitOrderResponse::price() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LimitOrderResponse::set_price(ArgT0&& arg0, ArgT... args) {
 
 price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderResponse.price)
}
inline std::string* LimitOrderResponse::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrderResponse.price)
  return _s;
}
inline const std::string& LimitOrderResponse::_internal_price() const {
  return price_.Get();
}
inline void LimitOrderResponse::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::release_price() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrderResponse.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LimitOrderResponse::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrderResponse.price)
}

// string owner = 5 [json_name = "owner"];
inline void LimitOrderResponse::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& LimitOrderResponse::owner() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LimitOrderResponse::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderResponse.owner)
}
inline std::string* LimitOrderResponse::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrderResponse.owner)
  return _s;
}
inline const std::string& LimitOrderResponse::_internal_owner() const {
  return owner_.Get();
}
inline void LimitOrderResponse::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LimitOrderResponse::release_owner() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrderResponse.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LimitOrderResponse::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrderResponse.owner)
}

// uint64 height = 6 [json_name = "height"];
inline void LimitOrderResponse::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrderResponse::height() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrderResponse.height)
  return _internal_height();
}
inline void LimitOrderResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void LimitOrderResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrderResponse.height)
}

// -------------------------------------------------------------------

// LimitOrdersOfPoolRequest

// uint64 sell_coin = 1 [json_name = "sellCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrdersOfPoolRequest::clear_sell_coin() {
  sell_coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersOfPoolRequest::_internal_sell_coin() const {
  return sell_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersOfPoolRequest::sell_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersOfPoolRequest.sell_coin)
  return _internal_sell_coin();
}
inline void LimitOrdersOfPoolRequest::_internal_set_sell_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sell_coin_ = value;
}
inline void LimitOrdersOfPoolRequest::set_sell_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sell_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersOfPoolRequest.sell_coin)
}

// uint64 buy_coin = 2 [json_name = "buyCoin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrdersOfPoolRequest::clear_buy_coin() {
  buy_coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersOfPoolRequest::_internal_buy_coin() const {
  return buy_coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersOfPoolRequest::buy_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersOfPoolRequest.buy_coin)
  return _internal_buy_coin();
}
inline void LimitOrdersOfPoolRequest::_internal_set_buy_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  buy_coin_ = value;
}
inline void LimitOrdersOfPoolRequest::set_buy_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buy_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersOfPoolRequest.buy_coin)
}

// int32 limit = 3 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrdersOfPoolRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitOrdersOfPoolRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LimitOrdersOfPoolRequest::limit() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersOfPoolRequest.limit)
  return _internal_limit();
}
inline void LimitOrdersOfPoolRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void LimitOrdersOfPoolRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersOfPoolRequest.limit)
}

// uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrdersOfPoolRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersOfPoolRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersOfPoolRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersOfPoolRequest.height)
  return _internal_height();
}
inline void LimitOrdersOfPoolRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void LimitOrdersOfPoolRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersOfPoolRequest.height)
}

// -------------------------------------------------------------------

// LimitOrdersOfPoolResponse

// string pool_price = 2 [json_name = "poolPrice"];
inline void LimitOrdersOfPoolResponse::clear_pool_price() {
  pool_price_.ClearToEmpty();
}
inline const std::string& LimitOrdersOfPoolResponse::pool_price() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersOfPoolResponse.pool_price)
  return _internal_pool_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LimitOrdersOfPoolResponse::set_pool_price(ArgT0&& arg0, ArgT... args) {
 
 pool_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersOfPoolResponse.pool_price)
}
inline std::string* LimitOrdersOfPoolResponse::mutable_pool_price() {
  std::string* _s = _internal_mutable_pool_price();
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrdersOfPoolResponse.pool_price)
  return _s;
}
inline const std::string& LimitOrdersOfPoolResponse::_internal_pool_price() const {
  return pool_price_.Get();
}
inline void LimitOrdersOfPoolResponse::_internal_set_pool_price(const std::string& value) {
  
  pool_price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LimitOrdersOfPoolResponse::_internal_mutable_pool_price() {
  
  return pool_price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LimitOrdersOfPoolResponse::release_pool_price() {
  // @@protoc_insertion_point(field_release:api_pb.LimitOrdersOfPoolResponse.pool_price)
  return pool_price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LimitOrdersOfPoolResponse::set_allocated_pool_price(std::string* pool_price) {
  if (pool_price != nullptr) {
    
  } else {
    
  }
  pool_price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pool_price,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.LimitOrdersOfPoolResponse.pool_price)
}

// repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
inline int LimitOrdersOfPoolResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int LimitOrdersOfPoolResponse::orders_size() const {
  return _internal_orders_size();
}
inline void LimitOrdersOfPoolResponse::clear_orders() {
  orders_.Clear();
}
inline ::api_pb::LimitOrderResponse* LimitOrdersOfPoolResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrdersOfPoolResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >*
LimitOrdersOfPoolResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.LimitOrdersOfPoolResponse.orders)
  return &orders_;
}
inline const ::api_pb::LimitOrderResponse& LimitOrdersOfPoolResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::api_pb::LimitOrderResponse& LimitOrdersOfPoolResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersOfPoolResponse.orders)
  return _internal_orders(index);
}
inline ::api_pb::LimitOrderResponse* LimitOrdersOfPoolResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::api_pb::LimitOrderResponse* LimitOrdersOfPoolResponse::add_orders() {
  ::api_pb::LimitOrderResponse* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:api_pb.LimitOrdersOfPoolResponse.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >&
LimitOrdersOfPoolResponse::orders() const {
  // @@protoc_insertion_point(field_list:api_pb.LimitOrdersOfPoolResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// LimitOrdersRequest

// repeated uint64 ids = 1 [json_name = "ids"];
inline int LimitOrdersRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int LimitOrdersRequest::ids_size() const {
  return _internal_ids_size();
}
inline void LimitOrdersRequest::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersRequest.ids)
  return _internal_ids(index);
}
inline void LimitOrdersRequest::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersRequest.ids)
}
inline void LimitOrdersRequest::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Add(value);
}
inline void LimitOrdersRequest::add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:api_pb.LimitOrdersRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LimitOrdersRequest::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LimitOrdersRequest::ids() const {
  // @@protoc_insertion_point(field_list:api_pb.LimitOrdersRequest.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LimitOrdersRequest::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LimitOrdersRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.LimitOrdersRequest.ids)
  return _internal_mutable_ids();
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void LimitOrdersRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LimitOrdersRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersRequest.height)
  return _internal_height();
}
inline void LimitOrdersRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void LimitOrdersRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.LimitOrdersRequest.height)
}

// -------------------------------------------------------------------

// LimitOrdersResponse

// repeated .api_pb.LimitOrderResponse orders = 1 [json_name = "orders"];
inline int LimitOrdersResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int LimitOrdersResponse::orders_size() const {
  return _internal_orders_size();
}
inline void LimitOrdersResponse::clear_orders() {
  orders_.Clear();
}
inline ::api_pb::LimitOrderResponse* LimitOrdersResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.LimitOrdersResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >*
LimitOrdersResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.LimitOrdersResponse.orders)
  return &orders_;
}
inline const ::api_pb::LimitOrderResponse& LimitOrdersResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::api_pb::LimitOrderResponse& LimitOrdersResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.LimitOrdersResponse.orders)
  return _internal_orders(index);
}
inline ::api_pb::LimitOrderResponse* LimitOrdersResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::api_pb::LimitOrderResponse* LimitOrdersResponse::add_orders() {
  ::api_pb::LimitOrderResponse* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:api_pb.LimitOrdersResponse.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::LimitOrderResponse >&
LimitOrdersResponse::orders() const {
  // @@protoc_insertion_point(field_list:api_pb.LimitOrdersResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// UpdateVotesRequest

// uint64 target_version = 1 [json_name = "targetVersion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UpdateVotesRequest::clear_target_version() {
  target_version_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateVotesRequest::_internal_target_version() const {
  return target_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateVotesRequest::target_version() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateVotesRequest.target_version)
  return _internal_target_version();
}
inline void UpdateVotesRequest::_internal_set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  target_version_ = value;
}
inline void UpdateVotesRequest::set_target_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_version(value);
  // @@protoc_insertion_point(field_set:api_pb.UpdateVotesRequest.target_version)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UpdateVotesRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateVotesRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdateVotesRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateVotesRequest.height)
  return _internal_height();
}
inline void UpdateVotesRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void UpdateVotesRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.UpdateVotesRequest.height)
}

// -------------------------------------------------------------------

// UpdateVotesResponse_Vote

// string version = 2 [json_name = "version"];
inline void UpdateVotesResponse_Vote::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& UpdateVotesResponse_Vote::version() const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateVotesResponse.Vote.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateVotesResponse_Vote::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.UpdateVotesResponse.Vote.version)
}
inline std::string* UpdateVotesResponse_Vote::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateVotesResponse.Vote.version)
  return _s;
}
inline const std::string& UpdateVotesResponse_Vote::_internal_version() const {
  return version_.Get();
}
inline void UpdateVotesResponse_Vote::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateVotesResponse_Vote::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateVotesResponse_Vote::release_version() {
  // @@protoc_insertion_point(field_release:api_pb.UpdateVotesResponse.Vote.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateVotesResponse_Vote::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.UpdateVotesResponse.Vote.version)
}

// repeated string public_keys = 1 [json_name = "publicKeys"];
inline int UpdateVotesResponse_Vote::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int UpdateVotesResponse_Vote::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void UpdateVotesResponse_Vote::clear_public_keys() {
  public_keys_.Clear();
}
inline std::string* UpdateVotesResponse_Vote::add_public_keys() {
  std::string* _s = _internal_add_public_keys();
  // @@protoc_insertion_point(field_add_mutable:api_pb.UpdateVotesResponse.Vote.public_keys)
  return _s;
}
inline const std::string& UpdateVotesResponse_Vote::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline const std::string& UpdateVotesResponse_Vote::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateVotesResponse.Vote.public_keys)
  return _internal_public_keys(index);
}
inline std::string* UpdateVotesResponse_Vote::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateVotesResponse.Vote.public_keys)
  return public_keys_.Mutable(index);
}
inline void UpdateVotesResponse_Vote::set_public_keys(int index, const std::string& value) {
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline void UpdateVotesResponse_Vote::set_public_keys(int index, std::string&& value) {
  public_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline void UpdateVotesResponse_Vote::set_public_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline void UpdateVotesResponse_Vote::set_public_keys(int index, const char* value, size_t size) {
  public_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline std::string* UpdateVotesResponse_Vote::_internal_add_public_keys() {
  return public_keys_.Add();
}
inline void UpdateVotesResponse_Vote::add_public_keys(const std::string& value) {
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline void UpdateVotesResponse_Vote::add_public_keys(std::string&& value) {
  public_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline void UpdateVotesResponse_Vote::add_public_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline void UpdateVotesResponse_Vote::add_public_keys(const char* value, size_t size) {
  public_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.UpdateVotesResponse.Vote.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateVotesResponse_Vote::public_keys() const {
  // @@protoc_insertion_point(field_list:api_pb.UpdateVotesResponse.Vote.public_keys)
  return public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateVotesResponse_Vote::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.UpdateVotesResponse.Vote.public_keys)
  return &public_keys_;
}

// -------------------------------------------------------------------

// UpdateVotesResponse

// repeated .api_pb.UpdateVotesResponse.Vote votes = 1 [json_name = "votes"];
inline int UpdateVotesResponse::_internal_votes_size() const {
  return votes_.size();
}
inline int UpdateVotesResponse::votes_size() const {
  return _internal_votes_size();
}
inline void UpdateVotesResponse::clear_votes() {
  votes_.Clear();
}
inline ::api_pb::UpdateVotesResponse_Vote* UpdateVotesResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.UpdateVotesResponse.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::UpdateVotesResponse_Vote >*
UpdateVotesResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.UpdateVotesResponse.votes)
  return &votes_;
}
inline const ::api_pb::UpdateVotesResponse_Vote& UpdateVotesResponse::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const ::api_pb::UpdateVotesResponse_Vote& UpdateVotesResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.UpdateVotesResponse.votes)
  return _internal_votes(index);
}
inline ::api_pb::UpdateVotesResponse_Vote* UpdateVotesResponse::_internal_add_votes() {
  return votes_.Add();
}
inline ::api_pb::UpdateVotesResponse_Vote* UpdateVotesResponse::add_votes() {
  ::api_pb::UpdateVotesResponse_Vote* _add = _internal_add_votes();
  // @@protoc_insertion_point(field_add:api_pb.UpdateVotesResponse.votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::UpdateVotesResponse_Vote >&
UpdateVotesResponse::votes() const {
  // @@protoc_insertion_point(field_list:api_pb.UpdateVotesResponse.votes)
  return votes_;
}

// -------------------------------------------------------------------

// VersionNetworkRequest

// -------------------------------------------------------------------

// VersionNetworkResponse_Version

// string name = 1 [json_name = "name"];
inline void VersionNetworkResponse_Version::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& VersionNetworkResponse_Version::name() const {
  // @@protoc_insertion_point(field_get:api_pb.VersionNetworkResponse.Version.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionNetworkResponse_Version::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.VersionNetworkResponse.Version.name)
}
inline std::string* VersionNetworkResponse_Version::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:api_pb.VersionNetworkResponse.Version.name)
  return _s;
}
inline const std::string& VersionNetworkResponse_Version::_internal_name() const {
  return name_.Get();
}
inline void VersionNetworkResponse_Version::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VersionNetworkResponse_Version::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VersionNetworkResponse_Version::release_name() {
  // @@protoc_insertion_point(field_release:api_pb.VersionNetworkResponse.Version.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VersionNetworkResponse_Version::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.VersionNetworkResponse.Version.name)
}

// uint64 height = 2 [json_name = "height"];
inline void VersionNetworkResponse_Version::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionNetworkResponse_Version::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VersionNetworkResponse_Version::height() const {
  // @@protoc_insertion_point(field_get:api_pb.VersionNetworkResponse.Version.height)
  return _internal_height();
}
inline void VersionNetworkResponse_Version::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void VersionNetworkResponse_Version::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.VersionNetworkResponse.Version.height)
}

// -------------------------------------------------------------------

// VersionNetworkResponse

// string current = 1 [json_name = "current"];
inline void VersionNetworkResponse::clear_current() {
  current_.ClearToEmpty();
}
inline const std::string& VersionNetworkResponse::current() const {
  // @@protoc_insertion_point(field_get:api_pb.VersionNetworkResponse.current)
  return _internal_current();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VersionNetworkResponse::set_current(ArgT0&& arg0, ArgT... args) {
 
 current_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.VersionNetworkResponse.current)
}
inline std::string* VersionNetworkResponse::mutable_current() {
  std::string* _s = _internal_mutable_current();
  // @@protoc_insertion_point(field_mutable:api_pb.VersionNetworkResponse.current)
  return _s;
}
inline const std::string& VersionNetworkResponse::_internal_current() const {
  return current_.Get();
}
inline void VersionNetworkResponse::_internal_set_current(const std::string& value) {
  
  current_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VersionNetworkResponse::_internal_mutable_current() {
  
  return current_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VersionNetworkResponse::release_current() {
  // @@protoc_insertion_point(field_release:api_pb.VersionNetworkResponse.current)
  return current_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VersionNetworkResponse::set_allocated_current(std::string* current) {
  if (current != nullptr) {
    
  } else {
    
  }
  current_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), current,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.VersionNetworkResponse.current)
}

// repeated .api_pb.VersionNetworkResponse.Version versions = 3 [json_name = "versions"];
inline int VersionNetworkResponse::_internal_versions_size() const {
  return versions_.size();
}
inline int VersionNetworkResponse::versions_size() const {
  return _internal_versions_size();
}
inline void VersionNetworkResponse::clear_versions() {
  versions_.Clear();
}
inline ::api_pb::VersionNetworkResponse_Version* VersionNetworkResponse::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.VersionNetworkResponse.versions)
  return versions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::VersionNetworkResponse_Version >*
VersionNetworkResponse::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.VersionNetworkResponse.versions)
  return &versions_;
}
inline const ::api_pb::VersionNetworkResponse_Version& VersionNetworkResponse::_internal_versions(int index) const {
  return versions_.Get(index);
}
inline const ::api_pb::VersionNetworkResponse_Version& VersionNetworkResponse::versions(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.VersionNetworkResponse.versions)
  return _internal_versions(index);
}
inline ::api_pb::VersionNetworkResponse_Version* VersionNetworkResponse::_internal_add_versions() {
  return versions_.Add();
}
inline ::api_pb::VersionNetworkResponse_Version* VersionNetworkResponse::add_versions() {
  ::api_pb::VersionNetworkResponse_Version* _add = _internal_add_versions();
  // @@protoc_insertion_point(field_add:api_pb.VersionNetworkResponse.versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::VersionNetworkResponse_Version >&
VersionNetworkResponse::versions() const {
  // @@protoc_insertion_point(field_list:api_pb.VersionNetworkResponse.versions)
  return versions_;
}

// -------------------------------------------------------------------

// PriceCommissionRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PriceCommissionRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceCommissionRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PriceCommissionRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionRequest.height)
  return _internal_height();
}
inline void PriceCommissionRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void PriceCommissionRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionRequest.height)
}

// -------------------------------------------------------------------

// PriceCommissionResponse

// .api_pb.Coin coin = 3 [json_name = "coin"];
inline bool PriceCommissionResponse::_internal_has_coin() const {
  return this != internal_default_instance() && coin_ != nullptr;
}
inline bool PriceCommissionResponse::has_coin() const {
  return _internal_has_coin();
}
inline void PriceCommissionResponse::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
inline const ::api_pb::Coin& PriceCommissionResponse::_internal_coin() const {
  const ::api_pb::Coin* p = coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& PriceCommissionResponse::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.coin)
  return _internal_coin();
}
inline void PriceCommissionResponse::unsafe_arena_set_allocated_coin(
    ::api_pb::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_);
  }
  coin_ = coin;
  if (coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.PriceCommissionResponse.coin)
}
inline ::api_pb::Coin* PriceCommissionResponse::release_coin() {
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* PriceCommissionResponse::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.coin)
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* PriceCommissionResponse::_internal_mutable_coin() {
  
  if (coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_ = p;
  }
  return coin_;
}
inline ::api_pb::Coin* PriceCommissionResponse::mutable_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.coin)
  return _msg;
}
inline void PriceCommissionResponse::set_allocated_coin(::api_pb::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_;
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin);
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    
  } else {
    
  }
  coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.coin)
}

// string payload_byte = 4 [json_name = "payloadByte"];
inline void PriceCommissionResponse::clear_payload_byte() {
  payload_byte_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::payload_byte() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.payload_byte)
  return _internal_payload_byte();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_payload_byte(ArgT0&& arg0, ArgT... args) {
 
 payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.payload_byte)
}
inline std::string* PriceCommissionResponse::mutable_payload_byte() {
  std::string* _s = _internal_mutable_payload_byte();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.payload_byte)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_payload_byte() const {
  return payload_byte_.Get();
}
inline void PriceCommissionResponse::_internal_set_payload_byte(const std::string& value) {
  
  payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_payload_byte() {
  
  return payload_byte_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_payload_byte() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.payload_byte)
  return payload_byte_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_payload_byte(std::string* payload_byte) {
  if (payload_byte != nullptr) {
    
  } else {
    
  }
  payload_byte_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_byte,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.payload_byte)
}

// string send = 5 [json_name = "send"];
inline void PriceCommissionResponse::clear_send() {
  send_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::send() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.send)
  return _internal_send();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_send(ArgT0&& arg0, ArgT... args) {
 
 send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.send)
}
inline std::string* PriceCommissionResponse::mutable_send() {
  std::string* _s = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.send)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_send() const {
  return send_.Get();
}
inline void PriceCommissionResponse::_internal_set_send(const std::string& value) {
  
  send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_send() {
  
  return send_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_send() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.send)
  return send_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_send(std::string* send) {
  if (send != nullptr) {
    
  } else {
    
  }
  send_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), send,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.send)
}

// string buy_bancor = 38 [json_name = "buyBancor"];
inline void PriceCommissionResponse::clear_buy_bancor() {
  buy_bancor_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::buy_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.buy_bancor)
  return _internal_buy_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_buy_bancor(ArgT0&& arg0, ArgT... args) {
 
 buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.buy_bancor)
}
inline std::string* PriceCommissionResponse::mutable_buy_bancor() {
  std::string* _s = _internal_mutable_buy_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.buy_bancor)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_buy_bancor() const {
  return buy_bancor_.Get();
}
inline void PriceCommissionResponse::_internal_set_buy_bancor(const std::string& value) {
  
  buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_buy_bancor() {
  
  return buy_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_buy_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.buy_bancor)
  return buy_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_buy_bancor(std::string* buy_bancor) {
  if (buy_bancor != nullptr) {
    
  } else {
    
  }
  buy_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.buy_bancor)
}

// string sell_bancor = 39 [json_name = "sellBancor"];
inline void PriceCommissionResponse::clear_sell_bancor() {
  sell_bancor_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::sell_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.sell_bancor)
  return _internal_sell_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_sell_bancor(ArgT0&& arg0, ArgT... args) {
 
 sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.sell_bancor)
}
inline std::string* PriceCommissionResponse::mutable_sell_bancor() {
  std::string* _s = _internal_mutable_sell_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.sell_bancor)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_sell_bancor() const {
  return sell_bancor_.Get();
}
inline void PriceCommissionResponse::_internal_set_sell_bancor(const std::string& value) {
  
  sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_sell_bancor() {
  
  return sell_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_sell_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.sell_bancor)
  return sell_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_sell_bancor(std::string* sell_bancor) {
  if (sell_bancor != nullptr) {
    
  } else {
    
  }
  sell_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.sell_bancor)
}

// string sell_all_bancor = 40 [json_name = "sellAllBancor"];
inline void PriceCommissionResponse::clear_sell_all_bancor() {
  sell_all_bancor_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::sell_all_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.sell_all_bancor)
  return _internal_sell_all_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_sell_all_bancor(ArgT0&& arg0, ArgT... args) {
 
 sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.sell_all_bancor)
}
inline std::string* PriceCommissionResponse::mutable_sell_all_bancor() {
  std::string* _s = _internal_mutable_sell_all_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.sell_all_bancor)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_sell_all_bancor() const {
  return sell_all_bancor_.Get();
}
inline void PriceCommissionResponse::_internal_set_sell_all_bancor(const std::string& value) {
  
  sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_sell_all_bancor() {
  
  return sell_all_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_sell_all_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.sell_all_bancor)
  return sell_all_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_sell_all_bancor(std::string* sell_all_bancor) {
  if (sell_all_bancor != nullptr) {
    
  } else {
    
  }
  sell_all_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.sell_all_bancor)
}

// string buy_pool_base = 41 [json_name = "buyPoolBase"];
inline void PriceCommissionResponse::clear_buy_pool_base() {
  buy_pool_base_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::buy_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.buy_pool_base)
  return _internal_buy_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_buy_pool_base(ArgT0&& arg0, ArgT... args) {
 
 buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.buy_pool_base)
}
inline std::string* PriceCommissionResponse::mutable_buy_pool_base() {
  std::string* _s = _internal_mutable_buy_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.buy_pool_base)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_buy_pool_base() const {
  return buy_pool_base_.Get();
}
inline void PriceCommissionResponse::_internal_set_buy_pool_base(const std::string& value) {
  
  buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_buy_pool_base() {
  
  return buy_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_buy_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.buy_pool_base)
  return buy_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_buy_pool_base(std::string* buy_pool_base) {
  if (buy_pool_base != nullptr) {
    
  } else {
    
  }
  buy_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.buy_pool_base)
}

// string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
inline void PriceCommissionResponse::clear_buy_pool_delta() {
  buy_pool_delta_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::buy_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.buy_pool_delta)
  return _internal_buy_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_buy_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.buy_pool_delta)
}
inline std::string* PriceCommissionResponse::mutable_buy_pool_delta() {
  std::string* _s = _internal_mutable_buy_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.buy_pool_delta)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_buy_pool_delta() const {
  return buy_pool_delta_.Get();
}
inline void PriceCommissionResponse::_internal_set_buy_pool_delta(const std::string& value) {
  
  buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_buy_pool_delta() {
  
  return buy_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_buy_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.buy_pool_delta)
  return buy_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_buy_pool_delta(std::string* buy_pool_delta) {
  if (buy_pool_delta != nullptr) {
    
  } else {
    
  }
  buy_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.buy_pool_delta)
}

// string sell_pool_base = 42 [json_name = "sellPoolBase"];
inline void PriceCommissionResponse::clear_sell_pool_base() {
  sell_pool_base_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::sell_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.sell_pool_base)
  return _internal_sell_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_sell_pool_base(ArgT0&& arg0, ArgT... args) {
 
 sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.sell_pool_base)
}
inline std::string* PriceCommissionResponse::mutable_sell_pool_base() {
  std::string* _s = _internal_mutable_sell_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.sell_pool_base)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_sell_pool_base() const {
  return sell_pool_base_.Get();
}
inline void PriceCommissionResponse::_internal_set_sell_pool_base(const std::string& value) {
  
  sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_sell_pool_base() {
  
  return sell_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_sell_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.sell_pool_base)
  return sell_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_sell_pool_base(std::string* sell_pool_base) {
  if (sell_pool_base != nullptr) {
    
  } else {
    
  }
  sell_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.sell_pool_base)
}

// string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
inline void PriceCommissionResponse::clear_sell_pool_delta() {
  sell_pool_delta_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::sell_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.sell_pool_delta)
  return _internal_sell_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_sell_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.sell_pool_delta)
}
inline std::string* PriceCommissionResponse::mutable_sell_pool_delta() {
  std::string* _s = _internal_mutable_sell_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.sell_pool_delta)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_sell_pool_delta() const {
  return sell_pool_delta_.Get();
}
inline void PriceCommissionResponse::_internal_set_sell_pool_delta(const std::string& value) {
  
  sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_sell_pool_delta() {
  
  return sell_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_sell_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.sell_pool_delta)
  return sell_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_sell_pool_delta(std::string* sell_pool_delta) {
  if (sell_pool_delta != nullptr) {
    
  } else {
    
  }
  sell_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.sell_pool_delta)
}

// string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
inline void PriceCommissionResponse::clear_sell_all_pool_base() {
  sell_all_pool_base_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::sell_all_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.sell_all_pool_base)
  return _internal_sell_all_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_sell_all_pool_base(ArgT0&& arg0, ArgT... args) {
 
 sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.sell_all_pool_base)
}
inline std::string* PriceCommissionResponse::mutable_sell_all_pool_base() {
  std::string* _s = _internal_mutable_sell_all_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.sell_all_pool_base)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_sell_all_pool_base() const {
  return sell_all_pool_base_.Get();
}
inline void PriceCommissionResponse::_internal_set_sell_all_pool_base(const std::string& value) {
  
  sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_sell_all_pool_base() {
  
  return sell_all_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_sell_all_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.sell_all_pool_base)
  return sell_all_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_sell_all_pool_base(std::string* sell_all_pool_base) {
  if (sell_all_pool_base != nullptr) {
    
  } else {
    
  }
  sell_all_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.sell_all_pool_base)
}

// string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
inline void PriceCommissionResponse::clear_sell_all_pool_delta() {
  sell_all_pool_delta_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::sell_all_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.sell_all_pool_delta)
  return _internal_sell_all_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_sell_all_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.sell_all_pool_delta)
}
inline std::string* PriceCommissionResponse::mutable_sell_all_pool_delta() {
  std::string* _s = _internal_mutable_sell_all_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.sell_all_pool_delta)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_sell_all_pool_delta() const {
  return sell_all_pool_delta_.Get();
}
inline void PriceCommissionResponse::_internal_set_sell_all_pool_delta(const std::string& value) {
  
  sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_sell_all_pool_delta() {
  
  return sell_all_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_sell_all_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.sell_all_pool_delta)
  return sell_all_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_sell_all_pool_delta(std::string* sell_all_pool_delta) {
  if (sell_all_pool_delta != nullptr) {
    
  } else {
    
  }
  sell_all_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.sell_all_pool_delta)
}

// string create_ticker3 = 7 [json_name = "createTicker3"];
inline void PriceCommissionResponse::clear_create_ticker3() {
  create_ticker3_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_ticker3() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_ticker3)
  return _internal_create_ticker3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_ticker3(ArgT0&& arg0, ArgT... args) {
 
 create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_ticker3)
}
inline std::string* PriceCommissionResponse::mutable_create_ticker3() {
  std::string* _s = _internal_mutable_create_ticker3();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_ticker3)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_ticker3() const {
  return create_ticker3_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_ticker3(const std::string& value) {
  
  create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_ticker3() {
  
  return create_ticker3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_ticker3() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_ticker3)
  return create_ticker3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_ticker3(std::string* create_ticker3) {
  if (create_ticker3 != nullptr) {
    
  } else {
    
  }
  create_ticker3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker3,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_ticker3)
}

// string create_ticker4 = 8 [json_name = "createTicker4"];
inline void PriceCommissionResponse::clear_create_ticker4() {
  create_ticker4_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_ticker4() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_ticker4)
  return _internal_create_ticker4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_ticker4(ArgT0&& arg0, ArgT... args) {
 
 create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_ticker4)
}
inline std::string* PriceCommissionResponse::mutable_create_ticker4() {
  std::string* _s = _internal_mutable_create_ticker4();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_ticker4)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_ticker4() const {
  return create_ticker4_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_ticker4(const std::string& value) {
  
  create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_ticker4() {
  
  return create_ticker4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_ticker4() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_ticker4)
  return create_ticker4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_ticker4(std::string* create_ticker4) {
  if (create_ticker4 != nullptr) {
    
  } else {
    
  }
  create_ticker4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker4,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_ticker4)
}

// string create_ticker5 = 9 [json_name = "createTicker5"];
inline void PriceCommissionResponse::clear_create_ticker5() {
  create_ticker5_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_ticker5() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_ticker5)
  return _internal_create_ticker5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_ticker5(ArgT0&& arg0, ArgT... args) {
 
 create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_ticker5)
}
inline std::string* PriceCommissionResponse::mutable_create_ticker5() {
  std::string* _s = _internal_mutable_create_ticker5();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_ticker5)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_ticker5() const {
  return create_ticker5_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_ticker5(const std::string& value) {
  
  create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_ticker5() {
  
  return create_ticker5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_ticker5() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_ticker5)
  return create_ticker5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_ticker5(std::string* create_ticker5) {
  if (create_ticker5 != nullptr) {
    
  } else {
    
  }
  create_ticker5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_ticker5)
}

// string create_ticker6 = 10 [json_name = "createTicker6"];
inline void PriceCommissionResponse::clear_create_ticker6() {
  create_ticker6_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_ticker6() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_ticker6)
  return _internal_create_ticker6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_ticker6(ArgT0&& arg0, ArgT... args) {
 
 create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_ticker6)
}
inline std::string* PriceCommissionResponse::mutable_create_ticker6() {
  std::string* _s = _internal_mutable_create_ticker6();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_ticker6)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_ticker6() const {
  return create_ticker6_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_ticker6(const std::string& value) {
  
  create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_ticker6() {
  
  return create_ticker6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_ticker6() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_ticker6)
  return create_ticker6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_ticker6(std::string* create_ticker6) {
  if (create_ticker6 != nullptr) {
    
  } else {
    
  }
  create_ticker6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker6,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_ticker6)
}

// string create_ticker7_10 = 11 [json_name = "createTicker710"];
inline void PriceCommissionResponse::clear_create_ticker7_10() {
  create_ticker7_10_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_ticker7_10() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_ticker7_10)
  return _internal_create_ticker7_10();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_ticker7_10(ArgT0&& arg0, ArgT... args) {
 
 create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_ticker7_10)
}
inline std::string* PriceCommissionResponse::mutable_create_ticker7_10() {
  std::string* _s = _internal_mutable_create_ticker7_10();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_ticker7_10)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_ticker7_10() const {
  return create_ticker7_10_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_ticker7_10(const std::string& value) {
  
  create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_ticker7_10() {
  
  return create_ticker7_10_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_ticker7_10() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_ticker7_10)
  return create_ticker7_10_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_ticker7_10(std::string* create_ticker7_10) {
  if (create_ticker7_10 != nullptr) {
    
  } else {
    
  }
  create_ticker7_10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker7_10,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_ticker7_10)
}

// string create_coin = 34 [json_name = "createCoin"];
inline void PriceCommissionResponse::clear_create_coin() {
  create_coin_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_coin)
  return _internal_create_coin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_coin(ArgT0&& arg0, ArgT... args) {
 
 create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_coin)
}
inline std::string* PriceCommissionResponse::mutable_create_coin() {
  std::string* _s = _internal_mutable_create_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_coin)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_coin() const {
  return create_coin_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_coin(const std::string& value) {
  
  create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_coin() {
  
  return create_coin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_coin() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_coin)
  return create_coin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_coin(std::string* create_coin) {
  if (create_coin != nullptr) {
    
  } else {
    
  }
  create_coin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_coin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_coin)
}

// string create_token = 35 [json_name = "createToken"];
inline void PriceCommissionResponse::clear_create_token() {
  create_token_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_token() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_token)
  return _internal_create_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_token(ArgT0&& arg0, ArgT... args) {
 
 create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_token)
}
inline std::string* PriceCommissionResponse::mutable_create_token() {
  std::string* _s = _internal_mutable_create_token();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_token)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_token() const {
  return create_token_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_token(const std::string& value) {
  
  create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_token() {
  
  return create_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_token() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_token)
  return create_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_token(std::string* create_token) {
  if (create_token != nullptr) {
    
  } else {
    
  }
  create_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_token)
}

// string recreate_coin = 36 [json_name = "recreateCoin"];
inline void PriceCommissionResponse::clear_recreate_coin() {
  recreate_coin_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::recreate_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.recreate_coin)
  return _internal_recreate_coin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_recreate_coin(ArgT0&& arg0, ArgT... args) {
 
 recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.recreate_coin)
}
inline std::string* PriceCommissionResponse::mutable_recreate_coin() {
  std::string* _s = _internal_mutable_recreate_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.recreate_coin)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_recreate_coin() const {
  return recreate_coin_.Get();
}
inline void PriceCommissionResponse::_internal_set_recreate_coin(const std::string& value) {
  
  recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_recreate_coin() {
  
  return recreate_coin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_recreate_coin() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.recreate_coin)
  return recreate_coin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_recreate_coin(std::string* recreate_coin) {
  if (recreate_coin != nullptr) {
    
  } else {
    
  }
  recreate_coin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recreate_coin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.recreate_coin)
}

// string recreate_token = 37 [json_name = "recreateToken"];
inline void PriceCommissionResponse::clear_recreate_token() {
  recreate_token_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::recreate_token() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.recreate_token)
  return _internal_recreate_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_recreate_token(ArgT0&& arg0, ArgT... args) {
 
 recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.recreate_token)
}
inline std::string* PriceCommissionResponse::mutable_recreate_token() {
  std::string* _s = _internal_mutable_recreate_token();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.recreate_token)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_recreate_token() const {
  return recreate_token_.Get();
}
inline void PriceCommissionResponse::_internal_set_recreate_token(const std::string& value) {
  
  recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_recreate_token() {
  
  return recreate_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_recreate_token() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.recreate_token)
  return recreate_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_recreate_token(std::string* recreate_token) {
  if (recreate_token != nullptr) {
    
  } else {
    
  }
  recreate_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recreate_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.recreate_token)
}

// string declare_candidacy = 13 [json_name = "declareCandidacy"];
inline void PriceCommissionResponse::clear_declare_candidacy() {
  declare_candidacy_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::declare_candidacy() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.declare_candidacy)
  return _internal_declare_candidacy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_declare_candidacy(ArgT0&& arg0, ArgT... args) {
 
 declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.declare_candidacy)
}
inline std::string* PriceCommissionResponse::mutable_declare_candidacy() {
  std::string* _s = _internal_mutable_declare_candidacy();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.declare_candidacy)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_declare_candidacy() const {
  return declare_candidacy_.Get();
}
inline void PriceCommissionResponse::_internal_set_declare_candidacy(const std::string& value) {
  
  declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_declare_candidacy() {
  
  return declare_candidacy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_declare_candidacy() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.declare_candidacy)
  return declare_candidacy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_declare_candidacy(std::string* declare_candidacy) {
  if (declare_candidacy != nullptr) {
    
  } else {
    
  }
  declare_candidacy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), declare_candidacy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.declare_candidacy)
}

// string delegate = 14 [json_name = "delegate"];
inline void PriceCommissionResponse::clear_delegate() {
  delegate_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::delegate() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.delegate)
  return _internal_delegate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_delegate(ArgT0&& arg0, ArgT... args) {
 
 delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.delegate)
}
inline std::string* PriceCommissionResponse::mutable_delegate() {
  std::string* _s = _internal_mutable_delegate();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.delegate)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_delegate() const {
  return delegate_.Get();
}
inline void PriceCommissionResponse::_internal_set_delegate(const std::string& value) {
  
  delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_delegate() {
  
  return delegate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_delegate() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.delegate)
  return delegate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_delegate(std::string* delegate) {
  if (delegate != nullptr) {
    
  } else {
    
  }
  delegate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.delegate)
}

// string unbond = 15 [json_name = "unbond"];
inline void PriceCommissionResponse::clear_unbond() {
  unbond_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::unbond() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.unbond)
  return _internal_unbond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_unbond(ArgT0&& arg0, ArgT... args) {
 
 unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.unbond)
}
inline std::string* PriceCommissionResponse::mutable_unbond() {
  std::string* _s = _internal_mutable_unbond();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.unbond)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_unbond() const {
  return unbond_.Get();
}
inline void PriceCommissionResponse::_internal_set_unbond(const std::string& value) {
  
  unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_unbond() {
  
  return unbond_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_unbond() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.unbond)
  return unbond_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_unbond(std::string* unbond) {
  if (unbond != nullptr) {
    
  } else {
    
  }
  unbond_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unbond,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.unbond)
}

// string redeem_check = 16 [json_name = "redeemCheck"];
inline void PriceCommissionResponse::clear_redeem_check() {
  redeem_check_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::redeem_check() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.redeem_check)
  return _internal_redeem_check();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_redeem_check(ArgT0&& arg0, ArgT... args) {
 
 redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.redeem_check)
}
inline std::string* PriceCommissionResponse::mutable_redeem_check() {
  std::string* _s = _internal_mutable_redeem_check();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.redeem_check)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_redeem_check() const {
  return redeem_check_.Get();
}
inline void PriceCommissionResponse::_internal_set_redeem_check(const std::string& value) {
  
  redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_redeem_check() {
  
  return redeem_check_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_redeem_check() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.redeem_check)
  return redeem_check_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_redeem_check(std::string* redeem_check) {
  if (redeem_check != nullptr) {
    
  } else {
    
  }
  redeem_check_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redeem_check,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.redeem_check)
}

// string set_candidate_on = 44 [json_name = "setCandidateOn"];
inline void PriceCommissionResponse::clear_set_candidate_on() {
  set_candidate_on_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::set_candidate_on() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.set_candidate_on)
  return _internal_set_candidate_on();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_set_candidate_on(ArgT0&& arg0, ArgT... args) {
 
 set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.set_candidate_on)
}
inline std::string* PriceCommissionResponse::mutable_set_candidate_on() {
  std::string* _s = _internal_mutable_set_candidate_on();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.set_candidate_on)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_set_candidate_on() const {
  return set_candidate_on_.Get();
}
inline void PriceCommissionResponse::_internal_set_set_candidate_on(const std::string& value) {
  
  set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_set_candidate_on() {
  
  return set_candidate_on_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_set_candidate_on() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.set_candidate_on)
  return set_candidate_on_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_set_candidate_on(std::string* set_candidate_on) {
  if (set_candidate_on != nullptr) {
    
  } else {
    
  }
  set_candidate_on_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_candidate_on,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.set_candidate_on)
}

// string set_candidate_off = 45 [json_name = "setCandidateOff"];
inline void PriceCommissionResponse::clear_set_candidate_off() {
  set_candidate_off_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::set_candidate_off() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.set_candidate_off)
  return _internal_set_candidate_off();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_set_candidate_off(ArgT0&& arg0, ArgT... args) {
 
 set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.set_candidate_off)
}
inline std::string* PriceCommissionResponse::mutable_set_candidate_off() {
  std::string* _s = _internal_mutable_set_candidate_off();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.set_candidate_off)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_set_candidate_off() const {
  return set_candidate_off_.Get();
}
inline void PriceCommissionResponse::_internal_set_set_candidate_off(const std::string& value) {
  
  set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_set_candidate_off() {
  
  return set_candidate_off_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_set_candidate_off() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.set_candidate_off)
  return set_candidate_off_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_set_candidate_off(std::string* set_candidate_off) {
  if (set_candidate_off != nullptr) {
    
  } else {
    
  }
  set_candidate_off_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_candidate_off,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.set_candidate_off)
}

// string create_multisig = 18 [json_name = "createMultisig"];
inline void PriceCommissionResponse::clear_create_multisig() {
  create_multisig_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_multisig)
  return _internal_create_multisig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_multisig(ArgT0&& arg0, ArgT... args) {
 
 create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_multisig)
}
inline std::string* PriceCommissionResponse::mutable_create_multisig() {
  std::string* _s = _internal_mutable_create_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_multisig)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_multisig() const {
  return create_multisig_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_multisig(const std::string& value) {
  
  create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_multisig() {
  
  return create_multisig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_multisig)
  return create_multisig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_multisig(std::string* create_multisig) {
  if (create_multisig != nullptr) {
    
  } else {
    
  }
  create_multisig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_multisig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_multisig)
}

// string multisend_base = 51 [json_name = "multisendBase"];
inline void PriceCommissionResponse::clear_multisend_base() {
  multisend_base_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::multisend_base() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.multisend_base)
  return _internal_multisend_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_multisend_base(ArgT0&& arg0, ArgT... args) {
 
 multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.multisend_base)
}
inline std::string* PriceCommissionResponse::mutable_multisend_base() {
  std::string* _s = _internal_mutable_multisend_base();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.multisend_base)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_multisend_base() const {
  return multisend_base_.Get();
}
inline void PriceCommissionResponse::_internal_set_multisend_base(const std::string& value) {
  
  multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_multisend_base() {
  
  return multisend_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_multisend_base() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.multisend_base)
  return multisend_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_multisend_base(std::string* multisend_base) {
  if (multisend_base != nullptr) {
    
  } else {
    
  }
  multisend_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multisend_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.multisend_base)
}

// string multisend_delta = 52 [json_name = "multisendDelta"];
inline void PriceCommissionResponse::clear_multisend_delta() {
  multisend_delta_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::multisend_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.multisend_delta)
  return _internal_multisend_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_multisend_delta(ArgT0&& arg0, ArgT... args) {
 
 multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.multisend_delta)
}
inline std::string* PriceCommissionResponse::mutable_multisend_delta() {
  std::string* _s = _internal_mutable_multisend_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.multisend_delta)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_multisend_delta() const {
  return multisend_delta_.Get();
}
inline void PriceCommissionResponse::_internal_set_multisend_delta(const std::string& value) {
  
  multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_multisend_delta() {
  
  return multisend_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_multisend_delta() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.multisend_delta)
  return multisend_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_multisend_delta(std::string* multisend_delta) {
  if (multisend_delta != nullptr) {
    
  } else {
    
  }
  multisend_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multisend_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.multisend_delta)
}

// string edit_candidate = 20 [json_name = "editCandidate"];
inline void PriceCommissionResponse::clear_edit_candidate() {
  edit_candidate_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::edit_candidate() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.edit_candidate)
  return _internal_edit_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_edit_candidate(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.edit_candidate)
}
inline std::string* PriceCommissionResponse::mutable_edit_candidate() {
  std::string* _s = _internal_mutable_edit_candidate();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.edit_candidate)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_edit_candidate() const {
  return edit_candidate_.Get();
}
inline void PriceCommissionResponse::_internal_set_edit_candidate(const std::string& value) {
  
  edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_edit_candidate() {
  
  return edit_candidate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_edit_candidate() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.edit_candidate)
  return edit_candidate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_edit_candidate(std::string* edit_candidate) {
  if (edit_candidate != nullptr) {
    
  } else {
    
  }
  edit_candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.edit_candidate)
}

// string set_halt_block = 21 [json_name = "setHaltBlock"];
inline void PriceCommissionResponse::clear_set_halt_block() {
  set_halt_block_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::set_halt_block() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.set_halt_block)
  return _internal_set_halt_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_set_halt_block(ArgT0&& arg0, ArgT... args) {
 
 set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.set_halt_block)
}
inline std::string* PriceCommissionResponse::mutable_set_halt_block() {
  std::string* _s = _internal_mutable_set_halt_block();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.set_halt_block)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_set_halt_block() const {
  return set_halt_block_.Get();
}
inline void PriceCommissionResponse::_internal_set_set_halt_block(const std::string& value) {
  
  set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_set_halt_block() {
  
  return set_halt_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_set_halt_block() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.set_halt_block)
  return set_halt_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_set_halt_block(std::string* set_halt_block) {
  if (set_halt_block != nullptr) {
    
  } else {
    
  }
  set_halt_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_halt_block,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.set_halt_block)
}

// string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
inline void PriceCommissionResponse::clear_edit_ticker_owner() {
  edit_ticker_owner_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::edit_ticker_owner() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.edit_ticker_owner)
  return _internal_edit_ticker_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_edit_ticker_owner(ArgT0&& arg0, ArgT... args) {
 
 edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.edit_ticker_owner)
}
inline std::string* PriceCommissionResponse::mutable_edit_ticker_owner() {
  std::string* _s = _internal_mutable_edit_ticker_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.edit_ticker_owner)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_edit_ticker_owner() const {
  return edit_ticker_owner_.Get();
}
inline void PriceCommissionResponse::_internal_set_edit_ticker_owner(const std::string& value) {
  
  edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_edit_ticker_owner() {
  
  return edit_ticker_owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_edit_ticker_owner() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.edit_ticker_owner)
  return edit_ticker_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_edit_ticker_owner(std::string* edit_ticker_owner) {
  if (edit_ticker_owner != nullptr) {
    
  } else {
    
  }
  edit_ticker_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_ticker_owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.edit_ticker_owner)
}

// string edit_multisig = 23 [json_name = "editMultisig"];
inline void PriceCommissionResponse::clear_edit_multisig() {
  edit_multisig_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::edit_multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.edit_multisig)
  return _internal_edit_multisig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_edit_multisig(ArgT0&& arg0, ArgT... args) {
 
 edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.edit_multisig)
}
inline std::string* PriceCommissionResponse::mutable_edit_multisig() {
  std::string* _s = _internal_mutable_edit_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.edit_multisig)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_edit_multisig() const {
  return edit_multisig_.Get();
}
inline void PriceCommissionResponse::_internal_set_edit_multisig(const std::string& value) {
  
  edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_edit_multisig() {
  
  return edit_multisig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_edit_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.edit_multisig)
  return edit_multisig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_edit_multisig(std::string* edit_multisig) {
  if (edit_multisig != nullptr) {
    
  } else {
    
  }
  edit_multisig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_multisig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.edit_multisig)
}

// string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
inline void PriceCommissionResponse::clear_edit_candidate_public_key() {
  edit_candidate_public_key_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::edit_candidate_public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.edit_candidate_public_key)
  return _internal_edit_candidate_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_edit_candidate_public_key(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.edit_candidate_public_key)
}
inline std::string* PriceCommissionResponse::mutable_edit_candidate_public_key() {
  std::string* _s = _internal_mutable_edit_candidate_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.edit_candidate_public_key)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_edit_candidate_public_key() const {
  return edit_candidate_public_key_.Get();
}
inline void PriceCommissionResponse::_internal_set_edit_candidate_public_key(const std::string& value) {
  
  edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_edit_candidate_public_key() {
  
  return edit_candidate_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_edit_candidate_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.edit_candidate_public_key)
  return edit_candidate_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_edit_candidate_public_key(std::string* edit_candidate_public_key) {
  if (edit_candidate_public_key != nullptr) {
    
  } else {
    
  }
  edit_candidate_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate_public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.edit_candidate_public_key)
}

// string create_swap_pool = 48 [json_name = "createSwapPool"];
inline void PriceCommissionResponse::clear_create_swap_pool() {
  create_swap_pool_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::create_swap_pool() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.create_swap_pool)
  return _internal_create_swap_pool();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_create_swap_pool(ArgT0&& arg0, ArgT... args) {
 
 create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.create_swap_pool)
}
inline std::string* PriceCommissionResponse::mutable_create_swap_pool() {
  std::string* _s = _internal_mutable_create_swap_pool();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.create_swap_pool)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_create_swap_pool() const {
  return create_swap_pool_.Get();
}
inline void PriceCommissionResponse::_internal_set_create_swap_pool(const std::string& value) {
  
  create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_create_swap_pool() {
  
  return create_swap_pool_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_create_swap_pool() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.create_swap_pool)
  return create_swap_pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_create_swap_pool(std::string* create_swap_pool) {
  if (create_swap_pool != nullptr) {
    
  } else {
    
  }
  create_swap_pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_swap_pool,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.create_swap_pool)
}

// string add_liquidity = 49 [json_name = "addLiquidity"];
inline void PriceCommissionResponse::clear_add_liquidity() {
  add_liquidity_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::add_liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.add_liquidity)
  return _internal_add_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_add_liquidity(ArgT0&& arg0, ArgT... args) {
 
 add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.add_liquidity)
}
inline std::string* PriceCommissionResponse::mutable_add_liquidity() {
  std::string* _s = _internal_mutable_add_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.add_liquidity)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_add_liquidity() const {
  return add_liquidity_.Get();
}
inline void PriceCommissionResponse::_internal_set_add_liquidity(const std::string& value) {
  
  add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_add_liquidity() {
  
  return add_liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_add_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.add_liquidity)
  return add_liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_add_liquidity(std::string* add_liquidity) {
  if (add_liquidity != nullptr) {
    
  } else {
    
  }
  add_liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.add_liquidity)
}

// string remove_liquidity = 50 [json_name = "removeLiquidity"];
inline void PriceCommissionResponse::clear_remove_liquidity() {
  remove_liquidity_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::remove_liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.remove_liquidity)
  return _internal_remove_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_remove_liquidity(ArgT0&& arg0, ArgT... args) {
 
 remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.remove_liquidity)
}
inline std::string* PriceCommissionResponse::mutable_remove_liquidity() {
  std::string* _s = _internal_mutable_remove_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.remove_liquidity)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_remove_liquidity() const {
  return remove_liquidity_.Get();
}
inline void PriceCommissionResponse::_internal_set_remove_liquidity(const std::string& value) {
  
  remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_remove_liquidity() {
  
  return remove_liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_remove_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.remove_liquidity)
  return remove_liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_remove_liquidity(std::string* remove_liquidity) {
  if (remove_liquidity != nullptr) {
    
  } else {
    
  }
  remove_liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remove_liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.remove_liquidity)
}

// string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
inline void PriceCommissionResponse::clear_edit_candidate_commission() {
  edit_candidate_commission_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::edit_candidate_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.edit_candidate_commission)
  return _internal_edit_candidate_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_edit_candidate_commission(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.edit_candidate_commission)
}
inline std::string* PriceCommissionResponse::mutable_edit_candidate_commission() {
  std::string* _s = _internal_mutable_edit_candidate_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.edit_candidate_commission)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_edit_candidate_commission() const {
  return edit_candidate_commission_.Get();
}
inline void PriceCommissionResponse::_internal_set_edit_candidate_commission(const std::string& value) {
  
  edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_edit_candidate_commission() {
  
  return edit_candidate_commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_edit_candidate_commission() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.edit_candidate_commission)
  return edit_candidate_commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_edit_candidate_commission(std::string* edit_candidate_commission) {
  if (edit_candidate_commission != nullptr) {
    
  } else {
    
  }
  edit_candidate_commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate_commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.edit_candidate_commission)
}

// string mint_token = 46 [json_name = "mintToken"];
inline void PriceCommissionResponse::clear_mint_token() {
  mint_token_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::mint_token() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.mint_token)
  return _internal_mint_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_mint_token(ArgT0&& arg0, ArgT... args) {
 
 mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.mint_token)
}
inline std::string* PriceCommissionResponse::mutable_mint_token() {
  std::string* _s = _internal_mutable_mint_token();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.mint_token)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_mint_token() const {
  return mint_token_.Get();
}
inline void PriceCommissionResponse::_internal_set_mint_token(const std::string& value) {
  
  mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_mint_token() {
  
  return mint_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_mint_token() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.mint_token)
  return mint_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_mint_token(std::string* mint_token) {
  if (mint_token != nullptr) {
    
  } else {
    
  }
  mint_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mint_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.mint_token)
}

// string burn_token = 47 [json_name = "burnToken"];
inline void PriceCommissionResponse::clear_burn_token() {
  burn_token_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::burn_token() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.burn_token)
  return _internal_burn_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_burn_token(ArgT0&& arg0, ArgT... args) {
 
 burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.burn_token)
}
inline std::string* PriceCommissionResponse::mutable_burn_token() {
  std::string* _s = _internal_mutable_burn_token();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.burn_token)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_burn_token() const {
  return burn_token_.Get();
}
inline void PriceCommissionResponse::_internal_set_burn_token(const std::string& value) {
  
  burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_burn_token() {
  
  return burn_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_burn_token() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.burn_token)
  return burn_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_burn_token(std::string* burn_token) {
  if (burn_token != nullptr) {
    
  } else {
    
  }
  burn_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), burn_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.burn_token)
}

// string vote_commission = 31 [json_name = "voteCommission"];
inline void PriceCommissionResponse::clear_vote_commission() {
  vote_commission_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::vote_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.vote_commission)
  return _internal_vote_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_vote_commission(ArgT0&& arg0, ArgT... args) {
 
 vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.vote_commission)
}
inline std::string* PriceCommissionResponse::mutable_vote_commission() {
  std::string* _s = _internal_mutable_vote_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.vote_commission)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_vote_commission() const {
  return vote_commission_.Get();
}
inline void PriceCommissionResponse::_internal_set_vote_commission(const std::string& value) {
  
  vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_vote_commission() {
  
  return vote_commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_vote_commission() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.vote_commission)
  return vote_commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_vote_commission(std::string* vote_commission) {
  if (vote_commission != nullptr) {
    
  } else {
    
  }
  vote_commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.vote_commission)
}

// string vote_update = 32 [json_name = "voteUpdate"];
inline void PriceCommissionResponse::clear_vote_update() {
  vote_update_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::vote_update() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.vote_update)
  return _internal_vote_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_vote_update(ArgT0&& arg0, ArgT... args) {
 
 vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.vote_update)
}
inline std::string* PriceCommissionResponse::mutable_vote_update() {
  std::string* _s = _internal_mutable_vote_update();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.vote_update)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_vote_update() const {
  return vote_update_.Get();
}
inline void PriceCommissionResponse::_internal_set_vote_update(const std::string& value) {
  
  vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_vote_update() {
  
  return vote_update_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_vote_update() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.vote_update)
  return vote_update_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_vote_update(std::string* vote_update) {
  if (vote_update != nullptr) {
    
  } else {
    
  }
  vote_update_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_update,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.vote_update)
}

// string failed_tx = 56 [json_name = "failedTx"];
inline void PriceCommissionResponse::clear_failed_tx() {
  failed_tx_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::failed_tx() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.failed_tx)
  return _internal_failed_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_failed_tx(ArgT0&& arg0, ArgT... args) {
 
 failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.failed_tx)
}
inline std::string* PriceCommissionResponse::mutable_failed_tx() {
  std::string* _s = _internal_mutable_failed_tx();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.failed_tx)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_failed_tx() const {
  return failed_tx_.Get();
}
inline void PriceCommissionResponse::_internal_set_failed_tx(const std::string& value) {
  
  failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_failed_tx() {
  
  return failed_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_failed_tx() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.failed_tx)
  return failed_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_failed_tx(std::string* failed_tx) {
  if (failed_tx != nullptr) {
    
  } else {
    
  }
  failed_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failed_tx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.failed_tx)
}

// string add_limit_order = 57 [json_name = "addLimitOrder"];
inline void PriceCommissionResponse::clear_add_limit_order() {
  add_limit_order_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::add_limit_order() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.add_limit_order)
  return _internal_add_limit_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_add_limit_order(ArgT0&& arg0, ArgT... args) {
 
 add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.add_limit_order)
}
inline std::string* PriceCommissionResponse::mutable_add_limit_order() {
  std::string* _s = _internal_mutable_add_limit_order();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.add_limit_order)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_add_limit_order() const {
  return add_limit_order_.Get();
}
inline void PriceCommissionResponse::_internal_set_add_limit_order(const std::string& value) {
  
  add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_add_limit_order() {
  
  return add_limit_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_add_limit_order() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.add_limit_order)
  return add_limit_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_add_limit_order(std::string* add_limit_order) {
  if (add_limit_order != nullptr) {
    
  } else {
    
  }
  add_limit_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_limit_order,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.add_limit_order)
}

// string remove_limit_order = 58 [json_name = "removeLimitOrder"];
inline void PriceCommissionResponse::clear_remove_limit_order() {
  remove_limit_order_.ClearToEmpty();
}
inline const std::string& PriceCommissionResponse::remove_limit_order() const {
  // @@protoc_insertion_point(field_get:api_pb.PriceCommissionResponse.remove_limit_order)
  return _internal_remove_limit_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PriceCommissionResponse::set_remove_limit_order(ArgT0&& arg0, ArgT... args) {
 
 remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.PriceCommissionResponse.remove_limit_order)
}
inline std::string* PriceCommissionResponse::mutable_remove_limit_order() {
  std::string* _s = _internal_mutable_remove_limit_order();
  // @@protoc_insertion_point(field_mutable:api_pb.PriceCommissionResponse.remove_limit_order)
  return _s;
}
inline const std::string& PriceCommissionResponse::_internal_remove_limit_order() const {
  return remove_limit_order_.Get();
}
inline void PriceCommissionResponse::_internal_set_remove_limit_order(const std::string& value) {
  
  remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::_internal_mutable_remove_limit_order() {
  
  return remove_limit_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PriceCommissionResponse::release_remove_limit_order() {
  // @@protoc_insertion_point(field_release:api_pb.PriceCommissionResponse.remove_limit_order)
  return remove_limit_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PriceCommissionResponse::set_allocated_remove_limit_order(std::string* remove_limit_order) {
  if (remove_limit_order != nullptr) {
    
  } else {
    
  }
  remove_limit_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remove_limit_order,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.PriceCommissionResponse.remove_limit_order)
}

// -------------------------------------------------------------------

// SwapPoolRequest

// uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SwapPoolRequest::clear_coin0() {
  coin0_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolRequest::_internal_coin0() const {
  return coin0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolRequest::coin0() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolRequest.coin0)
  return _internal_coin0();
}
inline void SwapPoolRequest::_internal_set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin0_ = value;
}
inline void SwapPoolRequest::set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin0(value);
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolRequest.coin0)
}

// uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SwapPoolRequest::clear_coin1() {
  coin1_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolRequest::_internal_coin1() const {
  return coin1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolRequest::coin1() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolRequest.coin1)
  return _internal_coin1();
}
inline void SwapPoolRequest::_internal_set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin1_ = value;
}
inline void SwapPoolRequest::set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin1(value);
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolRequest.coin1)
}

// uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SwapPoolRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolRequest.height)
  return _internal_height();
}
inline void SwapPoolRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void SwapPoolRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolRequest.height)
}

// -------------------------------------------------------------------

// SwapPoolResponse

// string price = 4 [json_name = "price"];
inline void SwapPoolResponse::clear_price() {
  price_.ClearToEmpty();
}
inline const std::string& SwapPoolResponse::price() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolResponse.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapPoolResponse::set_price(ArgT0&& arg0, ArgT... args) {
 
 price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolResponse.price)
}
inline std::string* SwapPoolResponse::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:api_pb.SwapPoolResponse.price)
  return _s;
}
inline const std::string& SwapPoolResponse::_internal_price() const {
  return price_.Get();
}
inline void SwapPoolResponse::_internal_set_price(const std::string& value) {
  
  price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::_internal_mutable_price() {
  
  return price_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::release_price() {
  // @@protoc_insertion_point(field_release:api_pb.SwapPoolResponse.price)
  return price_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapPoolResponse::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  price_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), price,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SwapPoolResponse.price)
}

// string amount0 = 1 [json_name = "amount0"];
inline void SwapPoolResponse::clear_amount0() {
  amount0_.ClearToEmpty();
}
inline const std::string& SwapPoolResponse::amount0() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolResponse.amount0)
  return _internal_amount0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapPoolResponse::set_amount0(ArgT0&& arg0, ArgT... args) {
 
 amount0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolResponse.amount0)
}
inline std::string* SwapPoolResponse::mutable_amount0() {
  std::string* _s = _internal_mutable_amount0();
  // @@protoc_insertion_point(field_mutable:api_pb.SwapPoolResponse.amount0)
  return _s;
}
inline const std::string& SwapPoolResponse::_internal_amount0() const {
  return amount0_.Get();
}
inline void SwapPoolResponse::_internal_set_amount0(const std::string& value) {
  
  amount0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::_internal_mutable_amount0() {
  
  return amount0_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::release_amount0() {
  // @@protoc_insertion_point(field_release:api_pb.SwapPoolResponse.amount0)
  return amount0_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapPoolResponse::set_allocated_amount0(std::string* amount0) {
  if (amount0 != nullptr) {
    
  } else {
    
  }
  amount0_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount0,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SwapPoolResponse.amount0)
}

// string amount1 = 2 [json_name = "amount1"];
inline void SwapPoolResponse::clear_amount1() {
  amount1_.ClearToEmpty();
}
inline const std::string& SwapPoolResponse::amount1() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolResponse.amount1)
  return _internal_amount1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapPoolResponse::set_amount1(ArgT0&& arg0, ArgT... args) {
 
 amount1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolResponse.amount1)
}
inline std::string* SwapPoolResponse::mutable_amount1() {
  std::string* _s = _internal_mutable_amount1();
  // @@protoc_insertion_point(field_mutable:api_pb.SwapPoolResponse.amount1)
  return _s;
}
inline const std::string& SwapPoolResponse::_internal_amount1() const {
  return amount1_.Get();
}
inline void SwapPoolResponse::_internal_set_amount1(const std::string& value) {
  
  amount1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::_internal_mutable_amount1() {
  
  return amount1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::release_amount1() {
  // @@protoc_insertion_point(field_release:api_pb.SwapPoolResponse.amount1)
  return amount1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapPoolResponse::set_allocated_amount1(std::string* amount1) {
  if (amount1 != nullptr) {
    
  } else {
    
  }
  amount1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SwapPoolResponse.amount1)
}

// string liquidity = 3 [json_name = "liquidity"];
inline void SwapPoolResponse::clear_liquidity() {
  liquidity_.ClearToEmpty();
}
inline const std::string& SwapPoolResponse::liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolResponse.liquidity)
  return _internal_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapPoolResponse::set_liquidity(ArgT0&& arg0, ArgT... args) {
 
 liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolResponse.liquidity)
}
inline std::string* SwapPoolResponse::mutable_liquidity() {
  std::string* _s = _internal_mutable_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.SwapPoolResponse.liquidity)
  return _s;
}
inline const std::string& SwapPoolResponse::_internal_liquidity() const {
  return liquidity_.Get();
}
inline void SwapPoolResponse::_internal_set_liquidity(const std::string& value) {
  
  liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::_internal_mutable_liquidity() {
  
  return liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapPoolResponse::release_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.SwapPoolResponse.liquidity)
  return liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapPoolResponse::set_allocated_liquidity(std::string* liquidity) {
  if (liquidity != nullptr) {
    
  } else {
    
  }
  liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SwapPoolResponse.liquidity)
}

// -------------------------------------------------------------------

// SwapPoolProviderRequest

// uint64 coin0 = 1 [json_name = "coin0", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SwapPoolProviderRequest::clear_coin0() {
  coin0_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolProviderRequest::_internal_coin0() const {
  return coin0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolProviderRequest::coin0() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolProviderRequest.coin0)
  return _internal_coin0();
}
inline void SwapPoolProviderRequest::_internal_set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin0_ = value;
}
inline void SwapPoolProviderRequest::set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin0(value);
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolProviderRequest.coin0)
}

// uint64 coin1 = 2 [json_name = "coin1", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SwapPoolProviderRequest::clear_coin1() {
  coin1_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolProviderRequest::_internal_coin1() const {
  return coin1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolProviderRequest::coin1() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolProviderRequest.coin1)
  return _internal_coin1();
}
inline void SwapPoolProviderRequest::_internal_set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin1_ = value;
}
inline void SwapPoolProviderRequest::set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin1(value);
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolProviderRequest.coin1)
}

// string provider = 3 [json_name = "provider"];
inline void SwapPoolProviderRequest::clear_provider() {
  provider_.ClearToEmpty();
}
inline const std::string& SwapPoolProviderRequest::provider() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolProviderRequest.provider)
  return _internal_provider();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapPoolProviderRequest::set_provider(ArgT0&& arg0, ArgT... args) {
 
 provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolProviderRequest.provider)
}
inline std::string* SwapPoolProviderRequest::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:api_pb.SwapPoolProviderRequest.provider)
  return _s;
}
inline const std::string& SwapPoolProviderRequest::_internal_provider() const {
  return provider_.Get();
}
inline void SwapPoolProviderRequest::_internal_set_provider(const std::string& value) {
  
  provider_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SwapPoolProviderRequest::_internal_mutable_provider() {
  
  return provider_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SwapPoolProviderRequest::release_provider() {
  // @@protoc_insertion_point(field_release:api_pb.SwapPoolProviderRequest.provider)
  return provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SwapPoolProviderRequest::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SwapPoolProviderRequest.provider)
}

// uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SwapPoolProviderRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolProviderRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SwapPoolProviderRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.SwapPoolProviderRequest.height)
  return _internal_height();
}
inline void SwapPoolProviderRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void SwapPoolProviderRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.SwapPoolProviderRequest.height)
}

// -------------------------------------------------------------------

// NodeInfo_ProtocolVersion

// uint64 p2p = 3 [json_name = "p2p"];
inline void NodeInfo_ProtocolVersion::clear_p2p() {
  p2p_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo_ProtocolVersion::_internal_p2p() const {
  return p2p_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo_ProtocolVersion::p2p() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.ProtocolVersion.p2p)
  return _internal_p2p();
}
inline void NodeInfo_ProtocolVersion::_internal_set_p2p(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  p2p_ = value;
}
inline void NodeInfo_ProtocolVersion::set_p2p(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_p2p(value);
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.ProtocolVersion.p2p)
}

// uint64 block = 1 [json_name = "block"];
inline void NodeInfo_ProtocolVersion::clear_block() {
  block_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo_ProtocolVersion::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo_ProtocolVersion::block() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.ProtocolVersion.block)
  return _internal_block();
}
inline void NodeInfo_ProtocolVersion::_internal_set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  block_ = value;
}
inline void NodeInfo_ProtocolVersion::set_block(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.ProtocolVersion.block)
}

// uint64 app = 2 [json_name = "app"];
inline void NodeInfo_ProtocolVersion::clear_app() {
  app_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo_ProtocolVersion::_internal_app() const {
  return app_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeInfo_ProtocolVersion::app() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.ProtocolVersion.app)
  return _internal_app();
}
inline void NodeInfo_ProtocolVersion::_internal_set_app(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  app_ = value;
}
inline void NodeInfo_ProtocolVersion::set_app(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_app(value);
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.ProtocolVersion.app)
}

// -------------------------------------------------------------------

// NodeInfo_Other

// string tx_index = 2 [json_name = "txIndex"];
inline void NodeInfo_Other::clear_tx_index() {
  tx_index_.ClearToEmpty();
}
inline const std::string& NodeInfo_Other::tx_index() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.Other.tx_index)
  return _internal_tx_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo_Other::set_tx_index(ArgT0&& arg0, ArgT... args) {
 
 tx_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.Other.tx_index)
}
inline std::string* NodeInfo_Other::mutable_tx_index() {
  std::string* _s = _internal_mutable_tx_index();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.Other.tx_index)
  return _s;
}
inline const std::string& NodeInfo_Other::_internal_tx_index() const {
  return tx_index_.Get();
}
inline void NodeInfo_Other::_internal_set_tx_index(const std::string& value) {
  
  tx_index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo_Other::_internal_mutable_tx_index() {
  
  return tx_index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo_Other::release_tx_index() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.Other.tx_index)
  return tx_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo_Other::set_allocated_tx_index(std::string* tx_index) {
  if (tx_index != nullptr) {
    
  } else {
    
  }
  tx_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_index,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.Other.tx_index)
}

// string rpc_address = 1 [json_name = "rpcAddress"];
inline void NodeInfo_Other::clear_rpc_address() {
  rpc_address_.ClearToEmpty();
}
inline const std::string& NodeInfo_Other::rpc_address() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.Other.rpc_address)
  return _internal_rpc_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo_Other::set_rpc_address(ArgT0&& arg0, ArgT... args) {
 
 rpc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.Other.rpc_address)
}
inline std::string* NodeInfo_Other::mutable_rpc_address() {
  std::string* _s = _internal_mutable_rpc_address();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.Other.rpc_address)
  return _s;
}
inline const std::string& NodeInfo_Other::_internal_rpc_address() const {
  return rpc_address_.Get();
}
inline void NodeInfo_Other::_internal_set_rpc_address(const std::string& value) {
  
  rpc_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo_Other::_internal_mutable_rpc_address() {
  
  return rpc_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo_Other::release_rpc_address() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.Other.rpc_address)
  return rpc_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo_Other::set_allocated_rpc_address(std::string* rpc_address) {
  if (rpc_address != nullptr) {
    
  } else {
    
  }
  rpc_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpc_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.Other.rpc_address)
}

// -------------------------------------------------------------------

// NodeInfo

// .api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];
inline bool NodeInfo::_internal_has_protocol_version() const {
  return this != internal_default_instance() && protocol_version_ != nullptr;
}
inline bool NodeInfo::has_protocol_version() const {
  return _internal_has_protocol_version();
}
inline void NodeInfo::clear_protocol_version() {
  if (GetArenaForAllocation() == nullptr && protocol_version_ != nullptr) {
    delete protocol_version_;
  }
  protocol_version_ = nullptr;
}
inline const ::api_pb::NodeInfo_ProtocolVersion& NodeInfo::_internal_protocol_version() const {
  const ::api_pb::NodeInfo_ProtocolVersion* p = protocol_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::NodeInfo_ProtocolVersion&>(
      ::api_pb::_NodeInfo_ProtocolVersion_default_instance_);
}
inline const ::api_pb::NodeInfo_ProtocolVersion& NodeInfo::protocol_version() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.protocol_version)
  return _internal_protocol_version();
}
inline void NodeInfo::unsafe_arena_set_allocated_protocol_version(
    ::api_pb::NodeInfo_ProtocolVersion* protocol_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protocol_version_);
  }
  protocol_version_ = protocol_version;
  if (protocol_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NodeInfo.protocol_version)
}
inline ::api_pb::NodeInfo_ProtocolVersion* NodeInfo::release_protocol_version() {
  
  ::api_pb::NodeInfo_ProtocolVersion* temp = protocol_version_;
  protocol_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::NodeInfo_ProtocolVersion* NodeInfo::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.protocol_version)
  
  ::api_pb::NodeInfo_ProtocolVersion* temp = protocol_version_;
  protocol_version_ = nullptr;
  return temp;
}
inline ::api_pb::NodeInfo_ProtocolVersion* NodeInfo::_internal_mutable_protocol_version() {
  
  if (protocol_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::NodeInfo_ProtocolVersion>(GetArenaForAllocation());
    protocol_version_ = p;
  }
  return protocol_version_;
}
inline ::api_pb::NodeInfo_ProtocolVersion* NodeInfo::mutable_protocol_version() {
  ::api_pb::NodeInfo_ProtocolVersion* _msg = _internal_mutable_protocol_version();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.protocol_version)
  return _msg;
}
inline void NodeInfo::set_allocated_protocol_version(::api_pb::NodeInfo_ProtocolVersion* protocol_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete protocol_version_;
  }
  if (protocol_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::NodeInfo_ProtocolVersion>::GetOwningArena(protocol_version);
    if (message_arena != submessage_arena) {
      protocol_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protocol_version, submessage_arena);
    }
    
  } else {
    
  }
  protocol_version_ = protocol_version;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.protocol_version)
}

// string id = 1 [json_name = "id"];
inline void NodeInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& NodeInfo::id() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.id)
}
inline std::string* NodeInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.id)
  return _s;
}
inline const std::string& NodeInfo::_internal_id() const {
  return id_.Get();
}
inline void NodeInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo::release_id() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.id)
}

// string listen_addr = 2 [json_name = "listenAddr"];
inline void NodeInfo::clear_listen_addr() {
  listen_addr_.ClearToEmpty();
}
inline const std::string& NodeInfo::listen_addr() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.listen_addr)
  return _internal_listen_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_listen_addr(ArgT0&& arg0, ArgT... args) {
 
 listen_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.listen_addr)
}
inline std::string* NodeInfo::mutable_listen_addr() {
  std::string* _s = _internal_mutable_listen_addr();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.listen_addr)
  return _s;
}
inline const std::string& NodeInfo::_internal_listen_addr() const {
  return listen_addr_.Get();
}
inline void NodeInfo::_internal_set_listen_addr(const std::string& value) {
  
  listen_addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_listen_addr() {
  
  return listen_addr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo::release_listen_addr() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.listen_addr)
  return listen_addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo::set_allocated_listen_addr(std::string* listen_addr) {
  if (listen_addr != nullptr) {
    
  } else {
    
  }
  listen_addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), listen_addr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.listen_addr)
}

// string network = 3 [json_name = "network"];
inline void NodeInfo::clear_network() {
  network_.ClearToEmpty();
}
inline const std::string& NodeInfo::network() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.network)
  return _internal_network();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_network(ArgT0&& arg0, ArgT... args) {
 
 network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.network)
}
inline std::string* NodeInfo::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.network)
  return _s;
}
inline const std::string& NodeInfo::_internal_network() const {
  return network_.Get();
}
inline void NodeInfo::_internal_set_network(const std::string& value) {
  
  network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_network() {
  
  return network_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo::release_network() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.network)
  return network_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.network)
}

// string version = 4 [json_name = "version"];
inline void NodeInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& NodeInfo::version() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.version)
}
inline std::string* NodeInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.version)
  return _s;
}
inline const std::string& NodeInfo::_internal_version() const {
  return version_.Get();
}
inline void NodeInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo::release_version() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.version)
}

// string channels = 5 [json_name = "channels"];
inline void NodeInfo::clear_channels() {
  channels_.ClearToEmpty();
}
inline const std::string& NodeInfo::channels() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.channels)
  return _internal_channels();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_channels(ArgT0&& arg0, ArgT... args) {
 
 channels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.channels)
}
inline std::string* NodeInfo::mutable_channels() {
  std::string* _s = _internal_mutable_channels();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.channels)
  return _s;
}
inline const std::string& NodeInfo::_internal_channels() const {
  return channels_.Get();
}
inline void NodeInfo::_internal_set_channels(const std::string& value) {
  
  channels_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_channels() {
  
  return channels_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo::release_channels() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.channels)
  return channels_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo::set_allocated_channels(std::string* channels) {
  if (channels != nullptr) {
    
  } else {
    
  }
  channels_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channels,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.channels)
}

// string moniker = 6 [json_name = "moniker"];
inline void NodeInfo::clear_moniker() {
  moniker_.ClearToEmpty();
}
inline const std::string& NodeInfo::moniker() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.moniker)
  return _internal_moniker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_moniker(ArgT0&& arg0, ArgT... args) {
 
 moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NodeInfo.moniker)
}
inline std::string* NodeInfo::mutable_moniker() {
  std::string* _s = _internal_mutable_moniker();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.moniker)
  return _s;
}
inline const std::string& NodeInfo::_internal_moniker() const {
  return moniker_.Get();
}
inline void NodeInfo::_internal_set_moniker(const std::string& value) {
  
  moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_moniker() {
  
  return moniker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NodeInfo::release_moniker() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.moniker)
  return moniker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NodeInfo::set_allocated_moniker(std::string* moniker) {
  if (moniker != nullptr) {
    
  } else {
    
  }
  moniker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moniker,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.moniker)
}

// .api_pb.NodeInfo.Other other = 7 [json_name = "other"];
inline bool NodeInfo::_internal_has_other() const {
  return this != internal_default_instance() && other_ != nullptr;
}
inline bool NodeInfo::has_other() const {
  return _internal_has_other();
}
inline void NodeInfo::clear_other() {
  if (GetArenaForAllocation() == nullptr && other_ != nullptr) {
    delete other_;
  }
  other_ = nullptr;
}
inline const ::api_pb::NodeInfo_Other& NodeInfo::_internal_other() const {
  const ::api_pb::NodeInfo_Other* p = other_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::NodeInfo_Other&>(
      ::api_pb::_NodeInfo_Other_default_instance_);
}
inline const ::api_pb::NodeInfo_Other& NodeInfo::other() const {
  // @@protoc_insertion_point(field_get:api_pb.NodeInfo.other)
  return _internal_other();
}
inline void NodeInfo::unsafe_arena_set_allocated_other(
    ::api_pb::NodeInfo_Other* other) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_);
  }
  other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NodeInfo.other)
}
inline ::api_pb::NodeInfo_Other* NodeInfo::release_other() {
  
  ::api_pb::NodeInfo_Other* temp = other_;
  other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::NodeInfo_Other* NodeInfo::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_release:api_pb.NodeInfo.other)
  
  ::api_pb::NodeInfo_Other* temp = other_;
  other_ = nullptr;
  return temp;
}
inline ::api_pb::NodeInfo_Other* NodeInfo::_internal_mutable_other() {
  
  if (other_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::NodeInfo_Other>(GetArenaForAllocation());
    other_ = p;
  }
  return other_;
}
inline ::api_pb::NodeInfo_Other* NodeInfo::mutable_other() {
  ::api_pb::NodeInfo_Other* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:api_pb.NodeInfo.other)
  return _msg;
}
inline void NodeInfo::set_allocated_other(::api_pb::NodeInfo_Other* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete other_;
  }
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::NodeInfo_Other>::GetOwningArena(other);
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  other_ = other;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NodeInfo.other)
}

// -------------------------------------------------------------------

// NetInfoResponse_Peer_ConnectionStatus_Monitor

// bool active = 13 [json_name = "active"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_active() {
  active_ = false;
}
inline bool NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_active() const {
  return active_;
}
inline bool NetInfoResponse_Peer_ConnectionStatus_Monitor::active() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.active)
  return _internal_active();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.active)
}

// string start = 1 [json_name = "start"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& NetInfoResponse_Peer_ConnectionStatus_Monitor::start() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start)
}
inline std::string* NetInfoResponse_Peer_ConnectionStatus_Monitor::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start)
  return _s;
}
inline const std::string& NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_start() const {
  return start_.Get();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetInfoResponse_Peer_ConnectionStatus_Monitor::release_start() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.start)
}

// int64 duration = 2 [json_name = "duration"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_duration() {
  duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::duration() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.duration)
  return _internal_duration();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.duration)
}

// int64 idle = 3 [json_name = "idle"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_idle() {
  idle_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_idle() const {
  return idle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::idle() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.idle)
  return _internal_idle();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_idle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  idle_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_idle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_idle(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.idle)
}

// int64 bytes = 4 [json_name = "bytes"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_bytes() {
  bytes_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_bytes() const {
  return bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::bytes() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.bytes)
  return _internal_bytes();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.bytes)
}

// int64 samples = 5 [json_name = "samples"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_samples() {
  samples_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_samples() const {
  return samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::samples() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.samples)
  return _internal_samples();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  samples_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_samples(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.samples)
}

// int64 inst_rate = 6 [json_name = "instRate"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_inst_rate() {
  inst_rate_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_inst_rate() const {
  return inst_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::inst_rate() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.inst_rate)
  return _internal_inst_rate();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_inst_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inst_rate_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_inst_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_inst_rate(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.inst_rate)
}

// int64 cur_rate = 7 [json_name = "curRate"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_cur_rate() {
  cur_rate_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_cur_rate() const {
  return cur_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::cur_rate() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.cur_rate)
  return _internal_cur_rate();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_cur_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cur_rate_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_cur_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cur_rate(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.cur_rate)
}

// int64 avg_rate = 8 [json_name = "avgRate"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_avg_rate() {
  avg_rate_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_avg_rate() const {
  return avg_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::avg_rate() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.avg_rate)
  return _internal_avg_rate();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_avg_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  avg_rate_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_avg_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_avg_rate(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.avg_rate)
}

// int64 peak_rate = 9 [json_name = "peakRate"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_peak_rate() {
  peak_rate_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_peak_rate() const {
  return peak_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::peak_rate() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.peak_rate)
  return _internal_peak_rate();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_peak_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  peak_rate_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_peak_rate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_peak_rate(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.peak_rate)
}

// int64 bytes_rem = 10 [json_name = "bytesRem"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_bytes_rem() {
  bytes_rem_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_bytes_rem() const {
  return bytes_rem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::bytes_rem() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.bytes_rem)
  return _internal_bytes_rem();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_bytes_rem(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  bytes_rem_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_bytes_rem(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_bytes_rem(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.bytes_rem)
}

// int64 time_rem = 11 [json_name = "timeRem"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_time_rem() {
  time_rem_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_time_rem() const {
  return time_rem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Monitor::time_rem() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.time_rem)
  return _internal_time_rem();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_time_rem(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_rem_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_time_rem(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_rem(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.time_rem)
}

// uint64 progress = 12 [json_name = "progress"];
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::clear_progress() {
  progress_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_progress() const {
  return progress_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetInfoResponse_Peer_ConnectionStatus_Monitor::progress() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.progress)
  return _internal_progress();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::_internal_set_progress(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  progress_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Monitor::set_progress(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor.progress)
}

// -------------------------------------------------------------------

// NetInfoResponse_Peer_ConnectionStatus_Channel

// int64 id = 5 [json_name = "id"];
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::id() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.id)
  return _internal_id();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.id)
}

// int64 send_queue_capacity = 1 [json_name = "sendQueueCapacity"];
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::clear_send_queue_capacity() {
  send_queue_capacity_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_send_queue_capacity() const {
  return send_queue_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::send_queue_capacity() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.send_queue_capacity)
  return _internal_send_queue_capacity();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_set_send_queue_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  send_queue_capacity_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::set_send_queue_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_send_queue_capacity(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.send_queue_capacity)
}

// int64 send_queue_size = 2 [json_name = "sendQueueSize"];
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::clear_send_queue_size() {
  send_queue_size_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_send_queue_size() const {
  return send_queue_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::send_queue_size() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.send_queue_size)
  return _internal_send_queue_size();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_set_send_queue_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  send_queue_size_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::set_send_queue_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_send_queue_size(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.send_queue_size)
}

// int64 priority = 3 [json_name = "priority"];
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::clear_priority() {
  priority_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::priority() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.priority)
  return _internal_priority();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  priority_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::set_priority(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.priority)
}

// int64 recently_sent = 4 [json_name = "recentlySent"];
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::clear_recently_sent() {
  recently_sent_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_recently_sent() const {
  return recently_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse_Peer_ConnectionStatus_Channel::recently_sent() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.recently_sent)
  return _internal_recently_sent();
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::_internal_set_recently_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  recently_sent_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus_Channel::set_recently_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_recently_sent(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel.recently_sent)
}

// -------------------------------------------------------------------

// NetInfoResponse_Peer_ConnectionStatus

// uint64 duration = 4 [json_name = "duration"];
inline void NetInfoResponse_Peer_ConnectionStatus::clear_duration() {
  duration_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetInfoResponse_Peer_ConnectionStatus::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetInfoResponse_Peer_ConnectionStatus::duration() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.duration)
  return _internal_duration();
}
inline void NetInfoResponse_Peer_ConnectionStatus::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  duration_ = value;
}
inline void NetInfoResponse_Peer_ConnectionStatus::set_duration(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.ConnectionStatus.duration)
}

// .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor SendMonitor = 1 [json_name = "SendMonitor"];
inline bool NetInfoResponse_Peer_ConnectionStatus::_internal_has_sendmonitor() const {
  return this != internal_default_instance() && sendmonitor_ != nullptr;
}
inline bool NetInfoResponse_Peer_ConnectionStatus::has_sendmonitor() const {
  return _internal_has_sendmonitor();
}
inline void NetInfoResponse_Peer_ConnectionStatus::clear_sendmonitor() {
  if (GetArenaForAllocation() == nullptr && sendmonitor_ != nullptr) {
    delete sendmonitor_;
  }
  sendmonitor_ = nullptr;
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& NetInfoResponse_Peer_ConnectionStatus::_internal_sendmonitor() const {
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* p = sendmonitor_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor&>(
      ::api_pb::_NetInfoResponse_Peer_ConnectionStatus_Monitor_default_instance_);
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& NetInfoResponse_Peer_ConnectionStatus::sendmonitor() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.SendMonitor)
  return _internal_sendmonitor();
}
inline void NetInfoResponse_Peer_ConnectionStatus::unsafe_arena_set_allocated_sendmonitor(
    ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* sendmonitor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendmonitor_);
  }
  sendmonitor_ = sendmonitor;
  if (sendmonitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NetInfoResponse.Peer.ConnectionStatus.SendMonitor)
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::release_sendmonitor() {
  
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* temp = sendmonitor_;
  sendmonitor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::unsafe_arena_release_sendmonitor() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.ConnectionStatus.SendMonitor)
  
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* temp = sendmonitor_;
  sendmonitor_ = nullptr;
  return temp;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::_internal_mutable_sendmonitor() {
  
  if (sendmonitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor>(GetArenaForAllocation());
    sendmonitor_ = p;
  }
  return sendmonitor_;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::mutable_sendmonitor() {
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* _msg = _internal_mutable_sendmonitor();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.ConnectionStatus.SendMonitor)
  return _msg;
}
inline void NetInfoResponse_Peer_ConnectionStatus::set_allocated_sendmonitor(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* sendmonitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sendmonitor_;
  }
  if (sendmonitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor>::GetOwningArena(sendmonitor);
    if (message_arena != submessage_arena) {
      sendmonitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendmonitor, submessage_arena);
    }
    
  } else {
    
  }
  sendmonitor_ = sendmonitor;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.ConnectionStatus.SendMonitor)
}

// .api_pb.NetInfoResponse.Peer.ConnectionStatus.Monitor RecvMonitor = 2 [json_name = "RecvMonitor"];
inline bool NetInfoResponse_Peer_ConnectionStatus::_internal_has_recvmonitor() const {
  return this != internal_default_instance() && recvmonitor_ != nullptr;
}
inline bool NetInfoResponse_Peer_ConnectionStatus::has_recvmonitor() const {
  return _internal_has_recvmonitor();
}
inline void NetInfoResponse_Peer_ConnectionStatus::clear_recvmonitor() {
  if (GetArenaForAllocation() == nullptr && recvmonitor_ != nullptr) {
    delete recvmonitor_;
  }
  recvmonitor_ = nullptr;
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& NetInfoResponse_Peer_ConnectionStatus::_internal_recvmonitor() const {
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* p = recvmonitor_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor&>(
      ::api_pb::_NetInfoResponse_Peer_ConnectionStatus_Monitor_default_instance_);
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor& NetInfoResponse_Peer_ConnectionStatus::recvmonitor() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.RecvMonitor)
  return _internal_recvmonitor();
}
inline void NetInfoResponse_Peer_ConnectionStatus::unsafe_arena_set_allocated_recvmonitor(
    ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* recvmonitor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recvmonitor_);
  }
  recvmonitor_ = recvmonitor;
  if (recvmonitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NetInfoResponse.Peer.ConnectionStatus.RecvMonitor)
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::release_recvmonitor() {
  
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* temp = recvmonitor_;
  recvmonitor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::unsafe_arena_release_recvmonitor() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.ConnectionStatus.RecvMonitor)
  
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* temp = recvmonitor_;
  recvmonitor_ = nullptr;
  return temp;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::_internal_mutable_recvmonitor() {
  
  if (recvmonitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor>(GetArenaForAllocation());
    recvmonitor_ = p;
  }
  return recvmonitor_;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* NetInfoResponse_Peer_ConnectionStatus::mutable_recvmonitor() {
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* _msg = _internal_mutable_recvmonitor();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.ConnectionStatus.RecvMonitor)
  return _msg;
}
inline void NetInfoResponse_Peer_ConnectionStatus::set_allocated_recvmonitor(::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor* recvmonitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete recvmonitor_;
  }
  if (recvmonitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::NetInfoResponse_Peer_ConnectionStatus_Monitor>::GetOwningArena(recvmonitor);
    if (message_arena != submessage_arena) {
      recvmonitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recvmonitor, submessage_arena);
    }
    
  } else {
    
  }
  recvmonitor_ = recvmonitor;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.ConnectionStatus.RecvMonitor)
}

// repeated .api_pb.NetInfoResponse.Peer.ConnectionStatus.Channel channels = 3 [json_name = "channels"];
inline int NetInfoResponse_Peer_ConnectionStatus::_internal_channels_size() const {
  return channels_.size();
}
inline int NetInfoResponse_Peer_ConnectionStatus::channels_size() const {
  return _internal_channels_size();
}
inline void NetInfoResponse_Peer_ConnectionStatus::clear_channels() {
  channels_.Clear();
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* NetInfoResponse_Peer_ConnectionStatus::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.ConnectionStatus.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel >*
NetInfoResponse_Peer_ConnectionStatus::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.NetInfoResponse.Peer.ConnectionStatus.channels)
  return &channels_;
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel& NetInfoResponse_Peer_ConnectionStatus::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel& NetInfoResponse_Peer_ConnectionStatus::channels(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.ConnectionStatus.channels)
  return _internal_channels(index);
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* NetInfoResponse_Peer_ConnectionStatus::_internal_add_channels() {
  return channels_.Add();
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* NetInfoResponse_Peer_ConnectionStatus::add_channels() {
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:api_pb.NetInfoResponse.Peer.ConnectionStatus.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer_ConnectionStatus_Channel >&
NetInfoResponse_Peer_ConnectionStatus::channels() const {
  // @@protoc_insertion_point(field_list:api_pb.NetInfoResponse.Peer.ConnectionStatus.channels)
  return channels_;
}

// -------------------------------------------------------------------

// NetInfoResponse_Peer

// .google.protobuf.UInt64Value latest_block_height = 5 [json_name = "latestBlockHeight", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool NetInfoResponse_Peer::_internal_has_latest_block_height() const {
  return this != internal_default_instance() && latest_block_height_ != nullptr;
}
inline bool NetInfoResponse_Peer::has_latest_block_height() const {
  return _internal_has_latest_block_height();
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& NetInfoResponse_Peer::_internal_latest_block_height() const {
  const PROTOBUF_NAMESPACE_ID::UInt64Value* p = latest_block_height_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& NetInfoResponse_Peer::latest_block_height() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.latest_block_height)
  return _internal_latest_block_height();
}
inline void NetInfoResponse_Peer::unsafe_arena_set_allocated_latest_block_height(
    PROTOBUF_NAMESPACE_ID::UInt64Value* latest_block_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_block_height_);
  }
  latest_block_height_ = latest_block_height;
  if (latest_block_height) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NetInfoResponse.Peer.latest_block_height)
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* NetInfoResponse_Peer::release_latest_block_height() {
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = latest_block_height_;
  latest_block_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* NetInfoResponse_Peer::unsafe_arena_release_latest_block_height() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.latest_block_height)
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = latest_block_height_;
  latest_block_height_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* NetInfoResponse_Peer::_internal_mutable_latest_block_height() {
  
  if (latest_block_height_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    latest_block_height_ = p;
  }
  return latest_block_height_;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* NetInfoResponse_Peer::mutable_latest_block_height() {
  PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_latest_block_height();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.latest_block_height)
  return _msg;
}
inline void NetInfoResponse_Peer::set_allocated_latest_block_height(PROTOBUF_NAMESPACE_ID::UInt64Value* latest_block_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_block_height_);
  }
  if (latest_block_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_block_height));
    if (message_arena != submessage_arena) {
      latest_block_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_block_height, submessage_arena);
    }
    
  } else {
    
  }
  latest_block_height_ = latest_block_height;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.latest_block_height)
}

// .api_pb.NodeInfo node_info = 4 [json_name = "nodeInfo"];
inline bool NetInfoResponse_Peer::_internal_has_node_info() const {
  return this != internal_default_instance() && node_info_ != nullptr;
}
inline bool NetInfoResponse_Peer::has_node_info() const {
  return _internal_has_node_info();
}
inline void NetInfoResponse_Peer::clear_node_info() {
  if (GetArenaForAllocation() == nullptr && node_info_ != nullptr) {
    delete node_info_;
  }
  node_info_ = nullptr;
}
inline const ::api_pb::NodeInfo& NetInfoResponse_Peer::_internal_node_info() const {
  const ::api_pb::NodeInfo* p = node_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::NodeInfo&>(
      ::api_pb::_NodeInfo_default_instance_);
}
inline const ::api_pb::NodeInfo& NetInfoResponse_Peer::node_info() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.node_info)
  return _internal_node_info();
}
inline void NetInfoResponse_Peer::unsafe_arena_set_allocated_node_info(
    ::api_pb::NodeInfo* node_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_info_);
  }
  node_info_ = node_info;
  if (node_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NetInfoResponse.Peer.node_info)
}
inline ::api_pb::NodeInfo* NetInfoResponse_Peer::release_node_info() {
  
  ::api_pb::NodeInfo* temp = node_info_;
  node_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::NodeInfo* NetInfoResponse_Peer::unsafe_arena_release_node_info() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.node_info)
  
  ::api_pb::NodeInfo* temp = node_info_;
  node_info_ = nullptr;
  return temp;
}
inline ::api_pb::NodeInfo* NetInfoResponse_Peer::_internal_mutable_node_info() {
  
  if (node_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::NodeInfo>(GetArenaForAllocation());
    node_info_ = p;
  }
  return node_info_;
}
inline ::api_pb::NodeInfo* NetInfoResponse_Peer::mutable_node_info() {
  ::api_pb::NodeInfo* _msg = _internal_mutable_node_info();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.node_info)
  return _msg;
}
inline void NetInfoResponse_Peer::set_allocated_node_info(::api_pb::NodeInfo* node_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete node_info_;
  }
  if (node_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::NodeInfo>::GetOwningArena(node_info);
    if (message_arena != submessage_arena) {
      node_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node_info, submessage_arena);
    }
    
  } else {
    
  }
  node_info_ = node_info;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.node_info)
}

// bool is_outbound = 1 [json_name = "isOutbound"];
inline void NetInfoResponse_Peer::clear_is_outbound() {
  is_outbound_ = false;
}
inline bool NetInfoResponse_Peer::_internal_is_outbound() const {
  return is_outbound_;
}
inline bool NetInfoResponse_Peer::is_outbound() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.is_outbound)
  return _internal_is_outbound();
}
inline void NetInfoResponse_Peer::_internal_set_is_outbound(bool value) {
  
  is_outbound_ = value;
}
inline void NetInfoResponse_Peer::set_is_outbound(bool value) {
  _internal_set_is_outbound(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.is_outbound)
}

// .api_pb.NetInfoResponse.Peer.ConnectionStatus connection_status = 2 [json_name = "connectionStatus"];
inline bool NetInfoResponse_Peer::_internal_has_connection_status() const {
  return this != internal_default_instance() && connection_status_ != nullptr;
}
inline bool NetInfoResponse_Peer::has_connection_status() const {
  return _internal_has_connection_status();
}
inline void NetInfoResponse_Peer::clear_connection_status() {
  if (GetArenaForAllocation() == nullptr && connection_status_ != nullptr) {
    delete connection_status_;
  }
  connection_status_ = nullptr;
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus& NetInfoResponse_Peer::_internal_connection_status() const {
  const ::api_pb::NetInfoResponse_Peer_ConnectionStatus* p = connection_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::NetInfoResponse_Peer_ConnectionStatus&>(
      ::api_pb::_NetInfoResponse_Peer_ConnectionStatus_default_instance_);
}
inline const ::api_pb::NetInfoResponse_Peer_ConnectionStatus& NetInfoResponse_Peer::connection_status() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.connection_status)
  return _internal_connection_status();
}
inline void NetInfoResponse_Peer::unsafe_arena_set_allocated_connection_status(
    ::api_pb::NetInfoResponse_Peer_ConnectionStatus* connection_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_status_);
  }
  connection_status_ = connection_status;
  if (connection_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.NetInfoResponse.Peer.connection_status)
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus* NetInfoResponse_Peer::release_connection_status() {
  
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* temp = connection_status_;
  connection_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus* NetInfoResponse_Peer::unsafe_arena_release_connection_status() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.connection_status)
  
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* temp = connection_status_;
  connection_status_ = nullptr;
  return temp;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus* NetInfoResponse_Peer::_internal_mutable_connection_status() {
  
  if (connection_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::NetInfoResponse_Peer_ConnectionStatus>(GetArenaForAllocation());
    connection_status_ = p;
  }
  return connection_status_;
}
inline ::api_pb::NetInfoResponse_Peer_ConnectionStatus* NetInfoResponse_Peer::mutable_connection_status() {
  ::api_pb::NetInfoResponse_Peer_ConnectionStatus* _msg = _internal_mutable_connection_status();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.connection_status)
  return _msg;
}
inline void NetInfoResponse_Peer::set_allocated_connection_status(::api_pb::NetInfoResponse_Peer_ConnectionStatus* connection_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_status_;
  }
  if (connection_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::NetInfoResponse_Peer_ConnectionStatus>::GetOwningArena(connection_status);
    if (message_arena != submessage_arena) {
      connection_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_status, submessage_arena);
    }
    
  } else {
    
  }
  connection_status_ = connection_status;
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.connection_status)
}

// string remote_ip = 3 [json_name = "remoteIp"];
inline void NetInfoResponse_Peer::clear_remote_ip() {
  remote_ip_.ClearToEmpty();
}
inline const std::string& NetInfoResponse_Peer::remote_ip() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.Peer.remote_ip)
  return _internal_remote_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetInfoResponse_Peer::set_remote_ip(ArgT0&& arg0, ArgT... args) {
 
 remote_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.Peer.remote_ip)
}
inline std::string* NetInfoResponse_Peer::mutable_remote_ip() {
  std::string* _s = _internal_mutable_remote_ip();
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.Peer.remote_ip)
  return _s;
}
inline const std::string& NetInfoResponse_Peer::_internal_remote_ip() const {
  return remote_ip_.Get();
}
inline void NetInfoResponse_Peer::_internal_set_remote_ip(const std::string& value) {
  
  remote_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NetInfoResponse_Peer::_internal_mutable_remote_ip() {
  
  return remote_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NetInfoResponse_Peer::release_remote_ip() {
  // @@protoc_insertion_point(field_release:api_pb.NetInfoResponse.Peer.remote_ip)
  return remote_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NetInfoResponse_Peer::set_allocated_remote_ip(std::string* remote_ip) {
  if (remote_ip != nullptr) {
    
  } else {
    
  }
  remote_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.NetInfoResponse.Peer.remote_ip)
}

// -------------------------------------------------------------------

// NetInfoResponse

// bool listening = 4 [json_name = "listening"];
inline void NetInfoResponse::clear_listening() {
  listening_ = false;
}
inline bool NetInfoResponse::_internal_listening() const {
  return listening_;
}
inline bool NetInfoResponse::listening() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.listening)
  return _internal_listening();
}
inline void NetInfoResponse::_internal_set_listening(bool value) {
  
  listening_ = value;
}
inline void NetInfoResponse::set_listening(bool value) {
  _internal_set_listening(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.listening)
}

// repeated string listeners = 1 [json_name = "listeners"];
inline int NetInfoResponse::_internal_listeners_size() const {
  return listeners_.size();
}
inline int NetInfoResponse::listeners_size() const {
  return _internal_listeners_size();
}
inline void NetInfoResponse::clear_listeners() {
  listeners_.Clear();
}
inline std::string* NetInfoResponse::add_listeners() {
  std::string* _s = _internal_add_listeners();
  // @@protoc_insertion_point(field_add_mutable:api_pb.NetInfoResponse.listeners)
  return _s;
}
inline const std::string& NetInfoResponse::_internal_listeners(int index) const {
  return listeners_.Get(index);
}
inline const std::string& NetInfoResponse::listeners(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.listeners)
  return _internal_listeners(index);
}
inline std::string* NetInfoResponse::mutable_listeners(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.listeners)
  return listeners_.Mutable(index);
}
inline void NetInfoResponse::set_listeners(int index, const std::string& value) {
  listeners_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.listeners)
}
inline void NetInfoResponse::set_listeners(int index, std::string&& value) {
  listeners_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.listeners)
}
inline void NetInfoResponse::set_listeners(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listeners_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.NetInfoResponse.listeners)
}
inline void NetInfoResponse::set_listeners(int index, const char* value, size_t size) {
  listeners_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.NetInfoResponse.listeners)
}
inline std::string* NetInfoResponse::_internal_add_listeners() {
  return listeners_.Add();
}
inline void NetInfoResponse::add_listeners(const std::string& value) {
  listeners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.NetInfoResponse.listeners)
}
inline void NetInfoResponse::add_listeners(std::string&& value) {
  listeners_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.NetInfoResponse.listeners)
}
inline void NetInfoResponse::add_listeners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listeners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.NetInfoResponse.listeners)
}
inline void NetInfoResponse::add_listeners(const char* value, size_t size) {
  listeners_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.NetInfoResponse.listeners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetInfoResponse::listeners() const {
  // @@protoc_insertion_point(field_list:api_pb.NetInfoResponse.listeners)
  return listeners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetInfoResponse::mutable_listeners() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.NetInfoResponse.listeners)
  return &listeners_;
}

// int64 count_peers = 2 [json_name = "countPeers"];
inline void NetInfoResponse::clear_count_peers() {
  count_peers_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse::_internal_count_peers() const {
  return count_peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetInfoResponse::count_peers() const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.count_peers)
  return _internal_count_peers();
}
inline void NetInfoResponse::_internal_set_count_peers(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_peers_ = value;
}
inline void NetInfoResponse::set_count_peers(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count_peers(value);
  // @@protoc_insertion_point(field_set:api_pb.NetInfoResponse.count_peers)
}

// repeated .api_pb.NetInfoResponse.Peer peers = 3 [json_name = "peers"];
inline int NetInfoResponse::_internal_peers_size() const {
  return peers_.size();
}
inline int NetInfoResponse::peers_size() const {
  return _internal_peers_size();
}
inline void NetInfoResponse::clear_peers() {
  peers_.Clear();
}
inline ::api_pb::NetInfoResponse_Peer* NetInfoResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.NetInfoResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer >*
NetInfoResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.NetInfoResponse.peers)
  return &peers_;
}
inline const ::api_pb::NetInfoResponse_Peer& NetInfoResponse::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::api_pb::NetInfoResponse_Peer& NetInfoResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.NetInfoResponse.peers)
  return _internal_peers(index);
}
inline ::api_pb::NetInfoResponse_Peer* NetInfoResponse::_internal_add_peers() {
  return peers_.Add();
}
inline ::api_pb::NetInfoResponse_Peer* NetInfoResponse::add_peers() {
  ::api_pb::NetInfoResponse_Peer* _add = _internal_add_peers();
  // @@protoc_insertion_point(field_add:api_pb.NetInfoResponse.peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::NetInfoResponse_Peer >&
NetInfoResponse::peers() const {
  // @@protoc_insertion_point(field_list:api_pb.NetInfoResponse.peers)
  return peers_;
}

// -------------------------------------------------------------------

// StatusResponse

// string version = 8 [json_name = "version"];
inline void StatusResponse::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& StatusResponse::version() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.version)
}
inline std::string* StatusResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.version)
  return _s;
}
inline const std::string& StatusResponse::_internal_version() const {
  return version_.Get();
}
inline void StatusResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_version() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.version)
}

// string network = 11 [json_name = "network"];
inline void StatusResponse::clear_network() {
  network_.ClearToEmpty();
}
inline const std::string& StatusResponse::network() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.network)
  return _internal_network();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_network(ArgT0&& arg0, ArgT... args) {
 
 network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.network)
}
inline std::string* StatusResponse::mutable_network() {
  std::string* _s = _internal_mutable_network();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.network)
  return _s;
}
inline const std::string& StatusResponse::_internal_network() const {
  return network_.Get();
}
inline void StatusResponse::_internal_set_network(const std::string& value) {
  
  network_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_network() {
  
  return network_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_network() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.network)
  return network_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.network)
}

// uint64 initial_height = 12 [json_name = "initialHeight"];
inline void StatusResponse::clear_initial_height() {
  initial_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_initial_height() const {
  return initial_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::initial_height() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.initial_height)
  return _internal_initial_height();
}
inline void StatusResponse::_internal_set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  initial_height_ = value;
}
inline void StatusResponse::set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initial_height(value);
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.initial_height)
}

// string latest_block_hash = 1 [json_name = "latestBlockHash"];
inline void StatusResponse::clear_latest_block_hash() {
  latest_block_hash_.ClearToEmpty();
}
inline const std::string& StatusResponse::latest_block_hash() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.latest_block_hash)
  return _internal_latest_block_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_latest_block_hash(ArgT0&& arg0, ArgT... args) {
 
 latest_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.latest_block_hash)
}
inline std::string* StatusResponse::mutable_latest_block_hash() {
  std::string* _s = _internal_mutable_latest_block_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.latest_block_hash)
  return _s;
}
inline const std::string& StatusResponse::_internal_latest_block_hash() const {
  return latest_block_hash_.Get();
}
inline void StatusResponse::_internal_set_latest_block_hash(const std::string& value) {
  
  latest_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_latest_block_hash() {
  
  return latest_block_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_latest_block_hash() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.latest_block_hash)
  return latest_block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_latest_block_hash(std::string* latest_block_hash) {
  if (latest_block_hash != nullptr) {
    
  } else {
    
  }
  latest_block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_block_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.latest_block_hash)
}

// string latest_app_hash = 2 [json_name = "latestAppHash"];
inline void StatusResponse::clear_latest_app_hash() {
  latest_app_hash_.ClearToEmpty();
}
inline const std::string& StatusResponse::latest_app_hash() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.latest_app_hash)
  return _internal_latest_app_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_latest_app_hash(ArgT0&& arg0, ArgT... args) {
 
 latest_app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.latest_app_hash)
}
inline std::string* StatusResponse::mutable_latest_app_hash() {
  std::string* _s = _internal_mutable_latest_app_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.latest_app_hash)
  return _s;
}
inline const std::string& StatusResponse::_internal_latest_app_hash() const {
  return latest_app_hash_.Get();
}
inline void StatusResponse::_internal_set_latest_app_hash(const std::string& value) {
  
  latest_app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_latest_app_hash() {
  
  return latest_app_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_latest_app_hash() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.latest_app_hash)
  return latest_app_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_latest_app_hash(std::string* latest_app_hash) {
  if (latest_app_hash != nullptr) {
    
  } else {
    
  }
  latest_app_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_app_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.latest_app_hash)
}

// uint64 latest_block_height = 3 [json_name = "latestBlockHeight"];
inline void StatusResponse::clear_latest_block_height() {
  latest_block_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_latest_block_height() const {
  return latest_block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::latest_block_height() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.latest_block_height)
  return _internal_latest_block_height();
}
inline void StatusResponse::_internal_set_latest_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latest_block_height_ = value;
}
inline void StatusResponse::set_latest_block_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest_block_height(value);
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.latest_block_height)
}

// string latest_block_time = 4 [json_name = "latestBlockTime"];
inline void StatusResponse::clear_latest_block_time() {
  latest_block_time_.ClearToEmpty();
}
inline const std::string& StatusResponse::latest_block_time() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.latest_block_time)
  return _internal_latest_block_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_latest_block_time(ArgT0&& arg0, ArgT... args) {
 
 latest_block_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.latest_block_time)
}
inline std::string* StatusResponse::mutable_latest_block_time() {
  std::string* _s = _internal_mutable_latest_block_time();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.latest_block_time)
  return _s;
}
inline const std::string& StatusResponse::_internal_latest_block_time() const {
  return latest_block_time_.Get();
}
inline void StatusResponse::_internal_set_latest_block_time(const std::string& value) {
  
  latest_block_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_latest_block_time() {
  
  return latest_block_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_latest_block_time() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.latest_block_time)
  return latest_block_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_latest_block_time(std::string* latest_block_time) {
  if (latest_block_time != nullptr) {
    
  } else {
    
  }
  latest_block_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latest_block_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.latest_block_time)
}

// uint64 keep_last_states = 5 [json_name = "keepLastStates"];
inline void StatusResponse::clear_keep_last_states() {
  keep_last_states_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::_internal_keep_last_states() const {
  return keep_last_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StatusResponse::keep_last_states() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.keep_last_states)
  return _internal_keep_last_states();
}
inline void StatusResponse::_internal_set_keep_last_states(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  keep_last_states_ = value;
}
inline void StatusResponse::set_keep_last_states(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_keep_last_states(value);
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.keep_last_states)
}

// string total_slashed = 10 [json_name = "totalSlashed"];
inline void StatusResponse::clear_total_slashed() {
  total_slashed_.ClearToEmpty();
}
inline const std::string& StatusResponse::total_slashed() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.total_slashed)
  return _internal_total_slashed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_total_slashed(ArgT0&& arg0, ArgT... args) {
 
 total_slashed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.total_slashed)
}
inline std::string* StatusResponse::mutable_total_slashed() {
  std::string* _s = _internal_mutable_total_slashed();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.total_slashed)
  return _s;
}
inline const std::string& StatusResponse::_internal_total_slashed() const {
  return total_slashed_.Get();
}
inline void StatusResponse::_internal_set_total_slashed(const std::string& value) {
  
  total_slashed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_total_slashed() {
  
  return total_slashed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_total_slashed() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.total_slashed)
  return total_slashed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_total_slashed(std::string* total_slashed) {
  if (total_slashed != nullptr) {
    
  } else {
    
  }
  total_slashed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_slashed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.total_slashed)
}

// bool catching_up = 6 [json_name = "catchingUp"];
inline void StatusResponse::clear_catching_up() {
  catching_up_ = false;
}
inline bool StatusResponse::_internal_catching_up() const {
  return catching_up_;
}
inline bool StatusResponse::catching_up() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.catching_up)
  return _internal_catching_up();
}
inline void StatusResponse::_internal_set_catching_up(bool value) {
  
  catching_up_ = value;
}
inline void StatusResponse::set_catching_up(bool value) {
  _internal_set_catching_up(value);
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.catching_up)
}

// string public_key = 7 [json_name = "publicKey"];
inline void StatusResponse::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& StatusResponse::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.public_key)
}
inline std::string* StatusResponse::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.public_key)
  return _s;
}
inline const std::string& StatusResponse::_internal_public_key() const {
  return public_key_.Get();
}
inline void StatusResponse::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.public_key)
}

// string node_id = 9 [json_name = "nodeId"];
inline void StatusResponse::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& StatusResponse::node_id() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.node_id)
}
inline std::string* StatusResponse::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.node_id)
  return _s;
}
inline const std::string& StatusResponse::_internal_node_id() const {
  return node_id_.Get();
}
inline void StatusResponse::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_node_id() {
  
  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_node_id() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.node_id)
}

// string moniker = 13 [json_name = "moniker"];
inline void StatusResponse::clear_moniker() {
  moniker_.ClearToEmpty();
}
inline const std::string& StatusResponse::moniker() const {
  // @@protoc_insertion_point(field_get:api_pb.StatusResponse.moniker)
  return _internal_moniker();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_moniker(ArgT0&& arg0, ArgT... args) {
 
 moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.StatusResponse.moniker)
}
inline std::string* StatusResponse::mutable_moniker() {
  std::string* _s = _internal_mutable_moniker();
  // @@protoc_insertion_point(field_mutable:api_pb.StatusResponse.moniker)
  return _s;
}
inline const std::string& StatusResponse::_internal_moniker() const {
  return moniker_.Get();
}
inline void StatusResponse::_internal_set_moniker(const std::string& value) {
  
  moniker_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_moniker() {
  
  return moniker_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusResponse::release_moniker() {
  // @@protoc_insertion_point(field_release:api_pb.StatusResponse.moniker)
  return moniker_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusResponse::set_allocated_moniker(std::string* moniker) {
  if (moniker != nullptr) {
    
  } else {
    
  }
  moniker_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moniker,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.StatusResponse.moniker)
}

// -------------------------------------------------------------------

// GenesisResponse_ConsensusParams_Block

// int64 max_bytes = 1 [json_name = "maxBytes"];
inline void GenesisResponse_ConsensusParams_Block::clear_max_bytes() {
  max_bytes_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Block::_internal_max_bytes() const {
  return max_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Block::max_bytes() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.Block.max_bytes)
  return _internal_max_bytes();
}
inline void GenesisResponse_ConsensusParams_Block::_internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_bytes_ = value;
}
inline void GenesisResponse_ConsensusParams_Block::set_max_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Block.max_bytes)
}

// int64 max_gas = 2 [json_name = "maxGas"];
inline void GenesisResponse_ConsensusParams_Block::clear_max_gas() {
  max_gas_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Block::_internal_max_gas() const {
  return max_gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Block::max_gas() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.Block.max_gas)
  return _internal_max_gas();
}
inline void GenesisResponse_ConsensusParams_Block::_internal_set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_gas_ = value;
}
inline void GenesisResponse_ConsensusParams_Block::set_max_gas(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_gas(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Block.max_gas)
}

// int64 time_iota_ms = 3 [json_name = "timeIotaMs"];
inline void GenesisResponse_ConsensusParams_Block::clear_time_iota_ms() {
  time_iota_ms_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Block::_internal_time_iota_ms() const {
  return time_iota_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Block::time_iota_ms() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.Block.time_iota_ms)
  return _internal_time_iota_ms();
}
inline void GenesisResponse_ConsensusParams_Block::_internal_set_time_iota_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_iota_ms_ = value;
}
inline void GenesisResponse_ConsensusParams_Block::set_time_iota_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_iota_ms(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Block.time_iota_ms)
}

// -------------------------------------------------------------------

// GenesisResponse_ConsensusParams_Evidence

// int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
inline void GenesisResponse_ConsensusParams_Evidence::clear_max_age_num_blocks() {
  max_age_num_blocks_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Evidence::_internal_max_age_num_blocks() const {
  return max_age_num_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Evidence::max_age_num_blocks() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.Evidence.max_age_num_blocks)
  return _internal_max_age_num_blocks();
}
inline void GenesisResponse_ConsensusParams_Evidence::_internal_set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_age_num_blocks_ = value;
}
inline void GenesisResponse_ConsensusParams_Evidence::set_max_age_num_blocks(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_age_num_blocks(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Evidence.max_age_num_blocks)
}

// int64 max_age_duration = 2 [json_name = "maxAgeDuration"];
inline void GenesisResponse_ConsensusParams_Evidence::clear_max_age_duration() {
  max_age_duration_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Evidence::_internal_max_age_duration() const {
  return max_age_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_ConsensusParams_Evidence::max_age_duration() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.Evidence.max_age_duration)
  return _internal_max_age_duration();
}
inline void GenesisResponse_ConsensusParams_Evidence::_internal_set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_age_duration_ = value;
}
inline void GenesisResponse_ConsensusParams_Evidence::set_max_age_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_age_duration(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Evidence.max_age_duration)
}

// -------------------------------------------------------------------

// GenesisResponse_ConsensusParams_Validator

// repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
inline int GenesisResponse_ConsensusParams_Validator::_internal_pub_key_types_size() const {
  return pub_key_types_.size();
}
inline int GenesisResponse_ConsensusParams_Validator::pub_key_types_size() const {
  return _internal_pub_key_types_size();
}
inline void GenesisResponse_ConsensusParams_Validator::clear_pub_key_types() {
  pub_key_types_.Clear();
}
inline std::string* GenesisResponse_ConsensusParams_Validator::add_pub_key_types() {
  std::string* _s = _internal_add_pub_key_types();
  // @@protoc_insertion_point(field_add_mutable:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
  return _s;
}
inline const std::string& GenesisResponse_ConsensusParams_Validator::_internal_pub_key_types(int index) const {
  return pub_key_types_.Get(index);
}
inline const std::string& GenesisResponse_ConsensusParams_Validator::pub_key_types(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
  return _internal_pub_key_types(index);
}
inline std::string* GenesisResponse_ConsensusParams_Validator::mutable_pub_key_types(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
  return pub_key_types_.Mutable(index);
}
inline void GenesisResponse_ConsensusParams_Validator::set_pub_key_types(int index, const std::string& value) {
  pub_key_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline void GenesisResponse_ConsensusParams_Validator::set_pub_key_types(int index, std::string&& value) {
  pub_key_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline void GenesisResponse_ConsensusParams_Validator::set_pub_key_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_key_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline void GenesisResponse_ConsensusParams_Validator::set_pub_key_types(int index, const char* value, size_t size) {
  pub_key_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline std::string* GenesisResponse_ConsensusParams_Validator::_internal_add_pub_key_types() {
  return pub_key_types_.Add();
}
inline void GenesisResponse_ConsensusParams_Validator::add_pub_key_types(const std::string& value) {
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline void GenesisResponse_ConsensusParams_Validator::add_pub_key_types(std::string&& value) {
  pub_key_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline void GenesisResponse_ConsensusParams_Validator::add_pub_key_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pub_key_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline void GenesisResponse_ConsensusParams_Validator::add_pub_key_types(const char* value, size_t size) {
  pub_key_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisResponse_ConsensusParams_Validator::pub_key_types() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
  return pub_key_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisResponse_ConsensusParams_Validator::mutable_pub_key_types() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.ConsensusParams.Validator.pub_key_types)
  return &pub_key_types_;
}

// -------------------------------------------------------------------

// GenesisResponse_ConsensusParams

// .api_pb.GenesisResponse.ConsensusParams.Block block = 1 [json_name = "block"];
inline bool GenesisResponse_ConsensusParams::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GenesisResponse_ConsensusParams::has_block() const {
  return _internal_has_block();
}
inline void GenesisResponse_ConsensusParams::clear_block() {
  if (GetArenaForAllocation() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::api_pb::GenesisResponse_ConsensusParams_Block& GenesisResponse_ConsensusParams::_internal_block() const {
  const ::api_pb::GenesisResponse_ConsensusParams_Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_ConsensusParams_Block&>(
      ::api_pb::_GenesisResponse_ConsensusParams_Block_default_instance_);
}
inline const ::api_pb::GenesisResponse_ConsensusParams_Block& GenesisResponse_ConsensusParams::block() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.block)
  return _internal_block();
}
inline void GenesisResponse_ConsensusParams::unsafe_arena_set_allocated_block(
    ::api_pb::GenesisResponse_ConsensusParams_Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.ConsensusParams.block)
}
inline ::api_pb::GenesisResponse_ConsensusParams_Block* GenesisResponse_ConsensusParams::release_block() {
  
  ::api_pb::GenesisResponse_ConsensusParams_Block* temp = block_;
  block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Block* GenesisResponse_ConsensusParams::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.ConsensusParams.block)
  
  ::api_pb::GenesisResponse_ConsensusParams_Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Block* GenesisResponse_ConsensusParams::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams_Block>(GetArenaForAllocation());
    block_ = p;
  }
  return block_;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Block* GenesisResponse_ConsensusParams::mutable_block() {
  ::api_pb::GenesisResponse_ConsensusParams_Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.ConsensusParams.block)
  return _msg;
}
inline void GenesisResponse_ConsensusParams::set_allocated_block(::api_pb::GenesisResponse_ConsensusParams_Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_ConsensusParams_Block>::GetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.ConsensusParams.block)
}

// .api_pb.GenesisResponse.ConsensusParams.Evidence evidence = 2 [json_name = "evidence"];
inline bool GenesisResponse_ConsensusParams::_internal_has_evidence() const {
  return this != internal_default_instance() && evidence_ != nullptr;
}
inline bool GenesisResponse_ConsensusParams::has_evidence() const {
  return _internal_has_evidence();
}
inline void GenesisResponse_ConsensusParams::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
inline const ::api_pb::GenesisResponse_ConsensusParams_Evidence& GenesisResponse_ConsensusParams::_internal_evidence() const {
  const ::api_pb::GenesisResponse_ConsensusParams_Evidence* p = evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_ConsensusParams_Evidence&>(
      ::api_pb::_GenesisResponse_ConsensusParams_Evidence_default_instance_);
}
inline const ::api_pb::GenesisResponse_ConsensusParams_Evidence& GenesisResponse_ConsensusParams::evidence() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.evidence)
  return _internal_evidence();
}
inline void GenesisResponse_ConsensusParams::unsafe_arena_set_allocated_evidence(
    ::api_pb::GenesisResponse_ConsensusParams_Evidence* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  evidence_ = evidence;
  if (evidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.ConsensusParams.evidence)
}
inline ::api_pb::GenesisResponse_ConsensusParams_Evidence* GenesisResponse_ConsensusParams::release_evidence() {
  
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* temp = evidence_;
  evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Evidence* GenesisResponse_ConsensusParams::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.ConsensusParams.evidence)
  
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* temp = evidence_;
  evidence_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Evidence* GenesisResponse_ConsensusParams::_internal_mutable_evidence() {
  
  if (evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams_Evidence>(GetArenaForAllocation());
    evidence_ = p;
  }
  return evidence_;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Evidence* GenesisResponse_ConsensusParams::mutable_evidence() {
  ::api_pb::GenesisResponse_ConsensusParams_Evidence* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.ConsensusParams.evidence)
  return _msg;
}
inline void GenesisResponse_ConsensusParams::set_allocated_evidence(::api_pb::GenesisResponse_ConsensusParams_Evidence* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete evidence_;
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_ConsensusParams_Evidence>::GetOwningArena(evidence);
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    
  } else {
    
  }
  evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.ConsensusParams.evidence)
}

// .api_pb.GenesisResponse.ConsensusParams.Validator validator = 3 [json_name = "validator"];
inline bool GenesisResponse_ConsensusParams::_internal_has_validator() const {
  return this != internal_default_instance() && validator_ != nullptr;
}
inline bool GenesisResponse_ConsensusParams::has_validator() const {
  return _internal_has_validator();
}
inline void GenesisResponse_ConsensusParams::clear_validator() {
  if (GetArenaForAllocation() == nullptr && validator_ != nullptr) {
    delete validator_;
  }
  validator_ = nullptr;
}
inline const ::api_pb::GenesisResponse_ConsensusParams_Validator& GenesisResponse_ConsensusParams::_internal_validator() const {
  const ::api_pb::GenesisResponse_ConsensusParams_Validator* p = validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_ConsensusParams_Validator&>(
      ::api_pb::_GenesisResponse_ConsensusParams_Validator_default_instance_);
}
inline const ::api_pb::GenesisResponse_ConsensusParams_Validator& GenesisResponse_ConsensusParams::validator() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.ConsensusParams.validator)
  return _internal_validator();
}
inline void GenesisResponse_ConsensusParams::unsafe_arena_set_allocated_validator(
    ::api_pb::GenesisResponse_ConsensusParams_Validator* validator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_);
  }
  validator_ = validator;
  if (validator) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.ConsensusParams.validator)
}
inline ::api_pb::GenesisResponse_ConsensusParams_Validator* GenesisResponse_ConsensusParams::release_validator() {
  
  ::api_pb::GenesisResponse_ConsensusParams_Validator* temp = validator_;
  validator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Validator* GenesisResponse_ConsensusParams::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.ConsensusParams.validator)
  
  ::api_pb::GenesisResponse_ConsensusParams_Validator* temp = validator_;
  validator_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Validator* GenesisResponse_ConsensusParams::_internal_mutable_validator() {
  
  if (validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams_Validator>(GetArenaForAllocation());
    validator_ = p;
  }
  return validator_;
}
inline ::api_pb::GenesisResponse_ConsensusParams_Validator* GenesisResponse_ConsensusParams::mutable_validator() {
  ::api_pb::GenesisResponse_ConsensusParams_Validator* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.ConsensusParams.validator)
  return _msg;
}
inline void GenesisResponse_ConsensusParams::set_allocated_validator(::api_pb::GenesisResponse_ConsensusParams_Validator* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_ConsensusParams_Validator>::GetOwningArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }
    
  } else {
    
  }
  validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.ConsensusParams.validator)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Validators

// string total_bip_stake = 4 [json_name = "totalBipStake"];
inline void GenesisResponse_AppState_Validators::clear_total_bip_stake() {
  total_bip_stake_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Validators::total_bip_stake() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Validators.total_bip_stake)
  return _internal_total_bip_stake();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Validators::set_total_bip_stake(ArgT0&& arg0, ArgT... args) {
 
 total_bip_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Validators.total_bip_stake)
}
inline std::string* GenesisResponse_AppState_Validators::mutable_total_bip_stake() {
  std::string* _s = _internal_mutable_total_bip_stake();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Validators.total_bip_stake)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Validators::_internal_total_bip_stake() const {
  return total_bip_stake_.Get();
}
inline void GenesisResponse_AppState_Validators::_internal_set_total_bip_stake(const std::string& value) {
  
  total_bip_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::_internal_mutable_total_bip_stake() {
  
  return total_bip_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::release_total_bip_stake() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Validators.total_bip_stake)
  return total_bip_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Validators::set_allocated_total_bip_stake(std::string* total_bip_stake) {
  if (total_bip_stake != nullptr) {
    
  } else {
    
  }
  total_bip_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_bip_stake,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Validators.total_bip_stake)
}

// string public_key = 1 [json_name = "publicKey"];
inline void GenesisResponse_AppState_Validators::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Validators::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Validators.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Validators::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Validators.public_key)
}
inline std::string* GenesisResponse_AppState_Validators::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Validators.public_key)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Validators::_internal_public_key() const {
  return public_key_.Get();
}
inline void GenesisResponse_AppState_Validators::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Validators.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Validators::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Validators.public_key)
}

// string accum_reward = 2 [json_name = "accumReward"];
inline void GenesisResponse_AppState_Validators::clear_accum_reward() {
  accum_reward_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Validators::accum_reward() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Validators.accum_reward)
  return _internal_accum_reward();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Validators::set_accum_reward(ArgT0&& arg0, ArgT... args) {
 
 accum_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Validators.accum_reward)
}
inline std::string* GenesisResponse_AppState_Validators::mutable_accum_reward() {
  std::string* _s = _internal_mutable_accum_reward();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Validators.accum_reward)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Validators::_internal_accum_reward() const {
  return accum_reward_.Get();
}
inline void GenesisResponse_AppState_Validators::_internal_set_accum_reward(const std::string& value) {
  
  accum_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::_internal_mutable_accum_reward() {
  
  return accum_reward_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::release_accum_reward() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Validators.accum_reward)
  return accum_reward_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Validators::set_allocated_accum_reward(std::string* accum_reward) {
  if (accum_reward != nullptr) {
    
  } else {
    
  }
  accum_reward_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accum_reward,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Validators.accum_reward)
}

// string absent_times = 3 [json_name = "absentTimes"];
inline void GenesisResponse_AppState_Validators::clear_absent_times() {
  absent_times_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Validators::absent_times() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Validators.absent_times)
  return _internal_absent_times();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Validators::set_absent_times(ArgT0&& arg0, ArgT... args) {
 
 absent_times_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Validators.absent_times)
}
inline std::string* GenesisResponse_AppState_Validators::mutable_absent_times() {
  std::string* _s = _internal_mutable_absent_times();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Validators.absent_times)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Validators::_internal_absent_times() const {
  return absent_times_.Get();
}
inline void GenesisResponse_AppState_Validators::_internal_set_absent_times(const std::string& value) {
  
  absent_times_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::_internal_mutable_absent_times() {
  
  return absent_times_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Validators::release_absent_times() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Validators.absent_times)
  return absent_times_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Validators::set_allocated_absent_times(std::string* absent_times) {
  if (absent_times != nullptr) {
    
  } else {
    
  }
  absent_times_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absent_times,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Validators.absent_times)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Candidate_Stake

// string owner = 4 [json_name = "owner"];
inline void GenesisResponse_AppState_Candidate_Stake::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate_Stake::owner() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.Stake.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate_Stake::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.Stake.owner)
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.Stake.owner)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate_Stake::_internal_owner() const {
  return owner_.Get();
}
inline void GenesisResponse_AppState_Candidate_Stake::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::release_owner() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.Stake.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate_Stake::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.Stake.owner)
}

// uint64 coin = 1 [json_name = "coin"];
inline void GenesisResponse_AppState_Candidate_Stake::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Candidate_Stake::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Candidate_Stake::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.Stake.coin)
  return _internal_coin();
}
inline void GenesisResponse_AppState_Candidate_Stake::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void GenesisResponse_AppState_Candidate_Stake::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.Stake.coin)
}

// string value = 2 [json_name = "value"];
inline void GenesisResponse_AppState_Candidate_Stake::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate_Stake::value() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.Stake.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate_Stake::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.Stake.value)
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.Stake.value)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate_Stake::_internal_value() const {
  return value_.Get();
}
inline void GenesisResponse_AppState_Candidate_Stake::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.Stake.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate_Stake::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.Stake.value)
}

// string bip_value = 3 [json_name = "bipValue"];
inline void GenesisResponse_AppState_Candidate_Stake::clear_bip_value() {
  bip_value_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate_Stake::bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value)
  return _internal_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate_Stake::set_bip_value(ArgT0&& arg0, ArgT... args) {
 
 bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value)
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::mutable_bip_value() {
  std::string* _s = _internal_mutable_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate_Stake::_internal_bip_value() const {
  return bip_value_.Get();
}
inline void GenesisResponse_AppState_Candidate_Stake::_internal_set_bip_value(const std::string& value) {
  
  bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::_internal_mutable_bip_value() {
  
  return bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate_Stake::release_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value)
  return bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate_Stake::set_allocated_bip_value(std::string* bip_value) {
  if (bip_value != nullptr) {
    
  } else {
    
  }
  bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.Stake.bip_value)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Candidate

// uint64 id = 10 [json_name = "id"];
inline void GenesisResponse_AppState_Candidate::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Candidate::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Candidate::id() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.id)
  return _internal_id();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GenesisResponse_AppState_Candidate::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.id)
}

// string reward_address = 1 [json_name = "rewardAddress"];
inline void GenesisResponse_AppState_Candidate::clear_reward_address() {
  reward_address_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate::reward_address() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.reward_address)
  return _internal_reward_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate::set_reward_address(ArgT0&& arg0, ArgT... args) {
 
 reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.reward_address)
}
inline std::string* GenesisResponse_AppState_Candidate::mutable_reward_address() {
  std::string* _s = _internal_mutable_reward_address();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.reward_address)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate::_internal_reward_address() const {
  return reward_address_.Get();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_reward_address(const std::string& value) {
  
  reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::_internal_mutable_reward_address() {
  
  return reward_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::release_reward_address() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.reward_address)
  return reward_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate::set_allocated_reward_address(std::string* reward_address) {
  if (reward_address != nullptr) {
    
  } else {
    
  }
  reward_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.reward_address)
}

// string owner_address = 2 [json_name = "ownerAddress"];
inline void GenesisResponse_AppState_Candidate::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate::owner_address() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.owner_address)
}
inline std::string* GenesisResponse_AppState_Candidate::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.owner_address)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::release_owner_address() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.owner_address)
}

// string control_address = 3 [json_name = "controlAddress"];
inline void GenesisResponse_AppState_Candidate::clear_control_address() {
  control_address_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate::control_address() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.control_address)
  return _internal_control_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate::set_control_address(ArgT0&& arg0, ArgT... args) {
 
 control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.control_address)
}
inline std::string* GenesisResponse_AppState_Candidate::mutable_control_address() {
  std::string* _s = _internal_mutable_control_address();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.control_address)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate::_internal_control_address() const {
  return control_address_.Get();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_control_address(const std::string& value) {
  
  control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::_internal_mutable_control_address() {
  
  return control_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::release_control_address() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.control_address)
  return control_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate::set_allocated_control_address(std::string* control_address) {
  if (control_address != nullptr) {
    
  } else {
    
  }
  control_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.control_address)
}

// string total_bip_stake = 4 [json_name = "totalBipStake"];
inline void GenesisResponse_AppState_Candidate::clear_total_bip_stake() {
  total_bip_stake_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate::total_bip_stake() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.total_bip_stake)
  return _internal_total_bip_stake();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate::set_total_bip_stake(ArgT0&& arg0, ArgT... args) {
 
 total_bip_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.total_bip_stake)
}
inline std::string* GenesisResponse_AppState_Candidate::mutable_total_bip_stake() {
  std::string* _s = _internal_mutable_total_bip_stake();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.total_bip_stake)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate::_internal_total_bip_stake() const {
  return total_bip_stake_.Get();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_total_bip_stake(const std::string& value) {
  
  total_bip_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::_internal_mutable_total_bip_stake() {
  
  return total_bip_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::release_total_bip_stake() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.total_bip_stake)
  return total_bip_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate::set_allocated_total_bip_stake(std::string* total_bip_stake) {
  if (total_bip_stake != nullptr) {
    
  } else {
    
  }
  total_bip_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_bip_stake,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.total_bip_stake)
}

// string public_key = 5 [json_name = "publicKey"];
inline void GenesisResponse_AppState_Candidate::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Candidate::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Candidate::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.public_key)
}
inline std::string* GenesisResponse_AppState_Candidate::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.public_key)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Candidate::_internal_public_key() const {
  return public_key_.Get();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Candidate::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Candidate.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Candidate::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Candidate.public_key)
}

// uint64 commission = 6 [json_name = "commission"];
inline void GenesisResponse_AppState_Candidate::clear_commission() {
  commission_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Candidate::_internal_commission() const {
  return commission_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Candidate::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.commission)
  return _internal_commission();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commission_ = value;
}
inline void GenesisResponse_AppState_Candidate::set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.commission)
}

// repeated .api_pb.GenesisResponse.AppState.Candidate.Stake stakes = 7 [json_name = "stakes"];
inline int GenesisResponse_AppState_Candidate::_internal_stakes_size() const {
  return stakes_.size();
}
inline int GenesisResponse_AppState_Candidate::stakes_size() const {
  return _internal_stakes_size();
}
inline void GenesisResponse_AppState_Candidate::clear_stakes() {
  stakes_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Candidate_Stake* GenesisResponse_AppState_Candidate::mutable_stakes(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.stakes)
  return stakes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >*
GenesisResponse_AppState_Candidate::mutable_stakes() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.Candidate.stakes)
  return &stakes_;
}
inline const ::api_pb::GenesisResponse_AppState_Candidate_Stake& GenesisResponse_AppState_Candidate::_internal_stakes(int index) const {
  return stakes_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Candidate_Stake& GenesisResponse_AppState_Candidate::stakes(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.stakes)
  return _internal_stakes(index);
}
inline ::api_pb::GenesisResponse_AppState_Candidate_Stake* GenesisResponse_AppState_Candidate::_internal_add_stakes() {
  return stakes_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Candidate_Stake* GenesisResponse_AppState_Candidate::add_stakes() {
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* _add = _internal_add_stakes();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.Candidate.stakes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >&
GenesisResponse_AppState_Candidate::stakes() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.Candidate.stakes)
  return stakes_;
}

// repeated .api_pb.GenesisResponse.AppState.Candidate.Stake updates = 8 [json_name = "updates"];
inline int GenesisResponse_AppState_Candidate::_internal_updates_size() const {
  return updates_.size();
}
inline int GenesisResponse_AppState_Candidate::updates_size() const {
  return _internal_updates_size();
}
inline void GenesisResponse_AppState_Candidate::clear_updates() {
  updates_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Candidate_Stake* GenesisResponse_AppState_Candidate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Candidate.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >*
GenesisResponse_AppState_Candidate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.Candidate.updates)
  return &updates_;
}
inline const ::api_pb::GenesisResponse_AppState_Candidate_Stake& GenesisResponse_AppState_Candidate::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Candidate_Stake& GenesisResponse_AppState_Candidate::updates(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.updates)
  return _internal_updates(index);
}
inline ::api_pb::GenesisResponse_AppState_Candidate_Stake* GenesisResponse_AppState_Candidate::_internal_add_updates() {
  return updates_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Candidate_Stake* GenesisResponse_AppState_Candidate::add_updates() {
  ::api_pb::GenesisResponse_AppState_Candidate_Stake* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.Candidate.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate_Stake >&
GenesisResponse_AppState_Candidate::updates() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.Candidate.updates)
  return updates_;
}

// int64 status = 9 [json_name = "status"];
inline void GenesisResponse_AppState_Candidate::clear_status() {
  status_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_AppState_Candidate::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_AppState_Candidate::status() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.status)
  return _internal_status();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  status_ = value;
}
inline void GenesisResponse_AppState_Candidate::set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.status)
}

// int64 jailed_until = 11 [json_name = "jailedUntil"];
inline void GenesisResponse_AppState_Candidate::clear_jailed_until() {
  jailed_until_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_AppState_Candidate::_internal_jailed_until() const {
  return jailed_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_AppState_Candidate::jailed_until() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.jailed_until)
  return _internal_jailed_until();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_jailed_until(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jailed_until_ = value;
}
inline void GenesisResponse_AppState_Candidate::set_jailed_until(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_jailed_until(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.jailed_until)
}

// int64 last_edit_commission_height = 12 [json_name = "lastEditCommissionHeight"];
inline void GenesisResponse_AppState_Candidate::clear_last_edit_commission_height() {
  last_edit_commission_height_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_AppState_Candidate::_internal_last_edit_commission_height() const {
  return last_edit_commission_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenesisResponse_AppState_Candidate::last_edit_commission_height() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Candidate.last_edit_commission_height)
  return _internal_last_edit_commission_height();
}
inline void GenesisResponse_AppState_Candidate::_internal_set_last_edit_commission_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_edit_commission_height_ = value;
}
inline void GenesisResponse_AppState_Candidate::set_last_edit_commission_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_edit_commission_height(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Candidate.last_edit_commission_height)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Coin

// uint64 id = 9 [json_name = "id"];
inline void GenesisResponse_AppState_Coin::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Coin::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Coin::id() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.id)
  return _internal_id();
}
inline void GenesisResponse_AppState_Coin::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GenesisResponse_AppState_Coin::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.id)
}

// string name = 1 [json_name = "name"];
inline void GenesisResponse_AppState_Coin::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Coin::name() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Coin::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.name)
}
inline std::string* GenesisResponse_AppState_Coin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Coin.name)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Coin::_internal_name() const {
  return name_.Get();
}
inline void GenesisResponse_AppState_Coin::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::release_name() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Coin.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Coin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Coin.name)
}

// string symbol = 2 [json_name = "symbol"];
inline void GenesisResponse_AppState_Coin::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Coin::symbol() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Coin::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.symbol)
}
inline std::string* GenesisResponse_AppState_Coin::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Coin.symbol)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Coin::_internal_symbol() const {
  return symbol_.Get();
}
inline void GenesisResponse_AppState_Coin::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::release_symbol() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Coin.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Coin::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Coin.symbol)
}

// string volume = 3 [json_name = "volume"];
inline void GenesisResponse_AppState_Coin::clear_volume() {
  volume_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Coin::volume() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.volume)
  return _internal_volume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Coin::set_volume(ArgT0&& arg0, ArgT... args) {
 
 volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.volume)
}
inline std::string* GenesisResponse_AppState_Coin::mutable_volume() {
  std::string* _s = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Coin.volume)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Coin::_internal_volume() const {
  return volume_.Get();
}
inline void GenesisResponse_AppState_Coin::_internal_set_volume(const std::string& value) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::_internal_mutable_volume() {
  
  return volume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::release_volume() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Coin.volume)
  return volume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Coin::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Coin.volume)
}

// uint64 crr = 4 [json_name = "crr"];
inline void GenesisResponse_AppState_Coin::clear_crr() {
  crr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Coin::_internal_crr() const {
  return crr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Coin::crr() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.crr)
  return _internal_crr();
}
inline void GenesisResponse_AppState_Coin::_internal_set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  crr_ = value;
}
inline void GenesisResponse_AppState_Coin::set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_crr(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.crr)
}

// string reserve = 5 [json_name = "reserve"];
inline void GenesisResponse_AppState_Coin::clear_reserve() {
  reserve_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Coin::reserve() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.reserve)
  return _internal_reserve();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Coin::set_reserve(ArgT0&& arg0, ArgT... args) {
 
 reserve_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.reserve)
}
inline std::string* GenesisResponse_AppState_Coin::mutable_reserve() {
  std::string* _s = _internal_mutable_reserve();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Coin.reserve)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Coin::_internal_reserve() const {
  return reserve_.Get();
}
inline void GenesisResponse_AppState_Coin::_internal_set_reserve(const std::string& value) {
  
  reserve_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::_internal_mutable_reserve() {
  
  return reserve_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::release_reserve() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Coin.reserve)
  return reserve_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Coin::set_allocated_reserve(std::string* reserve) {
  if (reserve != nullptr) {
    
  } else {
    
  }
  reserve_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Coin.reserve)
}

// string max_supply = 6 [json_name = "maxSupply"];
inline void GenesisResponse_AppState_Coin::clear_max_supply() {
  max_supply_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Coin::max_supply() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.max_supply)
  return _internal_max_supply();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Coin::set_max_supply(ArgT0&& arg0, ArgT... args) {
 
 max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.max_supply)
}
inline std::string* GenesisResponse_AppState_Coin::mutable_max_supply() {
  std::string* _s = _internal_mutable_max_supply();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Coin.max_supply)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Coin::_internal_max_supply() const {
  return max_supply_.Get();
}
inline void GenesisResponse_AppState_Coin::_internal_set_max_supply(const std::string& value) {
  
  max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::_internal_mutable_max_supply() {
  
  return max_supply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Coin::release_max_supply() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Coin.max_supply)
  return max_supply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Coin::set_allocated_max_supply(std::string* max_supply) {
  if (max_supply != nullptr) {
    
  } else {
    
  }
  max_supply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_supply,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Coin.max_supply)
}

// uint64 version = 7 [json_name = "version"];
inline void GenesisResponse_AppState_Coin::clear_version() {
  version_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Coin::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Coin::version() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.version)
  return _internal_version();
}
inline void GenesisResponse_AppState_Coin::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void GenesisResponse_AppState_Coin::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.version)
}

// .google.protobuf.StringValue owner_address = 8 [json_name = "ownerAddress"];
inline bool GenesisResponse_AppState_Coin::_internal_has_owner_address() const {
  return this != internal_default_instance() && owner_address_ != nullptr;
}
inline bool GenesisResponse_AppState_Coin::has_owner_address() const {
  return _internal_has_owner_address();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GenesisResponse_AppState_Coin::_internal_owner_address() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = owner_address_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GenesisResponse_AppState_Coin::owner_address() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.owner_address)
  return _internal_owner_address();
}
inline void GenesisResponse_AppState_Coin::unsafe_arena_set_allocated_owner_address(
    PROTOBUF_NAMESPACE_ID::StringValue* owner_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_address_);
  }
  owner_address_ = owner_address;
  if (owner_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.AppState.Coin.owner_address)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_Coin::release_owner_address() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = owner_address_;
  owner_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_Coin::unsafe_arena_release_owner_address() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Coin.owner_address)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = owner_address_;
  owner_address_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_Coin::_internal_mutable_owner_address() {
  
  if (owner_address_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    owner_address_ = p;
  }
  return owner_address_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_Coin::mutable_owner_address() {
  PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Coin.owner_address)
  return _msg;
}
inline void GenesisResponse_AppState_Coin::set_allocated_owner_address(PROTOBUF_NAMESPACE_ID::StringValue* owner_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_address_);
  }
  if (owner_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_address));
    if (message_arena != submessage_arena) {
      owner_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_address, submessage_arena);
    }
    
  } else {
    
  }
  owner_address_ = owner_address;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Coin.owner_address)
}

// bool mintable = 10 [json_name = "mintable"];
inline void GenesisResponse_AppState_Coin::clear_mintable() {
  mintable_ = false;
}
inline bool GenesisResponse_AppState_Coin::_internal_mintable() const {
  return mintable_;
}
inline bool GenesisResponse_AppState_Coin::mintable() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.mintable)
  return _internal_mintable();
}
inline void GenesisResponse_AppState_Coin::_internal_set_mintable(bool value) {
  
  mintable_ = value;
}
inline void GenesisResponse_AppState_Coin::set_mintable(bool value) {
  _internal_set_mintable(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.mintable)
}

// bool burnable = 11 [json_name = "burnable"];
inline void GenesisResponse_AppState_Coin::clear_burnable() {
  burnable_ = false;
}
inline bool GenesisResponse_AppState_Coin::_internal_burnable() const {
  return burnable_;
}
inline bool GenesisResponse_AppState_Coin::burnable() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Coin.burnable)
  return _internal_burnable();
}
inline void GenesisResponse_AppState_Coin::_internal_set_burnable(bool value) {
  
  burnable_ = value;
}
inline void GenesisResponse_AppState_Coin::set_burnable(bool value) {
  _internal_set_burnable(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Coin.burnable)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_FrozenFund

// uint64 height = 5 [json_name = "height"];
inline void GenesisResponse_AppState_FrozenFund::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_FrozenFund::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_FrozenFund::height() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.FrozenFund.height)
  return _internal_height();
}
inline void GenesisResponse_AppState_FrozenFund::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void GenesisResponse_AppState_FrozenFund::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.FrozenFund.height)
}

// string address = 1 [json_name = "address"];
inline void GenesisResponse_AppState_FrozenFund::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_FrozenFund::address() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.FrozenFund.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_FrozenFund::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.FrozenFund.address)
}
inline std::string* GenesisResponse_AppState_FrozenFund::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.FrozenFund.address)
  return _s;
}
inline const std::string& GenesisResponse_AppState_FrozenFund::_internal_address() const {
  return address_.Get();
}
inline void GenesisResponse_AppState_FrozenFund::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_FrozenFund::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_FrozenFund::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.FrozenFund.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_FrozenFund::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.FrozenFund.address)
}

// .google.protobuf.StringValue candidate_key = 2 [json_name = "candidateKey"];
inline bool GenesisResponse_AppState_FrozenFund::_internal_has_candidate_key() const {
  return this != internal_default_instance() && candidate_key_ != nullptr;
}
inline bool GenesisResponse_AppState_FrozenFund::has_candidate_key() const {
  return _internal_has_candidate_key();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GenesisResponse_AppState_FrozenFund::_internal_candidate_key() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = candidate_key_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& GenesisResponse_AppState_FrozenFund::candidate_key() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.FrozenFund.candidate_key)
  return _internal_candidate_key();
}
inline void GenesisResponse_AppState_FrozenFund::unsafe_arena_set_allocated_candidate_key(
    PROTOBUF_NAMESPACE_ID::StringValue* candidate_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_key_);
  }
  candidate_key_ = candidate_key;
  if (candidate_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.AppState.FrozenFund.candidate_key)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_FrozenFund::release_candidate_key() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = candidate_key_;
  candidate_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_FrozenFund::unsafe_arena_release_candidate_key() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.FrozenFund.candidate_key)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = candidate_key_;
  candidate_key_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_FrozenFund::_internal_mutable_candidate_key() {
  
  if (candidate_key_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    candidate_key_ = p;
  }
  return candidate_key_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* GenesisResponse_AppState_FrozenFund::mutable_candidate_key() {
  PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_candidate_key();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.FrozenFund.candidate_key)
  return _msg;
}
inline void GenesisResponse_AppState_FrozenFund::set_allocated_candidate_key(PROTOBUF_NAMESPACE_ID::StringValue* candidate_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_key_);
  }
  if (candidate_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidate_key));
    if (message_arena != submessage_arena) {
      candidate_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate_key, submessage_arena);
    }
    
  } else {
    
  }
  candidate_key_ = candidate_key;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.FrozenFund.candidate_key)
}

// uint64 candidate_id = 6 [json_name = "candidateId"];
inline void GenesisResponse_AppState_FrozenFund::clear_candidate_id() {
  candidate_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_FrozenFund::_internal_candidate_id() const {
  return candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_FrozenFund::candidate_id() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.FrozenFund.candidate_id)
  return _internal_candidate_id();
}
inline void GenesisResponse_AppState_FrozenFund::_internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  candidate_id_ = value;
}
inline void GenesisResponse_AppState_FrozenFund::set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.FrozenFund.candidate_id)
}

// uint64 coin = 3 [json_name = "coin"];
inline void GenesisResponse_AppState_FrozenFund::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_FrozenFund::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_FrozenFund::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.FrozenFund.coin)
  return _internal_coin();
}
inline void GenesisResponse_AppState_FrozenFund::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void GenesisResponse_AppState_FrozenFund::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.FrozenFund.coin)
}

// string value = 4 [json_name = "value"];
inline void GenesisResponse_AppState_FrozenFund::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_FrozenFund::value() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.FrozenFund.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_FrozenFund::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.FrozenFund.value)
}
inline std::string* GenesisResponse_AppState_FrozenFund::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.FrozenFund.value)
  return _s;
}
inline const std::string& GenesisResponse_AppState_FrozenFund::_internal_value() const {
  return value_.Get();
}
inline void GenesisResponse_AppState_FrozenFund::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_FrozenFund::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_FrozenFund::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.FrozenFund.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_FrozenFund::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.FrozenFund.value)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Waitlist

// uint64 candidate_id = 1 [json_name = "candidateId"];
inline void GenesisResponse_AppState_Waitlist::clear_candidate_id() {
  candidate_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Waitlist::_internal_candidate_id() const {
  return candidate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Waitlist::candidate_id() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Waitlist.candidate_id)
  return _internal_candidate_id();
}
inline void GenesisResponse_AppState_Waitlist::_internal_set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  candidate_id_ = value;
}
inline void GenesisResponse_AppState_Waitlist::set_candidate_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Waitlist.candidate_id)
}

// string owner = 2 [json_name = "owner"];
inline void GenesisResponse_AppState_Waitlist::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Waitlist::owner() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Waitlist.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Waitlist::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Waitlist.owner)
}
inline std::string* GenesisResponse_AppState_Waitlist::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Waitlist.owner)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Waitlist::_internal_owner() const {
  return owner_.Get();
}
inline void GenesisResponse_AppState_Waitlist::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Waitlist::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Waitlist::release_owner() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Waitlist.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Waitlist::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Waitlist.owner)
}

// uint64 coin = 3 [json_name = "coin"];
inline void GenesisResponse_AppState_Waitlist::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Waitlist::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Waitlist::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Waitlist.coin)
  return _internal_coin();
}
inline void GenesisResponse_AppState_Waitlist::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void GenesisResponse_AppState_Waitlist::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Waitlist.coin)
}

// string value = 4 [json_name = "value"];
inline void GenesisResponse_AppState_Waitlist::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Waitlist::value() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Waitlist.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Waitlist::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Waitlist.value)
}
inline std::string* GenesisResponse_AppState_Waitlist::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Waitlist.value)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Waitlist::_internal_value() const {
  return value_.Get();
}
inline void GenesisResponse_AppState_Waitlist::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Waitlist::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Waitlist::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Waitlist.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Waitlist::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Waitlist.value)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Account_Balance

// uint64 coin = 1 [json_name = "coin"];
inline void GenesisResponse_AppState_Account_Balance::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account_Balance::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account_Balance::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.Balance.coin)
  return _internal_coin();
}
inline void GenesisResponse_AppState_Account_Balance::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void GenesisResponse_AppState_Account_Balance::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.Balance.coin)
}

// string value = 2 [json_name = "value"];
inline void GenesisResponse_AppState_Account_Balance::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Account_Balance::value() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.Balance.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Account_Balance::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.Balance.value)
}
inline std::string* GenesisResponse_AppState_Account_Balance::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Account.Balance.value)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Account_Balance::_internal_value() const {
  return value_.Get();
}
inline void GenesisResponse_AppState_Account_Balance::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Account_Balance::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Account_Balance::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Account.Balance.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Account_Balance::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Account.Balance.value)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Account_MultisigData

// uint64 threshold = 1 [json_name = "threshold"];
inline void GenesisResponse_AppState_Account_MultisigData::clear_threshold() {
  threshold_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account_MultisigData::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account_MultisigData::threshold() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.MultisigData.threshold)
  return _internal_threshold();
}
inline void GenesisResponse_AppState_Account_MultisigData::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  threshold_ = value;
}
inline void GenesisResponse_AppState_Account_MultisigData::set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.MultisigData.threshold)
}

// repeated uint64 weights = 2 [json_name = "weights"];
inline int GenesisResponse_AppState_Account_MultisigData::_internal_weights_size() const {
  return weights_.size();
}
inline int GenesisResponse_AppState_Account_MultisigData::weights_size() const {
  return _internal_weights_size();
}
inline void GenesisResponse_AppState_Account_MultisigData::clear_weights() {
  weights_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account_MultisigData::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account_MultisigData::weights(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.MultisigData.weights)
  return _internal_weights(index);
}
inline void GenesisResponse_AppState_Account_MultisigData::set_weights(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.MultisigData.weights)
}
inline void GenesisResponse_AppState_Account_MultisigData::_internal_add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  weights_.Add(value);
}
inline void GenesisResponse_AppState_Account_MultisigData::add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_weights(value);
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.Account.MultisigData.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GenesisResponse_AppState_Account_MultisigData::_internal_weights() const {
  return weights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GenesisResponse_AppState_Account_MultisigData::weights() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.Account.MultisigData.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GenesisResponse_AppState_Account_MultisigData::_internal_mutable_weights() {
  return &weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GenesisResponse_AppState_Account_MultisigData::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.Account.MultisigData.weights)
  return _internal_mutable_weights();
}

// repeated string addresses = 3 [json_name = "addresses"];
inline int GenesisResponse_AppState_Account_MultisigData::_internal_addresses_size() const {
  return addresses_.size();
}
inline int GenesisResponse_AppState_Account_MultisigData::addresses_size() const {
  return _internal_addresses_size();
}
inline void GenesisResponse_AppState_Account_MultisigData::clear_addresses() {
  addresses_.Clear();
}
inline std::string* GenesisResponse_AppState_Account_MultisigData::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Account_MultisigData::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& GenesisResponse_AppState_Account_MultisigData::addresses(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
  return _internal_addresses(index);
}
inline std::string* GenesisResponse_AppState_Account_MultisigData::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
  return addresses_.Mutable(index);
}
inline void GenesisResponse_AppState_Account_MultisigData::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline void GenesisResponse_AppState_Account_MultisigData::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline void GenesisResponse_AppState_Account_MultisigData::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline void GenesisResponse_AppState_Account_MultisigData::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline std::string* GenesisResponse_AppState_Account_MultisigData::_internal_add_addresses() {
  return addresses_.Add();
}
inline void GenesisResponse_AppState_Account_MultisigData::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline void GenesisResponse_AppState_Account_MultisigData::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline void GenesisResponse_AppState_Account_MultisigData::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline void GenesisResponse_AppState_Account_MultisigData::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisResponse_AppState_Account_MultisigData::addresses() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisResponse_AppState_Account_MultisigData::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.Account.MultisigData.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Account

// string address = 1 [json_name = "address"];
inline void GenesisResponse_AppState_Account::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Account::address() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Account::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.address)
}
inline std::string* GenesisResponse_AppState_Account::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Account.address)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Account::_internal_address() const {
  return address_.Get();
}
inline void GenesisResponse_AppState_Account::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Account::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Account::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Account.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Account::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Account.address)
}

// repeated .api_pb.GenesisResponse.AppState.Account.Balance balance = 2 [json_name = "balance"];
inline int GenesisResponse_AppState_Account::_internal_balance_size() const {
  return balance_.size();
}
inline int GenesisResponse_AppState_Account::balance_size() const {
  return _internal_balance_size();
}
inline void GenesisResponse_AppState_Account::clear_balance() {
  balance_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Account_Balance* GenesisResponse_AppState_Account::mutable_balance(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Account.balance)
  return balance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account_Balance >*
GenesisResponse_AppState_Account::mutable_balance() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.Account.balance)
  return &balance_;
}
inline const ::api_pb::GenesisResponse_AppState_Account_Balance& GenesisResponse_AppState_Account::_internal_balance(int index) const {
  return balance_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Account_Balance& GenesisResponse_AppState_Account::balance(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.balance)
  return _internal_balance(index);
}
inline ::api_pb::GenesisResponse_AppState_Account_Balance* GenesisResponse_AppState_Account::_internal_add_balance() {
  return balance_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Account_Balance* GenesisResponse_AppState_Account::add_balance() {
  ::api_pb::GenesisResponse_AppState_Account_Balance* _add = _internal_add_balance();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.Account.balance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account_Balance >&
GenesisResponse_AppState_Account::balance() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.Account.balance)
  return balance_;
}

// uint64 nonce = 3 [json_name = "nonce"];
inline void GenesisResponse_AppState_Account::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Account::nonce() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.nonce)
  return _internal_nonce();
}
inline void GenesisResponse_AppState_Account::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void GenesisResponse_AppState_Account::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Account.nonce)
}

// .api_pb.GenesisResponse.AppState.Account.MultisigData multisig_data = 4 [json_name = "multisigData"];
inline bool GenesisResponse_AppState_Account::_internal_has_multisig_data() const {
  return this != internal_default_instance() && multisig_data_ != nullptr;
}
inline bool GenesisResponse_AppState_Account::has_multisig_data() const {
  return _internal_has_multisig_data();
}
inline void GenesisResponse_AppState_Account::clear_multisig_data() {
  if (GetArenaForAllocation() == nullptr && multisig_data_ != nullptr) {
    delete multisig_data_;
  }
  multisig_data_ = nullptr;
}
inline const ::api_pb::GenesisResponse_AppState_Account_MultisigData& GenesisResponse_AppState_Account::_internal_multisig_data() const {
  const ::api_pb::GenesisResponse_AppState_Account_MultisigData* p = multisig_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_AppState_Account_MultisigData&>(
      ::api_pb::_GenesisResponse_AppState_Account_MultisigData_default_instance_);
}
inline const ::api_pb::GenesisResponse_AppState_Account_MultisigData& GenesisResponse_AppState_Account::multisig_data() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Account.multisig_data)
  return _internal_multisig_data();
}
inline void GenesisResponse_AppState_Account::unsafe_arena_set_allocated_multisig_data(
    ::api_pb::GenesisResponse_AppState_Account_MultisigData* multisig_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multisig_data_);
  }
  multisig_data_ = multisig_data;
  if (multisig_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.AppState.Account.multisig_data)
}
inline ::api_pb::GenesisResponse_AppState_Account_MultisigData* GenesisResponse_AppState_Account::release_multisig_data() {
  
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* temp = multisig_data_;
  multisig_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_AppState_Account_MultisigData* GenesisResponse_AppState_Account::unsafe_arena_release_multisig_data() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Account.multisig_data)
  
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* temp = multisig_data_;
  multisig_data_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_AppState_Account_MultisigData* GenesisResponse_AppState_Account::_internal_mutable_multisig_data() {
  
  if (multisig_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Account_MultisigData>(GetArenaForAllocation());
    multisig_data_ = p;
  }
  return multisig_data_;
}
inline ::api_pb::GenesisResponse_AppState_Account_MultisigData* GenesisResponse_AppState_Account::mutable_multisig_data() {
  ::api_pb::GenesisResponse_AppState_Account_MultisigData* _msg = _internal_mutable_multisig_data();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Account.multisig_data)
  return _msg;
}
inline void GenesisResponse_AppState_Account::set_allocated_multisig_data(::api_pb::GenesisResponse_AppState_Account_MultisigData* multisig_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete multisig_data_;
  }
  if (multisig_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_AppState_Account_MultisigData>::GetOwningArena(multisig_data);
    if (message_arena != submessage_arena) {
      multisig_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multisig_data, submessage_arena);
    }
    
  } else {
    
  }
  multisig_data_ = multisig_data;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Account.multisig_data)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_HaltBlock

// uint64 height = 1 [json_name = "height"];
inline void GenesisResponse_AppState_HaltBlock::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_HaltBlock::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_HaltBlock::height() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.HaltBlock.height)
  return _internal_height();
}
inline void GenesisResponse_AppState_HaltBlock::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void GenesisResponse_AppState_HaltBlock::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.HaltBlock.height)
}

// string candidate_key = 2 [json_name = "candidateKey"];
inline void GenesisResponse_AppState_HaltBlock::clear_candidate_key() {
  candidate_key_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_HaltBlock::candidate_key() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.HaltBlock.candidate_key)
  return _internal_candidate_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_HaltBlock::set_candidate_key(ArgT0&& arg0, ArgT... args) {
 
 candidate_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.HaltBlock.candidate_key)
}
inline std::string* GenesisResponse_AppState_HaltBlock::mutable_candidate_key() {
  std::string* _s = _internal_mutable_candidate_key();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.HaltBlock.candidate_key)
  return _s;
}
inline const std::string& GenesisResponse_AppState_HaltBlock::_internal_candidate_key() const {
  return candidate_key_.Get();
}
inline void GenesisResponse_AppState_HaltBlock::_internal_set_candidate_key(const std::string& value) {
  
  candidate_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_HaltBlock::_internal_mutable_candidate_key() {
  
  return candidate_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_HaltBlock::release_candidate_key() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.HaltBlock.candidate_key)
  return candidate_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_HaltBlock::set_allocated_candidate_key(std::string* candidate_key) {
  if (candidate_key != nullptr) {
    
  } else {
    
  }
  candidate_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.HaltBlock.candidate_key)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Pool

// uint64 coin0 = 1 [json_name = "coin0"];
inline void GenesisResponse_AppState_Pool::clear_coin0() {
  coin0_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Pool::_internal_coin0() const {
  return coin0_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Pool::coin0() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Pool.coin0)
  return _internal_coin0();
}
inline void GenesisResponse_AppState_Pool::_internal_set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin0_ = value;
}
inline void GenesisResponse_AppState_Pool::set_coin0(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin0(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Pool.coin0)
}

// uint64 coin1 = 2 [json_name = "coin1"];
inline void GenesisResponse_AppState_Pool::clear_coin1() {
  coin1_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Pool::_internal_coin1() const {
  return coin1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Pool::coin1() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Pool.coin1)
  return _internal_coin1();
}
inline void GenesisResponse_AppState_Pool::_internal_set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin1_ = value;
}
inline void GenesisResponse_AppState_Pool::set_coin1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin1(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Pool.coin1)
}

// string reserve0 = 3 [json_name = "reserve0"];
inline void GenesisResponse_AppState_Pool::clear_reserve0() {
  reserve0_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Pool::reserve0() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Pool.reserve0)
  return _internal_reserve0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Pool::set_reserve0(ArgT0&& arg0, ArgT... args) {
 
 reserve0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Pool.reserve0)
}
inline std::string* GenesisResponse_AppState_Pool::mutable_reserve0() {
  std::string* _s = _internal_mutable_reserve0();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Pool.reserve0)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Pool::_internal_reserve0() const {
  return reserve0_.Get();
}
inline void GenesisResponse_AppState_Pool::_internal_set_reserve0(const std::string& value) {
  
  reserve0_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Pool::_internal_mutable_reserve0() {
  
  return reserve0_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Pool::release_reserve0() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Pool.reserve0)
  return reserve0_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Pool::set_allocated_reserve0(std::string* reserve0) {
  if (reserve0 != nullptr) {
    
  } else {
    
  }
  reserve0_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve0,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Pool.reserve0)
}

// string reserve1 = 4 [json_name = "reserve1"];
inline void GenesisResponse_AppState_Pool::clear_reserve1() {
  reserve1_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Pool::reserve1() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Pool.reserve1)
  return _internal_reserve1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Pool::set_reserve1(ArgT0&& arg0, ArgT... args) {
 
 reserve1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Pool.reserve1)
}
inline std::string* GenesisResponse_AppState_Pool::mutable_reserve1() {
  std::string* _s = _internal_mutable_reserve1();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Pool.reserve1)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Pool::_internal_reserve1() const {
  return reserve1_.Get();
}
inline void GenesisResponse_AppState_Pool::_internal_set_reserve1(const std::string& value) {
  
  reserve1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Pool::_internal_mutable_reserve1() {
  
  return reserve1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Pool::release_reserve1() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Pool.reserve1)
  return reserve1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Pool::set_allocated_reserve1(std::string* reserve1) {
  if (reserve1 != nullptr) {
    
  } else {
    
  }
  reserve1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Pool.reserve1)
}

// uint64 id = 5 [json_name = "id"];
inline void GenesisResponse_AppState_Pool::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Pool::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Pool::id() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Pool.id)
  return _internal_id();
}
inline void GenesisResponse_AppState_Pool::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GenesisResponse_AppState_Pool::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Pool.id)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_Commission

// uint64 coin = 3 [json_name = "coin"];
inline void GenesisResponse_AppState_Commission::clear_coin() {
  coin_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Commission::_internal_coin() const {
  return coin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_Commission::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.coin)
  return _internal_coin();
}
inline void GenesisResponse_AppState_Commission::_internal_set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  coin_ = value;
}
inline void GenesisResponse_AppState_Commission::set_coin(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.coin)
}

// string payload_byte = 4 [json_name = "payloadByte"];
inline void GenesisResponse_AppState_Commission::clear_payload_byte() {
  payload_byte_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::payload_byte() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.payload_byte)
  return _internal_payload_byte();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_payload_byte(ArgT0&& arg0, ArgT... args) {
 
 payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.payload_byte)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_payload_byte() {
  std::string* _s = _internal_mutable_payload_byte();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.payload_byte)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_payload_byte() const {
  return payload_byte_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_payload_byte(const std::string& value) {
  
  payload_byte_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_payload_byte() {
  
  return payload_byte_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_payload_byte() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.payload_byte)
  return payload_byte_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_payload_byte(std::string* payload_byte) {
  if (payload_byte != nullptr) {
    
  } else {
    
  }
  payload_byte_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_byte,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.payload_byte)
}

// string send = 5 [json_name = "send"];
inline void GenesisResponse_AppState_Commission::clear_send() {
  send_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::send() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.send)
  return _internal_send();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_send(ArgT0&& arg0, ArgT... args) {
 
 send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.send)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_send() {
  std::string* _s = _internal_mutable_send();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.send)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_send() const {
  return send_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_send(const std::string& value) {
  
  send_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_send() {
  
  return send_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_send() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.send)
  return send_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_send(std::string* send) {
  if (send != nullptr) {
    
  } else {
    
  }
  send_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), send,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.send)
}

// string buy_bancor = 38 [json_name = "buyBancor"];
inline void GenesisResponse_AppState_Commission::clear_buy_bancor() {
  buy_bancor_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::buy_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.buy_bancor)
  return _internal_buy_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_buy_bancor(ArgT0&& arg0, ArgT... args) {
 
 buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.buy_bancor)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_buy_bancor() {
  std::string* _s = _internal_mutable_buy_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.buy_bancor)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_buy_bancor() const {
  return buy_bancor_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_buy_bancor(const std::string& value) {
  
  buy_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_buy_bancor() {
  
  return buy_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_buy_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.buy_bancor)
  return buy_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_buy_bancor(std::string* buy_bancor) {
  if (buy_bancor != nullptr) {
    
  } else {
    
  }
  buy_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.buy_bancor)
}

// string sell_bancor = 39 [json_name = "sellBancor"];
inline void GenesisResponse_AppState_Commission::clear_sell_bancor() {
  sell_bancor_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::sell_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.sell_bancor)
  return _internal_sell_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_sell_bancor(ArgT0&& arg0, ArgT... args) {
 
 sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.sell_bancor)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_sell_bancor() {
  std::string* _s = _internal_mutable_sell_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.sell_bancor)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_sell_bancor() const {
  return sell_bancor_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_sell_bancor(const std::string& value) {
  
  sell_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_sell_bancor() {
  
  return sell_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_sell_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.sell_bancor)
  return sell_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_sell_bancor(std::string* sell_bancor) {
  if (sell_bancor != nullptr) {
    
  } else {
    
  }
  sell_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.sell_bancor)
}

// string sell_all_bancor = 40 [json_name = "sellAllBancor"];
inline void GenesisResponse_AppState_Commission::clear_sell_all_bancor() {
  sell_all_bancor_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::sell_all_bancor() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.sell_all_bancor)
  return _internal_sell_all_bancor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_sell_all_bancor(ArgT0&& arg0, ArgT... args) {
 
 sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.sell_all_bancor)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_sell_all_bancor() {
  std::string* _s = _internal_mutable_sell_all_bancor();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.sell_all_bancor)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_sell_all_bancor() const {
  return sell_all_bancor_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_sell_all_bancor(const std::string& value) {
  
  sell_all_bancor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_sell_all_bancor() {
  
  return sell_all_bancor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_sell_all_bancor() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.sell_all_bancor)
  return sell_all_bancor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_sell_all_bancor(std::string* sell_all_bancor) {
  if (sell_all_bancor != nullptr) {
    
  } else {
    
  }
  sell_all_bancor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_bancor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.sell_all_bancor)
}

// string buy_pool_base = 41 [json_name = "buyPoolBase"];
inline void GenesisResponse_AppState_Commission::clear_buy_pool_base() {
  buy_pool_base_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::buy_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.buy_pool_base)
  return _internal_buy_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_buy_pool_base(ArgT0&& arg0, ArgT... args) {
 
 buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.buy_pool_base)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_buy_pool_base() {
  std::string* _s = _internal_mutable_buy_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.buy_pool_base)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_buy_pool_base() const {
  return buy_pool_base_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_buy_pool_base(const std::string& value) {
  
  buy_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_buy_pool_base() {
  
  return buy_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_buy_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.buy_pool_base)
  return buy_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_buy_pool_base(std::string* buy_pool_base) {
  if (buy_pool_base != nullptr) {
    
  } else {
    
  }
  buy_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.buy_pool_base)
}

// string buy_pool_delta = 53 [json_name = "buyPoolDelta"];
inline void GenesisResponse_AppState_Commission::clear_buy_pool_delta() {
  buy_pool_delta_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::buy_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.buy_pool_delta)
  return _internal_buy_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_buy_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.buy_pool_delta)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_buy_pool_delta() {
  std::string* _s = _internal_mutable_buy_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.buy_pool_delta)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_buy_pool_delta() const {
  return buy_pool_delta_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_buy_pool_delta(const std::string& value) {
  
  buy_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_buy_pool_delta() {
  
  return buy_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_buy_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.buy_pool_delta)
  return buy_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_buy_pool_delta(std::string* buy_pool_delta) {
  if (buy_pool_delta != nullptr) {
    
  } else {
    
  }
  buy_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buy_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.buy_pool_delta)
}

// string sell_pool_base = 42 [json_name = "sellPoolBase"];
inline void GenesisResponse_AppState_Commission::clear_sell_pool_base() {
  sell_pool_base_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::sell_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.sell_pool_base)
  return _internal_sell_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_sell_pool_base(ArgT0&& arg0, ArgT... args) {
 
 sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.sell_pool_base)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_sell_pool_base() {
  std::string* _s = _internal_mutable_sell_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.sell_pool_base)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_sell_pool_base() const {
  return sell_pool_base_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_sell_pool_base(const std::string& value) {
  
  sell_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_sell_pool_base() {
  
  return sell_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_sell_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.sell_pool_base)
  return sell_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_sell_pool_base(std::string* sell_pool_base) {
  if (sell_pool_base != nullptr) {
    
  } else {
    
  }
  sell_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.sell_pool_base)
}

// string sell_pool_delta = 54 [json_name = "sellPoolDelta"];
inline void GenesisResponse_AppState_Commission::clear_sell_pool_delta() {
  sell_pool_delta_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::sell_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.sell_pool_delta)
  return _internal_sell_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_sell_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.sell_pool_delta)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_sell_pool_delta() {
  std::string* _s = _internal_mutable_sell_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.sell_pool_delta)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_sell_pool_delta() const {
  return sell_pool_delta_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_sell_pool_delta(const std::string& value) {
  
  sell_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_sell_pool_delta() {
  
  return sell_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_sell_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.sell_pool_delta)
  return sell_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_sell_pool_delta(std::string* sell_pool_delta) {
  if (sell_pool_delta != nullptr) {
    
  } else {
    
  }
  sell_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.sell_pool_delta)
}

// string sell_all_pool_base = 43 [json_name = "sellAllPoolBase"];
inline void GenesisResponse_AppState_Commission::clear_sell_all_pool_base() {
  sell_all_pool_base_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::sell_all_pool_base() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base)
  return _internal_sell_all_pool_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_sell_all_pool_base(ArgT0&& arg0, ArgT... args) {
 
 sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_sell_all_pool_base() {
  std::string* _s = _internal_mutable_sell_all_pool_base();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_sell_all_pool_base() const {
  return sell_all_pool_base_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_sell_all_pool_base(const std::string& value) {
  
  sell_all_pool_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_sell_all_pool_base() {
  
  return sell_all_pool_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_sell_all_pool_base() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base)
  return sell_all_pool_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_sell_all_pool_base(std::string* sell_all_pool_base) {
  if (sell_all_pool_base != nullptr) {
    
  } else {
    
  }
  sell_all_pool_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_pool_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_base)
}

// string sell_all_pool_delta = 55 [json_name = "sellAllPoolDelta"];
inline void GenesisResponse_AppState_Commission::clear_sell_all_pool_delta() {
  sell_all_pool_delta_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::sell_all_pool_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta)
  return _internal_sell_all_pool_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_sell_all_pool_delta(ArgT0&& arg0, ArgT... args) {
 
 sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_sell_all_pool_delta() {
  std::string* _s = _internal_mutable_sell_all_pool_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_sell_all_pool_delta() const {
  return sell_all_pool_delta_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_sell_all_pool_delta(const std::string& value) {
  
  sell_all_pool_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_sell_all_pool_delta() {
  
  return sell_all_pool_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_sell_all_pool_delta() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta)
  return sell_all_pool_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_sell_all_pool_delta(std::string* sell_all_pool_delta) {
  if (sell_all_pool_delta != nullptr) {
    
  } else {
    
  }
  sell_all_pool_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sell_all_pool_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.sell_all_pool_delta)
}

// string create_ticker3 = 7 [json_name = "createTicker3"];
inline void GenesisResponse_AppState_Commission::clear_create_ticker3() {
  create_ticker3_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_ticker3() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_ticker3)
  return _internal_create_ticker3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_ticker3(ArgT0&& arg0, ArgT... args) {
 
 create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_ticker3)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_ticker3() {
  std::string* _s = _internal_mutable_create_ticker3();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_ticker3)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_ticker3() const {
  return create_ticker3_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_ticker3(const std::string& value) {
  
  create_ticker3_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_ticker3() {
  
  return create_ticker3_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_ticker3() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_ticker3)
  return create_ticker3_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_ticker3(std::string* create_ticker3) {
  if (create_ticker3 != nullptr) {
    
  } else {
    
  }
  create_ticker3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker3,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_ticker3)
}

// string create_ticker4 = 8 [json_name = "createTicker4"];
inline void GenesisResponse_AppState_Commission::clear_create_ticker4() {
  create_ticker4_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_ticker4() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_ticker4)
  return _internal_create_ticker4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_ticker4(ArgT0&& arg0, ArgT... args) {
 
 create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_ticker4)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_ticker4() {
  std::string* _s = _internal_mutable_create_ticker4();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_ticker4)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_ticker4() const {
  return create_ticker4_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_ticker4(const std::string& value) {
  
  create_ticker4_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_ticker4() {
  
  return create_ticker4_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_ticker4() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_ticker4)
  return create_ticker4_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_ticker4(std::string* create_ticker4) {
  if (create_ticker4 != nullptr) {
    
  } else {
    
  }
  create_ticker4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker4,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_ticker4)
}

// string create_ticker5 = 9 [json_name = "createTicker5"];
inline void GenesisResponse_AppState_Commission::clear_create_ticker5() {
  create_ticker5_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_ticker5() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_ticker5)
  return _internal_create_ticker5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_ticker5(ArgT0&& arg0, ArgT... args) {
 
 create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_ticker5)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_ticker5() {
  std::string* _s = _internal_mutable_create_ticker5();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_ticker5)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_ticker5() const {
  return create_ticker5_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_ticker5(const std::string& value) {
  
  create_ticker5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_ticker5() {
  
  return create_ticker5_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_ticker5() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_ticker5)
  return create_ticker5_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_ticker5(std::string* create_ticker5) {
  if (create_ticker5 != nullptr) {
    
  } else {
    
  }
  create_ticker5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker5,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_ticker5)
}

// string create_ticker6 = 10 [json_name = "createTicker6"];
inline void GenesisResponse_AppState_Commission::clear_create_ticker6() {
  create_ticker6_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_ticker6() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_ticker6)
  return _internal_create_ticker6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_ticker6(ArgT0&& arg0, ArgT... args) {
 
 create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_ticker6)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_ticker6() {
  std::string* _s = _internal_mutable_create_ticker6();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_ticker6)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_ticker6() const {
  return create_ticker6_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_ticker6(const std::string& value) {
  
  create_ticker6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_ticker6() {
  
  return create_ticker6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_ticker6() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_ticker6)
  return create_ticker6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_ticker6(std::string* create_ticker6) {
  if (create_ticker6 != nullptr) {
    
  } else {
    
  }
  create_ticker6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker6,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_ticker6)
}

// string create_ticker7_10 = 11 [json_name = "createTicker710"];
inline void GenesisResponse_AppState_Commission::clear_create_ticker7_10() {
  create_ticker7_10_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_ticker7_10() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_ticker7_10)
  return _internal_create_ticker7_10();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_ticker7_10(ArgT0&& arg0, ArgT... args) {
 
 create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_ticker7_10)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_ticker7_10() {
  std::string* _s = _internal_mutable_create_ticker7_10();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_ticker7_10)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_ticker7_10() const {
  return create_ticker7_10_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_ticker7_10(const std::string& value) {
  
  create_ticker7_10_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_ticker7_10() {
  
  return create_ticker7_10_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_ticker7_10() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_ticker7_10)
  return create_ticker7_10_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_ticker7_10(std::string* create_ticker7_10) {
  if (create_ticker7_10 != nullptr) {
    
  } else {
    
  }
  create_ticker7_10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_ticker7_10,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_ticker7_10)
}

// string create_coin = 34 [json_name = "createCoin"];
inline void GenesisResponse_AppState_Commission::clear_create_coin() {
  create_coin_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_coin)
  return _internal_create_coin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_coin(ArgT0&& arg0, ArgT... args) {
 
 create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_coin)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_coin() {
  std::string* _s = _internal_mutable_create_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_coin)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_coin() const {
  return create_coin_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_coin(const std::string& value) {
  
  create_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_coin() {
  
  return create_coin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_coin() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_coin)
  return create_coin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_coin(std::string* create_coin) {
  if (create_coin != nullptr) {
    
  } else {
    
  }
  create_coin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_coin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_coin)
}

// string create_token = 35 [json_name = "createToken"];
inline void GenesisResponse_AppState_Commission::clear_create_token() {
  create_token_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_token() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_token)
  return _internal_create_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_token(ArgT0&& arg0, ArgT... args) {
 
 create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_token)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_token() {
  std::string* _s = _internal_mutable_create_token();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_token)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_token() const {
  return create_token_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_token(const std::string& value) {
  
  create_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_token() {
  
  return create_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_token() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_token)
  return create_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_token(std::string* create_token) {
  if (create_token != nullptr) {
    
  } else {
    
  }
  create_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_token)
}

// string recreate_coin = 36 [json_name = "recreateCoin"];
inline void GenesisResponse_AppState_Commission::clear_recreate_coin() {
  recreate_coin_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::recreate_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.recreate_coin)
  return _internal_recreate_coin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_recreate_coin(ArgT0&& arg0, ArgT... args) {
 
 recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.recreate_coin)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_recreate_coin() {
  std::string* _s = _internal_mutable_recreate_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.recreate_coin)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_recreate_coin() const {
  return recreate_coin_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_recreate_coin(const std::string& value) {
  
  recreate_coin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_recreate_coin() {
  
  return recreate_coin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_recreate_coin() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.recreate_coin)
  return recreate_coin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_recreate_coin(std::string* recreate_coin) {
  if (recreate_coin != nullptr) {
    
  } else {
    
  }
  recreate_coin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recreate_coin,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.recreate_coin)
}

// string recreate_token = 37 [json_name = "recreateToken"];
inline void GenesisResponse_AppState_Commission::clear_recreate_token() {
  recreate_token_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::recreate_token() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.recreate_token)
  return _internal_recreate_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_recreate_token(ArgT0&& arg0, ArgT... args) {
 
 recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.recreate_token)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_recreate_token() {
  std::string* _s = _internal_mutable_recreate_token();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.recreate_token)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_recreate_token() const {
  return recreate_token_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_recreate_token(const std::string& value) {
  
  recreate_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_recreate_token() {
  
  return recreate_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_recreate_token() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.recreate_token)
  return recreate_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_recreate_token(std::string* recreate_token) {
  if (recreate_token != nullptr) {
    
  } else {
    
  }
  recreate_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recreate_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.recreate_token)
}

// string declare_candidacy = 13 [json_name = "declareCandidacy"];
inline void GenesisResponse_AppState_Commission::clear_declare_candidacy() {
  declare_candidacy_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::declare_candidacy() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.declare_candidacy)
  return _internal_declare_candidacy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_declare_candidacy(ArgT0&& arg0, ArgT... args) {
 
 declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.declare_candidacy)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_declare_candidacy() {
  std::string* _s = _internal_mutable_declare_candidacy();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.declare_candidacy)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_declare_candidacy() const {
  return declare_candidacy_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_declare_candidacy(const std::string& value) {
  
  declare_candidacy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_declare_candidacy() {
  
  return declare_candidacy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_declare_candidacy() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.declare_candidacy)
  return declare_candidacy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_declare_candidacy(std::string* declare_candidacy) {
  if (declare_candidacy != nullptr) {
    
  } else {
    
  }
  declare_candidacy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), declare_candidacy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.declare_candidacy)
}

// string delegate = 14 [json_name = "delegate"];
inline void GenesisResponse_AppState_Commission::clear_delegate() {
  delegate_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::delegate() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.delegate)
  return _internal_delegate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_delegate(ArgT0&& arg0, ArgT... args) {
 
 delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.delegate)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_delegate() {
  std::string* _s = _internal_mutable_delegate();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.delegate)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_delegate() const {
  return delegate_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_delegate(const std::string& value) {
  
  delegate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_delegate() {
  
  return delegate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_delegate() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.delegate)
  return delegate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_delegate(std::string* delegate) {
  if (delegate != nullptr) {
    
  } else {
    
  }
  delegate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.delegate)
}

// string unbond = 15 [json_name = "unbond"];
inline void GenesisResponse_AppState_Commission::clear_unbond() {
  unbond_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::unbond() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.unbond)
  return _internal_unbond();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_unbond(ArgT0&& arg0, ArgT... args) {
 
 unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.unbond)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_unbond() {
  std::string* _s = _internal_mutable_unbond();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.unbond)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_unbond() const {
  return unbond_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_unbond(const std::string& value) {
  
  unbond_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_unbond() {
  
  return unbond_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_unbond() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.unbond)
  return unbond_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_unbond(std::string* unbond) {
  if (unbond != nullptr) {
    
  } else {
    
  }
  unbond_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unbond,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.unbond)
}

// string redeem_check = 16 [json_name = "redeemCheck"];
inline void GenesisResponse_AppState_Commission::clear_redeem_check() {
  redeem_check_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::redeem_check() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.redeem_check)
  return _internal_redeem_check();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_redeem_check(ArgT0&& arg0, ArgT... args) {
 
 redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.redeem_check)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_redeem_check() {
  std::string* _s = _internal_mutable_redeem_check();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.redeem_check)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_redeem_check() const {
  return redeem_check_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_redeem_check(const std::string& value) {
  
  redeem_check_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_redeem_check() {
  
  return redeem_check_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_redeem_check() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.redeem_check)
  return redeem_check_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_redeem_check(std::string* redeem_check) {
  if (redeem_check != nullptr) {
    
  } else {
    
  }
  redeem_check_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redeem_check,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.redeem_check)
}

// string set_candidate_on = 44 [json_name = "setCandidateOn"];
inline void GenesisResponse_AppState_Commission::clear_set_candidate_on() {
  set_candidate_on_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::set_candidate_on() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.set_candidate_on)
  return _internal_set_candidate_on();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_set_candidate_on(ArgT0&& arg0, ArgT... args) {
 
 set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.set_candidate_on)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_set_candidate_on() {
  std::string* _s = _internal_mutable_set_candidate_on();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.set_candidate_on)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_set_candidate_on() const {
  return set_candidate_on_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_set_candidate_on(const std::string& value) {
  
  set_candidate_on_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_set_candidate_on() {
  
  return set_candidate_on_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_set_candidate_on() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.set_candidate_on)
  return set_candidate_on_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_set_candidate_on(std::string* set_candidate_on) {
  if (set_candidate_on != nullptr) {
    
  } else {
    
  }
  set_candidate_on_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_candidate_on,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.set_candidate_on)
}

// string set_candidate_off = 45 [json_name = "setCandidateOff"];
inline void GenesisResponse_AppState_Commission::clear_set_candidate_off() {
  set_candidate_off_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::set_candidate_off() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.set_candidate_off)
  return _internal_set_candidate_off();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_set_candidate_off(ArgT0&& arg0, ArgT... args) {
 
 set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.set_candidate_off)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_set_candidate_off() {
  std::string* _s = _internal_mutable_set_candidate_off();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.set_candidate_off)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_set_candidate_off() const {
  return set_candidate_off_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_set_candidate_off(const std::string& value) {
  
  set_candidate_off_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_set_candidate_off() {
  
  return set_candidate_off_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_set_candidate_off() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.set_candidate_off)
  return set_candidate_off_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_set_candidate_off(std::string* set_candidate_off) {
  if (set_candidate_off != nullptr) {
    
  } else {
    
  }
  set_candidate_off_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_candidate_off,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.set_candidate_off)
}

// string create_multisig = 18 [json_name = "createMultisig"];
inline void GenesisResponse_AppState_Commission::clear_create_multisig() {
  create_multisig_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_multisig)
  return _internal_create_multisig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_multisig(ArgT0&& arg0, ArgT... args) {
 
 create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_multisig)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_multisig() {
  std::string* _s = _internal_mutable_create_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_multisig)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_multisig() const {
  return create_multisig_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_multisig(const std::string& value) {
  
  create_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_multisig() {
  
  return create_multisig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_multisig)
  return create_multisig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_multisig(std::string* create_multisig) {
  if (create_multisig != nullptr) {
    
  } else {
    
  }
  create_multisig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_multisig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_multisig)
}

// string multisend_base = 51 [json_name = "multisendBase"];
inline void GenesisResponse_AppState_Commission::clear_multisend_base() {
  multisend_base_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::multisend_base() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.multisend_base)
  return _internal_multisend_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_multisend_base(ArgT0&& arg0, ArgT... args) {
 
 multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.multisend_base)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_multisend_base() {
  std::string* _s = _internal_mutable_multisend_base();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.multisend_base)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_multisend_base() const {
  return multisend_base_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_multisend_base(const std::string& value) {
  
  multisend_base_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_multisend_base() {
  
  return multisend_base_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_multisend_base() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.multisend_base)
  return multisend_base_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_multisend_base(std::string* multisend_base) {
  if (multisend_base != nullptr) {
    
  } else {
    
  }
  multisend_base_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multisend_base,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.multisend_base)
}

// string multisend_delta = 52 [json_name = "multisendDelta"];
inline void GenesisResponse_AppState_Commission::clear_multisend_delta() {
  multisend_delta_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::multisend_delta() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.multisend_delta)
  return _internal_multisend_delta();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_multisend_delta(ArgT0&& arg0, ArgT... args) {
 
 multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.multisend_delta)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_multisend_delta() {
  std::string* _s = _internal_mutable_multisend_delta();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.multisend_delta)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_multisend_delta() const {
  return multisend_delta_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_multisend_delta(const std::string& value) {
  
  multisend_delta_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_multisend_delta() {
  
  return multisend_delta_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_multisend_delta() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.multisend_delta)
  return multisend_delta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_multisend_delta(std::string* multisend_delta) {
  if (multisend_delta != nullptr) {
    
  } else {
    
  }
  multisend_delta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multisend_delta,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.multisend_delta)
}

// string edit_candidate = 20 [json_name = "editCandidate"];
inline void GenesisResponse_AppState_Commission::clear_edit_candidate() {
  edit_candidate_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::edit_candidate() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.edit_candidate)
  return _internal_edit_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_edit_candidate(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.edit_candidate)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_edit_candidate() {
  std::string* _s = _internal_mutable_edit_candidate();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.edit_candidate)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_edit_candidate() const {
  return edit_candidate_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_edit_candidate(const std::string& value) {
  
  edit_candidate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_edit_candidate() {
  
  return edit_candidate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_edit_candidate() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.edit_candidate)
  return edit_candidate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_edit_candidate(std::string* edit_candidate) {
  if (edit_candidate != nullptr) {
    
  } else {
    
  }
  edit_candidate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.edit_candidate)
}

// string set_halt_block = 21 [json_name = "setHaltBlock"];
inline void GenesisResponse_AppState_Commission::clear_set_halt_block() {
  set_halt_block_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::set_halt_block() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.set_halt_block)
  return _internal_set_halt_block();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_set_halt_block(ArgT0&& arg0, ArgT... args) {
 
 set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.set_halt_block)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_set_halt_block() {
  std::string* _s = _internal_mutable_set_halt_block();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.set_halt_block)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_set_halt_block() const {
  return set_halt_block_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_set_halt_block(const std::string& value) {
  
  set_halt_block_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_set_halt_block() {
  
  return set_halt_block_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_set_halt_block() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.set_halt_block)
  return set_halt_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_set_halt_block(std::string* set_halt_block) {
  if (set_halt_block != nullptr) {
    
  } else {
    
  }
  set_halt_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_halt_block,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.set_halt_block)
}

// string edit_ticker_owner = 22 [json_name = "editTickerOwner"];
inline void GenesisResponse_AppState_Commission::clear_edit_ticker_owner() {
  edit_ticker_owner_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::edit_ticker_owner() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner)
  return _internal_edit_ticker_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_edit_ticker_owner(ArgT0&& arg0, ArgT... args) {
 
 edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_edit_ticker_owner() {
  std::string* _s = _internal_mutable_edit_ticker_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_edit_ticker_owner() const {
  return edit_ticker_owner_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_edit_ticker_owner(const std::string& value) {
  
  edit_ticker_owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_edit_ticker_owner() {
  
  return edit_ticker_owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_edit_ticker_owner() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner)
  return edit_ticker_owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_edit_ticker_owner(std::string* edit_ticker_owner) {
  if (edit_ticker_owner != nullptr) {
    
  } else {
    
  }
  edit_ticker_owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_ticker_owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.edit_ticker_owner)
}

// string edit_multisig = 23 [json_name = "editMultisig"];
inline void GenesisResponse_AppState_Commission::clear_edit_multisig() {
  edit_multisig_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::edit_multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.edit_multisig)
  return _internal_edit_multisig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_edit_multisig(ArgT0&& arg0, ArgT... args) {
 
 edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.edit_multisig)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_edit_multisig() {
  std::string* _s = _internal_mutable_edit_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.edit_multisig)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_edit_multisig() const {
  return edit_multisig_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_edit_multisig(const std::string& value) {
  
  edit_multisig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_edit_multisig() {
  
  return edit_multisig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_edit_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.edit_multisig)
  return edit_multisig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_edit_multisig(std::string* edit_multisig) {
  if (edit_multisig != nullptr) {
    
  } else {
    
  }
  edit_multisig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_multisig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.edit_multisig)
}

// string edit_candidate_public_key = 25 [json_name = "editCandidatePublicKey"];
inline void GenesisResponse_AppState_Commission::clear_edit_candidate_public_key() {
  edit_candidate_public_key_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::edit_candidate_public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key)
  return _internal_edit_candidate_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_edit_candidate_public_key(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_edit_candidate_public_key() {
  std::string* _s = _internal_mutable_edit_candidate_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_edit_candidate_public_key() const {
  return edit_candidate_public_key_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_edit_candidate_public_key(const std::string& value) {
  
  edit_candidate_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_edit_candidate_public_key() {
  
  return edit_candidate_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_edit_candidate_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key)
  return edit_candidate_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_edit_candidate_public_key(std::string* edit_candidate_public_key) {
  if (edit_candidate_public_key != nullptr) {
    
  } else {
    
  }
  edit_candidate_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate_public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.edit_candidate_public_key)
}

// string create_swap_pool = 48 [json_name = "createSwapPool"];
inline void GenesisResponse_AppState_Commission::clear_create_swap_pool() {
  create_swap_pool_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::create_swap_pool() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.create_swap_pool)
  return _internal_create_swap_pool();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_create_swap_pool(ArgT0&& arg0, ArgT... args) {
 
 create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.create_swap_pool)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_create_swap_pool() {
  std::string* _s = _internal_mutable_create_swap_pool();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.create_swap_pool)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_create_swap_pool() const {
  return create_swap_pool_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_create_swap_pool(const std::string& value) {
  
  create_swap_pool_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_create_swap_pool() {
  
  return create_swap_pool_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_create_swap_pool() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.create_swap_pool)
  return create_swap_pool_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_create_swap_pool(std::string* create_swap_pool) {
  if (create_swap_pool != nullptr) {
    
  } else {
    
  }
  create_swap_pool_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_swap_pool,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.create_swap_pool)
}

// string add_liquidity = 49 [json_name = "addLiquidity"];
inline void GenesisResponse_AppState_Commission::clear_add_liquidity() {
  add_liquidity_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::add_liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.add_liquidity)
  return _internal_add_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_add_liquidity(ArgT0&& arg0, ArgT... args) {
 
 add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.add_liquidity)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_add_liquidity() {
  std::string* _s = _internal_mutable_add_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.add_liquidity)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_add_liquidity() const {
  return add_liquidity_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_add_liquidity(const std::string& value) {
  
  add_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_add_liquidity() {
  
  return add_liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_add_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.add_liquidity)
  return add_liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_add_liquidity(std::string* add_liquidity) {
  if (add_liquidity != nullptr) {
    
  } else {
    
  }
  add_liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.add_liquidity)
}

// string remove_liquidity = 50 [json_name = "removeLiquidity"];
inline void GenesisResponse_AppState_Commission::clear_remove_liquidity() {
  remove_liquidity_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::remove_liquidity() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.remove_liquidity)
  return _internal_remove_liquidity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_remove_liquidity(ArgT0&& arg0, ArgT... args) {
 
 remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.remove_liquidity)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_remove_liquidity() {
  std::string* _s = _internal_mutable_remove_liquidity();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.remove_liquidity)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_remove_liquidity() const {
  return remove_liquidity_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_remove_liquidity(const std::string& value) {
  
  remove_liquidity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_remove_liquidity() {
  
  return remove_liquidity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_remove_liquidity() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.remove_liquidity)
  return remove_liquidity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_remove_liquidity(std::string* remove_liquidity) {
  if (remove_liquidity != nullptr) {
    
  } else {
    
  }
  remove_liquidity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remove_liquidity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.remove_liquidity)
}

// string edit_candidate_commission = 28 [json_name = "editCandidateCommission"];
inline void GenesisResponse_AppState_Commission::clear_edit_candidate_commission() {
  edit_candidate_commission_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::edit_candidate_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission)
  return _internal_edit_candidate_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_edit_candidate_commission(ArgT0&& arg0, ArgT... args) {
 
 edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_edit_candidate_commission() {
  std::string* _s = _internal_mutable_edit_candidate_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_edit_candidate_commission() const {
  return edit_candidate_commission_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_edit_candidate_commission(const std::string& value) {
  
  edit_candidate_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_edit_candidate_commission() {
  
  return edit_candidate_commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_edit_candidate_commission() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission)
  return edit_candidate_commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_edit_candidate_commission(std::string* edit_candidate_commission) {
  if (edit_candidate_commission != nullptr) {
    
  } else {
    
  }
  edit_candidate_commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_candidate_commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.edit_candidate_commission)
}

// string mint_token = 46 [json_name = "mintToken"];
inline void GenesisResponse_AppState_Commission::clear_mint_token() {
  mint_token_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::mint_token() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.mint_token)
  return _internal_mint_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_mint_token(ArgT0&& arg0, ArgT... args) {
 
 mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.mint_token)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_mint_token() {
  std::string* _s = _internal_mutable_mint_token();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.mint_token)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_mint_token() const {
  return mint_token_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_mint_token(const std::string& value) {
  
  mint_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_mint_token() {
  
  return mint_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_mint_token() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.mint_token)
  return mint_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_mint_token(std::string* mint_token) {
  if (mint_token != nullptr) {
    
  } else {
    
  }
  mint_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mint_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.mint_token)
}

// string burn_token = 47 [json_name = "burnToken"];
inline void GenesisResponse_AppState_Commission::clear_burn_token() {
  burn_token_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::burn_token() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.burn_token)
  return _internal_burn_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_burn_token(ArgT0&& arg0, ArgT... args) {
 
 burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.burn_token)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_burn_token() {
  std::string* _s = _internal_mutable_burn_token();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.burn_token)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_burn_token() const {
  return burn_token_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_burn_token(const std::string& value) {
  
  burn_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_burn_token() {
  
  return burn_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_burn_token() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.burn_token)
  return burn_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_burn_token(std::string* burn_token) {
  if (burn_token != nullptr) {
    
  } else {
    
  }
  burn_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), burn_token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.burn_token)
}

// string vote_commission = 31 [json_name = "voteCommission"];
inline void GenesisResponse_AppState_Commission::clear_vote_commission() {
  vote_commission_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::vote_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.vote_commission)
  return _internal_vote_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_vote_commission(ArgT0&& arg0, ArgT... args) {
 
 vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.vote_commission)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_vote_commission() {
  std::string* _s = _internal_mutable_vote_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.vote_commission)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_vote_commission() const {
  return vote_commission_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_vote_commission(const std::string& value) {
  
  vote_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_vote_commission() {
  
  return vote_commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_vote_commission() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.vote_commission)
  return vote_commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_vote_commission(std::string* vote_commission) {
  if (vote_commission != nullptr) {
    
  } else {
    
  }
  vote_commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.vote_commission)
}

// string vote_update = 32 [json_name = "voteUpdate"];
inline void GenesisResponse_AppState_Commission::clear_vote_update() {
  vote_update_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::vote_update() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.vote_update)
  return _internal_vote_update();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_vote_update(ArgT0&& arg0, ArgT... args) {
 
 vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.vote_update)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_vote_update() {
  std::string* _s = _internal_mutable_vote_update();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.vote_update)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_vote_update() const {
  return vote_update_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_vote_update(const std::string& value) {
  
  vote_update_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_vote_update() {
  
  return vote_update_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_vote_update() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.vote_update)
  return vote_update_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_vote_update(std::string* vote_update) {
  if (vote_update != nullptr) {
    
  } else {
    
  }
  vote_update_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_update,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.vote_update)
}

// string failed_tx = 56 [json_name = "failedTx"];
inline void GenesisResponse_AppState_Commission::clear_failed_tx() {
  failed_tx_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::failed_tx() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.failed_tx)
  return _internal_failed_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_failed_tx(ArgT0&& arg0, ArgT... args) {
 
 failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.failed_tx)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_failed_tx() {
  std::string* _s = _internal_mutable_failed_tx();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.failed_tx)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_failed_tx() const {
  return failed_tx_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_failed_tx(const std::string& value) {
  
  failed_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_failed_tx() {
  
  return failed_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_failed_tx() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.failed_tx)
  return failed_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_failed_tx(std::string* failed_tx) {
  if (failed_tx != nullptr) {
    
  } else {
    
  }
  failed_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failed_tx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.failed_tx)
}

// string add_limit_order = 57 [json_name = "addLimitOrder"];
inline void GenesisResponse_AppState_Commission::clear_add_limit_order() {
  add_limit_order_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::add_limit_order() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.add_limit_order)
  return _internal_add_limit_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_add_limit_order(ArgT0&& arg0, ArgT... args) {
 
 add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.add_limit_order)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_add_limit_order() {
  std::string* _s = _internal_mutable_add_limit_order();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.add_limit_order)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_add_limit_order() const {
  return add_limit_order_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_add_limit_order(const std::string& value) {
  
  add_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_add_limit_order() {
  
  return add_limit_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_add_limit_order() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.add_limit_order)
  return add_limit_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_add_limit_order(std::string* add_limit_order) {
  if (add_limit_order != nullptr) {
    
  } else {
    
  }
  add_limit_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_limit_order,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.add_limit_order)
}

// string remove_limit_order = 58 [json_name = "removeLimitOrder"];
inline void GenesisResponse_AppState_Commission::clear_remove_limit_order() {
  remove_limit_order_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState_Commission::remove_limit_order() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.Commission.remove_limit_order)
  return _internal_remove_limit_order();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState_Commission::set_remove_limit_order(ArgT0&& arg0, ArgT... args) {
 
 remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.Commission.remove_limit_order)
}
inline std::string* GenesisResponse_AppState_Commission::mutable_remove_limit_order() {
  std::string* _s = _internal_mutable_remove_limit_order();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.Commission.remove_limit_order)
  return _s;
}
inline const std::string& GenesisResponse_AppState_Commission::_internal_remove_limit_order() const {
  return remove_limit_order_.Get();
}
inline void GenesisResponse_AppState_Commission::_internal_set_remove_limit_order(const std::string& value) {
  
  remove_limit_order_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::_internal_mutable_remove_limit_order() {
  
  return remove_limit_order_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState_Commission::release_remove_limit_order() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.Commission.remove_limit_order)
  return remove_limit_order_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState_Commission::set_allocated_remove_limit_order(std::string* remove_limit_order) {
  if (remove_limit_order != nullptr) {
    
  } else {
    
  }
  remove_limit_order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remove_limit_order,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.Commission.remove_limit_order)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState_CommissionVote

// uint64 height = 1 [json_name = "height"];
inline void GenesisResponse_AppState_CommissionVote::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_CommissionVote::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState_CommissionVote::height() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.CommissionVote.height)
  return _internal_height();
}
inline void GenesisResponse_AppState_CommissionVote::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void GenesisResponse_AppState_CommissionVote::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.CommissionVote.height)
}

// repeated string votes = 2 [json_name = "votes"];
inline int GenesisResponse_AppState_CommissionVote::_internal_votes_size() const {
  return votes_.size();
}
inline int GenesisResponse_AppState_CommissionVote::votes_size() const {
  return _internal_votes_size();
}
inline void GenesisResponse_AppState_CommissionVote::clear_votes() {
  votes_.Clear();
}
inline std::string* GenesisResponse_AppState_CommissionVote::add_votes() {
  std::string* _s = _internal_add_votes();
  // @@protoc_insertion_point(field_add_mutable:api_pb.GenesisResponse.AppState.CommissionVote.votes)
  return _s;
}
inline const std::string& GenesisResponse_AppState_CommissionVote::_internal_votes(int index) const {
  return votes_.Get(index);
}
inline const std::string& GenesisResponse_AppState_CommissionVote::votes(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.CommissionVote.votes)
  return _internal_votes(index);
}
inline std::string* GenesisResponse_AppState_CommissionVote::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.CommissionVote.votes)
  return votes_.Mutable(index);
}
inline void GenesisResponse_AppState_CommissionVote::set_votes(int index, const std::string& value) {
  votes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline void GenesisResponse_AppState_CommissionVote::set_votes(int index, std::string&& value) {
  votes_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline void GenesisResponse_AppState_CommissionVote::set_votes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  votes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline void GenesisResponse_AppState_CommissionVote::set_votes(int index, const char* value, size_t size) {
  votes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline std::string* GenesisResponse_AppState_CommissionVote::_internal_add_votes() {
  return votes_.Add();
}
inline void GenesisResponse_AppState_CommissionVote::add_votes(const std::string& value) {
  votes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline void GenesisResponse_AppState_CommissionVote::add_votes(std::string&& value) {
  votes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline void GenesisResponse_AppState_CommissionVote::add_votes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  votes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline void GenesisResponse_AppState_CommissionVote::add_votes(const char* value, size_t size) {
  votes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.GenesisResponse.AppState.CommissionVote.votes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisResponse_AppState_CommissionVote::votes() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.CommissionVote.votes)
  return votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisResponse_AppState_CommissionVote::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.CommissionVote.votes)
  return &votes_;
}

// .api_pb.GenesisResponse.AppState.Commission commission = 3 [json_name = "commission"];
inline bool GenesisResponse_AppState_CommissionVote::_internal_has_commission() const {
  return this != internal_default_instance() && commission_ != nullptr;
}
inline bool GenesisResponse_AppState_CommissionVote::has_commission() const {
  return _internal_has_commission();
}
inline void GenesisResponse_AppState_CommissionVote::clear_commission() {
  if (GetArenaForAllocation() == nullptr && commission_ != nullptr) {
    delete commission_;
  }
  commission_ = nullptr;
}
inline const ::api_pb::GenesisResponse_AppState_Commission& GenesisResponse_AppState_CommissionVote::_internal_commission() const {
  const ::api_pb::GenesisResponse_AppState_Commission* p = commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_AppState_Commission&>(
      ::api_pb::_GenesisResponse_AppState_Commission_default_instance_);
}
inline const ::api_pb::GenesisResponse_AppState_Commission& GenesisResponse_AppState_CommissionVote::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.CommissionVote.commission)
  return _internal_commission();
}
inline void GenesisResponse_AppState_CommissionVote::unsafe_arena_set_allocated_commission(
    ::api_pb::GenesisResponse_AppState_Commission* commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commission_);
  }
  commission_ = commission;
  if (commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.AppState.CommissionVote.commission)
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState_CommissionVote::release_commission() {
  
  ::api_pb::GenesisResponse_AppState_Commission* temp = commission_;
  commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState_CommissionVote::unsafe_arena_release_commission() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.CommissionVote.commission)
  
  ::api_pb::GenesisResponse_AppState_Commission* temp = commission_;
  commission_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState_CommissionVote::_internal_mutable_commission() {
  
  if (commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Commission>(GetArenaForAllocation());
    commission_ = p;
  }
  return commission_;
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState_CommissionVote::mutable_commission() {
  ::api_pb::GenesisResponse_AppState_Commission* _msg = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.CommissionVote.commission)
  return _msg;
}
inline void GenesisResponse_AppState_CommissionVote::set_allocated_commission(::api_pb::GenesisResponse_AppState_Commission* commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commission_;
  }
  if (commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_AppState_Commission>::GetOwningArena(commission);
    if (message_arena != submessage_arena) {
      commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commission, submessage_arena);
    }
    
  } else {
    
  }
  commission_ = commission;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.CommissionVote.commission)
}

// -------------------------------------------------------------------

// GenesisResponse_AppState

// string version = 19 [json_name = "version"];
inline void GenesisResponse_AppState::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState::version() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.version)
}
inline std::string* GenesisResponse_AppState::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.version)
  return _s;
}
inline const std::string& GenesisResponse_AppState::_internal_version() const {
  return version_.Get();
}
inline void GenesisResponse_AppState::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState::release_version() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.version)
}

// string note = 10 [json_name = "note"];
inline void GenesisResponse_AppState::clear_note() {
  note_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState::note() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState::set_note(ArgT0&& arg0, ArgT... args) {
 
 note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.note)
}
inline std::string* GenesisResponse_AppState::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.note)
  return _s;
}
inline const std::string& GenesisResponse_AppState::_internal_note() const {
  return note_.Get();
}
inline void GenesisResponse_AppState::_internal_set_note(const std::string& value) {
  
  note_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState::_internal_mutable_note() {
  
  return note_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState::release_note() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.note)
  return note_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.note)
}

// repeated .api_pb.GenesisResponse.AppState.Validators validators = 2 [json_name = "validators"];
inline int GenesisResponse_AppState::_internal_validators_size() const {
  return validators_.size();
}
inline int GenesisResponse_AppState::validators_size() const {
  return _internal_validators_size();
}
inline void GenesisResponse_AppState::clear_validators() {
  validators_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Validators* GenesisResponse_AppState::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Validators >*
GenesisResponse_AppState::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.validators)
  return &validators_;
}
inline const ::api_pb::GenesisResponse_AppState_Validators& GenesisResponse_AppState::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Validators& GenesisResponse_AppState::validators(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.validators)
  return _internal_validators(index);
}
inline ::api_pb::GenesisResponse_AppState_Validators* GenesisResponse_AppState::_internal_add_validators() {
  return validators_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Validators* GenesisResponse_AppState::add_validators() {
  ::api_pb::GenesisResponse_AppState_Validators* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Validators >&
GenesisResponse_AppState::validators() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.validators)
  return validators_;
}

// repeated .api_pb.GenesisResponse.AppState.Candidate candidates = 3 [json_name = "candidates"];
inline int GenesisResponse_AppState::_internal_candidates_size() const {
  return candidates_.size();
}
inline int GenesisResponse_AppState::candidates_size() const {
  return _internal_candidates_size();
}
inline void GenesisResponse_AppState::clear_candidates() {
  candidates_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Candidate* GenesisResponse_AppState::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate >*
GenesisResponse_AppState::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.candidates)
  return &candidates_;
}
inline const ::api_pb::GenesisResponse_AppState_Candidate& GenesisResponse_AppState::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Candidate& GenesisResponse_AppState::candidates(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.candidates)
  return _internal_candidates(index);
}
inline ::api_pb::GenesisResponse_AppState_Candidate* GenesisResponse_AppState::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Candidate* GenesisResponse_AppState::add_candidates() {
  ::api_pb::GenesisResponse_AppState_Candidate* _add = _internal_add_candidates();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.candidates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Candidate >&
GenesisResponse_AppState::candidates() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.candidates)
  return candidates_;
}

// repeated .api_pb.GenesisResponse.AppState.Coin coins = 5 [json_name = "coins"];
inline int GenesisResponse_AppState::_internal_coins_size() const {
  return coins_.size();
}
inline int GenesisResponse_AppState::coins_size() const {
  return _internal_coins_size();
}
inline void GenesisResponse_AppState::clear_coins() {
  coins_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Coin* GenesisResponse_AppState::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Coin >*
GenesisResponse_AppState::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.coins)
  return &coins_;
}
inline const ::api_pb::GenesisResponse_AppState_Coin& GenesisResponse_AppState::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Coin& GenesisResponse_AppState::coins(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.coins)
  return _internal_coins(index);
}
inline ::api_pb::GenesisResponse_AppState_Coin* GenesisResponse_AppState::_internal_add_coins() {
  return coins_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Coin* GenesisResponse_AppState::add_coins() {
  ::api_pb::GenesisResponse_AppState_Coin* _add = _internal_add_coins();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.coins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Coin >&
GenesisResponse_AppState::coins() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.coins)
  return coins_;
}

// repeated .api_pb.GenesisResponse.AppState.FrozenFund frozen_funds = 6 [json_name = "frozenFunds"];
inline int GenesisResponse_AppState::_internal_frozen_funds_size() const {
  return frozen_funds_.size();
}
inline int GenesisResponse_AppState::frozen_funds_size() const {
  return _internal_frozen_funds_size();
}
inline void GenesisResponse_AppState::clear_frozen_funds() {
  frozen_funds_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_FrozenFund* GenesisResponse_AppState::mutable_frozen_funds(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.frozen_funds)
  return frozen_funds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_FrozenFund >*
GenesisResponse_AppState::mutable_frozen_funds() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.frozen_funds)
  return &frozen_funds_;
}
inline const ::api_pb::GenesisResponse_AppState_FrozenFund& GenesisResponse_AppState::_internal_frozen_funds(int index) const {
  return frozen_funds_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_FrozenFund& GenesisResponse_AppState::frozen_funds(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.frozen_funds)
  return _internal_frozen_funds(index);
}
inline ::api_pb::GenesisResponse_AppState_FrozenFund* GenesisResponse_AppState::_internal_add_frozen_funds() {
  return frozen_funds_.Add();
}
inline ::api_pb::GenesisResponse_AppState_FrozenFund* GenesisResponse_AppState::add_frozen_funds() {
  ::api_pb::GenesisResponse_AppState_FrozenFund* _add = _internal_add_frozen_funds();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.frozen_funds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_FrozenFund >&
GenesisResponse_AppState::frozen_funds() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.frozen_funds)
  return frozen_funds_;
}

// repeated string block_list_candidates = 18 [json_name = "blockListCandidates"];
inline int GenesisResponse_AppState::_internal_block_list_candidates_size() const {
  return block_list_candidates_.size();
}
inline int GenesisResponse_AppState::block_list_candidates_size() const {
  return _internal_block_list_candidates_size();
}
inline void GenesisResponse_AppState::clear_block_list_candidates() {
  block_list_candidates_.Clear();
}
inline std::string* GenesisResponse_AppState::add_block_list_candidates() {
  std::string* _s = _internal_add_block_list_candidates();
  // @@protoc_insertion_point(field_add_mutable:api_pb.GenesisResponse.AppState.block_list_candidates)
  return _s;
}
inline const std::string& GenesisResponse_AppState::_internal_block_list_candidates(int index) const {
  return block_list_candidates_.Get(index);
}
inline const std::string& GenesisResponse_AppState::block_list_candidates(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.block_list_candidates)
  return _internal_block_list_candidates(index);
}
inline std::string* GenesisResponse_AppState::mutable_block_list_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.block_list_candidates)
  return block_list_candidates_.Mutable(index);
}
inline void GenesisResponse_AppState::set_block_list_candidates(int index, const std::string& value) {
  block_list_candidates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline void GenesisResponse_AppState::set_block_list_candidates(int index, std::string&& value) {
  block_list_candidates_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline void GenesisResponse_AppState::set_block_list_candidates(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_list_candidates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline void GenesisResponse_AppState::set_block_list_candidates(int index, const char* value, size_t size) {
  block_list_candidates_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline std::string* GenesisResponse_AppState::_internal_add_block_list_candidates() {
  return block_list_candidates_.Add();
}
inline void GenesisResponse_AppState::add_block_list_candidates(const std::string& value) {
  block_list_candidates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline void GenesisResponse_AppState::add_block_list_candidates(std::string&& value) {
  block_list_candidates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline void GenesisResponse_AppState::add_block_list_candidates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  block_list_candidates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline void GenesisResponse_AppState::add_block_list_candidates(const char* value, size_t size) {
  block_list_candidates_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.GenesisResponse.AppState.block_list_candidates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisResponse_AppState::block_list_candidates() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.block_list_candidates)
  return block_list_candidates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisResponse_AppState::mutable_block_list_candidates() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.block_list_candidates)
  return &block_list_candidates_;
}

// repeated .api_pb.GenesisResponse.AppState.Waitlist waitlist = 13 [json_name = "waitlist"];
inline int GenesisResponse_AppState::_internal_waitlist_size() const {
  return waitlist_.size();
}
inline int GenesisResponse_AppState::waitlist_size() const {
  return _internal_waitlist_size();
}
inline void GenesisResponse_AppState::clear_waitlist() {
  waitlist_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Waitlist* GenesisResponse_AppState::mutable_waitlist(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.waitlist)
  return waitlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Waitlist >*
GenesisResponse_AppState::mutable_waitlist() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.waitlist)
  return &waitlist_;
}
inline const ::api_pb::GenesisResponse_AppState_Waitlist& GenesisResponse_AppState::_internal_waitlist(int index) const {
  return waitlist_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Waitlist& GenesisResponse_AppState::waitlist(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.waitlist)
  return _internal_waitlist(index);
}
inline ::api_pb::GenesisResponse_AppState_Waitlist* GenesisResponse_AppState::_internal_add_waitlist() {
  return waitlist_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Waitlist* GenesisResponse_AppState::add_waitlist() {
  ::api_pb::GenesisResponse_AppState_Waitlist* _add = _internal_add_waitlist();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.waitlist)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Waitlist >&
GenesisResponse_AppState::waitlist() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.waitlist)
  return waitlist_;
}

// repeated .api_pb.GenesisResponse.AppState.Account accounts = 14 [json_name = "accounts"];
inline int GenesisResponse_AppState::_internal_accounts_size() const {
  return accounts_.size();
}
inline int GenesisResponse_AppState::accounts_size() const {
  return _internal_accounts_size();
}
inline void GenesisResponse_AppState::clear_accounts() {
  accounts_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Account* GenesisResponse_AppState::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.accounts)
  return accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account >*
GenesisResponse_AppState::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.accounts)
  return &accounts_;
}
inline const ::api_pb::GenesisResponse_AppState_Account& GenesisResponse_AppState::_internal_accounts(int index) const {
  return accounts_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Account& GenesisResponse_AppState::accounts(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.accounts)
  return _internal_accounts(index);
}
inline ::api_pb::GenesisResponse_AppState_Account* GenesisResponse_AppState::_internal_add_accounts() {
  return accounts_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Account* GenesisResponse_AppState::add_accounts() {
  ::api_pb::GenesisResponse_AppState_Account* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Account >&
GenesisResponse_AppState::accounts() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.accounts)
  return accounts_;
}

// repeated .api_pb.GenesisResponse.AppState.HaltBlock halt_blocks = 12 [json_name = "haltBlocks"];
inline int GenesisResponse_AppState::_internal_halt_blocks_size() const {
  return halt_blocks_.size();
}
inline int GenesisResponse_AppState::halt_blocks_size() const {
  return _internal_halt_blocks_size();
}
inline void GenesisResponse_AppState::clear_halt_blocks() {
  halt_blocks_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_HaltBlock* GenesisResponse_AppState::mutable_halt_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.halt_blocks)
  return halt_blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_HaltBlock >*
GenesisResponse_AppState::mutable_halt_blocks() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.halt_blocks)
  return &halt_blocks_;
}
inline const ::api_pb::GenesisResponse_AppState_HaltBlock& GenesisResponse_AppState::_internal_halt_blocks(int index) const {
  return halt_blocks_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_HaltBlock& GenesisResponse_AppState::halt_blocks(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.halt_blocks)
  return _internal_halt_blocks(index);
}
inline ::api_pb::GenesisResponse_AppState_HaltBlock* GenesisResponse_AppState::_internal_add_halt_blocks() {
  return halt_blocks_.Add();
}
inline ::api_pb::GenesisResponse_AppState_HaltBlock* GenesisResponse_AppState::add_halt_blocks() {
  ::api_pb::GenesisResponse_AppState_HaltBlock* _add = _internal_add_halt_blocks();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.halt_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_HaltBlock >&
GenesisResponse_AppState::halt_blocks() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.halt_blocks)
  return halt_blocks_;
}

// repeated .api_pb.GenesisResponse.AppState.Pool pools = 15 [json_name = "pools"];
inline int GenesisResponse_AppState::_internal_pools_size() const {
  return pools_.size();
}
inline int GenesisResponse_AppState::pools_size() const {
  return _internal_pools_size();
}
inline void GenesisResponse_AppState::clear_pools() {
  pools_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_Pool* GenesisResponse_AppState::mutable_pools(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.pools)
  return pools_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Pool >*
GenesisResponse_AppState::mutable_pools() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.pools)
  return &pools_;
}
inline const ::api_pb::GenesisResponse_AppState_Pool& GenesisResponse_AppState::_internal_pools(int index) const {
  return pools_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_Pool& GenesisResponse_AppState::pools(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.pools)
  return _internal_pools(index);
}
inline ::api_pb::GenesisResponse_AppState_Pool* GenesisResponse_AppState::_internal_add_pools() {
  return pools_.Add();
}
inline ::api_pb::GenesisResponse_AppState_Pool* GenesisResponse_AppState::add_pools() {
  ::api_pb::GenesisResponse_AppState_Pool* _add = _internal_add_pools();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.pools)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_Pool >&
GenesisResponse_AppState::pools() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.pools)
  return pools_;
}

// .api_pb.GenesisResponse.AppState.Commission commission = 16 [json_name = "commission"];
inline bool GenesisResponse_AppState::_internal_has_commission() const {
  return this != internal_default_instance() && commission_ != nullptr;
}
inline bool GenesisResponse_AppState::has_commission() const {
  return _internal_has_commission();
}
inline void GenesisResponse_AppState::clear_commission() {
  if (GetArenaForAllocation() == nullptr && commission_ != nullptr) {
    delete commission_;
  }
  commission_ = nullptr;
}
inline const ::api_pb::GenesisResponse_AppState_Commission& GenesisResponse_AppState::_internal_commission() const {
  const ::api_pb::GenesisResponse_AppState_Commission* p = commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_AppState_Commission&>(
      ::api_pb::_GenesisResponse_AppState_Commission_default_instance_);
}
inline const ::api_pb::GenesisResponse_AppState_Commission& GenesisResponse_AppState::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.commission)
  return _internal_commission();
}
inline void GenesisResponse_AppState::unsafe_arena_set_allocated_commission(
    ::api_pb::GenesisResponse_AppState_Commission* commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commission_);
  }
  commission_ = commission;
  if (commission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.AppState.commission)
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState::release_commission() {
  
  ::api_pb::GenesisResponse_AppState_Commission* temp = commission_;
  commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState::unsafe_arena_release_commission() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.commission)
  
  ::api_pb::GenesisResponse_AppState_Commission* temp = commission_;
  commission_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState::_internal_mutable_commission() {
  
  if (commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_AppState_Commission>(GetArenaForAllocation());
    commission_ = p;
  }
  return commission_;
}
inline ::api_pb::GenesisResponse_AppState_Commission* GenesisResponse_AppState::mutable_commission() {
  ::api_pb::GenesisResponse_AppState_Commission* _msg = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.commission)
  return _msg;
}
inline void GenesisResponse_AppState::set_allocated_commission(::api_pb::GenesisResponse_AppState_Commission* commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commission_;
  }
  if (commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_AppState_Commission>::GetOwningArena(commission);
    if (message_arena != submessage_arena) {
      commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commission, submessage_arena);
    }
    
  } else {
    
  }
  commission_ = commission;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.commission)
}

// repeated .api_pb.GenesisResponse.AppState.CommissionVote commission_votes = 17 [json_name = "commissionVotes"];
inline int GenesisResponse_AppState::_internal_commission_votes_size() const {
  return commission_votes_.size();
}
inline int GenesisResponse_AppState::commission_votes_size() const {
  return _internal_commission_votes_size();
}
inline void GenesisResponse_AppState::clear_commission_votes() {
  commission_votes_.Clear();
}
inline ::api_pb::GenesisResponse_AppState_CommissionVote* GenesisResponse_AppState::mutable_commission_votes(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.commission_votes)
  return commission_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_CommissionVote >*
GenesisResponse_AppState::mutable_commission_votes() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.commission_votes)
  return &commission_votes_;
}
inline const ::api_pb::GenesisResponse_AppState_CommissionVote& GenesisResponse_AppState::_internal_commission_votes(int index) const {
  return commission_votes_.Get(index);
}
inline const ::api_pb::GenesisResponse_AppState_CommissionVote& GenesisResponse_AppState::commission_votes(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.commission_votes)
  return _internal_commission_votes(index);
}
inline ::api_pb::GenesisResponse_AppState_CommissionVote* GenesisResponse_AppState::_internal_add_commission_votes() {
  return commission_votes_.Add();
}
inline ::api_pb::GenesisResponse_AppState_CommissionVote* GenesisResponse_AppState::add_commission_votes() {
  ::api_pb::GenesisResponse_AppState_CommissionVote* _add = _internal_add_commission_votes();
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.commission_votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::GenesisResponse_AppState_CommissionVote >&
GenesisResponse_AppState::commission_votes() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.commission_votes)
  return commission_votes_;
}

// repeated string used_checks = 11 [json_name = "usedChecks"];
inline int GenesisResponse_AppState::_internal_used_checks_size() const {
  return used_checks_.size();
}
inline int GenesisResponse_AppState::used_checks_size() const {
  return _internal_used_checks_size();
}
inline void GenesisResponse_AppState::clear_used_checks() {
  used_checks_.Clear();
}
inline std::string* GenesisResponse_AppState::add_used_checks() {
  std::string* _s = _internal_add_used_checks();
  // @@protoc_insertion_point(field_add_mutable:api_pb.GenesisResponse.AppState.used_checks)
  return _s;
}
inline const std::string& GenesisResponse_AppState::_internal_used_checks(int index) const {
  return used_checks_.Get(index);
}
inline const std::string& GenesisResponse_AppState::used_checks(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.used_checks)
  return _internal_used_checks(index);
}
inline std::string* GenesisResponse_AppState::mutable_used_checks(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.used_checks)
  return used_checks_.Mutable(index);
}
inline void GenesisResponse_AppState::set_used_checks(int index, const std::string& value) {
  used_checks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.used_checks)
}
inline void GenesisResponse_AppState::set_used_checks(int index, std::string&& value) {
  used_checks_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.used_checks)
}
inline void GenesisResponse_AppState::set_used_checks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  used_checks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.GenesisResponse.AppState.used_checks)
}
inline void GenesisResponse_AppState::set_used_checks(int index, const char* value, size_t size) {
  used_checks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.GenesisResponse.AppState.used_checks)
}
inline std::string* GenesisResponse_AppState::_internal_add_used_checks() {
  return used_checks_.Add();
}
inline void GenesisResponse_AppState::add_used_checks(const std::string& value) {
  used_checks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.used_checks)
}
inline void GenesisResponse_AppState::add_used_checks(std::string&& value) {
  used_checks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.GenesisResponse.AppState.used_checks)
}
inline void GenesisResponse_AppState::add_used_checks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  used_checks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.GenesisResponse.AppState.used_checks)
}
inline void GenesisResponse_AppState::add_used_checks(const char* value, size_t size) {
  used_checks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.GenesisResponse.AppState.used_checks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenesisResponse_AppState::used_checks() const {
  // @@protoc_insertion_point(field_list:api_pb.GenesisResponse.AppState.used_checks)
  return used_checks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenesisResponse_AppState::mutable_used_checks() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.GenesisResponse.AppState.used_checks)
  return &used_checks_;
}

// uint64 max_gas = 7 [json_name = "maxGas"];
inline void GenesisResponse_AppState::clear_max_gas() {
  max_gas_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState::_internal_max_gas() const {
  return max_gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse_AppState::max_gas() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.max_gas)
  return _internal_max_gas();
}
inline void GenesisResponse_AppState::_internal_set_max_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_gas_ = value;
}
inline void GenesisResponse_AppState::set_max_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_gas(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.max_gas)
}

// string total_slashed = 8 [json_name = "totalSlashed"];
inline void GenesisResponse_AppState::clear_total_slashed() {
  total_slashed_.ClearToEmpty();
}
inline const std::string& GenesisResponse_AppState::total_slashed() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.AppState.total_slashed)
  return _internal_total_slashed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse_AppState::set_total_slashed(ArgT0&& arg0, ArgT... args) {
 
 total_slashed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.AppState.total_slashed)
}
inline std::string* GenesisResponse_AppState::mutable_total_slashed() {
  std::string* _s = _internal_mutable_total_slashed();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.AppState.total_slashed)
  return _s;
}
inline const std::string& GenesisResponse_AppState::_internal_total_slashed() const {
  return total_slashed_.Get();
}
inline void GenesisResponse_AppState::_internal_set_total_slashed(const std::string& value) {
  
  total_slashed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState::_internal_mutable_total_slashed() {
  
  return total_slashed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse_AppState::release_total_slashed() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.AppState.total_slashed)
  return total_slashed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse_AppState::set_allocated_total_slashed(std::string* total_slashed) {
  if (total_slashed != nullptr) {
    
  } else {
    
  }
  total_slashed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_slashed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.AppState.total_slashed)
}

// -------------------------------------------------------------------

// GenesisResponse

// string genesis_time = 1 [json_name = "genesisTime"];
inline void GenesisResponse::clear_genesis_time() {
  genesis_time_.ClearToEmpty();
}
inline const std::string& GenesisResponse::genesis_time() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.genesis_time)
  return _internal_genesis_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse::set_genesis_time(ArgT0&& arg0, ArgT... args) {
 
 genesis_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.genesis_time)
}
inline std::string* GenesisResponse::mutable_genesis_time() {
  std::string* _s = _internal_mutable_genesis_time();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.genesis_time)
  return _s;
}
inline const std::string& GenesisResponse::_internal_genesis_time() const {
  return genesis_time_.Get();
}
inline void GenesisResponse::_internal_set_genesis_time(const std::string& value) {
  
  genesis_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse::_internal_mutable_genesis_time() {
  
  return genesis_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse::release_genesis_time() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.genesis_time)
  return genesis_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse::set_allocated_genesis_time(std::string* genesis_time) {
  if (genesis_time != nullptr) {
    
  } else {
    
  }
  genesis_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), genesis_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.genesis_time)
}

// string chain_id = 2 [json_name = "chainId"];
inline void GenesisResponse::clear_chain_id() {
  chain_id_.ClearToEmpty();
}
inline const std::string& GenesisResponse::chain_id() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.chain_id)
  return _internal_chain_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse::set_chain_id(ArgT0&& arg0, ArgT... args) {
 
 chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.chain_id)
}
inline std::string* GenesisResponse::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.chain_id)
  return _s;
}
inline const std::string& GenesisResponse::_internal_chain_id() const {
  return chain_id_.Get();
}
inline void GenesisResponse::_internal_set_chain_id(const std::string& value) {
  
  chain_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse::_internal_mutable_chain_id() {
  
  return chain_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse::release_chain_id() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.chain_id)
  return chain_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse::set_allocated_chain_id(std::string* chain_id) {
  if (chain_id != nullptr) {
    
  } else {
    
  }
  chain_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.chain_id)
}

// uint64 initial_height = 6 [json_name = "initialHeight"];
inline void GenesisResponse::clear_initial_height() {
  initial_height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse::_internal_initial_height() const {
  return initial_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GenesisResponse::initial_height() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.initial_height)
  return _internal_initial_height();
}
inline void GenesisResponse::_internal_set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  initial_height_ = value;
}
inline void GenesisResponse::set_initial_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initial_height(value);
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.initial_height)
}

// .api_pb.GenesisResponse.ConsensusParams consensus_params = 3 [json_name = "consensusParams"];
inline bool GenesisResponse::_internal_has_consensus_params() const {
  return this != internal_default_instance() && consensus_params_ != nullptr;
}
inline bool GenesisResponse::has_consensus_params() const {
  return _internal_has_consensus_params();
}
inline void GenesisResponse::clear_consensus_params() {
  if (GetArenaForAllocation() == nullptr && consensus_params_ != nullptr) {
    delete consensus_params_;
  }
  consensus_params_ = nullptr;
}
inline const ::api_pb::GenesisResponse_ConsensusParams& GenesisResponse::_internal_consensus_params() const {
  const ::api_pb::GenesisResponse_ConsensusParams* p = consensus_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_ConsensusParams&>(
      ::api_pb::_GenesisResponse_ConsensusParams_default_instance_);
}
inline const ::api_pb::GenesisResponse_ConsensusParams& GenesisResponse::consensus_params() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.consensus_params)
  return _internal_consensus_params();
}
inline void GenesisResponse::unsafe_arena_set_allocated_consensus_params(
    ::api_pb::GenesisResponse_ConsensusParams* consensus_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_params_);
  }
  consensus_params_ = consensus_params;
  if (consensus_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.consensus_params)
}
inline ::api_pb::GenesisResponse_ConsensusParams* GenesisResponse::release_consensus_params() {
  
  ::api_pb::GenesisResponse_ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams* GenesisResponse::unsafe_arena_release_consensus_params() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.consensus_params)
  
  ::api_pb::GenesisResponse_ConsensusParams* temp = consensus_params_;
  consensus_params_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_ConsensusParams* GenesisResponse::_internal_mutable_consensus_params() {
  
  if (consensus_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_ConsensusParams>(GetArenaForAllocation());
    consensus_params_ = p;
  }
  return consensus_params_;
}
inline ::api_pb::GenesisResponse_ConsensusParams* GenesisResponse::mutable_consensus_params() {
  ::api_pb::GenesisResponse_ConsensusParams* _msg = _internal_mutable_consensus_params();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.consensus_params)
  return _msg;
}
inline void GenesisResponse::set_allocated_consensus_params(::api_pb::GenesisResponse_ConsensusParams* consensus_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete consensus_params_;
  }
  if (consensus_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_ConsensusParams>::GetOwningArena(consensus_params);
    if (message_arena != submessage_arena) {
      consensus_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_params, submessage_arena);
    }
    
  } else {
    
  }
  consensus_params_ = consensus_params;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.consensus_params)
}

// string app_hash = 4 [json_name = "appHash"];
inline void GenesisResponse::clear_app_hash() {
  app_hash_.ClearToEmpty();
}
inline const std::string& GenesisResponse::app_hash() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.app_hash)
  return _internal_app_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GenesisResponse::set_app_hash(ArgT0&& arg0, ArgT... args) {
 
 app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.GenesisResponse.app_hash)
}
inline std::string* GenesisResponse::mutable_app_hash() {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.app_hash)
  return _s;
}
inline const std::string& GenesisResponse::_internal_app_hash() const {
  return app_hash_.Get();
}
inline void GenesisResponse::_internal_set_app_hash(const std::string& value) {
  
  app_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GenesisResponse::_internal_mutable_app_hash() {
  
  return app_hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GenesisResponse::release_app_hash() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.app_hash)
  return app_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GenesisResponse::set_allocated_app_hash(std::string* app_hash) {
  if (app_hash != nullptr) {
    
  } else {
    
  }
  app_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.app_hash)
}

// .api_pb.GenesisResponse.AppState app_state = 5 [json_name = "appState"];
inline bool GenesisResponse::_internal_has_app_state() const {
  return this != internal_default_instance() && app_state_ != nullptr;
}
inline bool GenesisResponse::has_app_state() const {
  return _internal_has_app_state();
}
inline void GenesisResponse::clear_app_state() {
  if (GetArenaForAllocation() == nullptr && app_state_ != nullptr) {
    delete app_state_;
  }
  app_state_ = nullptr;
}
inline const ::api_pb::GenesisResponse_AppState& GenesisResponse::_internal_app_state() const {
  const ::api_pb::GenesisResponse_AppState* p = app_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::GenesisResponse_AppState&>(
      ::api_pb::_GenesisResponse_AppState_default_instance_);
}
inline const ::api_pb::GenesisResponse_AppState& GenesisResponse::app_state() const {
  // @@protoc_insertion_point(field_get:api_pb.GenesisResponse.app_state)
  return _internal_app_state();
}
inline void GenesisResponse::unsafe_arena_set_allocated_app_state(
    ::api_pb::GenesisResponse_AppState* app_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_state_);
  }
  app_state_ = app_state;
  if (app_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.GenesisResponse.app_state)
}
inline ::api_pb::GenesisResponse_AppState* GenesisResponse::release_app_state() {
  
  ::api_pb::GenesisResponse_AppState* temp = app_state_;
  app_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::GenesisResponse_AppState* GenesisResponse::unsafe_arena_release_app_state() {
  // @@protoc_insertion_point(field_release:api_pb.GenesisResponse.app_state)
  
  ::api_pb::GenesisResponse_AppState* temp = app_state_;
  app_state_ = nullptr;
  return temp;
}
inline ::api_pb::GenesisResponse_AppState* GenesisResponse::_internal_mutable_app_state() {
  
  if (app_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::GenesisResponse_AppState>(GetArenaForAllocation());
    app_state_ = p;
  }
  return app_state_;
}
inline ::api_pb::GenesisResponse_AppState* GenesisResponse::mutable_app_state() {
  ::api_pb::GenesisResponse_AppState* _msg = _internal_mutable_app_state();
  // @@protoc_insertion_point(field_mutable:api_pb.GenesisResponse.app_state)
  return _msg;
}
inline void GenesisResponse::set_allocated_app_state(::api_pb::GenesisResponse_AppState* app_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete app_state_;
  }
  if (app_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::GenesisResponse_AppState>::GetOwningArena(app_state);
    if (message_arena != submessage_arena) {
      app_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_state, submessage_arena);
    }
    
  } else {
    
  }
  app_state_ = app_state;
  // @@protoc_insertion_point(field_set_allocated:api_pb.GenesisResponse.app_state)
}

// -------------------------------------------------------------------

// MinGasPriceResponse

// uint64 min_gas_price = 3 [json_name = "minGasPrice"];
inline void MinGasPriceResponse::clear_min_gas_price() {
  min_gas_price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MinGasPriceResponse::_internal_min_gas_price() const {
  return min_gas_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MinGasPriceResponse::min_gas_price() const {
  // @@protoc_insertion_point(field_get:api_pb.MinGasPriceResponse.min_gas_price)
  return _internal_min_gas_price();
}
inline void MinGasPriceResponse::_internal_set_min_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_gas_price_ = value;
}
inline void MinGasPriceResponse::set_min_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_gas_price(value);
  // @@protoc_insertion_point(field_set:api_pb.MinGasPriceResponse.min_gas_price)
}

// -------------------------------------------------------------------

// BlockRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlockRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockRequest.height)
  return _internal_height();
}
inline void BlockRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void BlockRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockRequest.height)
}

// repeated .api_pb.BlockField fields = 2 [json_name = "fields"];
inline int BlockRequest::_internal_fields_size() const {
  return fields_.size();
}
inline int BlockRequest::fields_size() const {
  return _internal_fields_size();
}
inline void BlockRequest::clear_fields() {
  fields_.Clear();
}
inline ::api_pb::BlockField BlockRequest::_internal_fields(int index) const {
  return static_cast< ::api_pb::BlockField >(fields_.Get(index));
}
inline ::api_pb::BlockField BlockRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlockRequest.fields)
  return _internal_fields(index);
}
inline void BlockRequest::set_fields(int index, ::api_pb::BlockField value) {
  fields_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.BlockRequest.fields)
}
inline void BlockRequest::_internal_add_fields(::api_pb::BlockField value) {
  fields_.Add(value);
}
inline void BlockRequest::add_fields(::api_pb::BlockField value) {
  _internal_add_fields(value);
  // @@protoc_insertion_point(field_add:api_pb.BlockRequest.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BlockRequest::fields() const {
  // @@protoc_insertion_point(field_list:api_pb.BlockRequest.fields)
  return fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BlockRequest::_internal_mutable_fields() {
  return &fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BlockRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlockRequest.fields)
  return _internal_mutable_fields();
}

// bool failed_txs = 3 [json_name = "failedTxs", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlockRequest::clear_failed_txs() {
  failed_txs_ = false;
}
inline bool BlockRequest::_internal_failed_txs() const {
  return failed_txs_;
}
inline bool BlockRequest::failed_txs() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockRequest.failed_txs)
  return _internal_failed_txs();
}
inline void BlockRequest::_internal_set_failed_txs(bool value) {
  
  failed_txs_ = value;
}
inline void BlockRequest::set_failed_txs(bool value) {
  _internal_set_failed_txs(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockRequest.failed_txs)
}

// bool events = 4 [json_name = "events", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void BlockRequest::clear_events() {
  events_ = false;
}
inline bool BlockRequest::_internal_events() const {
  return events_;
}
inline bool BlockRequest::events() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockRequest.events)
  return _internal_events();
}
inline void BlockRequest::_internal_set_events(bool value) {
  
  events_ = value;
}
inline void BlockRequest::set_events(bool value) {
  _internal_set_events(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockRequest.events)
}

// -------------------------------------------------------------------

// BlockResponse_Validator

// string public_key = 1 [json_name = "publicKey"];
inline void BlockResponse_Validator::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& BlockResponse_Validator::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.Validator.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockResponse_Validator::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.Validator.public_key)
}
inline std::string* BlockResponse_Validator::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.Validator.public_key)
  return _s;
}
inline const std::string& BlockResponse_Validator::_internal_public_key() const {
  return public_key_.Get();
}
inline void BlockResponse_Validator::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockResponse_Validator::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockResponse_Validator::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.BlockResponse.Validator.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockResponse_Validator::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.BlockResponse.Validator.public_key)
}

// bool signed = 2 [json_name = "signed"];
inline void BlockResponse_Validator::clear_signed_() {
  signed__ = false;
}
inline bool BlockResponse_Validator::_internal_signed_() const {
  return signed__;
}
inline bool BlockResponse_Validator::signed_() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.Validator.signed)
  return _internal_signed_();
}
inline void BlockResponse_Validator::_internal_set_signed_(bool value) {
  
  signed__ = value;
}
inline void BlockResponse_Validator::set_signed_(bool value) {
  _internal_set_signed_(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.Validator.signed)
}

// -------------------------------------------------------------------

// BlockResponse_Evidence

// repeated .google.protobuf.Struct evidence = 1 [json_name = "evidence"];
inline int BlockResponse_Evidence::_internal_evidence_size() const {
  return evidence_.size();
}
inline int BlockResponse_Evidence::evidence_size() const {
  return _internal_evidence_size();
}
inline PROTOBUF_NAMESPACE_ID::Struct* BlockResponse_Evidence::mutable_evidence(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.Evidence.evidence)
  return evidence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >*
BlockResponse_Evidence::mutable_evidence() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlockResponse.Evidence.evidence)
  return &evidence_;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& BlockResponse_Evidence::_internal_evidence(int index) const {
  return evidence_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& BlockResponse_Evidence::evidence(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.Evidence.evidence)
  return _internal_evidence(index);
}
inline PROTOBUF_NAMESPACE_ID::Struct* BlockResponse_Evidence::_internal_add_evidence() {
  return evidence_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Struct* BlockResponse_Evidence::add_evidence() {
  PROTOBUF_NAMESPACE_ID::Struct* _add = _internal_add_evidence();
  // @@protoc_insertion_point(field_add:api_pb.BlockResponse.Evidence.evidence)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >&
BlockResponse_Evidence::evidence() const {
  // @@protoc_insertion_point(field_list:api_pb.BlockResponse.Evidence.evidence)
  return evidence_;
}

// -------------------------------------------------------------------

// BlockResponse

// string hash = 1 [json_name = "hash"];
inline void BlockResponse::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& BlockResponse::hash() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockResponse::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.hash)
}
inline std::string* BlockResponse::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.hash)
  return _s;
}
inline const std::string& BlockResponse::_internal_hash() const {
  return hash_.Get();
}
inline void BlockResponse::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockResponse::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockResponse::release_hash() {
  // @@protoc_insertion_point(field_release:api_pb.BlockResponse.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.BlockResponse.hash)
}

// uint64 height = 2 [json_name = "height"];
inline void BlockResponse::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockResponse::height() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.height)
  return _internal_height();
}
inline void BlockResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void BlockResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.height)
}

// string time = 3 [json_name = "time"];
inline void BlockResponse::clear_time() {
  time_.ClearToEmpty();
}
inline const std::string& BlockResponse::time() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.time)
  return _internal_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockResponse::set_time(ArgT0&& arg0, ArgT... args) {
 
 time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.time)
}
inline std::string* BlockResponse::mutable_time() {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.time)
  return _s;
}
inline const std::string& BlockResponse::_internal_time() const {
  return time_.Get();
}
inline void BlockResponse::_internal_set_time(const std::string& value) {
  
  time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockResponse::_internal_mutable_time() {
  
  return time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockResponse::release_time() {
  // @@protoc_insertion_point(field_release:api_pb.BlockResponse.time)
  return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockResponse::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.BlockResponse.time)
}

// uint64 transaction_count = 4 [json_name = "transactionCount"];
inline void BlockResponse::clear_transaction_count() {
  transaction_count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockResponse::_internal_transaction_count() const {
  return transaction_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockResponse::transaction_count() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.transaction_count)
  return _internal_transaction_count();
}
inline void BlockResponse::_internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transaction_count_ = value;
}
inline void BlockResponse::set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transaction_count(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.transaction_count)
}

// repeated .api_pb.TransactionResponse transactions = 6 [json_name = "transactions"];
inline int BlockResponse::_internal_transactions_size() const {
  return transactions_.size();
}
inline int BlockResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void BlockResponse::clear_transactions() {
  transactions_.Clear();
}
inline ::api_pb::TransactionResponse* BlockResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >*
BlockResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlockResponse.transactions)
  return &transactions_;
}
inline const ::api_pb::TransactionResponse& BlockResponse::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::api_pb::TransactionResponse& BlockResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.transactions)
  return _internal_transactions(index);
}
inline ::api_pb::TransactionResponse* BlockResponse::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::api_pb::TransactionResponse* BlockResponse::add_transactions() {
  ::api_pb::TransactionResponse* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:api_pb.BlockResponse.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >&
BlockResponse::transactions() const {
  // @@protoc_insertion_point(field_list:api_pb.BlockResponse.transactions)
  return transactions_;
}

// string block_reward = 7 [json_name = "blockReward"];
inline void BlockResponse::clear_block_reward() {
  block_reward_.ClearToEmpty();
}
inline const std::string& BlockResponse::block_reward() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.block_reward)
  return _internal_block_reward();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockResponse::set_block_reward(ArgT0&& arg0, ArgT... args) {
 
 block_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.block_reward)
}
inline std::string* BlockResponse::mutable_block_reward() {
  std::string* _s = _internal_mutable_block_reward();
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.block_reward)
  return _s;
}
inline const std::string& BlockResponse::_internal_block_reward() const {
  return block_reward_.Get();
}
inline void BlockResponse::_internal_set_block_reward(const std::string& value) {
  
  block_reward_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockResponse::_internal_mutable_block_reward() {
  
  return block_reward_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockResponse::release_block_reward() {
  // @@protoc_insertion_point(field_release:api_pb.BlockResponse.block_reward)
  return block_reward_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockResponse::set_allocated_block_reward(std::string* block_reward) {
  if (block_reward != nullptr) {
    
  } else {
    
  }
  block_reward_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_reward,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.BlockResponse.block_reward)
}

// uint64 size = 8 [json_name = "size"];
inline void BlockResponse::clear_size() {
  size_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockResponse::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockResponse::size() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.size)
  return _internal_size();
}
inline void BlockResponse::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void BlockResponse::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.size)
}

// string proposer = 9 [json_name = "proposer"];
inline void BlockResponse::clear_proposer() {
  proposer_.ClearToEmpty();
}
inline const std::string& BlockResponse::proposer() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.proposer)
  return _internal_proposer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockResponse::set_proposer(ArgT0&& arg0, ArgT... args) {
 
 proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.proposer)
}
inline std::string* BlockResponse::mutable_proposer() {
  std::string* _s = _internal_mutable_proposer();
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.proposer)
  return _s;
}
inline const std::string& BlockResponse::_internal_proposer() const {
  return proposer_.Get();
}
inline void BlockResponse::_internal_set_proposer(const std::string& value) {
  
  proposer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BlockResponse::_internal_mutable_proposer() {
  
  return proposer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BlockResponse::release_proposer() {
  // @@protoc_insertion_point(field_release:api_pb.BlockResponse.proposer)
  return proposer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BlockResponse::set_allocated_proposer(std::string* proposer) {
  if (proposer != nullptr) {
    
  } else {
    
  }
  proposer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.BlockResponse.proposer)
}

// repeated .api_pb.BlockResponse.Validator validators = 10 [json_name = "validators"];
inline int BlockResponse::_internal_validators_size() const {
  return validators_.size();
}
inline int BlockResponse::validators_size() const {
  return _internal_validators_size();
}
inline void BlockResponse::clear_validators() {
  validators_.Clear();
}
inline ::api_pb::BlockResponse_Validator* BlockResponse::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse_Validator >*
BlockResponse::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlockResponse.validators)
  return &validators_;
}
inline const ::api_pb::BlockResponse_Validator& BlockResponse::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::api_pb::BlockResponse_Validator& BlockResponse::validators(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.validators)
  return _internal_validators(index);
}
inline ::api_pb::BlockResponse_Validator* BlockResponse::_internal_add_validators() {
  return validators_.Add();
}
inline ::api_pb::BlockResponse_Validator* BlockResponse::add_validators() {
  ::api_pb::BlockResponse_Validator* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:api_pb.BlockResponse.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::BlockResponse_Validator >&
BlockResponse::validators() const {
  // @@protoc_insertion_point(field_list:api_pb.BlockResponse.validators)
  return validators_;
}

// .api_pb.BlockResponse.Evidence evidence = 13 [json_name = "evidence"];
inline bool BlockResponse::_internal_has_evidence() const {
  return this != internal_default_instance() && evidence_ != nullptr;
}
inline bool BlockResponse::has_evidence() const {
  return _internal_has_evidence();
}
inline void BlockResponse::clear_evidence() {
  if (GetArenaForAllocation() == nullptr && evidence_ != nullptr) {
    delete evidence_;
  }
  evidence_ = nullptr;
}
inline const ::api_pb::BlockResponse_Evidence& BlockResponse::_internal_evidence() const {
  const ::api_pb::BlockResponse_Evidence* p = evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::BlockResponse_Evidence&>(
      ::api_pb::_BlockResponse_Evidence_default_instance_);
}
inline const ::api_pb::BlockResponse_Evidence& BlockResponse::evidence() const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.evidence)
  return _internal_evidence();
}
inline void BlockResponse::unsafe_arena_set_allocated_evidence(
    ::api_pb::BlockResponse_Evidence* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence_);
  }
  evidence_ = evidence;
  if (evidence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.BlockResponse.evidence)
}
inline ::api_pb::BlockResponse_Evidence* BlockResponse::release_evidence() {
  
  ::api_pb::BlockResponse_Evidence* temp = evidence_;
  evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::BlockResponse_Evidence* BlockResponse::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:api_pb.BlockResponse.evidence)
  
  ::api_pb::BlockResponse_Evidence* temp = evidence_;
  evidence_ = nullptr;
  return temp;
}
inline ::api_pb::BlockResponse_Evidence* BlockResponse::_internal_mutable_evidence() {
  
  if (evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::BlockResponse_Evidence>(GetArenaForAllocation());
    evidence_ = p;
  }
  return evidence_;
}
inline ::api_pb::BlockResponse_Evidence* BlockResponse::mutable_evidence() {
  ::api_pb::BlockResponse_Evidence* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.evidence)
  return _msg;
}
inline void BlockResponse::set_allocated_evidence(::api_pb::BlockResponse_Evidence* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete evidence_;
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::BlockResponse_Evidence>::GetOwningArena(evidence);
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    
  } else {
    
  }
  evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:api_pb.BlockResponse.evidence)
}

// repeated string missed = 12 [json_name = "missed"];
inline int BlockResponse::_internal_missed_size() const {
  return missed_.size();
}
inline int BlockResponse::missed_size() const {
  return _internal_missed_size();
}
inline void BlockResponse::clear_missed() {
  missed_.Clear();
}
inline std::string* BlockResponse::add_missed() {
  std::string* _s = _internal_add_missed();
  // @@protoc_insertion_point(field_add_mutable:api_pb.BlockResponse.missed)
  return _s;
}
inline const std::string& BlockResponse::_internal_missed(int index) const {
  return missed_.Get(index);
}
inline const std::string& BlockResponse::missed(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.missed)
  return _internal_missed(index);
}
inline std::string* BlockResponse::mutable_missed(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.missed)
  return missed_.Mutable(index);
}
inline void BlockResponse::set_missed(int index, const std::string& value) {
  missed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.missed)
}
inline void BlockResponse::set_missed(int index, std::string&& value) {
  missed_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.BlockResponse.missed)
}
inline void BlockResponse::set_missed(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missed_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.BlockResponse.missed)
}
inline void BlockResponse::set_missed(int index, const char* value, size_t size) {
  missed_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.BlockResponse.missed)
}
inline std::string* BlockResponse::_internal_add_missed() {
  return missed_.Add();
}
inline void BlockResponse::add_missed(const std::string& value) {
  missed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.BlockResponse.missed)
}
inline void BlockResponse::add_missed(std::string&& value) {
  missed_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.BlockResponse.missed)
}
inline void BlockResponse::add_missed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missed_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.BlockResponse.missed)
}
inline void BlockResponse::add_missed(const char* value, size_t size) {
  missed_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.BlockResponse.missed)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockResponse::missed() const {
  // @@protoc_insertion_point(field_list:api_pb.BlockResponse.missed)
  return missed_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockResponse::mutable_missed() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlockResponse.missed)
  return &missed_;
}

// repeated .google.protobuf.Any events = 14 [json_name = "events"];
inline int BlockResponse::_internal_events_size() const {
  return events_.size();
}
inline int BlockResponse::events_size() const {
  return _internal_events_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* BlockResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.BlockResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
BlockResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.BlockResponse.events)
  return &events_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& BlockResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& BlockResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.BlockResponse.events)
  return _internal_events(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* BlockResponse::_internal_add_events() {
  return events_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* BlockResponse::add_events() {
  PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:api_pb.BlockResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
BlockResponse::events() const {
  // @@protoc_insertion_point(field_list:api_pb.BlockResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// MaxGasPriceRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void MaxGasPriceRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MaxGasPriceRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MaxGasPriceRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.MaxGasPriceRequest.height)
  return _internal_height();
}
inline void MaxGasPriceRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void MaxGasPriceRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.MaxGasPriceRequest.height)
}

// -------------------------------------------------------------------

// MaxGasPriceResponse

// uint64 max_gas_price = 3 [json_name = "maxGasPrice"];
inline void MaxGasPriceResponse::clear_max_gas_price() {
  max_gas_price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MaxGasPriceResponse::_internal_max_gas_price() const {
  return max_gas_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MaxGasPriceResponse::max_gas_price() const {
  // @@protoc_insertion_point(field_get:api_pb.MaxGasPriceResponse.max_gas_price)
  return _internal_max_gas_price();
}
inline void MaxGasPriceResponse::_internal_set_max_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_gas_price_ = value;
}
inline void MaxGasPriceResponse::set_max_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_gas_price(value);
  // @@protoc_insertion_point(field_set:api_pb.MaxGasPriceResponse.max_gas_price)
}

// -------------------------------------------------------------------

// AddressRequest

// string address = 1 [json_name = "address"];
inline void AddressRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& AddressRequest::address() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressRequest.address)
}
inline std::string* AddressRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressRequest.address)
  return _s;
}
inline const std::string& AddressRequest::_internal_address() const {
  return address_.Get();
}
inline void AddressRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressRequest::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.AddressRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressRequest.address)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AddressRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressRequest.height)
  return _internal_height();
}
inline void AddressRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void AddressRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressRequest.height)
}

// bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AddressRequest::clear_delegated() {
  delegated_ = false;
}
inline bool AddressRequest::_internal_delegated() const {
  return delegated_;
}
inline bool AddressRequest::delegated() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressRequest.delegated)
  return _internal_delegated();
}
inline void AddressRequest::_internal_set_delegated(bool value) {
  
  delegated_ = value;
}
inline void AddressRequest::set_delegated(bool value) {
  _internal_set_delegated(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressRequest.delegated)
}

// -------------------------------------------------------------------

// AddressBalance

// .api_pb.Coin coin = 1 [json_name = "coin"];
inline bool AddressBalance::_internal_has_coin() const {
  return this != internal_default_instance() && coin_ != nullptr;
}
inline bool AddressBalance::has_coin() const {
  return _internal_has_coin();
}
inline void AddressBalance::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
inline const ::api_pb::Coin& AddressBalance::_internal_coin() const {
  const ::api_pb::Coin* p = coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& AddressBalance::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressBalance.coin)
  return _internal_coin();
}
inline void AddressBalance::unsafe_arena_set_allocated_coin(
    ::api_pb::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_);
  }
  coin_ = coin;
  if (coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.AddressBalance.coin)
}
inline ::api_pb::Coin* AddressBalance::release_coin() {
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* AddressBalance::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:api_pb.AddressBalance.coin)
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* AddressBalance::_internal_mutable_coin() {
  
  if (coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_ = p;
  }
  return coin_;
}
inline ::api_pb::Coin* AddressBalance::mutable_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressBalance.coin)
  return _msg;
}
inline void AddressBalance::set_allocated_coin(::api_pb::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_;
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin);
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    
  } else {
    
  }
  coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressBalance.coin)
}

// string value = 2 [json_name = "value"];
inline void AddressBalance::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AddressBalance::value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressBalance.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressBalance::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressBalance.value)
}
inline std::string* AddressBalance::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressBalance.value)
  return _s;
}
inline const std::string& AddressBalance::_internal_value() const {
  return value_.Get();
}
inline void AddressBalance::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressBalance::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressBalance::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressBalance.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressBalance::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressBalance.value)
}

// string bip_value = 3 [json_name = "bipValue"];
inline void AddressBalance::clear_bip_value() {
  bip_value_.ClearToEmpty();
}
inline const std::string& AddressBalance::bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressBalance.bip_value)
  return _internal_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressBalance::set_bip_value(ArgT0&& arg0, ArgT... args) {
 
 bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressBalance.bip_value)
}
inline std::string* AddressBalance::mutable_bip_value() {
  std::string* _s = _internal_mutable_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressBalance.bip_value)
  return _s;
}
inline const std::string& AddressBalance::_internal_bip_value() const {
  return bip_value_.Get();
}
inline void AddressBalance::_internal_set_bip_value(const std::string& value) {
  
  bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressBalance::_internal_mutable_bip_value() {
  
  return bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressBalance::release_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressBalance.bip_value)
  return bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressBalance::set_allocated_bip_value(std::string* bip_value) {
  if (bip_value != nullptr) {
    
  } else {
    
  }
  bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressBalance.bip_value)
}

// -------------------------------------------------------------------

// AddressDelegatedBalance

// .api_pb.Coin coin = 1 [json_name = "coin"];
inline bool AddressDelegatedBalance::_internal_has_coin() const {
  return this != internal_default_instance() && coin_ != nullptr;
}
inline bool AddressDelegatedBalance::has_coin() const {
  return _internal_has_coin();
}
inline void AddressDelegatedBalance::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
inline const ::api_pb::Coin& AddressDelegatedBalance::_internal_coin() const {
  const ::api_pb::Coin* p = coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& AddressDelegatedBalance::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressDelegatedBalance.coin)
  return _internal_coin();
}
inline void AddressDelegatedBalance::unsafe_arena_set_allocated_coin(
    ::api_pb::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_);
  }
  coin_ = coin;
  if (coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.AddressDelegatedBalance.coin)
}
inline ::api_pb::Coin* AddressDelegatedBalance::release_coin() {
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* AddressDelegatedBalance::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:api_pb.AddressDelegatedBalance.coin)
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* AddressDelegatedBalance::_internal_mutable_coin() {
  
  if (coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_ = p;
  }
  return coin_;
}
inline ::api_pb::Coin* AddressDelegatedBalance::mutable_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressDelegatedBalance.coin)
  return _msg;
}
inline void AddressDelegatedBalance::set_allocated_coin(::api_pb::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_;
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin);
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    
  } else {
    
  }
  coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressDelegatedBalance.coin)
}

// string value = 2 [json_name = "value"];
inline void AddressDelegatedBalance::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AddressDelegatedBalance::value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressDelegatedBalance.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressDelegatedBalance::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressDelegatedBalance.value)
}
inline std::string* AddressDelegatedBalance::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressDelegatedBalance.value)
  return _s;
}
inline const std::string& AddressDelegatedBalance::_internal_value() const {
  return value_.Get();
}
inline void AddressDelegatedBalance::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressDelegatedBalance::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressDelegatedBalance::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressDelegatedBalance.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressDelegatedBalance::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressDelegatedBalance.value)
}

// string bip_value = 3 [json_name = "bipValue"];
inline void AddressDelegatedBalance::clear_bip_value() {
  bip_value_.ClearToEmpty();
}
inline const std::string& AddressDelegatedBalance::bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressDelegatedBalance.bip_value)
  return _internal_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressDelegatedBalance::set_bip_value(ArgT0&& arg0, ArgT... args) {
 
 bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressDelegatedBalance.bip_value)
}
inline std::string* AddressDelegatedBalance::mutable_bip_value() {
  std::string* _s = _internal_mutable_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressDelegatedBalance.bip_value)
  return _s;
}
inline const std::string& AddressDelegatedBalance::_internal_bip_value() const {
  return bip_value_.Get();
}
inline void AddressDelegatedBalance::_internal_set_bip_value(const std::string& value) {
  
  bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressDelegatedBalance::_internal_mutable_bip_value() {
  
  return bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressDelegatedBalance::release_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressDelegatedBalance.bip_value)
  return bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressDelegatedBalance::set_allocated_bip_value(std::string* bip_value) {
  if (bip_value != nullptr) {
    
  } else {
    
  }
  bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressDelegatedBalance.bip_value)
}

// string delegate_bip_value = 4 [json_name = "delegateBipValue"];
inline void AddressDelegatedBalance::clear_delegate_bip_value() {
  delegate_bip_value_.ClearToEmpty();
}
inline const std::string& AddressDelegatedBalance::delegate_bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressDelegatedBalance.delegate_bip_value)
  return _internal_delegate_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressDelegatedBalance::set_delegate_bip_value(ArgT0&& arg0, ArgT... args) {
 
 delegate_bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressDelegatedBalance.delegate_bip_value)
}
inline std::string* AddressDelegatedBalance::mutable_delegate_bip_value() {
  std::string* _s = _internal_mutable_delegate_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressDelegatedBalance.delegate_bip_value)
  return _s;
}
inline const std::string& AddressDelegatedBalance::_internal_delegate_bip_value() const {
  return delegate_bip_value_.Get();
}
inline void AddressDelegatedBalance::_internal_set_delegate_bip_value(const std::string& value) {
  
  delegate_bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressDelegatedBalance::_internal_mutable_delegate_bip_value() {
  
  return delegate_bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressDelegatedBalance::release_delegate_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressDelegatedBalance.delegate_bip_value)
  return delegate_bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressDelegatedBalance::set_allocated_delegate_bip_value(std::string* delegate_bip_value) {
  if (delegate_bip_value != nullptr) {
    
  } else {
    
  }
  delegate_bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegate_bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressDelegatedBalance.delegate_bip_value)
}

// -------------------------------------------------------------------

// AddressResponse

// repeated .api_pb.AddressBalance balance = 1 [json_name = "balance"];
inline int AddressResponse::_internal_balance_size() const {
  return balance_.size();
}
inline int AddressResponse::balance_size() const {
  return _internal_balance_size();
}
inline void AddressResponse::clear_balance() {
  balance_.Clear();
}
inline ::api_pb::AddressBalance* AddressResponse::mutable_balance(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressResponse.balance)
  return balance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
AddressResponse::mutable_balance() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressResponse.balance)
  return &balance_;
}
inline const ::api_pb::AddressBalance& AddressResponse::_internal_balance(int index) const {
  return balance_.Get(index);
}
inline const ::api_pb::AddressBalance& AddressResponse::balance(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressResponse.balance)
  return _internal_balance(index);
}
inline ::api_pb::AddressBalance* AddressResponse::_internal_add_balance() {
  return balance_.Add();
}
inline ::api_pb::AddressBalance* AddressResponse::add_balance() {
  ::api_pb::AddressBalance* _add = _internal_add_balance();
  // @@protoc_insertion_point(field_add:api_pb.AddressResponse.balance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
AddressResponse::balance() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressResponse.balance)
  return balance_;
}

// repeated .api_pb.AddressDelegatedBalance delegated = 3 [json_name = "delegated"];
inline int AddressResponse::_internal_delegated_size() const {
  return delegated_.size();
}
inline int AddressResponse::delegated_size() const {
  return _internal_delegated_size();
}
inline void AddressResponse::clear_delegated() {
  delegated_.Clear();
}
inline ::api_pb::AddressDelegatedBalance* AddressResponse::mutable_delegated(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressResponse.delegated)
  return delegated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >*
AddressResponse::mutable_delegated() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressResponse.delegated)
  return &delegated_;
}
inline const ::api_pb::AddressDelegatedBalance& AddressResponse::_internal_delegated(int index) const {
  return delegated_.Get(index);
}
inline const ::api_pb::AddressDelegatedBalance& AddressResponse::delegated(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressResponse.delegated)
  return _internal_delegated(index);
}
inline ::api_pb::AddressDelegatedBalance* AddressResponse::_internal_add_delegated() {
  return delegated_.Add();
}
inline ::api_pb::AddressDelegatedBalance* AddressResponse::add_delegated() {
  ::api_pb::AddressDelegatedBalance* _add = _internal_add_delegated();
  // @@protoc_insertion_point(field_add:api_pb.AddressResponse.delegated)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >&
AddressResponse::delegated() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressResponse.delegated)
  return delegated_;
}

// repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
inline int AddressResponse::_internal_total_size() const {
  return total_.size();
}
inline int AddressResponse::total_size() const {
  return _internal_total_size();
}
inline void AddressResponse::clear_total() {
  total_.Clear();
}
inline ::api_pb::AddressBalance* AddressResponse::mutable_total(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressResponse.total)
  return total_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
AddressResponse::mutable_total() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressResponse.total)
  return &total_;
}
inline const ::api_pb::AddressBalance& AddressResponse::_internal_total(int index) const {
  return total_.Get(index);
}
inline const ::api_pb::AddressBalance& AddressResponse::total(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressResponse.total)
  return _internal_total(index);
}
inline ::api_pb::AddressBalance* AddressResponse::_internal_add_total() {
  return total_.Add();
}
inline ::api_pb::AddressBalance* AddressResponse::add_total() {
  ::api_pb::AddressBalance* _add = _internal_add_total();
  // @@protoc_insertion_point(field_add:api_pb.AddressResponse.total)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
AddressResponse::total() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressResponse.total)
  return total_;
}

// uint64 transaction_count = 2 [json_name = "transactionCount"];
inline void AddressResponse::clear_transaction_count() {
  transaction_count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressResponse::_internal_transaction_count() const {
  return transaction_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressResponse::transaction_count() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressResponse.transaction_count)
  return _internal_transaction_count();
}
inline void AddressResponse::_internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transaction_count_ = value;
}
inline void AddressResponse::set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transaction_count(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressResponse.transaction_count)
}

// string bip_value = 5 [json_name = "bipValue"];
inline void AddressResponse::clear_bip_value() {
  bip_value_.ClearToEmpty();
}
inline const std::string& AddressResponse::bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressResponse.bip_value)
  return _internal_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressResponse::set_bip_value(ArgT0&& arg0, ArgT... args) {
 
 bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressResponse.bip_value)
}
inline std::string* AddressResponse::mutable_bip_value() {
  std::string* _s = _internal_mutable_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressResponse.bip_value)
  return _s;
}
inline const std::string& AddressResponse::_internal_bip_value() const {
  return bip_value_.Get();
}
inline void AddressResponse::_internal_set_bip_value(const std::string& value) {
  
  bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressResponse::_internal_mutable_bip_value() {
  
  return bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressResponse::release_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressResponse.bip_value)
  return bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressResponse::set_allocated_bip_value(std::string* bip_value) {
  if (bip_value != nullptr) {
    
  } else {
    
  }
  bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressResponse.bip_value)
}

// .api_pb.Multisig multisig = 6 [json_name = "multisig"];
inline bool AddressResponse::_internal_has_multisig() const {
  return this != internal_default_instance() && multisig_ != nullptr;
}
inline bool AddressResponse::has_multisig() const {
  return _internal_has_multisig();
}
inline void AddressResponse::clear_multisig() {
  if (GetArenaForAllocation() == nullptr && multisig_ != nullptr) {
    delete multisig_;
  }
  multisig_ = nullptr;
}
inline const ::api_pb::Multisig& AddressResponse::_internal_multisig() const {
  const ::api_pb::Multisig* p = multisig_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Multisig&>(
      ::api_pb::_Multisig_default_instance_);
}
inline const ::api_pb::Multisig& AddressResponse::multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressResponse.multisig)
  return _internal_multisig();
}
inline void AddressResponse::unsafe_arena_set_allocated_multisig(
    ::api_pb::Multisig* multisig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multisig_);
  }
  multisig_ = multisig;
  if (multisig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.AddressResponse.multisig)
}
inline ::api_pb::Multisig* AddressResponse::release_multisig() {
  
  ::api_pb::Multisig* temp = multisig_;
  multisig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Multisig* AddressResponse::unsafe_arena_release_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.AddressResponse.multisig)
  
  ::api_pb::Multisig* temp = multisig_;
  multisig_ = nullptr;
  return temp;
}
inline ::api_pb::Multisig* AddressResponse::_internal_mutable_multisig() {
  
  if (multisig_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Multisig>(GetArenaForAllocation());
    multisig_ = p;
  }
  return multisig_;
}
inline ::api_pb::Multisig* AddressResponse::mutable_multisig() {
  ::api_pb::Multisig* _msg = _internal_mutable_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressResponse.multisig)
  return _msg;
}
inline void AddressResponse::set_allocated_multisig(::api_pb::Multisig* multisig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete multisig_;
  }
  if (multisig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Multisig>::GetOwningArena(multisig);
    if (message_arena != submessage_arena) {
      multisig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multisig, submessage_arena);
    }
    
  } else {
    
  }
  multisig_ = multisig;
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressResponse.multisig)
}

// -------------------------------------------------------------------

// Multisig

// uint64 threshold = 1 [json_name = "threshold"];
inline void Multisig::clear_threshold() {
  threshold_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Multisig::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Multisig::threshold() const {
  // @@protoc_insertion_point(field_get:api_pb.Multisig.threshold)
  return _internal_threshold();
}
inline void Multisig::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  threshold_ = value;
}
inline void Multisig::set_threshold(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:api_pb.Multisig.threshold)
}

// repeated uint64 weights = 2 [json_name = "weights"];
inline int Multisig::_internal_weights_size() const {
  return weights_.size();
}
inline int Multisig::weights_size() const {
  return _internal_weights_size();
}
inline void Multisig::clear_weights() {
  weights_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Multisig::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Multisig::weights(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.Multisig.weights)
  return _internal_weights(index);
}
inline void Multisig::set_weights(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.Multisig.weights)
}
inline void Multisig::_internal_add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  weights_.Add(value);
}
inline void Multisig::add_weights(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_weights(value);
  // @@protoc_insertion_point(field_add:api_pb.Multisig.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Multisig::_internal_weights() const {
  return weights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Multisig::weights() const {
  // @@protoc_insertion_point(field_list:api_pb.Multisig.weights)
  return _internal_weights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Multisig::_internal_mutable_weights() {
  return &weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Multisig::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.Multisig.weights)
  return _internal_mutable_weights();
}

// repeated string addresses = 3 [json_name = "addresses"];
inline int Multisig::_internal_addresses_size() const {
  return addresses_.size();
}
inline int Multisig::addresses_size() const {
  return _internal_addresses_size();
}
inline void Multisig::clear_addresses() {
  addresses_.Clear();
}
inline std::string* Multisig::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:api_pb.Multisig.addresses)
  return _s;
}
inline const std::string& Multisig::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& Multisig::addresses(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.Multisig.addresses)
  return _internal_addresses(index);
}
inline std::string* Multisig::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.Multisig.addresses)
  return addresses_.Mutable(index);
}
inline void Multisig::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.Multisig.addresses)
}
inline void Multisig::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.Multisig.addresses)
}
inline void Multisig::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.Multisig.addresses)
}
inline void Multisig::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.Multisig.addresses)
}
inline std::string* Multisig::_internal_add_addresses() {
  return addresses_.Add();
}
inline void Multisig::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.Multisig.addresses)
}
inline void Multisig::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.Multisig.addresses)
}
inline void Multisig::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.Multisig.addresses)
}
inline void Multisig::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.Multisig.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Multisig::addresses() const {
  // @@protoc_insertion_point(field_list:api_pb.Multisig.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Multisig::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.Multisig.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// AddressesRequest

// repeated string addresses = 1 [json_name = "addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int AddressesRequest::_internal_addresses_size() const {
  return addresses_.size();
}
inline int AddressesRequest::addresses_size() const {
  return _internal_addresses_size();
}
inline void AddressesRequest::clear_addresses() {
  addresses_.Clear();
}
inline std::string* AddressesRequest::add_addresses() {
  std::string* _s = _internal_add_addresses();
  // @@protoc_insertion_point(field_add_mutable:api_pb.AddressesRequest.addresses)
  return _s;
}
inline const std::string& AddressesRequest::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& AddressesRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesRequest.addresses)
  return _internal_addresses(index);
}
inline std::string* AddressesRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressesRequest.addresses)
  return addresses_.Mutable(index);
}
inline void AddressesRequest::set_addresses(int index, const std::string& value) {
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressesRequest.addresses)
}
inline void AddressesRequest::set_addresses(int index, std::string&& value) {
  addresses_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.AddressesRequest.addresses)
}
inline void AddressesRequest::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.AddressesRequest.addresses)
}
inline void AddressesRequest::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.AddressesRequest.addresses)
}
inline std::string* AddressesRequest::_internal_add_addresses() {
  return addresses_.Add();
}
inline void AddressesRequest::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.AddressesRequest.addresses)
}
inline void AddressesRequest::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.AddressesRequest.addresses)
}
inline void AddressesRequest::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.AddressesRequest.addresses)
}
inline void AddressesRequest::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.AddressesRequest.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddressesRequest::addresses() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressesRequest.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddressesRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressesRequest.addresses)
  return &addresses_;
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AddressesRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressesRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressesRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesRequest.height)
  return _internal_height();
}
inline void AddressesRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void AddressesRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressesRequest.height)
}

// bool delegated = 4 [json_name = "delegated", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AddressesRequest::clear_delegated() {
  delegated_ = false;
}
inline bool AddressesRequest::_internal_delegated() const {
  return delegated_;
}
inline bool AddressesRequest::delegated() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesRequest.delegated)
  return _internal_delegated();
}
inline void AddressesRequest::_internal_set_delegated(bool value) {
  
  delegated_ = value;
}
inline void AddressesRequest::set_delegated(bool value) {
  _internal_set_delegated(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressesRequest.delegated)
}

// -------------------------------------------------------------------

// AddressesResponse_Result

// repeated .api_pb.AddressBalance balance = 2 [json_name = "balance"];
inline int AddressesResponse_Result::_internal_balance_size() const {
  return balance_.size();
}
inline int AddressesResponse_Result::balance_size() const {
  return _internal_balance_size();
}
inline void AddressesResponse_Result::clear_balance() {
  balance_.Clear();
}
inline ::api_pb::AddressBalance* AddressesResponse_Result::mutable_balance(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressesResponse.Result.balance)
  return balance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
AddressesResponse_Result::mutable_balance() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressesResponse.Result.balance)
  return &balance_;
}
inline const ::api_pb::AddressBalance& AddressesResponse_Result::_internal_balance(int index) const {
  return balance_.Get(index);
}
inline const ::api_pb::AddressBalance& AddressesResponse_Result::balance(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesResponse.Result.balance)
  return _internal_balance(index);
}
inline ::api_pb::AddressBalance* AddressesResponse_Result::_internal_add_balance() {
  return balance_.Add();
}
inline ::api_pb::AddressBalance* AddressesResponse_Result::add_balance() {
  ::api_pb::AddressBalance* _add = _internal_add_balance();
  // @@protoc_insertion_point(field_add:api_pb.AddressesResponse.Result.balance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
AddressesResponse_Result::balance() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressesResponse.Result.balance)
  return balance_;
}

// repeated .api_pb.AddressDelegatedBalance delegated = 6 [json_name = "delegated"];
inline int AddressesResponse_Result::_internal_delegated_size() const {
  return delegated_.size();
}
inline int AddressesResponse_Result::delegated_size() const {
  return _internal_delegated_size();
}
inline void AddressesResponse_Result::clear_delegated() {
  delegated_.Clear();
}
inline ::api_pb::AddressDelegatedBalance* AddressesResponse_Result::mutable_delegated(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressesResponse.Result.delegated)
  return delegated_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >*
AddressesResponse_Result::mutable_delegated() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressesResponse.Result.delegated)
  return &delegated_;
}
inline const ::api_pb::AddressDelegatedBalance& AddressesResponse_Result::_internal_delegated(int index) const {
  return delegated_.Get(index);
}
inline const ::api_pb::AddressDelegatedBalance& AddressesResponse_Result::delegated(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesResponse.Result.delegated)
  return _internal_delegated(index);
}
inline ::api_pb::AddressDelegatedBalance* AddressesResponse_Result::_internal_add_delegated() {
  return delegated_.Add();
}
inline ::api_pb::AddressDelegatedBalance* AddressesResponse_Result::add_delegated() {
  ::api_pb::AddressDelegatedBalance* _add = _internal_add_delegated();
  // @@protoc_insertion_point(field_add:api_pb.AddressesResponse.Result.delegated)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressDelegatedBalance >&
AddressesResponse_Result::delegated() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressesResponse.Result.delegated)
  return delegated_;
}

// repeated .api_pb.AddressBalance total = 4 [json_name = "total"];
inline int AddressesResponse_Result::_internal_total_size() const {
  return total_.size();
}
inline int AddressesResponse_Result::total_size() const {
  return _internal_total_size();
}
inline void AddressesResponse_Result::clear_total() {
  total_.Clear();
}
inline ::api_pb::AddressBalance* AddressesResponse_Result::mutable_total(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.AddressesResponse.Result.total)
  return total_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >*
AddressesResponse_Result::mutable_total() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.AddressesResponse.Result.total)
  return &total_;
}
inline const ::api_pb::AddressBalance& AddressesResponse_Result::_internal_total(int index) const {
  return total_.Get(index);
}
inline const ::api_pb::AddressBalance& AddressesResponse_Result::total(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesResponse.Result.total)
  return _internal_total(index);
}
inline ::api_pb::AddressBalance* AddressesResponse_Result::_internal_add_total() {
  return total_.Add();
}
inline ::api_pb::AddressBalance* AddressesResponse_Result::add_total() {
  ::api_pb::AddressBalance* _add = _internal_add_total();
  // @@protoc_insertion_point(field_add:api_pb.AddressesResponse.Result.total)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::AddressBalance >&
AddressesResponse_Result::total() const {
  // @@protoc_insertion_point(field_list:api_pb.AddressesResponse.Result.total)
  return total_;
}

// uint64 transaction_count = 3 [json_name = "transactionCount"];
inline void AddressesResponse_Result::clear_transaction_count() {
  transaction_count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressesResponse_Result::_internal_transaction_count() const {
  return transaction_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddressesResponse_Result::transaction_count() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesResponse.Result.transaction_count)
  return _internal_transaction_count();
}
inline void AddressesResponse_Result::_internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transaction_count_ = value;
}
inline void AddressesResponse_Result::set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transaction_count(value);
  // @@protoc_insertion_point(field_set:api_pb.AddressesResponse.Result.transaction_count)
}

// string bip_value = 5 [json_name = "bipValue"];
inline void AddressesResponse_Result::clear_bip_value() {
  bip_value_.ClearToEmpty();
}
inline const std::string& AddressesResponse_Result::bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesResponse.Result.bip_value)
  return _internal_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddressesResponse_Result::set_bip_value(ArgT0&& arg0, ArgT... args) {
 
 bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.AddressesResponse.Result.bip_value)
}
inline std::string* AddressesResponse_Result::mutable_bip_value() {
  std::string* _s = _internal_mutable_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressesResponse.Result.bip_value)
  return _s;
}
inline const std::string& AddressesResponse_Result::_internal_bip_value() const {
  return bip_value_.Get();
}
inline void AddressesResponse_Result::_internal_set_bip_value(const std::string& value) {
  
  bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddressesResponse_Result::_internal_mutable_bip_value() {
  
  return bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddressesResponse_Result::release_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.AddressesResponse.Result.bip_value)
  return bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddressesResponse_Result::set_allocated_bip_value(std::string* bip_value) {
  if (bip_value != nullptr) {
    
  } else {
    
  }
  bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressesResponse.Result.bip_value)
}

// .api_pb.Multisig multisig = 7 [json_name = "multisig"];
inline bool AddressesResponse_Result::_internal_has_multisig() const {
  return this != internal_default_instance() && multisig_ != nullptr;
}
inline bool AddressesResponse_Result::has_multisig() const {
  return _internal_has_multisig();
}
inline void AddressesResponse_Result::clear_multisig() {
  if (GetArenaForAllocation() == nullptr && multisig_ != nullptr) {
    delete multisig_;
  }
  multisig_ = nullptr;
}
inline const ::api_pb::Multisig& AddressesResponse_Result::_internal_multisig() const {
  const ::api_pb::Multisig* p = multisig_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Multisig&>(
      ::api_pb::_Multisig_default_instance_);
}
inline const ::api_pb::Multisig& AddressesResponse_Result::multisig() const {
  // @@protoc_insertion_point(field_get:api_pb.AddressesResponse.Result.multisig)
  return _internal_multisig();
}
inline void AddressesResponse_Result::unsafe_arena_set_allocated_multisig(
    ::api_pb::Multisig* multisig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(multisig_);
  }
  multisig_ = multisig;
  if (multisig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.AddressesResponse.Result.multisig)
}
inline ::api_pb::Multisig* AddressesResponse_Result::release_multisig() {
  
  ::api_pb::Multisig* temp = multisig_;
  multisig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Multisig* AddressesResponse_Result::unsafe_arena_release_multisig() {
  // @@protoc_insertion_point(field_release:api_pb.AddressesResponse.Result.multisig)
  
  ::api_pb::Multisig* temp = multisig_;
  multisig_ = nullptr;
  return temp;
}
inline ::api_pb::Multisig* AddressesResponse_Result::_internal_mutable_multisig() {
  
  if (multisig_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Multisig>(GetArenaForAllocation());
    multisig_ = p;
  }
  return multisig_;
}
inline ::api_pb::Multisig* AddressesResponse_Result::mutable_multisig() {
  ::api_pb::Multisig* _msg = _internal_mutable_multisig();
  // @@protoc_insertion_point(field_mutable:api_pb.AddressesResponse.Result.multisig)
  return _msg;
}
inline void AddressesResponse_Result::set_allocated_multisig(::api_pb::Multisig* multisig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete multisig_;
  }
  if (multisig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Multisig>::GetOwningArena(multisig);
    if (message_arena != submessage_arena) {
      multisig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multisig, submessage_arena);
    }
    
  } else {
    
  }
  multisig_ = multisig;
  // @@protoc_insertion_point(field_set_allocated:api_pb.AddressesResponse.Result.multisig)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AddressesResponse

// map<string, .api_pb.AddressesResponse.Result> addresses = 3 [json_name = "addresses"];
inline int AddressesResponse::_internal_addresses_size() const {
  return addresses_.size();
}
inline int AddressesResponse::addresses_size() const {
  return _internal_addresses_size();
}
inline void AddressesResponse::clear_addresses() {
  addresses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >&
AddressesResponse::_internal_addresses() const {
  return addresses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >&
AddressesResponse::addresses() const {
  // @@protoc_insertion_point(field_map:api_pb.AddressesResponse.addresses)
  return _internal_addresses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >*
AddressesResponse::_internal_mutable_addresses() {
  return addresses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::api_pb::AddressesResponse_Result >*
AddressesResponse::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_map:api_pb.AddressesResponse.addresses)
  return _internal_mutable_addresses();
}

// -------------------------------------------------------------------

// CandidateRequest

// string public_key = 1 [json_name = "publicKey"];
inline void CandidateRequest::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& CandidateRequest::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateRequest.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateRequest::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateRequest.public_key)
}
inline std::string* CandidateRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateRequest.public_key)
  return _s;
}
inline const std::string& CandidateRequest::_internal_public_key() const {
  return public_key_.Get();
}
inline void CandidateRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateRequest::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateRequest.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateRequest.public_key)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CandidateRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateRequest.height)
  return _internal_height();
}
inline void CandidateRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void CandidateRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateRequest.height)
}

// bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CandidateRequest::clear_not_show_stakes() {
  not_show_stakes_ = false;
}
inline bool CandidateRequest::_internal_not_show_stakes() const {
  return not_show_stakes_;
}
inline bool CandidateRequest::not_show_stakes() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateRequest.not_show_stakes)
  return _internal_not_show_stakes();
}
inline void CandidateRequest::_internal_set_not_show_stakes(bool value) {
  
  not_show_stakes_ = value;
}
inline void CandidateRequest::set_not_show_stakes(bool value) {
  _internal_set_not_show_stakes(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateRequest.not_show_stakes)
}

// -------------------------------------------------------------------

// CandidateResponse_Stake

// string owner = 1 [json_name = "owner"];
inline void CandidateResponse_Stake::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& CandidateResponse_Stake::owner() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.Stake.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse_Stake::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.Stake.owner)
}
inline std::string* CandidateResponse_Stake::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.Stake.owner)
  return _s;
}
inline const std::string& CandidateResponse_Stake::_internal_owner() const {
  return owner_.Get();
}
inline void CandidateResponse_Stake::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse_Stake::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse_Stake::release_owner() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.Stake.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse_Stake::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.Stake.owner)
}

// .api_pb.Coin coin = 2 [json_name = "coin"];
inline bool CandidateResponse_Stake::_internal_has_coin() const {
  return this != internal_default_instance() && coin_ != nullptr;
}
inline bool CandidateResponse_Stake::has_coin() const {
  return _internal_has_coin();
}
inline void CandidateResponse_Stake::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
inline const ::api_pb::Coin& CandidateResponse_Stake::_internal_coin() const {
  const ::api_pb::Coin* p = coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& CandidateResponse_Stake::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.Stake.coin)
  return _internal_coin();
}
inline void CandidateResponse_Stake::unsafe_arena_set_allocated_coin(
    ::api_pb::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_);
  }
  coin_ = coin;
  if (coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.CandidateResponse.Stake.coin)
}
inline ::api_pb::Coin* CandidateResponse_Stake::release_coin() {
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* CandidateResponse_Stake::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.Stake.coin)
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* CandidateResponse_Stake::_internal_mutable_coin() {
  
  if (coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_ = p;
  }
  return coin_;
}
inline ::api_pb::Coin* CandidateResponse_Stake::mutable_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.Stake.coin)
  return _msg;
}
inline void CandidateResponse_Stake::set_allocated_coin(::api_pb::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_;
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin);
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    
  } else {
    
  }
  coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.Stake.coin)
}

// string value = 3 [json_name = "value"];
inline void CandidateResponse_Stake::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& CandidateResponse_Stake::value() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.Stake.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse_Stake::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.Stake.value)
}
inline std::string* CandidateResponse_Stake::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.Stake.value)
  return _s;
}
inline const std::string& CandidateResponse_Stake::_internal_value() const {
  return value_.Get();
}
inline void CandidateResponse_Stake::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse_Stake::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse_Stake::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.Stake.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse_Stake::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.Stake.value)
}

// string bip_value = 4 [json_name = "bipValue"];
inline void CandidateResponse_Stake::clear_bip_value() {
  bip_value_.ClearToEmpty();
}
inline const std::string& CandidateResponse_Stake::bip_value() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.Stake.bip_value)
  return _internal_bip_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse_Stake::set_bip_value(ArgT0&& arg0, ArgT... args) {
 
 bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.Stake.bip_value)
}
inline std::string* CandidateResponse_Stake::mutable_bip_value() {
  std::string* _s = _internal_mutable_bip_value();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.Stake.bip_value)
  return _s;
}
inline const std::string& CandidateResponse_Stake::_internal_bip_value() const {
  return bip_value_.Get();
}
inline void CandidateResponse_Stake::_internal_set_bip_value(const std::string& value) {
  
  bip_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse_Stake::_internal_mutable_bip_value() {
  
  return bip_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse_Stake::release_bip_value() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.Stake.bip_value)
  return bip_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse_Stake::set_allocated_bip_value(std::string* bip_value) {
  if (bip_value != nullptr) {
    
  } else {
    
  }
  bip_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bip_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.Stake.bip_value)
}

// -------------------------------------------------------------------

// CandidateResponse

// uint64 id = 14 [json_name = "id"];
inline void CandidateResponse::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::id() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.id)
  return _internal_id();
}
inline void CandidateResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CandidateResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.id)
}

// string reward_address = 1 [json_name = "rewardAddress"];
inline void CandidateResponse::clear_reward_address() {
  reward_address_.ClearToEmpty();
}
inline const std::string& CandidateResponse::reward_address() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.reward_address)
  return _internal_reward_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse::set_reward_address(ArgT0&& arg0, ArgT... args) {
 
 reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.reward_address)
}
inline std::string* CandidateResponse::mutable_reward_address() {
  std::string* _s = _internal_mutable_reward_address();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.reward_address)
  return _s;
}
inline const std::string& CandidateResponse::_internal_reward_address() const {
  return reward_address_.Get();
}
inline void CandidateResponse::_internal_set_reward_address(const std::string& value) {
  
  reward_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse::_internal_mutable_reward_address() {
  
  return reward_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse::release_reward_address() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.reward_address)
  return reward_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse::set_allocated_reward_address(std::string* reward_address) {
  if (reward_address != nullptr) {
    
  } else {
    
  }
  reward_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.reward_address)
}

// string owner_address = 10 [json_name = "ownerAddress"];
inline void CandidateResponse::clear_owner_address() {
  owner_address_.ClearToEmpty();
}
inline const std::string& CandidateResponse::owner_address() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.owner_address)
  return _internal_owner_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse::set_owner_address(ArgT0&& arg0, ArgT... args) {
 
 owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.owner_address)
}
inline std::string* CandidateResponse::mutable_owner_address() {
  std::string* _s = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.owner_address)
  return _s;
}
inline const std::string& CandidateResponse::_internal_owner_address() const {
  return owner_address_.Get();
}
inline void CandidateResponse::_internal_set_owner_address(const std::string& value) {
  
  owner_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse::_internal_mutable_owner_address() {
  
  return owner_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse::release_owner_address() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.owner_address)
  return owner_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.owner_address)
}

// string control_address = 11 [json_name = "controlAddress"];
inline void CandidateResponse::clear_control_address() {
  control_address_.ClearToEmpty();
}
inline const std::string& CandidateResponse::control_address() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.control_address)
  return _internal_control_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse::set_control_address(ArgT0&& arg0, ArgT... args) {
 
 control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.control_address)
}
inline std::string* CandidateResponse::mutable_control_address() {
  std::string* _s = _internal_mutable_control_address();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.control_address)
  return _s;
}
inline const std::string& CandidateResponse::_internal_control_address() const {
  return control_address_.Get();
}
inline void CandidateResponse::_internal_set_control_address(const std::string& value) {
  
  control_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse::_internal_mutable_control_address() {
  
  return control_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse::release_control_address() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.control_address)
  return control_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse::set_allocated_control_address(std::string* control_address) {
  if (control_address != nullptr) {
    
  } else {
    
  }
  control_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control_address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.control_address)
}

// string total_stake = 2 [json_name = "totalStake"];
inline void CandidateResponse::clear_total_stake() {
  total_stake_.ClearToEmpty();
}
inline const std::string& CandidateResponse::total_stake() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.total_stake)
  return _internal_total_stake();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse::set_total_stake(ArgT0&& arg0, ArgT... args) {
 
 total_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.total_stake)
}
inline std::string* CandidateResponse::mutable_total_stake() {
  std::string* _s = _internal_mutable_total_stake();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.total_stake)
  return _s;
}
inline const std::string& CandidateResponse::_internal_total_stake() const {
  return total_stake_.Get();
}
inline void CandidateResponse::_internal_set_total_stake(const std::string& value) {
  
  total_stake_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse::_internal_mutable_total_stake() {
  
  return total_stake_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse::release_total_stake() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.total_stake)
  return total_stake_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse::set_allocated_total_stake(std::string* total_stake) {
  if (total_stake != nullptr) {
    
  } else {
    
  }
  total_stake_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_stake,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.total_stake)
}

// string public_key = 3 [json_name = "publicKey"];
inline void CandidateResponse::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& CandidateResponse::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CandidateResponse::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.public_key)
}
inline std::string* CandidateResponse::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.public_key)
  return _s;
}
inline const std::string& CandidateResponse::_internal_public_key() const {
  return public_key_.Get();
}
inline void CandidateResponse::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CandidateResponse::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CandidateResponse::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CandidateResponse::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.public_key)
}

// uint64 commission = 4 [json_name = "commission"];
inline void CandidateResponse::clear_commission() {
  commission_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::_internal_commission() const {
  return commission_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.commission)
  return _internal_commission();
}
inline void CandidateResponse::_internal_set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  commission_ = value;
}
inline void CandidateResponse::set_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.commission)
}

// .google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];
inline bool CandidateResponse::_internal_has_used_slots() const {
  return this != internal_default_instance() && used_slots_ != nullptr;
}
inline bool CandidateResponse::has_used_slots() const {
  return _internal_has_used_slots();
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& CandidateResponse::_internal_used_slots() const {
  const PROTOBUF_NAMESPACE_ID::UInt64Value* p = used_slots_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& CandidateResponse::used_slots() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.used_slots)
  return _internal_used_slots();
}
inline void CandidateResponse::unsafe_arena_set_allocated_used_slots(
    PROTOBUF_NAMESPACE_ID::UInt64Value* used_slots) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(used_slots_);
  }
  used_slots_ = used_slots;
  if (used_slots) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.CandidateResponse.used_slots)
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::release_used_slots() {
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = used_slots_;
  used_slots_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::unsafe_arena_release_used_slots() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.used_slots)
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = used_slots_;
  used_slots_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::_internal_mutable_used_slots() {
  
  if (used_slots_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    used_slots_ = p;
  }
  return used_slots_;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::mutable_used_slots() {
  PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_used_slots();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.used_slots)
  return _msg;
}
inline void CandidateResponse::set_allocated_used_slots(PROTOBUF_NAMESPACE_ID::UInt64Value* used_slots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(used_slots_);
  }
  if (used_slots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(used_slots));
    if (message_arena != submessage_arena) {
      used_slots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, used_slots, submessage_arena);
    }
    
  } else {
    
  }
  used_slots_ = used_slots;
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.used_slots)
}

// .google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];
inline bool CandidateResponse::_internal_has_uniq_users() const {
  return this != internal_default_instance() && uniq_users_ != nullptr;
}
inline bool CandidateResponse::has_uniq_users() const {
  return _internal_has_uniq_users();
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& CandidateResponse::_internal_uniq_users() const {
  const PROTOBUF_NAMESPACE_ID::UInt64Value* p = uniq_users_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& CandidateResponse::uniq_users() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.uniq_users)
  return _internal_uniq_users();
}
inline void CandidateResponse::unsafe_arena_set_allocated_uniq_users(
    PROTOBUF_NAMESPACE_ID::UInt64Value* uniq_users) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniq_users_);
  }
  uniq_users_ = uniq_users;
  if (uniq_users) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.CandidateResponse.uniq_users)
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::release_uniq_users() {
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = uniq_users_;
  uniq_users_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::unsafe_arena_release_uniq_users() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.uniq_users)
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = uniq_users_;
  uniq_users_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::_internal_mutable_uniq_users() {
  
  if (uniq_users_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    uniq_users_ = p;
  }
  return uniq_users_;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* CandidateResponse::mutable_uniq_users() {
  PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_uniq_users();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.uniq_users)
  return _msg;
}
inline void CandidateResponse::set_allocated_uniq_users(PROTOBUF_NAMESPACE_ID::UInt64Value* uniq_users) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniq_users_);
  }
  if (uniq_users) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uniq_users));
    if (message_arena != submessage_arena) {
      uniq_users = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uniq_users, submessage_arena);
    }
    
  } else {
    
  }
  uniq_users_ = uniq_users;
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.uniq_users)
}

// .google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];
inline bool CandidateResponse::_internal_has_min_stake() const {
  return this != internal_default_instance() && min_stake_ != nullptr;
}
inline bool CandidateResponse::has_min_stake() const {
  return _internal_has_min_stake();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CandidateResponse::_internal_min_stake() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = min_stake_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CandidateResponse::min_stake() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.min_stake)
  return _internal_min_stake();
}
inline void CandidateResponse::unsafe_arena_set_allocated_min_stake(
    PROTOBUF_NAMESPACE_ID::StringValue* min_stake) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_stake_);
  }
  min_stake_ = min_stake;
  if (min_stake) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.CandidateResponse.min_stake)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CandidateResponse::release_min_stake() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = min_stake_;
  min_stake_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CandidateResponse::unsafe_arena_release_min_stake() {
  // @@protoc_insertion_point(field_release:api_pb.CandidateResponse.min_stake)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = min_stake_;
  min_stake_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CandidateResponse::_internal_mutable_min_stake() {
  
  if (min_stake_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    min_stake_ = p;
  }
  return min_stake_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CandidateResponse::mutable_min_stake() {
  PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_min_stake();
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.min_stake)
  return _msg;
}
inline void CandidateResponse::set_allocated_min_stake(PROTOBUF_NAMESPACE_ID::StringValue* min_stake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_stake_);
  }
  if (min_stake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_stake));
    if (message_arena != submessage_arena) {
      min_stake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_stake, submessage_arena);
    }
    
  } else {
    
  }
  min_stake_ = min_stake;
  // @@protoc_insertion_point(field_set_allocated:api_pb.CandidateResponse.min_stake)
}

// repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];
inline int CandidateResponse::_internal_stakes_size() const {
  return stakes_.size();
}
inline int CandidateResponse::stakes_size() const {
  return _internal_stakes_size();
}
inline void CandidateResponse::clear_stakes() {
  stakes_.Clear();
}
inline ::api_pb::CandidateResponse_Stake* CandidateResponse::mutable_stakes(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.CandidateResponse.stakes)
  return stakes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse_Stake >*
CandidateResponse::mutable_stakes() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.CandidateResponse.stakes)
  return &stakes_;
}
inline const ::api_pb::CandidateResponse_Stake& CandidateResponse::_internal_stakes(int index) const {
  return stakes_.Get(index);
}
inline const ::api_pb::CandidateResponse_Stake& CandidateResponse::stakes(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.stakes)
  return _internal_stakes(index);
}
inline ::api_pb::CandidateResponse_Stake* CandidateResponse::_internal_add_stakes() {
  return stakes_.Add();
}
inline ::api_pb::CandidateResponse_Stake* CandidateResponse::add_stakes() {
  ::api_pb::CandidateResponse_Stake* _add = _internal_add_stakes();
  // @@protoc_insertion_point(field_add:api_pb.CandidateResponse.stakes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse_Stake >&
CandidateResponse::stakes() const {
  // @@protoc_insertion_point(field_list:api_pb.CandidateResponse.stakes)
  return stakes_;
}

// uint64 status = 6 [json_name = "status"];
inline void CandidateResponse::clear_status() {
  status_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::status() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.status)
  return _internal_status();
}
inline void CandidateResponse::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  status_ = value;
}
inline void CandidateResponse::set_status(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.status)
}

// bool validator = 12 [json_name = "validator"];
inline void CandidateResponse::clear_validator() {
  validator_ = false;
}
inline bool CandidateResponse::_internal_validator() const {
  return validator_;
}
inline bool CandidateResponse::validator() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.validator)
  return _internal_validator();
}
inline void CandidateResponse::_internal_set_validator(bool value) {
  
  validator_ = value;
}
inline void CandidateResponse::set_validator(bool value) {
  _internal_set_validator(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.validator)
}

// uint64 jailed_until = 13 [json_name = "jailedUntil"];
inline void CandidateResponse::clear_jailed_until() {
  jailed_until_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::_internal_jailed_until() const {
  return jailed_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidateResponse::jailed_until() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidateResponse.jailed_until)
  return _internal_jailed_until();
}
inline void CandidateResponse::_internal_set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  jailed_until_ = value;
}
inline void CandidateResponse::set_jailed_until(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_jailed_until(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidateResponse.jailed_until)
}

// -------------------------------------------------------------------

// CandidatesRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CandidatesRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidatesRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CandidatesRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidatesRequest.height)
  return _internal_height();
}
inline void CandidatesRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void CandidatesRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidatesRequest.height)
}

// bool include_stakes = 2 [json_name = "includeStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CandidatesRequest::clear_include_stakes() {
  include_stakes_ = false;
}
inline bool CandidatesRequest::_internal_include_stakes() const {
  return include_stakes_;
}
inline bool CandidatesRequest::include_stakes() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidatesRequest.include_stakes)
  return _internal_include_stakes();
}
inline void CandidatesRequest::_internal_set_include_stakes(bool value) {
  
  include_stakes_ = value;
}
inline void CandidatesRequest::set_include_stakes(bool value) {
  _internal_set_include_stakes(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidatesRequest.include_stakes)
}

// bool not_show_stakes = 4 [json_name = "notShowStakes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CandidatesRequest::clear_not_show_stakes() {
  not_show_stakes_ = false;
}
inline bool CandidatesRequest::_internal_not_show_stakes() const {
  return not_show_stakes_;
}
inline bool CandidatesRequest::not_show_stakes() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidatesRequest.not_show_stakes)
  return _internal_not_show_stakes();
}
inline void CandidatesRequest::_internal_set_not_show_stakes(bool value) {
  
  not_show_stakes_ = value;
}
inline void CandidatesRequest::set_not_show_stakes(bool value) {
  _internal_set_not_show_stakes(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidatesRequest.not_show_stakes)
}

// .api_pb.CandidatesRequest.CandidateStatus status = 3 [json_name = "status"];
inline void CandidatesRequest::clear_status() {
  status_ = 0;
}
inline ::api_pb::CandidatesRequest_CandidateStatus CandidatesRequest::_internal_status() const {
  return static_cast< ::api_pb::CandidatesRequest_CandidateStatus >(status_);
}
inline ::api_pb::CandidatesRequest_CandidateStatus CandidatesRequest::status() const {
  // @@protoc_insertion_point(field_get:api_pb.CandidatesRequest.status)
  return _internal_status();
}
inline void CandidatesRequest::_internal_set_status(::api_pb::CandidatesRequest_CandidateStatus value) {
  
  status_ = value;
}
inline void CandidatesRequest::set_status(::api_pb::CandidatesRequest_CandidateStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:api_pb.CandidatesRequest.status)
}

// -------------------------------------------------------------------

// CandidatesResponse

// repeated .api_pb.CandidateResponse candidates = 3 [json_name = "candidates"];
inline int CandidatesResponse::_internal_candidates_size() const {
  return candidates_.size();
}
inline int CandidatesResponse::candidates_size() const {
  return _internal_candidates_size();
}
inline void CandidatesResponse::clear_candidates() {
  candidates_.Clear();
}
inline ::api_pb::CandidateResponse* CandidatesResponse::mutable_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.CandidatesResponse.candidates)
  return candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse >*
CandidatesResponse::mutable_candidates() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.CandidatesResponse.candidates)
  return &candidates_;
}
inline const ::api_pb::CandidateResponse& CandidatesResponse::_internal_candidates(int index) const {
  return candidates_.Get(index);
}
inline const ::api_pb::CandidateResponse& CandidatesResponse::candidates(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.CandidatesResponse.candidates)
  return _internal_candidates(index);
}
inline ::api_pb::CandidateResponse* CandidatesResponse::_internal_add_candidates() {
  return candidates_.Add();
}
inline ::api_pb::CandidateResponse* CandidatesResponse::add_candidates() {
  ::api_pb::CandidateResponse* _add = _internal_add_candidates();
  // @@protoc_insertion_point(field_add:api_pb.CandidatesResponse.candidates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::CandidateResponse >&
CandidatesResponse::candidates() const {
  // @@protoc_insertion_point(field_list:api_pb.CandidatesResponse.candidates)
  return candidates_;
}

// -------------------------------------------------------------------

// CoinIdRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CoinIdRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinIdRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinIdRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinIdRequest.height)
  return _internal_height();
}
inline void CoinIdRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void CoinIdRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinIdRequest.height)
}

// uint64 id = 2 [json_name = "id"];
inline void CoinIdRequest::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinIdRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinIdRequest::id() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinIdRequest.id)
  return _internal_id();
}
inline void CoinIdRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CoinIdRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinIdRequest.id)
}

// -------------------------------------------------------------------

// CoinInfoRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CoinInfoRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinInfoRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinInfoRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoRequest.height)
  return _internal_height();
}
inline void CoinInfoRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void CoinInfoRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoRequest.height)
}

// string symbol = 2 [json_name = "symbol"];
inline void CoinInfoRequest::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& CoinInfoRequest::symbol() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoRequest.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoinInfoRequest::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoRequest.symbol)
}
inline std::string* CoinInfoRequest::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoRequest.symbol)
  return _s;
}
inline const std::string& CoinInfoRequest::_internal_symbol() const {
  return symbol_.Get();
}
inline void CoinInfoRequest::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoinInfoRequest::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoinInfoRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoRequest.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoinInfoRequest::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoRequest.symbol)
}

// -------------------------------------------------------------------

// CoinInfoResponse

// uint64 id = 6 [json_name = "id"];
inline void CoinInfoResponse::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinInfoResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinInfoResponse::id() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.id)
  return _internal_id();
}
inline void CoinInfoResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void CoinInfoResponse::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.id)
}

// string name = 1 [json_name = "name"];
inline void CoinInfoResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CoinInfoResponse::name() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoinInfoResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.name)
}
inline std::string* CoinInfoResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoResponse.name)
  return _s;
}
inline const std::string& CoinInfoResponse::_internal_name() const {
  return name_.Get();
}
inline void CoinInfoResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::release_name() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoinInfoResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoResponse.name)
}

// string symbol = 2 [json_name = "symbol"];
inline void CoinInfoResponse::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& CoinInfoResponse::symbol() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoinInfoResponse::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.symbol)
}
inline std::string* CoinInfoResponse::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoResponse.symbol)
  return _s;
}
inline const std::string& CoinInfoResponse::_internal_symbol() const {
  return symbol_.Get();
}
inline void CoinInfoResponse::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::release_symbol() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoResponse.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoinInfoResponse::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoResponse.symbol)
}

// string volume = 3 [json_name = "volume"];
inline void CoinInfoResponse::clear_volume() {
  volume_.ClearToEmpty();
}
inline const std::string& CoinInfoResponse::volume() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.volume)
  return _internal_volume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoinInfoResponse::set_volume(ArgT0&& arg0, ArgT... args) {
 
 volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.volume)
}
inline std::string* CoinInfoResponse::mutable_volume() {
  std::string* _s = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoResponse.volume)
  return _s;
}
inline const std::string& CoinInfoResponse::_internal_volume() const {
  return volume_.Get();
}
inline void CoinInfoResponse::_internal_set_volume(const std::string& value) {
  
  volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::_internal_mutable_volume() {
  
  return volume_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::release_volume() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoResponse.volume)
  return volume_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoinInfoResponse::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  volume_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), volume,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoResponse.volume)
}

// uint64 crr = 4 [json_name = "crr"];
inline void CoinInfoResponse::clear_crr() {
  crr_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinInfoResponse::_internal_crr() const {
  return crr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CoinInfoResponse::crr() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.crr)
  return _internal_crr();
}
inline void CoinInfoResponse::_internal_set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  crr_ = value;
}
inline void CoinInfoResponse::set_crr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_crr(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.crr)
}

// string reserve_balance = 5 [json_name = "reserveBalance"];
inline void CoinInfoResponse::clear_reserve_balance() {
  reserve_balance_.ClearToEmpty();
}
inline const std::string& CoinInfoResponse::reserve_balance() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.reserve_balance)
  return _internal_reserve_balance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoinInfoResponse::set_reserve_balance(ArgT0&& arg0, ArgT... args) {
 
 reserve_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.reserve_balance)
}
inline std::string* CoinInfoResponse::mutable_reserve_balance() {
  std::string* _s = _internal_mutable_reserve_balance();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoResponse.reserve_balance)
  return _s;
}
inline const std::string& CoinInfoResponse::_internal_reserve_balance() const {
  return reserve_balance_.Get();
}
inline void CoinInfoResponse::_internal_set_reserve_balance(const std::string& value) {
  
  reserve_balance_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::_internal_mutable_reserve_balance() {
  
  return reserve_balance_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::release_reserve_balance() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoResponse.reserve_balance)
  return reserve_balance_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoinInfoResponse::set_allocated_reserve_balance(std::string* reserve_balance) {
  if (reserve_balance != nullptr) {
    
  } else {
    
  }
  reserve_balance_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reserve_balance,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoResponse.reserve_balance)
}

// string max_supply = 8 [json_name = "maxSupply"];
inline void CoinInfoResponse::clear_max_supply() {
  max_supply_.ClearToEmpty();
}
inline const std::string& CoinInfoResponse::max_supply() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.max_supply)
  return _internal_max_supply();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CoinInfoResponse::set_max_supply(ArgT0&& arg0, ArgT... args) {
 
 max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.max_supply)
}
inline std::string* CoinInfoResponse::mutable_max_supply() {
  std::string* _s = _internal_mutable_max_supply();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoResponse.max_supply)
  return _s;
}
inline const std::string& CoinInfoResponse::_internal_max_supply() const {
  return max_supply_.Get();
}
inline void CoinInfoResponse::_internal_set_max_supply(const std::string& value) {
  
  max_supply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::_internal_mutable_max_supply() {
  
  return max_supply_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CoinInfoResponse::release_max_supply() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoResponse.max_supply)
  return max_supply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CoinInfoResponse::set_allocated_max_supply(std::string* max_supply) {
  if (max_supply != nullptr) {
    
  } else {
    
  }
  max_supply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_supply,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoResponse.max_supply)
}

// .google.protobuf.StringValue owner_address = 7 [json_name = "ownerAddress"];
inline bool CoinInfoResponse::_internal_has_owner_address() const {
  return this != internal_default_instance() && owner_address_ != nullptr;
}
inline bool CoinInfoResponse::has_owner_address() const {
  return _internal_has_owner_address();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CoinInfoResponse::_internal_owner_address() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = owner_address_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CoinInfoResponse::owner_address() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.owner_address)
  return _internal_owner_address();
}
inline void CoinInfoResponse::unsafe_arena_set_allocated_owner_address(
    PROTOBUF_NAMESPACE_ID::StringValue* owner_address) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_address_);
  }
  owner_address_ = owner_address;
  if (owner_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.CoinInfoResponse.owner_address)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CoinInfoResponse::release_owner_address() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = owner_address_;
  owner_address_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CoinInfoResponse::unsafe_arena_release_owner_address() {
  // @@protoc_insertion_point(field_release:api_pb.CoinInfoResponse.owner_address)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = owner_address_;
  owner_address_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CoinInfoResponse::_internal_mutable_owner_address() {
  
  if (owner_address_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArenaForAllocation());
    owner_address_ = p;
  }
  return owner_address_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CoinInfoResponse::mutable_owner_address() {
  PROTOBUF_NAMESPACE_ID::StringValue* _msg = _internal_mutable_owner_address();
  // @@protoc_insertion_point(field_mutable:api_pb.CoinInfoResponse.owner_address)
  return _msg;
}
inline void CoinInfoResponse::set_allocated_owner_address(PROTOBUF_NAMESPACE_ID::StringValue* owner_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_address_);
  }
  if (owner_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_address));
    if (message_arena != submessage_arena) {
      owner_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_address, submessage_arena);
    }
    
  } else {
    
  }
  owner_address_ = owner_address;
  // @@protoc_insertion_point(field_set_allocated:api_pb.CoinInfoResponse.owner_address)
}

// bool mintable = 9 [json_name = "mintable"];
inline void CoinInfoResponse::clear_mintable() {
  mintable_ = false;
}
inline bool CoinInfoResponse::_internal_mintable() const {
  return mintable_;
}
inline bool CoinInfoResponse::mintable() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.mintable)
  return _internal_mintable();
}
inline void CoinInfoResponse::_internal_set_mintable(bool value) {
  
  mintable_ = value;
}
inline void CoinInfoResponse::set_mintable(bool value) {
  _internal_set_mintable(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.mintable)
}

// bool burnable = 10 [json_name = "burnable"];
inline void CoinInfoResponse::clear_burnable() {
  burnable_ = false;
}
inline bool CoinInfoResponse::_internal_burnable() const {
  return burnable_;
}
inline bool CoinInfoResponse::burnable() const {
  // @@protoc_insertion_point(field_get:api_pb.CoinInfoResponse.burnable)
  return _internal_burnable();
}
inline void CoinInfoResponse::_internal_set_burnable(bool value) {
  
  burnable_ = value;
}
inline void CoinInfoResponse::set_burnable(bool value) {
  _internal_set_burnable(value);
  // @@protoc_insertion_point(field_set:api_pb.CoinInfoResponse.burnable)
}

// -------------------------------------------------------------------

// SendTransactionResponse

// uint64 code = 1 [json_name = "code"];
inline void SendTransactionResponse::clear_code() {
  code_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendTransactionResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendTransactionResponse::code() const {
  // @@protoc_insertion_point(field_get:api_pb.SendTransactionResponse.code)
  return _internal_code();
}
inline void SendTransactionResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  code_ = value;
}
inline void SendTransactionResponse::set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:api_pb.SendTransactionResponse.code)
}

// string log = 3 [json_name = "log"];
inline void SendTransactionResponse::clear_log() {
  log_.ClearToEmpty();
}
inline const std::string& SendTransactionResponse::log() const {
  // @@protoc_insertion_point(field_get:api_pb.SendTransactionResponse.log)
  return _internal_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendTransactionResponse::set_log(ArgT0&& arg0, ArgT... args) {
 
 log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SendTransactionResponse.log)
}
inline std::string* SendTransactionResponse::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:api_pb.SendTransactionResponse.log)
  return _s;
}
inline const std::string& SendTransactionResponse::_internal_log() const {
  return log_.Get();
}
inline void SendTransactionResponse::_internal_set_log(const std::string& value) {
  
  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendTransactionResponse::_internal_mutable_log() {
  
  return log_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendTransactionResponse::release_log() {
  // @@protoc_insertion_point(field_release:api_pb.SendTransactionResponse.log)
  return log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendTransactionResponse::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SendTransactionResponse.log)
}

// string hash = 4 [json_name = "hash"];
inline void SendTransactionResponse::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& SendTransactionResponse::hash() const {
  // @@protoc_insertion_point(field_get:api_pb.SendTransactionResponse.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendTransactionResponse::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SendTransactionResponse.hash)
}
inline std::string* SendTransactionResponse::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.SendTransactionResponse.hash)
  return _s;
}
inline const std::string& SendTransactionResponse::_internal_hash() const {
  return hash_.Get();
}
inline void SendTransactionResponse::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendTransactionResponse::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendTransactionResponse::release_hash() {
  // @@protoc_insertion_point(field_release:api_pb.SendTransactionResponse.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendTransactionResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SendTransactionResponse.hash)
}

// -------------------------------------------------------------------

// SendTransactionRequest

// string tx = 1 [json_name = "tx"];
inline void SendTransactionRequest::clear_tx() {
  tx_.ClearToEmpty();
}
inline const std::string& SendTransactionRequest::tx() const {
  // @@protoc_insertion_point(field_get:api_pb.SendTransactionRequest.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendTransactionRequest::set_tx(ArgT0&& arg0, ArgT... args) {
 
 tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SendTransactionRequest.tx)
}
inline std::string* SendTransactionRequest::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:api_pb.SendTransactionRequest.tx)
  return _s;
}
inline const std::string& SendTransactionRequest::_internal_tx() const {
  return tx_.Get();
}
inline void SendTransactionRequest::_internal_set_tx(const std::string& value) {
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendTransactionRequest::_internal_mutable_tx() {
  
  return tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendTransactionRequest::release_tx() {
  // @@protoc_insertion_point(field_release:api_pb.SendTransactionRequest.tx)
  return tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendTransactionRequest::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SendTransactionRequest.tx)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TransactionResponse

// string hash = 1 [json_name = "hash"];
inline void TransactionResponse::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& TransactionResponse::hash() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.hash)
}
inline std::string* TransactionResponse::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.hash)
  return _s;
}
inline const std::string& TransactionResponse::_internal_hash() const {
  return hash_.Get();
}
inline void TransactionResponse::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_hash() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.hash)
}

// string raw_tx = 2 [json_name = "rawTx"];
inline void TransactionResponse::clear_raw_tx() {
  raw_tx_.ClearToEmpty();
}
inline const std::string& TransactionResponse::raw_tx() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.raw_tx)
  return _internal_raw_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_raw_tx(ArgT0&& arg0, ArgT... args) {
 
 raw_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.raw_tx)
}
inline std::string* TransactionResponse::mutable_raw_tx() {
  std::string* _s = _internal_mutable_raw_tx();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.raw_tx)
  return _s;
}
inline const std::string& TransactionResponse::_internal_raw_tx() const {
  return raw_tx_.Get();
}
inline void TransactionResponse::_internal_set_raw_tx(const std::string& value) {
  
  raw_tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_raw_tx() {
  
  return raw_tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_raw_tx() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.raw_tx)
  return raw_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_raw_tx(std::string* raw_tx) {
  if (raw_tx != nullptr) {
    
  } else {
    
  }
  raw_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_tx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.raw_tx)
}

// uint64 height = 3 [json_name = "height"];
inline void TransactionResponse::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::height() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.height)
  return _internal_height();
}
inline void TransactionResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void TransactionResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.height)
}

// uint64 index = 4 [json_name = "index"];
inline void TransactionResponse::clear_index() {
  index_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::index() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.index)
  return _internal_index();
}
inline void TransactionResponse::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void TransactionResponse::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.index)
}

// string from = 5 [json_name = "from"];
inline void TransactionResponse::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& TransactionResponse::from() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.from)
  return _internal_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_from(ArgT0&& arg0, ArgT... args) {
 
 from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.from)
}
inline std::string* TransactionResponse::mutable_from() {
  std::string* _s = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.from)
  return _s;
}
inline const std::string& TransactionResponse::_internal_from() const {
  return from_.Get();
}
inline void TransactionResponse::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_from() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.from)
}

// uint64 nonce = 6 [json_name = "nonce"];
inline void TransactionResponse::clear_nonce() {
  nonce_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::nonce() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.nonce)
  return _internal_nonce();
}
inline void TransactionResponse::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
}
inline void TransactionResponse::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.nonce)
}

// uint64 gas = 7 [json_name = "gas"];
inline void TransactionResponse::clear_gas() {
  gas_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_gas() const {
  return gas_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::gas() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.gas)
  return _internal_gas();
}
inline void TransactionResponse::_internal_set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_ = value;
}
inline void TransactionResponse::set_gas(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.gas)
}

// uint64 gas_price = 8 [json_name = "gasPrice"];
inline void TransactionResponse::clear_gas_price() {
  gas_price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_gas_price() const {
  return gas_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::gas_price() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.gas_price)
  return _internal_gas_price();
}
inline void TransactionResponse::_internal_set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_price_ = value;
}
inline void TransactionResponse::set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.gas_price)
}

// .api_pb.Coin gas_coin = 9 [json_name = "gasCoin"];
inline bool TransactionResponse::_internal_has_gas_coin() const {
  return this != internal_default_instance() && gas_coin_ != nullptr;
}
inline bool TransactionResponse::has_gas_coin() const {
  return _internal_has_gas_coin();
}
inline void TransactionResponse::clear_gas_coin() {
  if (GetArenaForAllocation() == nullptr && gas_coin_ != nullptr) {
    delete gas_coin_;
  }
  gas_coin_ = nullptr;
}
inline const ::api_pb::Coin& TransactionResponse::_internal_gas_coin() const {
  const ::api_pb::Coin* p = gas_coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& TransactionResponse::gas_coin() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.gas_coin)
  return _internal_gas_coin();
}
inline void TransactionResponse::unsafe_arena_set_allocated_gas_coin(
    ::api_pb::Coin* gas_coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gas_coin_);
  }
  gas_coin_ = gas_coin;
  if (gas_coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.TransactionResponse.gas_coin)
}
inline ::api_pb::Coin* TransactionResponse::release_gas_coin() {
  
  ::api_pb::Coin* temp = gas_coin_;
  gas_coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* TransactionResponse::unsafe_arena_release_gas_coin() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.gas_coin)
  
  ::api_pb::Coin* temp = gas_coin_;
  gas_coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* TransactionResponse::_internal_mutable_gas_coin() {
  
  if (gas_coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    gas_coin_ = p;
  }
  return gas_coin_;
}
inline ::api_pb::Coin* TransactionResponse::mutable_gas_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_gas_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.gas_coin)
  return _msg;
}
inline void TransactionResponse::set_allocated_gas_coin(::api_pb::Coin* gas_coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gas_coin_;
  }
  if (gas_coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(gas_coin);
    if (message_arena != submessage_arena) {
      gas_coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gas_coin, submessage_arena);
    }
    
  } else {
    
  }
  gas_coin_ = gas_coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.gas_coin)
}

// string type_hex = 17 [json_name = "typeHex"];
inline void TransactionResponse::clear_type_hex() {
  type_hex_.ClearToEmpty();
}
inline const std::string& TransactionResponse::type_hex() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.type_hex)
  return _internal_type_hex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_type_hex(ArgT0&& arg0, ArgT... args) {
 
 type_hex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.type_hex)
}
inline std::string* TransactionResponse::mutable_type_hex() {
  std::string* _s = _internal_mutable_type_hex();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.type_hex)
  return _s;
}
inline const std::string& TransactionResponse::_internal_type_hex() const {
  return type_hex_.Get();
}
inline void TransactionResponse::_internal_set_type_hex(const std::string& value) {
  
  type_hex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_type_hex() {
  
  return type_hex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_type_hex() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.type_hex)
  return type_hex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_type_hex(std::string* type_hex) {
  if (type_hex != nullptr) {
    
  } else {
    
  }
  type_hex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_hex,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.type_hex)
}

// uint64 type = 10 [json_name = "type"];
inline void TransactionResponse::clear_type() {
  type_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::type() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.type)
  return _internal_type();
}
inline void TransactionResponse::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  type_ = value;
}
inline void TransactionResponse::set_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.type)
}

// .google.protobuf.Any data = 11 [json_name = "data"];
inline bool TransactionResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool TransactionResponse::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Any& TransactionResponse::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any&>(
      PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TransactionResponse::data() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.data)
  return _internal_data();
}
inline void TransactionResponse::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Any* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.TransactionResponse.data)
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionResponse::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.data)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Any* TransactionResponse::mutable_data() {
  PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.data)
  return _msg;
}
inline void TransactionResponse::set_allocated_data(PROTOBUF_NAMESPACE_ID::Any* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.data)
}

// bytes payload = 12 [json_name = "payload"];
inline void TransactionResponse::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& TransactionResponse::payload() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.payload)
}
inline std::string* TransactionResponse::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.payload)
  return _s;
}
inline const std::string& TransactionResponse::_internal_payload() const {
  return payload_.Get();
}
inline void TransactionResponse::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_payload() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.payload)
}

// bytes service_data = 16 [json_name = "serviceData"];
inline void TransactionResponse::clear_service_data() {
  service_data_.ClearToEmpty();
}
inline const std::string& TransactionResponse::service_data() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.service_data)
  return _internal_service_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_service_data(ArgT0&& arg0, ArgT... args) {
 
 service_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.service_data)
}
inline std::string* TransactionResponse::mutable_service_data() {
  std::string* _s = _internal_mutable_service_data();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.service_data)
  return _s;
}
inline const std::string& TransactionResponse::_internal_service_data() const {
  return service_data_.Get();
}
inline void TransactionResponse::_internal_set_service_data(const std::string& value) {
  
  service_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_service_data() {
  
  return service_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_service_data() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.service_data)
  return service_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_service_data(std::string* service_data) {
  if (service_data != nullptr) {
    
  } else {
    
  }
  service_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.service_data)
}

// map<string, string> tags = 13 [json_name = "tags"];
inline int TransactionResponse::_internal_tags_size() const {
  return tags_.size();
}
inline int TransactionResponse::tags_size() const {
  return _internal_tags_size();
}
inline void TransactionResponse::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransactionResponse::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TransactionResponse::tags() const {
  // @@protoc_insertion_point(field_map:api_pb.TransactionResponse.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransactionResponse::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TransactionResponse::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:api_pb.TransactionResponse.tags)
  return _internal_mutable_tags();
}

// uint64 code = 14 [json_name = "code"];
inline void TransactionResponse::clear_code() {
  code_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionResponse::code() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.code)
  return _internal_code();
}
inline void TransactionResponse::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  code_ = value;
}
inline void TransactionResponse::set_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.code)
}

// string log = 15 [json_name = "log"];
inline void TransactionResponse::clear_log() {
  log_.ClearToEmpty();
}
inline const std::string& TransactionResponse::log() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionResponse.log)
  return _internal_log();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionResponse::set_log(ArgT0&& arg0, ArgT... args) {
 
 log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionResponse.log)
}
inline std::string* TransactionResponse::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionResponse.log)
  return _s;
}
inline const std::string& TransactionResponse::_internal_log() const {
  return log_.Get();
}
inline void TransactionResponse::_internal_set_log(const std::string& value) {
  
  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionResponse::_internal_mutable_log() {
  
  return log_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionResponse::release_log() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionResponse.log)
  return log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionResponse::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionResponse.log)
}

// -------------------------------------------------------------------

// TransactionRequest

// string hash = 1 [json_name = "hash"];
inline void TransactionRequest::clear_hash() {
  hash_.ClearToEmpty();
}
inline const std::string& TransactionRequest::hash() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionRequest.hash)
  return _internal_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionRequest::set_hash(ArgT0&& arg0, ArgT... args) {
 
 hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionRequest.hash)
}
inline std::string* TransactionRequest::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionRequest.hash)
  return _s;
}
inline const std::string& TransactionRequest::_internal_hash() const {
  return hash_.Get();
}
inline void TransactionRequest::_internal_set_hash(const std::string& value) {
  
  hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionRequest::_internal_mutable_hash() {
  
  return hash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionRequest::release_hash() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionRequest.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionRequest.hash)
}

// -------------------------------------------------------------------

// TransactionsResponse

// repeated .api_pb.TransactionResponse transactions = 3 [json_name = "transactions"];
inline int TransactionsResponse::_internal_transactions_size() const {
  return transactions_.size();
}
inline int TransactionsResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void TransactionsResponse::clear_transactions() {
  transactions_.Clear();
}
inline ::api_pb::TransactionResponse* TransactionsResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionsResponse.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >*
TransactionsResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.TransactionsResponse.transactions)
  return &transactions_;
}
inline const ::api_pb::TransactionResponse& TransactionsResponse::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::api_pb::TransactionResponse& TransactionsResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionsResponse.transactions)
  return _internal_transactions(index);
}
inline ::api_pb::TransactionResponse* TransactionsResponse::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::api_pb::TransactionResponse* TransactionsResponse::add_transactions() {
  ::api_pb::TransactionResponse* _add = _internal_add_transactions();
  // @@protoc_insertion_point(field_add:api_pb.TransactionsResponse.transactions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::TransactionResponse >&
TransactionsResponse::transactions() const {
  // @@protoc_insertion_point(field_list:api_pb.TransactionsResponse.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// TransactionsRequest

// string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TransactionsRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& TransactionsRequest::query() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionsRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransactionsRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.TransactionsRequest.query)
}
inline std::string* TransactionsRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:api_pb.TransactionsRequest.query)
  return _s;
}
inline const std::string& TransactionsRequest::_internal_query() const {
  return query_.Get();
}
inline void TransactionsRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TransactionsRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TransactionsRequest::release_query() {
  // @@protoc_insertion_point(field_release:api_pb.TransactionsRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TransactionsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.TransactionsRequest.query)
}

// int32 page = 2 [json_name = "page", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TransactionsRequest::clear_page() {
  page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionsRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionsRequest::page() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionsRequest.page)
  return _internal_page();
}
inline void TransactionsRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_ = value;
}
inline void TransactionsRequest::set_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionsRequest.page)
}

// int32 per_page = 3 [json_name = "perPage", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TransactionsRequest::clear_per_page() {
  per_page_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionsRequest::_internal_per_page() const {
  return per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionsRequest::per_page() const {
  // @@protoc_insertion_point(field_get:api_pb.TransactionsRequest.per_page)
  return _internal_per_page();
}
inline void TransactionsRequest::_internal_set_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  per_page_ = value;
}
inline void TransactionsRequest::set_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_per_page(value);
  // @@protoc_insertion_point(field_set:api_pb.TransactionsRequest.per_page)
}

// -------------------------------------------------------------------

// EstimateCoinBuyRequest

// uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinBuyRequest::_internal_has_coin_id_to_buy() const {
  return buy_case() == kCoinIdToBuy;
}
inline bool EstimateCoinBuyRequest::has_coin_id_to_buy() const {
  return _internal_has_coin_id_to_buy();
}
inline void EstimateCoinBuyRequest::set_has_coin_id_to_buy() {
  _oneof_case_[0] = kCoinIdToBuy;
}
inline void EstimateCoinBuyRequest::clear_coin_id_to_buy() {
  if (_internal_has_coin_id_to_buy()) {
    buy_.coin_id_to_buy_ = uint64_t{0u};
    clear_has_buy();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::_internal_coin_id_to_buy() const {
  if (_internal_has_coin_id_to_buy()) {
    return buy_.coin_id_to_buy_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinBuyRequest::_internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_to_buy()) {
    clear_buy();
    set_has_coin_id_to_buy();
  }
  buy_.coin_id_to_buy_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::coin_id_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.coin_id_to_buy)
  return _internal_coin_id_to_buy();
}
inline void EstimateCoinBuyRequest::set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_to_buy(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.coin_id_to_buy)
}

// string coin_to_buy = 5 [json_name = "coinToBuy"];
inline bool EstimateCoinBuyRequest::_internal_has_coin_to_buy() const {
  return buy_case() == kCoinToBuy;
}
inline bool EstimateCoinBuyRequest::has_coin_to_buy() const {
  return _internal_has_coin_to_buy();
}
inline void EstimateCoinBuyRequest::set_has_coin_to_buy() {
  _oneof_case_[0] = kCoinToBuy;
}
inline void EstimateCoinBuyRequest::clear_coin_to_buy() {
  if (_internal_has_coin_to_buy()) {
    buy_.coin_to_buy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_buy();
  }
}
inline const std::string& EstimateCoinBuyRequest::coin_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.coin_to_buy)
  return _internal_coin_to_buy();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinBuyRequest::set_coin_to_buy(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  buy_.coin_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.coin_to_buy)
}
inline std::string* EstimateCoinBuyRequest::mutable_coin_to_buy() {
  std::string* _s = _internal_mutable_coin_to_buy();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinBuyRequest.coin_to_buy)
  return _s;
}
inline const std::string& EstimateCoinBuyRequest::_internal_coin_to_buy() const {
  if (_internal_has_coin_to_buy()) {
    return buy_.coin_to_buy_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinBuyRequest::_internal_set_coin_to_buy(const std::string& value) {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  buy_.coin_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::_internal_mutable_coin_to_buy() {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return buy_.coin_to_buy_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::release_coin_to_buy() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinBuyRequest.coin_to_buy)
  if (_internal_has_coin_to_buy()) {
    clear_has_buy();
    return buy_.coin_to_buy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinBuyRequest::set_allocated_coin_to_buy(std::string* coin_to_buy) {
  if (has_buy()) {
    clear_buy();
  }
  if (coin_to_buy != nullptr) {
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(coin_to_buy);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_to_buy);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinBuyRequest.coin_to_buy)
}

// uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinBuyRequest::_internal_has_coin_id_to_sell() const {
  return sell_case() == kCoinIdToSell;
}
inline bool EstimateCoinBuyRequest::has_coin_id_to_sell() const {
  return _internal_has_coin_id_to_sell();
}
inline void EstimateCoinBuyRequest::set_has_coin_id_to_sell() {
  _oneof_case_[1] = kCoinIdToSell;
}
inline void EstimateCoinBuyRequest::clear_coin_id_to_sell() {
  if (_internal_has_coin_id_to_sell()) {
    sell_.coin_id_to_sell_ = uint64_t{0u};
    clear_has_sell();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::_internal_coin_id_to_sell() const {
  if (_internal_has_coin_id_to_sell()) {
    return sell_.coin_id_to_sell_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinBuyRequest::_internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_to_sell()) {
    clear_sell();
    set_has_coin_id_to_sell();
  }
  sell_.coin_id_to_sell_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::coin_id_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.coin_id_to_sell)
  return _internal_coin_id_to_sell();
}
inline void EstimateCoinBuyRequest::set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_to_sell(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.coin_id_to_sell)
}

// string coin_to_sell = 6 [json_name = "coinToSell"];
inline bool EstimateCoinBuyRequest::_internal_has_coin_to_sell() const {
  return sell_case() == kCoinToSell;
}
inline bool EstimateCoinBuyRequest::has_coin_to_sell() const {
  return _internal_has_coin_to_sell();
}
inline void EstimateCoinBuyRequest::set_has_coin_to_sell() {
  _oneof_case_[1] = kCoinToSell;
}
inline void EstimateCoinBuyRequest::clear_coin_to_sell() {
  if (_internal_has_coin_to_sell()) {
    sell_.coin_to_sell_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_sell();
  }
}
inline const std::string& EstimateCoinBuyRequest::coin_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.coin_to_sell)
  return _internal_coin_to_sell();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinBuyRequest::set_coin_to_sell(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sell_.coin_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.coin_to_sell)
}
inline std::string* EstimateCoinBuyRequest::mutable_coin_to_sell() {
  std::string* _s = _internal_mutable_coin_to_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinBuyRequest.coin_to_sell)
  return _s;
}
inline const std::string& EstimateCoinBuyRequest::_internal_coin_to_sell() const {
  if (_internal_has_coin_to_sell()) {
    return sell_.coin_to_sell_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinBuyRequest::_internal_set_coin_to_sell(const std::string& value) {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sell_.coin_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::_internal_mutable_coin_to_sell() {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return sell_.coin_to_sell_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::release_coin_to_sell() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinBuyRequest.coin_to_sell)
  if (_internal_has_coin_to_sell()) {
    clear_has_sell();
    return sell_.coin_to_sell_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinBuyRequest::set_allocated_coin_to_sell(std::string* coin_to_sell) {
  if (has_sell()) {
    clear_sell();
  }
  if (coin_to_sell != nullptr) {
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(coin_to_sell);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_to_sell);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinBuyRequest.coin_to_sell)
}

// string value_to_buy = 3 [json_name = "valueToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinBuyRequest::clear_value_to_buy() {
  value_to_buy_.ClearToEmpty();
}
inline const std::string& EstimateCoinBuyRequest::value_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.value_to_buy)
  return _internal_value_to_buy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinBuyRequest::set_value_to_buy(ArgT0&& arg0, ArgT... args) {
 
 value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.value_to_buy)
}
inline std::string* EstimateCoinBuyRequest::mutable_value_to_buy() {
  std::string* _s = _internal_mutable_value_to_buy();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinBuyRequest.value_to_buy)
  return _s;
}
inline const std::string& EstimateCoinBuyRequest::_internal_value_to_buy() const {
  return value_to_buy_.Get();
}
inline void EstimateCoinBuyRequest::_internal_set_value_to_buy(const std::string& value) {
  
  value_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::_internal_mutable_value_to_buy() {
  
  return value_to_buy_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::release_value_to_buy() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinBuyRequest.value_to_buy)
  return value_to_buy_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinBuyRequest::set_allocated_value_to_buy(std::string* value_to_buy) {
  if (value_to_buy != nullptr) {
    
  } else {
    
  }
  value_to_buy_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_to_buy,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinBuyRequest.value_to_buy)
}

// uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinBuyRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.height)
  return _internal_height();
}
inline void EstimateCoinBuyRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void EstimateCoinBuyRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.height)
}

// uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinBuyRequest::_internal_has_coin_id_commission() const {
  return commission_case() == kCoinIdCommission;
}
inline bool EstimateCoinBuyRequest::has_coin_id_commission() const {
  return _internal_has_coin_id_commission();
}
inline void EstimateCoinBuyRequest::set_has_coin_id_commission() {
  _oneof_case_[2] = kCoinIdCommission;
}
inline void EstimateCoinBuyRequest::clear_coin_id_commission() {
  if (_internal_has_coin_id_commission()) {
    commission_.coin_id_commission_ = uint64_t{0u};
    clear_has_commission();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::_internal_coin_id_commission() const {
  if (_internal_has_coin_id_commission()) {
    return commission_.coin_id_commission_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinBuyRequest::_internal_set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_commission()) {
    clear_commission();
    set_has_coin_id_commission();
  }
  commission_.coin_id_commission_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::coin_id_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.coin_id_commission)
  return _internal_coin_id_commission();
}
inline void EstimateCoinBuyRequest::set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_commission(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.coin_id_commission)
}

// string coin_commission = 10 [json_name = "coinCommission"];
inline bool EstimateCoinBuyRequest::_internal_has_coin_commission() const {
  return commission_case() == kCoinCommission;
}
inline bool EstimateCoinBuyRequest::has_coin_commission() const {
  return _internal_has_coin_commission();
}
inline void EstimateCoinBuyRequest::set_has_coin_commission() {
  _oneof_case_[2] = kCoinCommission;
}
inline void EstimateCoinBuyRequest::clear_coin_commission() {
  if (_internal_has_coin_commission()) {
    commission_.coin_commission_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_commission();
  }
}
inline const std::string& EstimateCoinBuyRequest::coin_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.coin_commission)
  return _internal_coin_commission();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinBuyRequest::set_coin_commission(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_commission()) {
    clear_commission();
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  commission_.coin_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.coin_commission)
}
inline std::string* EstimateCoinBuyRequest::mutable_coin_commission() {
  std::string* _s = _internal_mutable_coin_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinBuyRequest.coin_commission)
  return _s;
}
inline const std::string& EstimateCoinBuyRequest::_internal_coin_commission() const {
  if (_internal_has_coin_commission()) {
    return commission_.coin_commission_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinBuyRequest::_internal_set_coin_commission(const std::string& value) {
  if (!_internal_has_coin_commission()) {
    clear_commission();
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  commission_.coin_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::_internal_mutable_coin_commission() {
  if (!_internal_has_coin_commission()) {
    clear_commission();
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return commission_.coin_commission_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyRequest::release_coin_commission() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinBuyRequest.coin_commission)
  if (_internal_has_coin_commission()) {
    clear_has_commission();
    return commission_.coin_commission_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinBuyRequest::set_allocated_coin_commission(std::string* coin_commission) {
  if (has_commission()) {
    clear_commission();
  }
  if (coin_commission != nullptr) {
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(coin_commission);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_commission);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinBuyRequest.coin_commission)
}

// .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
inline void EstimateCoinBuyRequest::clear_swap_from() {
  swap_from_ = 0;
}
inline ::api_pb::SwapFrom EstimateCoinBuyRequest::_internal_swap_from() const {
  return static_cast< ::api_pb::SwapFrom >(swap_from_);
}
inline ::api_pb::SwapFrom EstimateCoinBuyRequest::swap_from() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.swap_from)
  return _internal_swap_from();
}
inline void EstimateCoinBuyRequest::_internal_set_swap_from(::api_pb::SwapFrom value) {
  
  swap_from_ = value;
}
inline void EstimateCoinBuyRequest::set_swap_from(::api_pb::SwapFrom value) {
  _internal_set_swap_from(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.swap_from)
}

// repeated uint64 route = 11 [json_name = "route"];
inline int EstimateCoinBuyRequest::_internal_route_size() const {
  return route_.size();
}
inline int EstimateCoinBuyRequest::route_size() const {
  return _internal_route_size();
}
inline void EstimateCoinBuyRequest::clear_route() {
  route_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::_internal_route(int index) const {
  return route_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinBuyRequest::route(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyRequest.route)
  return _internal_route(index);
}
inline void EstimateCoinBuyRequest::set_route(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  route_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyRequest.route)
}
inline void EstimateCoinBuyRequest::_internal_add_route(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  route_.Add(value);
}
inline void EstimateCoinBuyRequest::add_route(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_route(value);
  // @@protoc_insertion_point(field_add:api_pb.EstimateCoinBuyRequest.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EstimateCoinBuyRequest::_internal_route() const {
  return route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EstimateCoinBuyRequest::route() const {
  // @@protoc_insertion_point(field_list:api_pb.EstimateCoinBuyRequest.route)
  return _internal_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EstimateCoinBuyRequest::_internal_mutable_route() {
  return &route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EstimateCoinBuyRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.EstimateCoinBuyRequest.route)
  return _internal_mutable_route();
}

inline bool EstimateCoinBuyRequest::has_buy() const {
  return buy_case() != BUY_NOT_SET;
}
inline void EstimateCoinBuyRequest::clear_has_buy() {
  _oneof_case_[0] = BUY_NOT_SET;
}
inline bool EstimateCoinBuyRequest::has_sell() const {
  return sell_case() != SELL_NOT_SET;
}
inline void EstimateCoinBuyRequest::clear_has_sell() {
  _oneof_case_[1] = SELL_NOT_SET;
}
inline bool EstimateCoinBuyRequest::has_commission() const {
  return commission_case() != COMMISSION_NOT_SET;
}
inline void EstimateCoinBuyRequest::clear_has_commission() {
  _oneof_case_[2] = COMMISSION_NOT_SET;
}
inline EstimateCoinBuyRequest::BuyCase EstimateCoinBuyRequest::buy_case() const {
  return EstimateCoinBuyRequest::BuyCase(_oneof_case_[0]);
}
inline EstimateCoinBuyRequest::SellCase EstimateCoinBuyRequest::sell_case() const {
  return EstimateCoinBuyRequest::SellCase(_oneof_case_[1]);
}
inline EstimateCoinBuyRequest::CommissionCase EstimateCoinBuyRequest::commission_case() const {
  return EstimateCoinBuyRequest::CommissionCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// EstimateCoinBuyResponse

// string will_pay = 1 [json_name = "willPay"];
inline void EstimateCoinBuyResponse::clear_will_pay() {
  will_pay_.ClearToEmpty();
}
inline const std::string& EstimateCoinBuyResponse::will_pay() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyResponse.will_pay)
  return _internal_will_pay();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinBuyResponse::set_will_pay(ArgT0&& arg0, ArgT... args) {
 
 will_pay_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyResponse.will_pay)
}
inline std::string* EstimateCoinBuyResponse::mutable_will_pay() {
  std::string* _s = _internal_mutable_will_pay();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinBuyResponse.will_pay)
  return _s;
}
inline const std::string& EstimateCoinBuyResponse::_internal_will_pay() const {
  return will_pay_.Get();
}
inline void EstimateCoinBuyResponse::_internal_set_will_pay(const std::string& value) {
  
  will_pay_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyResponse::_internal_mutable_will_pay() {
  
  return will_pay_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyResponse::release_will_pay() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinBuyResponse.will_pay)
  return will_pay_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinBuyResponse::set_allocated_will_pay(std::string* will_pay) {
  if (will_pay != nullptr) {
    
  } else {
    
  }
  will_pay_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), will_pay,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinBuyResponse.will_pay)
}

// string commission = 2 [json_name = "commission"];
inline void EstimateCoinBuyResponse::clear_commission() {
  commission_.ClearToEmpty();
}
inline const std::string& EstimateCoinBuyResponse::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyResponse.commission)
  return _internal_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinBuyResponse::set_commission(ArgT0&& arg0, ArgT... args) {
 
 commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyResponse.commission)
}
inline std::string* EstimateCoinBuyResponse::mutable_commission() {
  std::string* _s = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinBuyResponse.commission)
  return _s;
}
inline const std::string& EstimateCoinBuyResponse::_internal_commission() const {
  return commission_.Get();
}
inline void EstimateCoinBuyResponse::_internal_set_commission(const std::string& value) {
  
  commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyResponse::_internal_mutable_commission() {
  
  return commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinBuyResponse::release_commission() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinBuyResponse.commission)
  return commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinBuyResponse::set_allocated_commission(std::string* commission) {
  if (commission != nullptr) {
    
  } else {
    
  }
  commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinBuyResponse.commission)
}

// .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
inline void EstimateCoinBuyResponse::clear_swap_from() {
  swap_from_ = 0;
}
inline ::api_pb::SwapFrom EstimateCoinBuyResponse::_internal_swap_from() const {
  return static_cast< ::api_pb::SwapFrom >(swap_from_);
}
inline ::api_pb::SwapFrom EstimateCoinBuyResponse::swap_from() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinBuyResponse.swap_from)
  return _internal_swap_from();
}
inline void EstimateCoinBuyResponse::_internal_set_swap_from(::api_pb::SwapFrom value) {
  
  swap_from_ = value;
}
inline void EstimateCoinBuyResponse::set_swap_from(::api_pb::SwapFrom value) {
  _internal_set_swap_from(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinBuyResponse.swap_from)
}

// -------------------------------------------------------------------

// EstimateCoinSellRequest

// uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinSellRequest::_internal_has_coin_id_to_buy() const {
  return buy_case() == kCoinIdToBuy;
}
inline bool EstimateCoinSellRequest::has_coin_id_to_buy() const {
  return _internal_has_coin_id_to_buy();
}
inline void EstimateCoinSellRequest::set_has_coin_id_to_buy() {
  _oneof_case_[0] = kCoinIdToBuy;
}
inline void EstimateCoinSellRequest::clear_coin_id_to_buy() {
  if (_internal_has_coin_id_to_buy()) {
    buy_.coin_id_to_buy_ = uint64_t{0u};
    clear_has_buy();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::_internal_coin_id_to_buy() const {
  if (_internal_has_coin_id_to_buy()) {
    return buy_.coin_id_to_buy_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinSellRequest::_internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_to_buy()) {
    clear_buy();
    set_has_coin_id_to_buy();
  }
  buy_.coin_id_to_buy_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::coin_id_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.coin_id_to_buy)
  return _internal_coin_id_to_buy();
}
inline void EstimateCoinSellRequest::set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_to_buy(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.coin_id_to_buy)
}

// string coin_to_buy = 5 [json_name = "coinToBuy"];
inline bool EstimateCoinSellRequest::_internal_has_coin_to_buy() const {
  return buy_case() == kCoinToBuy;
}
inline bool EstimateCoinSellRequest::has_coin_to_buy() const {
  return _internal_has_coin_to_buy();
}
inline void EstimateCoinSellRequest::set_has_coin_to_buy() {
  _oneof_case_[0] = kCoinToBuy;
}
inline void EstimateCoinSellRequest::clear_coin_to_buy() {
  if (_internal_has_coin_to_buy()) {
    buy_.coin_to_buy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_buy();
  }
}
inline const std::string& EstimateCoinSellRequest::coin_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.coin_to_buy)
  return _internal_coin_to_buy();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinSellRequest::set_coin_to_buy(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  buy_.coin_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.coin_to_buy)
}
inline std::string* EstimateCoinSellRequest::mutable_coin_to_buy() {
  std::string* _s = _internal_mutable_coin_to_buy();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellRequest.coin_to_buy)
  return _s;
}
inline const std::string& EstimateCoinSellRequest::_internal_coin_to_buy() const {
  if (_internal_has_coin_to_buy()) {
    return buy_.coin_to_buy_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinSellRequest::_internal_set_coin_to_buy(const std::string& value) {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  buy_.coin_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::_internal_mutable_coin_to_buy() {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return buy_.coin_to_buy_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::release_coin_to_buy() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellRequest.coin_to_buy)
  if (_internal_has_coin_to_buy()) {
    clear_has_buy();
    return buy_.coin_to_buy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinSellRequest::set_allocated_coin_to_buy(std::string* coin_to_buy) {
  if (has_buy()) {
    clear_buy();
  }
  if (coin_to_buy != nullptr) {
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(coin_to_buy);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_to_buy);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellRequest.coin_to_buy)
}

// uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinSellRequest::_internal_has_coin_id_to_sell() const {
  return sell_case() == kCoinIdToSell;
}
inline bool EstimateCoinSellRequest::has_coin_id_to_sell() const {
  return _internal_has_coin_id_to_sell();
}
inline void EstimateCoinSellRequest::set_has_coin_id_to_sell() {
  _oneof_case_[1] = kCoinIdToSell;
}
inline void EstimateCoinSellRequest::clear_coin_id_to_sell() {
  if (_internal_has_coin_id_to_sell()) {
    sell_.coin_id_to_sell_ = uint64_t{0u};
    clear_has_sell();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::_internal_coin_id_to_sell() const {
  if (_internal_has_coin_id_to_sell()) {
    return sell_.coin_id_to_sell_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinSellRequest::_internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_to_sell()) {
    clear_sell();
    set_has_coin_id_to_sell();
  }
  sell_.coin_id_to_sell_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::coin_id_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.coin_id_to_sell)
  return _internal_coin_id_to_sell();
}
inline void EstimateCoinSellRequest::set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_to_sell(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.coin_id_to_sell)
}

// string coin_to_sell = 6 [json_name = "coinToSell"];
inline bool EstimateCoinSellRequest::_internal_has_coin_to_sell() const {
  return sell_case() == kCoinToSell;
}
inline bool EstimateCoinSellRequest::has_coin_to_sell() const {
  return _internal_has_coin_to_sell();
}
inline void EstimateCoinSellRequest::set_has_coin_to_sell() {
  _oneof_case_[1] = kCoinToSell;
}
inline void EstimateCoinSellRequest::clear_coin_to_sell() {
  if (_internal_has_coin_to_sell()) {
    sell_.coin_to_sell_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_sell();
  }
}
inline const std::string& EstimateCoinSellRequest::coin_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.coin_to_sell)
  return _internal_coin_to_sell();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinSellRequest::set_coin_to_sell(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sell_.coin_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.coin_to_sell)
}
inline std::string* EstimateCoinSellRequest::mutable_coin_to_sell() {
  std::string* _s = _internal_mutable_coin_to_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellRequest.coin_to_sell)
  return _s;
}
inline const std::string& EstimateCoinSellRequest::_internal_coin_to_sell() const {
  if (_internal_has_coin_to_sell()) {
    return sell_.coin_to_sell_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinSellRequest::_internal_set_coin_to_sell(const std::string& value) {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sell_.coin_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::_internal_mutable_coin_to_sell() {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return sell_.coin_to_sell_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::release_coin_to_sell() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellRequest.coin_to_sell)
  if (_internal_has_coin_to_sell()) {
    clear_has_sell();
    return sell_.coin_to_sell_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinSellRequest::set_allocated_coin_to_sell(std::string* coin_to_sell) {
  if (has_sell()) {
    clear_sell();
  }
  if (coin_to_sell != nullptr) {
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(coin_to_sell);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_to_sell);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellRequest.coin_to_sell)
}

// string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinSellRequest::clear_value_to_sell() {
  value_to_sell_.ClearToEmpty();
}
inline const std::string& EstimateCoinSellRequest::value_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.value_to_sell)
  return _internal_value_to_sell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinSellRequest::set_value_to_sell(ArgT0&& arg0, ArgT... args) {
 
 value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.value_to_sell)
}
inline std::string* EstimateCoinSellRequest::mutable_value_to_sell() {
  std::string* _s = _internal_mutable_value_to_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellRequest.value_to_sell)
  return _s;
}
inline const std::string& EstimateCoinSellRequest::_internal_value_to_sell() const {
  return value_to_sell_.Get();
}
inline void EstimateCoinSellRequest::_internal_set_value_to_sell(const std::string& value) {
  
  value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::_internal_mutable_value_to_sell() {
  
  return value_to_sell_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::release_value_to_sell() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellRequest.value_to_sell)
  return value_to_sell_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinSellRequest::set_allocated_value_to_sell(std::string* value_to_sell) {
  if (value_to_sell != nullptr) {
    
  } else {
    
  }
  value_to_sell_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_to_sell,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellRequest.value_to_sell)
}

// uint64 height = 4 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinSellRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.height)
  return _internal_height();
}
inline void EstimateCoinSellRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void EstimateCoinSellRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.height)
}

// uint64 coin_id_commission = 9 [json_name = "coinIdCommission", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinSellRequest::_internal_has_coin_id_commission() const {
  return commission_case() == kCoinIdCommission;
}
inline bool EstimateCoinSellRequest::has_coin_id_commission() const {
  return _internal_has_coin_id_commission();
}
inline void EstimateCoinSellRequest::set_has_coin_id_commission() {
  _oneof_case_[2] = kCoinIdCommission;
}
inline void EstimateCoinSellRequest::clear_coin_id_commission() {
  if (_internal_has_coin_id_commission()) {
    commission_.coin_id_commission_ = uint64_t{0u};
    clear_has_commission();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::_internal_coin_id_commission() const {
  if (_internal_has_coin_id_commission()) {
    return commission_.coin_id_commission_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinSellRequest::_internal_set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_commission()) {
    clear_commission();
    set_has_coin_id_commission();
  }
  commission_.coin_id_commission_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::coin_id_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.coin_id_commission)
  return _internal_coin_id_commission();
}
inline void EstimateCoinSellRequest::set_coin_id_commission(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_commission(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.coin_id_commission)
}

// string coin_commission = 10 [json_name = "coinCommission"];
inline bool EstimateCoinSellRequest::_internal_has_coin_commission() const {
  return commission_case() == kCoinCommission;
}
inline bool EstimateCoinSellRequest::has_coin_commission() const {
  return _internal_has_coin_commission();
}
inline void EstimateCoinSellRequest::set_has_coin_commission() {
  _oneof_case_[2] = kCoinCommission;
}
inline void EstimateCoinSellRequest::clear_coin_commission() {
  if (_internal_has_coin_commission()) {
    commission_.coin_commission_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_commission();
  }
}
inline const std::string& EstimateCoinSellRequest::coin_commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.coin_commission)
  return _internal_coin_commission();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinSellRequest::set_coin_commission(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_commission()) {
    clear_commission();
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  commission_.coin_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.coin_commission)
}
inline std::string* EstimateCoinSellRequest::mutable_coin_commission() {
  std::string* _s = _internal_mutable_coin_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellRequest.coin_commission)
  return _s;
}
inline const std::string& EstimateCoinSellRequest::_internal_coin_commission() const {
  if (_internal_has_coin_commission()) {
    return commission_.coin_commission_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinSellRequest::_internal_set_coin_commission(const std::string& value) {
  if (!_internal_has_coin_commission()) {
    clear_commission();
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  commission_.coin_commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::_internal_mutable_coin_commission() {
  if (!_internal_has_coin_commission()) {
    clear_commission();
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return commission_.coin_commission_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellRequest::release_coin_commission() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellRequest.coin_commission)
  if (_internal_has_coin_commission()) {
    clear_has_commission();
    return commission_.coin_commission_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinSellRequest::set_allocated_coin_commission(std::string* coin_commission) {
  if (has_commission()) {
    clear_commission();
  }
  if (coin_commission != nullptr) {
    set_has_coin_commission();
    commission_.coin_commission_.UnsafeSetDefault(coin_commission);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_commission);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellRequest.coin_commission)
}

// .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
inline void EstimateCoinSellRequest::clear_swap_from() {
  swap_from_ = 0;
}
inline ::api_pb::SwapFrom EstimateCoinSellRequest::_internal_swap_from() const {
  return static_cast< ::api_pb::SwapFrom >(swap_from_);
}
inline ::api_pb::SwapFrom EstimateCoinSellRequest::swap_from() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.swap_from)
  return _internal_swap_from();
}
inline void EstimateCoinSellRequest::_internal_set_swap_from(::api_pb::SwapFrom value) {
  
  swap_from_ = value;
}
inline void EstimateCoinSellRequest::set_swap_from(::api_pb::SwapFrom value) {
  _internal_set_swap_from(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.swap_from)
}

// repeated uint64 route = 11 [json_name = "route"];
inline int EstimateCoinSellRequest::_internal_route_size() const {
  return route_.size();
}
inline int EstimateCoinSellRequest::route_size() const {
  return _internal_route_size();
}
inline void EstimateCoinSellRequest::clear_route() {
  route_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::_internal_route(int index) const {
  return route_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellRequest::route(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellRequest.route)
  return _internal_route(index);
}
inline void EstimateCoinSellRequest::set_route(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  route_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellRequest.route)
}
inline void EstimateCoinSellRequest::_internal_add_route(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  route_.Add(value);
}
inline void EstimateCoinSellRequest::add_route(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_route(value);
  // @@protoc_insertion_point(field_add:api_pb.EstimateCoinSellRequest.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EstimateCoinSellRequest::_internal_route() const {
  return route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EstimateCoinSellRequest::route() const {
  // @@protoc_insertion_point(field_list:api_pb.EstimateCoinSellRequest.route)
  return _internal_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EstimateCoinSellRequest::_internal_mutable_route() {
  return &route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EstimateCoinSellRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.EstimateCoinSellRequest.route)
  return _internal_mutable_route();
}

inline bool EstimateCoinSellRequest::has_buy() const {
  return buy_case() != BUY_NOT_SET;
}
inline void EstimateCoinSellRequest::clear_has_buy() {
  _oneof_case_[0] = BUY_NOT_SET;
}
inline bool EstimateCoinSellRequest::has_sell() const {
  return sell_case() != SELL_NOT_SET;
}
inline void EstimateCoinSellRequest::clear_has_sell() {
  _oneof_case_[1] = SELL_NOT_SET;
}
inline bool EstimateCoinSellRequest::has_commission() const {
  return commission_case() != COMMISSION_NOT_SET;
}
inline void EstimateCoinSellRequest::clear_has_commission() {
  _oneof_case_[2] = COMMISSION_NOT_SET;
}
inline EstimateCoinSellRequest::BuyCase EstimateCoinSellRequest::buy_case() const {
  return EstimateCoinSellRequest::BuyCase(_oneof_case_[0]);
}
inline EstimateCoinSellRequest::SellCase EstimateCoinSellRequest::sell_case() const {
  return EstimateCoinSellRequest::SellCase(_oneof_case_[1]);
}
inline EstimateCoinSellRequest::CommissionCase EstimateCoinSellRequest::commission_case() const {
  return EstimateCoinSellRequest::CommissionCase(_oneof_case_[2]);
}
// -------------------------------------------------------------------

// EstimateCoinSellResponse

// string will_get = 1 [json_name = "willGet"];
inline void EstimateCoinSellResponse::clear_will_get() {
  will_get_.ClearToEmpty();
}
inline const std::string& EstimateCoinSellResponse::will_get() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellResponse.will_get)
  return _internal_will_get();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinSellResponse::set_will_get(ArgT0&& arg0, ArgT... args) {
 
 will_get_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellResponse.will_get)
}
inline std::string* EstimateCoinSellResponse::mutable_will_get() {
  std::string* _s = _internal_mutable_will_get();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellResponse.will_get)
  return _s;
}
inline const std::string& EstimateCoinSellResponse::_internal_will_get() const {
  return will_get_.Get();
}
inline void EstimateCoinSellResponse::_internal_set_will_get(const std::string& value) {
  
  will_get_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellResponse::_internal_mutable_will_get() {
  
  return will_get_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellResponse::release_will_get() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellResponse.will_get)
  return will_get_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinSellResponse::set_allocated_will_get(std::string* will_get) {
  if (will_get != nullptr) {
    
  } else {
    
  }
  will_get_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), will_get,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellResponse.will_get)
}

// string commission = 2 [json_name = "commission"];
inline void EstimateCoinSellResponse::clear_commission() {
  commission_.ClearToEmpty();
}
inline const std::string& EstimateCoinSellResponse::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellResponse.commission)
  return _internal_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinSellResponse::set_commission(ArgT0&& arg0, ArgT... args) {
 
 commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellResponse.commission)
}
inline std::string* EstimateCoinSellResponse::mutable_commission() {
  std::string* _s = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellResponse.commission)
  return _s;
}
inline const std::string& EstimateCoinSellResponse::_internal_commission() const {
  return commission_.Get();
}
inline void EstimateCoinSellResponse::_internal_set_commission(const std::string& value) {
  
  commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellResponse::_internal_mutable_commission() {
  
  return commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellResponse::release_commission() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellResponse.commission)
  return commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinSellResponse::set_allocated_commission(std::string* commission) {
  if (commission != nullptr) {
    
  } else {
    
  }
  commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellResponse.commission)
}

// .api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];
inline void EstimateCoinSellResponse::clear_swap_from() {
  swap_from_ = 0;
}
inline ::api_pb::SwapFrom EstimateCoinSellResponse::_internal_swap_from() const {
  return static_cast< ::api_pb::SwapFrom >(swap_from_);
}
inline ::api_pb::SwapFrom EstimateCoinSellResponse::swap_from() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellResponse.swap_from)
  return _internal_swap_from();
}
inline void EstimateCoinSellResponse::_internal_set_swap_from(::api_pb::SwapFrom value) {
  
  swap_from_ = value;
}
inline void EstimateCoinSellResponse::set_swap_from(::api_pb::SwapFrom value) {
  _internal_set_swap_from(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellResponse.swap_from)
}

// -------------------------------------------------------------------

// EstimateCoinSellAllRequest

// uint64 coin_id_to_buy = 1 [json_name = "coinIdToBuy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinSellAllRequest::_internal_has_coin_id_to_buy() const {
  return buy_case() == kCoinIdToBuy;
}
inline bool EstimateCoinSellAllRequest::has_coin_id_to_buy() const {
  return _internal_has_coin_id_to_buy();
}
inline void EstimateCoinSellAllRequest::set_has_coin_id_to_buy() {
  _oneof_case_[0] = kCoinIdToBuy;
}
inline void EstimateCoinSellAllRequest::clear_coin_id_to_buy() {
  if (_internal_has_coin_id_to_buy()) {
    buy_.coin_id_to_buy_ = uint64_t{0u};
    clear_has_buy();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::_internal_coin_id_to_buy() const {
  if (_internal_has_coin_id_to_buy()) {
    return buy_.coin_id_to_buy_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinSellAllRequest::_internal_set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_to_buy()) {
    clear_buy();
    set_has_coin_id_to_buy();
  }
  buy_.coin_id_to_buy_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::coin_id_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.coin_id_to_buy)
  return _internal_coin_id_to_buy();
}
inline void EstimateCoinSellAllRequest::set_coin_id_to_buy(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_to_buy(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.coin_id_to_buy)
}

// string coin_to_buy = 7 [json_name = "coinToBuy"];
inline bool EstimateCoinSellAllRequest::_internal_has_coin_to_buy() const {
  return buy_case() == kCoinToBuy;
}
inline bool EstimateCoinSellAllRequest::has_coin_to_buy() const {
  return _internal_has_coin_to_buy();
}
inline void EstimateCoinSellAllRequest::set_has_coin_to_buy() {
  _oneof_case_[0] = kCoinToBuy;
}
inline void EstimateCoinSellAllRequest::clear_coin_to_buy() {
  if (_internal_has_coin_to_buy()) {
    buy_.coin_to_buy_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_buy();
  }
}
inline const std::string& EstimateCoinSellAllRequest::coin_to_buy() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.coin_to_buy)
  return _internal_coin_to_buy();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinSellAllRequest::set_coin_to_buy(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  buy_.coin_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.coin_to_buy)
}
inline std::string* EstimateCoinSellAllRequest::mutable_coin_to_buy() {
  std::string* _s = _internal_mutable_coin_to_buy();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellAllRequest.coin_to_buy)
  return _s;
}
inline const std::string& EstimateCoinSellAllRequest::_internal_coin_to_buy() const {
  if (_internal_has_coin_to_buy()) {
    return buy_.coin_to_buy_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinSellAllRequest::_internal_set_coin_to_buy(const std::string& value) {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  buy_.coin_to_buy_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllRequest::_internal_mutable_coin_to_buy() {
  if (!_internal_has_coin_to_buy()) {
    clear_buy();
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return buy_.coin_to_buy_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllRequest::release_coin_to_buy() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellAllRequest.coin_to_buy)
  if (_internal_has_coin_to_buy()) {
    clear_has_buy();
    return buy_.coin_to_buy_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinSellAllRequest::set_allocated_coin_to_buy(std::string* coin_to_buy) {
  if (has_buy()) {
    clear_buy();
  }
  if (coin_to_buy != nullptr) {
    set_has_coin_to_buy();
    buy_.coin_to_buy_.UnsafeSetDefault(coin_to_buy);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_to_buy);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellAllRequest.coin_to_buy)
}

// uint64 coin_id_to_sell = 2 [json_name = "coinIdToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool EstimateCoinSellAllRequest::_internal_has_coin_id_to_sell() const {
  return sell_case() == kCoinIdToSell;
}
inline bool EstimateCoinSellAllRequest::has_coin_id_to_sell() const {
  return _internal_has_coin_id_to_sell();
}
inline void EstimateCoinSellAllRequest::set_has_coin_id_to_sell() {
  _oneof_case_[1] = kCoinIdToSell;
}
inline void EstimateCoinSellAllRequest::clear_coin_id_to_sell() {
  if (_internal_has_coin_id_to_sell()) {
    sell_.coin_id_to_sell_ = uint64_t{0u};
    clear_has_sell();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::_internal_coin_id_to_sell() const {
  if (_internal_has_coin_id_to_sell()) {
    return sell_.coin_id_to_sell_;
  }
  return uint64_t{0u};
}
inline void EstimateCoinSellAllRequest::_internal_set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_coin_id_to_sell()) {
    clear_sell();
    set_has_coin_id_to_sell();
  }
  sell_.coin_id_to_sell_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::coin_id_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.coin_id_to_sell)
  return _internal_coin_id_to_sell();
}
inline void EstimateCoinSellAllRequest::set_coin_id_to_sell(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coin_id_to_sell(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.coin_id_to_sell)
}

// string coin_to_sell = 6 [json_name = "coinToSell"];
inline bool EstimateCoinSellAllRequest::_internal_has_coin_to_sell() const {
  return sell_case() == kCoinToSell;
}
inline bool EstimateCoinSellAllRequest::has_coin_to_sell() const {
  return _internal_has_coin_to_sell();
}
inline void EstimateCoinSellAllRequest::set_has_coin_to_sell() {
  _oneof_case_[1] = kCoinToSell;
}
inline void EstimateCoinSellAllRequest::clear_coin_to_sell() {
  if (_internal_has_coin_to_sell()) {
    sell_.coin_to_sell_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_sell();
  }
}
inline const std::string& EstimateCoinSellAllRequest::coin_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.coin_to_sell)
  return _internal_coin_to_sell();
}
template <typename ArgT0, typename... ArgT>
inline void EstimateCoinSellAllRequest::set_coin_to_sell(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sell_.coin_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.coin_to_sell)
}
inline std::string* EstimateCoinSellAllRequest::mutable_coin_to_sell() {
  std::string* _s = _internal_mutable_coin_to_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellAllRequest.coin_to_sell)
  return _s;
}
inline const std::string& EstimateCoinSellAllRequest::_internal_coin_to_sell() const {
  if (_internal_has_coin_to_sell()) {
    return sell_.coin_to_sell_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EstimateCoinSellAllRequest::_internal_set_coin_to_sell(const std::string& value) {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  sell_.coin_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllRequest::_internal_mutable_coin_to_sell() {
  if (!_internal_has_coin_to_sell()) {
    clear_sell();
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return sell_.coin_to_sell_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllRequest::release_coin_to_sell() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellAllRequest.coin_to_sell)
  if (_internal_has_coin_to_sell()) {
    clear_has_sell();
    return sell_.coin_to_sell_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void EstimateCoinSellAllRequest::set_allocated_coin_to_sell(std::string* coin_to_sell) {
  if (has_sell()) {
    clear_sell();
  }
  if (coin_to_sell != nullptr) {
    set_has_coin_to_sell();
    sell_.coin_to_sell_.UnsafeSetDefault(coin_to_sell);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(coin_to_sell);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellAllRequest.coin_to_sell)
}

// string value_to_sell = 3 [json_name = "valueToSell", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinSellAllRequest::clear_value_to_sell() {
  value_to_sell_.ClearToEmpty();
}
inline const std::string& EstimateCoinSellAllRequest::value_to_sell() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.value_to_sell)
  return _internal_value_to_sell();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinSellAllRequest::set_value_to_sell(ArgT0&& arg0, ArgT... args) {
 
 value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.value_to_sell)
}
inline std::string* EstimateCoinSellAllRequest::mutable_value_to_sell() {
  std::string* _s = _internal_mutable_value_to_sell();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellAllRequest.value_to_sell)
  return _s;
}
inline const std::string& EstimateCoinSellAllRequest::_internal_value_to_sell() const {
  return value_to_sell_.Get();
}
inline void EstimateCoinSellAllRequest::_internal_set_value_to_sell(const std::string& value) {
  
  value_to_sell_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllRequest::_internal_mutable_value_to_sell() {
  
  return value_to_sell_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllRequest::release_value_to_sell() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellAllRequest.value_to_sell)
  return value_to_sell_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinSellAllRequest::set_allocated_value_to_sell(std::string* value_to_sell) {
  if (value_to_sell != nullptr) {
    
  } else {
    
  }
  value_to_sell_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_to_sell,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellAllRequest.value_to_sell)
}

// uint64 gas_price = 4 [json_name = "gasPrice", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinSellAllRequest::clear_gas_price() {
  gas_price_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::_internal_gas_price() const {
  return gas_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::gas_price() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.gas_price)
  return _internal_gas_price();
}
inline void EstimateCoinSellAllRequest::_internal_set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gas_price_ = value;
}
inline void EstimateCoinSellAllRequest::set_gas_price(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gas_price(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.gas_price)
}

// uint64 height = 5 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateCoinSellAllRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.height)
  return _internal_height();
}
inline void EstimateCoinSellAllRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void EstimateCoinSellAllRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.height)
}

// .api_pb.SwapFrom swap_from = 8 [json_name = "swapFrom"];
inline void EstimateCoinSellAllRequest::clear_swap_from() {
  swap_from_ = 0;
}
inline ::api_pb::SwapFrom EstimateCoinSellAllRequest::_internal_swap_from() const {
  return static_cast< ::api_pb::SwapFrom >(swap_from_);
}
inline ::api_pb::SwapFrom EstimateCoinSellAllRequest::swap_from() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.swap_from)
  return _internal_swap_from();
}
inline void EstimateCoinSellAllRequest::_internal_set_swap_from(::api_pb::SwapFrom value) {
  
  swap_from_ = value;
}
inline void EstimateCoinSellAllRequest::set_swap_from(::api_pb::SwapFrom value) {
  _internal_set_swap_from(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.swap_from)
}

// repeated uint64 route = 11 [json_name = "route"];
inline int EstimateCoinSellAllRequest::_internal_route_size() const {
  return route_.size();
}
inline int EstimateCoinSellAllRequest::route_size() const {
  return _internal_route_size();
}
inline void EstimateCoinSellAllRequest::clear_route() {
  route_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::_internal_route(int index) const {
  return route_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateCoinSellAllRequest::route(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllRequest.route)
  return _internal_route(index);
}
inline void EstimateCoinSellAllRequest::set_route(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  route_.Set(index, value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllRequest.route)
}
inline void EstimateCoinSellAllRequest::_internal_add_route(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  route_.Add(value);
}
inline void EstimateCoinSellAllRequest::add_route(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_route(value);
  // @@protoc_insertion_point(field_add:api_pb.EstimateCoinSellAllRequest.route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EstimateCoinSellAllRequest::_internal_route() const {
  return route_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
EstimateCoinSellAllRequest::route() const {
  // @@protoc_insertion_point(field_list:api_pb.EstimateCoinSellAllRequest.route)
  return _internal_route();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EstimateCoinSellAllRequest::_internal_mutable_route() {
  return &route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
EstimateCoinSellAllRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.EstimateCoinSellAllRequest.route)
  return _internal_mutable_route();
}

inline bool EstimateCoinSellAllRequest::has_buy() const {
  return buy_case() != BUY_NOT_SET;
}
inline void EstimateCoinSellAllRequest::clear_has_buy() {
  _oneof_case_[0] = BUY_NOT_SET;
}
inline bool EstimateCoinSellAllRequest::has_sell() const {
  return sell_case() != SELL_NOT_SET;
}
inline void EstimateCoinSellAllRequest::clear_has_sell() {
  _oneof_case_[1] = SELL_NOT_SET;
}
inline EstimateCoinSellAllRequest::BuyCase EstimateCoinSellAllRequest::buy_case() const {
  return EstimateCoinSellAllRequest::BuyCase(_oneof_case_[0]);
}
inline EstimateCoinSellAllRequest::SellCase EstimateCoinSellAllRequest::sell_case() const {
  return EstimateCoinSellAllRequest::SellCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// EstimateCoinSellAllResponse

// string will_get = 1 [json_name = "willGet"];
inline void EstimateCoinSellAllResponse::clear_will_get() {
  will_get_.ClearToEmpty();
}
inline const std::string& EstimateCoinSellAllResponse::will_get() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllResponse.will_get)
  return _internal_will_get();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateCoinSellAllResponse::set_will_get(ArgT0&& arg0, ArgT... args) {
 
 will_get_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllResponse.will_get)
}
inline std::string* EstimateCoinSellAllResponse::mutable_will_get() {
  std::string* _s = _internal_mutable_will_get();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateCoinSellAllResponse.will_get)
  return _s;
}
inline const std::string& EstimateCoinSellAllResponse::_internal_will_get() const {
  return will_get_.Get();
}
inline void EstimateCoinSellAllResponse::_internal_set_will_get(const std::string& value) {
  
  will_get_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllResponse::_internal_mutable_will_get() {
  
  return will_get_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateCoinSellAllResponse::release_will_get() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateCoinSellAllResponse.will_get)
  return will_get_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateCoinSellAllResponse::set_allocated_will_get(std::string* will_get) {
  if (will_get != nullptr) {
    
  } else {
    
  }
  will_get_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), will_get,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateCoinSellAllResponse.will_get)
}

// .api_pb.SwapFrom swap_from = 2 [json_name = "swapFrom"];
inline void EstimateCoinSellAllResponse::clear_swap_from() {
  swap_from_ = 0;
}
inline ::api_pb::SwapFrom EstimateCoinSellAllResponse::_internal_swap_from() const {
  return static_cast< ::api_pb::SwapFrom >(swap_from_);
}
inline ::api_pb::SwapFrom EstimateCoinSellAllResponse::swap_from() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateCoinSellAllResponse.swap_from)
  return _internal_swap_from();
}
inline void EstimateCoinSellAllResponse::_internal_set_swap_from(::api_pb::SwapFrom value) {
  
  swap_from_ = value;
}
inline void EstimateCoinSellAllResponse::set_swap_from(::api_pb::SwapFrom value) {
  _internal_set_swap_from(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateCoinSellAllResponse.swap_from)
}

// -------------------------------------------------------------------

// EstimateTxCommissionRequest

// string tx = 1 [json_name = "tx", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateTxCommissionRequest::clear_tx() {
  tx_.ClearToEmpty();
}
inline const std::string& EstimateTxCommissionRequest::tx() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateTxCommissionRequest.tx)
  return _internal_tx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateTxCommissionRequest::set_tx(ArgT0&& arg0, ArgT... args) {
 
 tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateTxCommissionRequest.tx)
}
inline std::string* EstimateTxCommissionRequest::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateTxCommissionRequest.tx)
  return _s;
}
inline const std::string& EstimateTxCommissionRequest::_internal_tx() const {
  return tx_.Get();
}
inline void EstimateTxCommissionRequest::_internal_set_tx(const std::string& value) {
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateTxCommissionRequest::_internal_mutable_tx() {
  
  return tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateTxCommissionRequest::release_tx() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateTxCommissionRequest.tx)
  return tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateTxCommissionRequest::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateTxCommissionRequest.tx)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EstimateTxCommissionRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateTxCommissionRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateTxCommissionRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateTxCommissionRequest.height)
  return _internal_height();
}
inline void EstimateTxCommissionRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void EstimateTxCommissionRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.EstimateTxCommissionRequest.height)
}

// -------------------------------------------------------------------

// EstimateTxCommissionResponse

// string commission = 1 [json_name = "commission"];
inline void EstimateTxCommissionResponse::clear_commission() {
  commission_.ClearToEmpty();
}
inline const std::string& EstimateTxCommissionResponse::commission() const {
  // @@protoc_insertion_point(field_get:api_pb.EstimateTxCommissionResponse.commission)
  return _internal_commission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EstimateTxCommissionResponse::set_commission(ArgT0&& arg0, ArgT... args) {
 
 commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.EstimateTxCommissionResponse.commission)
}
inline std::string* EstimateTxCommissionResponse::mutable_commission() {
  std::string* _s = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:api_pb.EstimateTxCommissionResponse.commission)
  return _s;
}
inline const std::string& EstimateTxCommissionResponse::_internal_commission() const {
  return commission_.Get();
}
inline void EstimateTxCommissionResponse::_internal_set_commission(const std::string& value) {
  
  commission_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EstimateTxCommissionResponse::_internal_mutable_commission() {
  
  return commission_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EstimateTxCommissionResponse::release_commission() {
  // @@protoc_insertion_point(field_release:api_pb.EstimateTxCommissionResponse.commission)
  return commission_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EstimateTxCommissionResponse::set_allocated_commission(std::string* commission) {
  if (commission != nullptr) {
    
  } else {
    
  }
  commission_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commission,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.EstimateTxCommissionResponse.commission)
}

// -------------------------------------------------------------------

// EventsRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void EventsRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EventsRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EventsRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.EventsRequest.height)
  return _internal_height();
}
inline void EventsRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void EventsRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.EventsRequest.height)
}

// repeated string search = 2 [json_name = "search"];
inline int EventsRequest::_internal_search_size() const {
  return search_.size();
}
inline int EventsRequest::search_size() const {
  return _internal_search_size();
}
inline void EventsRequest::clear_search() {
  search_.Clear();
}
inline std::string* EventsRequest::add_search() {
  std::string* _s = _internal_add_search();
  // @@protoc_insertion_point(field_add_mutable:api_pb.EventsRequest.search)
  return _s;
}
inline const std::string& EventsRequest::_internal_search(int index) const {
  return search_.Get(index);
}
inline const std::string& EventsRequest::search(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.EventsRequest.search)
  return _internal_search(index);
}
inline std::string* EventsRequest::mutable_search(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.EventsRequest.search)
  return search_.Mutable(index);
}
inline void EventsRequest::set_search(int index, const std::string& value) {
  search_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.EventsRequest.search)
}
inline void EventsRequest::set_search(int index, std::string&& value) {
  search_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.EventsRequest.search)
}
inline void EventsRequest::set_search(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.EventsRequest.search)
}
inline void EventsRequest::set_search(int index, const char* value, size_t size) {
  search_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.EventsRequest.search)
}
inline std::string* EventsRequest::_internal_add_search() {
  return search_.Add();
}
inline void EventsRequest::add_search(const std::string& value) {
  search_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.EventsRequest.search)
}
inline void EventsRequest::add_search(std::string&& value) {
  search_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.EventsRequest.search)
}
inline void EventsRequest::add_search(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.EventsRequest.search)
}
inline void EventsRequest::add_search(const char* value, size_t size) {
  search_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.EventsRequest.search)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EventsRequest::search() const {
  // @@protoc_insertion_point(field_list:api_pb.EventsRequest.search)
  return search_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EventsRequest::mutable_search() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.EventsRequest.search)
  return &search_;
}

// -------------------------------------------------------------------

// EventsResponse

// repeated .google.protobuf.Struct events = 1 [json_name = "events"];
inline int EventsResponse::_internal_events_size() const {
  return events_.size();
}
inline int EventsResponse::events_size() const {
  return _internal_events_size();
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventsResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.EventsResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >*
EventsResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.EventsResponse.events)
  return &events_;
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EventsResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& EventsResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.EventsResponse.events)
  return _internal_events(index);
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventsResponse::_internal_add_events() {
  return events_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Struct* EventsResponse::add_events() {
  PROTOBUF_NAMESPACE_ID::Struct* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:api_pb.EventsResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Struct >&
EventsResponse::events() const {
  // @@protoc_insertion_point(field_list:api_pb.EventsResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// MissedBlocksRequest

// string public_key = 1 [json_name = "publicKey"];
inline void MissedBlocksRequest::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& MissedBlocksRequest::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.MissedBlocksRequest.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MissedBlocksRequest::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.MissedBlocksRequest.public_key)
}
inline std::string* MissedBlocksRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.MissedBlocksRequest.public_key)
  return _s;
}
inline const std::string& MissedBlocksRequest::_internal_public_key() const {
  return public_key_.Get();
}
inline void MissedBlocksRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MissedBlocksRequest::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MissedBlocksRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.MissedBlocksRequest.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MissedBlocksRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.MissedBlocksRequest.public_key)
}

// uint64 height = 2 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void MissedBlocksRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MissedBlocksRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MissedBlocksRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.MissedBlocksRequest.height)
  return _internal_height();
}
inline void MissedBlocksRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void MissedBlocksRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.MissedBlocksRequest.height)
}

// -------------------------------------------------------------------

// MissedBlocksResponse

// string missed_blocks = 1 [json_name = "missedBlocks"];
inline void MissedBlocksResponse::clear_missed_blocks() {
  missed_blocks_.ClearToEmpty();
}
inline const std::string& MissedBlocksResponse::missed_blocks() const {
  // @@protoc_insertion_point(field_get:api_pb.MissedBlocksResponse.missed_blocks)
  return _internal_missed_blocks();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MissedBlocksResponse::set_missed_blocks(ArgT0&& arg0, ArgT... args) {
 
 missed_blocks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.MissedBlocksResponse.missed_blocks)
}
inline std::string* MissedBlocksResponse::mutable_missed_blocks() {
  std::string* _s = _internal_mutable_missed_blocks();
  // @@protoc_insertion_point(field_mutable:api_pb.MissedBlocksResponse.missed_blocks)
  return _s;
}
inline const std::string& MissedBlocksResponse::_internal_missed_blocks() const {
  return missed_blocks_.Get();
}
inline void MissedBlocksResponse::_internal_set_missed_blocks(const std::string& value) {
  
  missed_blocks_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MissedBlocksResponse::_internal_mutable_missed_blocks() {
  
  return missed_blocks_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MissedBlocksResponse::release_missed_blocks() {
  // @@protoc_insertion_point(field_release:api_pb.MissedBlocksResponse.missed_blocks)
  return missed_blocks_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MissedBlocksResponse::set_allocated_missed_blocks(std::string* missed_blocks) {
  if (missed_blocks != nullptr) {
    
  } else {
    
  }
  missed_blocks_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), missed_blocks,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.MissedBlocksResponse.missed_blocks)
}

// int64 missed_blocks_count = 2 [json_name = "missedBlocksCount"];
inline void MissedBlocksResponse::clear_missed_blocks_count() {
  missed_blocks_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MissedBlocksResponse::_internal_missed_blocks_count() const {
  return missed_blocks_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MissedBlocksResponse::missed_blocks_count() const {
  // @@protoc_insertion_point(field_get:api_pb.MissedBlocksResponse.missed_blocks_count)
  return _internal_missed_blocks_count();
}
inline void MissedBlocksResponse::_internal_set_missed_blocks_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  missed_blocks_count_ = value;
}
inline void MissedBlocksResponse::set_missed_blocks_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_missed_blocks_count(value);
  // @@protoc_insertion_point(field_set:api_pb.MissedBlocksResponse.missed_blocks_count)
}

// -------------------------------------------------------------------

// UnconfirmedTxsResponse

// uint64 transaction_count = 1 [json_name = "transactionCount"];
inline void UnconfirmedTxsResponse::clear_transaction_count() {
  transaction_count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnconfirmedTxsResponse::_internal_transaction_count() const {
  return transaction_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnconfirmedTxsResponse::transaction_count() const {
  // @@protoc_insertion_point(field_get:api_pb.UnconfirmedTxsResponse.transaction_count)
  return _internal_transaction_count();
}
inline void UnconfirmedTxsResponse::_internal_set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  transaction_count_ = value;
}
inline void UnconfirmedTxsResponse::set_transaction_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transaction_count(value);
  // @@protoc_insertion_point(field_set:api_pb.UnconfirmedTxsResponse.transaction_count)
}

// uint64 total_transactions = 2 [json_name = "totalTransactions"];
inline void UnconfirmedTxsResponse::clear_total_transactions() {
  total_transactions_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnconfirmedTxsResponse::_internal_total_transactions() const {
  return total_transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnconfirmedTxsResponse::total_transactions() const {
  // @@protoc_insertion_point(field_get:api_pb.UnconfirmedTxsResponse.total_transactions)
  return _internal_total_transactions();
}
inline void UnconfirmedTxsResponse::_internal_set_total_transactions(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_transactions_ = value;
}
inline void UnconfirmedTxsResponse::set_total_transactions(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_transactions(value);
  // @@protoc_insertion_point(field_set:api_pb.UnconfirmedTxsResponse.total_transactions)
}

// uint64 total_bytes = 3 [json_name = "totalBytes"];
inline void UnconfirmedTxsResponse::clear_total_bytes() {
  total_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnconfirmedTxsResponse::_internal_total_bytes() const {
  return total_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UnconfirmedTxsResponse::total_bytes() const {
  // @@protoc_insertion_point(field_get:api_pb.UnconfirmedTxsResponse.total_bytes)
  return _internal_total_bytes();
}
inline void UnconfirmedTxsResponse::_internal_set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  total_bytes_ = value;
}
inline void UnconfirmedTxsResponse::set_total_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_total_bytes(value);
  // @@protoc_insertion_point(field_set:api_pb.UnconfirmedTxsResponse.total_bytes)
}

// repeated string transactions = 4 [json_name = "transactions"];
inline int UnconfirmedTxsResponse::_internal_transactions_size() const {
  return transactions_.size();
}
inline int UnconfirmedTxsResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void UnconfirmedTxsResponse::clear_transactions() {
  transactions_.Clear();
}
inline std::string* UnconfirmedTxsResponse::add_transactions() {
  std::string* _s = _internal_add_transactions();
  // @@protoc_insertion_point(field_add_mutable:api_pb.UnconfirmedTxsResponse.transactions)
  return _s;
}
inline const std::string& UnconfirmedTxsResponse::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const std::string& UnconfirmedTxsResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.UnconfirmedTxsResponse.transactions)
  return _internal_transactions(index);
}
inline std::string* UnconfirmedTxsResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.UnconfirmedTxsResponse.transactions)
  return transactions_.Mutable(index);
}
inline void UnconfirmedTxsResponse::set_transactions(int index, const std::string& value) {
  transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.UnconfirmedTxsResponse.transactions)
}
inline void UnconfirmedTxsResponse::set_transactions(int index, std::string&& value) {
  transactions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.UnconfirmedTxsResponse.transactions)
}
inline void UnconfirmedTxsResponse::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.UnconfirmedTxsResponse.transactions)
}
inline void UnconfirmedTxsResponse::set_transactions(int index, const char* value, size_t size) {
  transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.UnconfirmedTxsResponse.transactions)
}
inline std::string* UnconfirmedTxsResponse::_internal_add_transactions() {
  return transactions_.Add();
}
inline void UnconfirmedTxsResponse::add_transactions(const std::string& value) {
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.UnconfirmedTxsResponse.transactions)
}
inline void UnconfirmedTxsResponse::add_transactions(std::string&& value) {
  transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.UnconfirmedTxsResponse.transactions)
}
inline void UnconfirmedTxsResponse::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.UnconfirmedTxsResponse.transactions)
}
inline void UnconfirmedTxsResponse::add_transactions(const char* value, size_t size) {
  transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.UnconfirmedTxsResponse.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UnconfirmedTxsResponse::transactions() const {
  // @@protoc_insertion_point(field_list:api_pb.UnconfirmedTxsResponse.transactions)
  return transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UnconfirmedTxsResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.UnconfirmedTxsResponse.transactions)
  return &transactions_;
}

// -------------------------------------------------------------------

// UnconfirmedTxsRequest

// int32 limit = 1 [json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UnconfirmedTxsRequest::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnconfirmedTxsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnconfirmedTxsRequest::limit() const {
  // @@protoc_insertion_point(field_get:api_pb.UnconfirmedTxsRequest.limit)
  return _internal_limit();
}
inline void UnconfirmedTxsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void UnconfirmedTxsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:api_pb.UnconfirmedTxsRequest.limit)
}

// -------------------------------------------------------------------

// ValidatorsRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ValidatorsRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidatorsRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidatorsRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.ValidatorsRequest.height)
  return _internal_height();
}
inline void ValidatorsRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void ValidatorsRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.ValidatorsRequest.height)
}

// -------------------------------------------------------------------

// ValidatorsResponse_Result

// string public_key = 1 [json_name = "publicKey"];
inline void ValidatorsResponse_Result::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& ValidatorsResponse_Result::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.ValidatorsResponse.Result.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidatorsResponse_Result::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.ValidatorsResponse.Result.public_key)
}
inline std::string* ValidatorsResponse_Result::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.ValidatorsResponse.Result.public_key)
  return _s;
}
inline const std::string& ValidatorsResponse_Result::_internal_public_key() const {
  return public_key_.Get();
}
inline void ValidatorsResponse_Result::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidatorsResponse_Result::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidatorsResponse_Result::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.ValidatorsResponse.Result.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidatorsResponse_Result::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.ValidatorsResponse.Result.public_key)
}

// uint64 voting_power = 2 [json_name = "votingPower"];
inline void ValidatorsResponse_Result::clear_voting_power() {
  voting_power_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidatorsResponse_Result::_internal_voting_power() const {
  return voting_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValidatorsResponse_Result::voting_power() const {
  // @@protoc_insertion_point(field_get:api_pb.ValidatorsResponse.Result.voting_power)
  return _internal_voting_power();
}
inline void ValidatorsResponse_Result::_internal_set_voting_power(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  voting_power_ = value;
}
inline void ValidatorsResponse_Result::set_voting_power(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:api_pb.ValidatorsResponse.Result.voting_power)
}

// -------------------------------------------------------------------

// ValidatorsResponse

// repeated .api_pb.ValidatorsResponse.Result validators = 3 [json_name = "validators"];
inline int ValidatorsResponse::_internal_validators_size() const {
  return validators_.size();
}
inline int ValidatorsResponse::validators_size() const {
  return _internal_validators_size();
}
inline void ValidatorsResponse::clear_validators() {
  validators_.Clear();
}
inline ::api_pb::ValidatorsResponse_Result* ValidatorsResponse::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.ValidatorsResponse.validators)
  return validators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::ValidatorsResponse_Result >*
ValidatorsResponse::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.ValidatorsResponse.validators)
  return &validators_;
}
inline const ::api_pb::ValidatorsResponse_Result& ValidatorsResponse::_internal_validators(int index) const {
  return validators_.Get(index);
}
inline const ::api_pb::ValidatorsResponse_Result& ValidatorsResponse::validators(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.ValidatorsResponse.validators)
  return _internal_validators(index);
}
inline ::api_pb::ValidatorsResponse_Result* ValidatorsResponse::_internal_add_validators() {
  return validators_.Add();
}
inline ::api_pb::ValidatorsResponse_Result* ValidatorsResponse::add_validators() {
  ::api_pb::ValidatorsResponse_Result* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:api_pb.ValidatorsResponse.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::ValidatorsResponse_Result >&
ValidatorsResponse::validators() const {
  // @@protoc_insertion_point(field_list:api_pb.ValidatorsResponse.validators)
  return validators_;
}

// -------------------------------------------------------------------

// SubscribeRequest

// string query = 1 [json_name = "query", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SubscribeRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& SubscribeRequest::query() const {
  // @@protoc_insertion_point(field_get:api_pb.SubscribeRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubscribeRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SubscribeRequest.query)
}
inline std::string* SubscribeRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:api_pb.SubscribeRequest.query)
  return _s;
}
inline const std::string& SubscribeRequest::_internal_query() const {
  return query_.Get();
}
inline void SubscribeRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubscribeRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubscribeRequest::release_query() {
  // @@protoc_insertion_point(field_release:api_pb.SubscribeRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubscribeRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SubscribeRequest.query)
}

// -------------------------------------------------------------------

// SubscribeResponse_Event

// string key = 1 [json_name = "key"];
inline void SubscribeResponse_Event::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SubscribeResponse_Event::key() const {
  // @@protoc_insertion_point(field_get:api_pb.SubscribeResponse.Event.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubscribeResponse_Event::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SubscribeResponse.Event.key)
}
inline std::string* SubscribeResponse_Event::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:api_pb.SubscribeResponse.Event.key)
  return _s;
}
inline const std::string& SubscribeResponse_Event::_internal_key() const {
  return key_.Get();
}
inline void SubscribeResponse_Event::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubscribeResponse_Event::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubscribeResponse_Event::release_key() {
  // @@protoc_insertion_point(field_release:api_pb.SubscribeResponse.Event.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubscribeResponse_Event::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SubscribeResponse.Event.key)
}

// repeated string events = 2 [json_name = "events"];
inline int SubscribeResponse_Event::_internal_events_size() const {
  return events_.size();
}
inline int SubscribeResponse_Event::events_size() const {
  return _internal_events_size();
}
inline void SubscribeResponse_Event::clear_events() {
  events_.Clear();
}
inline std::string* SubscribeResponse_Event::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:api_pb.SubscribeResponse.Event.events)
  return _s;
}
inline const std::string& SubscribeResponse_Event::_internal_events(int index) const {
  return events_.Get(index);
}
inline const std::string& SubscribeResponse_Event::events(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.SubscribeResponse.Event.events)
  return _internal_events(index);
}
inline std::string* SubscribeResponse_Event::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.SubscribeResponse.Event.events)
  return events_.Mutable(index);
}
inline void SubscribeResponse_Event::set_events(int index, const std::string& value) {
  events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.SubscribeResponse.Event.events)
}
inline void SubscribeResponse_Event::set_events(int index, std::string&& value) {
  events_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.SubscribeResponse.Event.events)
}
inline void SubscribeResponse_Event::set_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.SubscribeResponse.Event.events)
}
inline void SubscribeResponse_Event::set_events(int index, const char* value, size_t size) {
  events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.SubscribeResponse.Event.events)
}
inline std::string* SubscribeResponse_Event::_internal_add_events() {
  return events_.Add();
}
inline void SubscribeResponse_Event::add_events(const std::string& value) {
  events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.SubscribeResponse.Event.events)
}
inline void SubscribeResponse_Event::add_events(std::string&& value) {
  events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.SubscribeResponse.Event.events)
}
inline void SubscribeResponse_Event::add_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.SubscribeResponse.Event.events)
}
inline void SubscribeResponse_Event::add_events(const char* value, size_t size) {
  events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.SubscribeResponse.Event.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SubscribeResponse_Event::events() const {
  // @@protoc_insertion_point(field_list:api_pb.SubscribeResponse.Event.events)
  return events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SubscribeResponse_Event::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.SubscribeResponse.Event.events)
  return &events_;
}

// -------------------------------------------------------------------

// SubscribeResponse

// string query = 1 [json_name = "query"];
inline void SubscribeResponse::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& SubscribeResponse::query() const {
  // @@protoc_insertion_point(field_get:api_pb.SubscribeResponse.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubscribeResponse::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.SubscribeResponse.query)
}
inline std::string* SubscribeResponse::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:api_pb.SubscribeResponse.query)
  return _s;
}
inline const std::string& SubscribeResponse::_internal_query() const {
  return query_.Get();
}
inline void SubscribeResponse::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SubscribeResponse::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SubscribeResponse::release_query() {
  // @@protoc_insertion_point(field_release:api_pb.SubscribeResponse.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SubscribeResponse::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.SubscribeResponse.query)
}

// .google.protobuf.Struct data = 2 [json_name = "data"];
inline bool SubscribeResponse::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool SubscribeResponse::has_data() const {
  return _internal_has_data();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& SubscribeResponse::_internal_data() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& SubscribeResponse::data() const {
  // @@protoc_insertion_point(field_get:api_pb.SubscribeResponse.data)
  return _internal_data();
}
inline void SubscribeResponse::unsafe_arena_set_allocated_data(
    PROTOBUF_NAMESPACE_ID::Struct* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.SubscribeResponse.data)
}
inline PROTOBUF_NAMESPACE_ID::Struct* SubscribeResponse::release_data() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* SubscribeResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:api_pb.SubscribeResponse.data)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* SubscribeResponse::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* SubscribeResponse::mutable_data() {
  PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:api_pb.SubscribeResponse.data)
  return _msg;
}
inline void SubscribeResponse::set_allocated_data(PROTOBUF_NAMESPACE_ID::Struct* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:api_pb.SubscribeResponse.data)
}

// repeated .api_pb.SubscribeResponse.Event events = 3 [json_name = "events"];
inline int SubscribeResponse::_internal_events_size() const {
  return events_.size();
}
inline int SubscribeResponse::events_size() const {
  return _internal_events_size();
}
inline void SubscribeResponse::clear_events() {
  events_.Clear();
}
inline ::api_pb::SubscribeResponse_Event* SubscribeResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.SubscribeResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::SubscribeResponse_Event >*
SubscribeResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.SubscribeResponse.events)
  return &events_;
}
inline const ::api_pb::SubscribeResponse_Event& SubscribeResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::api_pb::SubscribeResponse_Event& SubscribeResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.SubscribeResponse.events)
  return _internal_events(index);
}
inline ::api_pb::SubscribeResponse_Event* SubscribeResponse::_internal_add_events() {
  return events_.Add();
}
inline ::api_pb::SubscribeResponse_Event* SubscribeResponse::add_events() {
  ::api_pb::SubscribeResponse_Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:api_pb.SubscribeResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::SubscribeResponse_Event >&
SubscribeResponse::events() const {
  // @@protoc_insertion_point(field_list:api_pb.SubscribeResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// HaltsRequest

// uint64 height = 1 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HaltsRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HaltsRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HaltsRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.HaltsRequest.height)
  return _internal_height();
}
inline void HaltsRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void HaltsRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.HaltsRequest.height)
}

// -------------------------------------------------------------------

// HaltsResponse

// repeated string public_keys = 1 [json_name = "publicKeys"];
inline int HaltsResponse::_internal_public_keys_size() const {
  return public_keys_.size();
}
inline int HaltsResponse::public_keys_size() const {
  return _internal_public_keys_size();
}
inline void HaltsResponse::clear_public_keys() {
  public_keys_.Clear();
}
inline std::string* HaltsResponse::add_public_keys() {
  std::string* _s = _internal_add_public_keys();
  // @@protoc_insertion_point(field_add_mutable:api_pb.HaltsResponse.public_keys)
  return _s;
}
inline const std::string& HaltsResponse::_internal_public_keys(int index) const {
  return public_keys_.Get(index);
}
inline const std::string& HaltsResponse::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.HaltsResponse.public_keys)
  return _internal_public_keys(index);
}
inline std::string* HaltsResponse::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.HaltsResponse.public_keys)
  return public_keys_.Mutable(index);
}
inline void HaltsResponse::set_public_keys(int index, const std::string& value) {
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:api_pb.HaltsResponse.public_keys)
}
inline void HaltsResponse::set_public_keys(int index, std::string&& value) {
  public_keys_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:api_pb.HaltsResponse.public_keys)
}
inline void HaltsResponse::set_public_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:api_pb.HaltsResponse.public_keys)
}
inline void HaltsResponse::set_public_keys(int index, const char* value, size_t size) {
  public_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:api_pb.HaltsResponse.public_keys)
}
inline std::string* HaltsResponse::_internal_add_public_keys() {
  return public_keys_.Add();
}
inline void HaltsResponse::add_public_keys(const std::string& value) {
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:api_pb.HaltsResponse.public_keys)
}
inline void HaltsResponse::add_public_keys(std::string&& value) {
  public_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:api_pb.HaltsResponse.public_keys)
}
inline void HaltsResponse::add_public_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  public_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:api_pb.HaltsResponse.public_keys)
}
inline void HaltsResponse::add_public_keys(const char* value, size_t size) {
  public_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:api_pb.HaltsResponse.public_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HaltsResponse::public_keys() const {
  // @@protoc_insertion_point(field_list:api_pb.HaltsResponse.public_keys)
  return public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HaltsResponse::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.HaltsResponse.public_keys)
  return &public_keys_;
}

// -------------------------------------------------------------------

// FrozenRequest

// string address = 1 [json_name = "address"];
inline void FrozenRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& FrozenRequest::address() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrozenRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.FrozenRequest.address)
}
inline std::string* FrozenRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenRequest.address)
  return _s;
}
inline const std::string& FrozenRequest::_internal_address() const {
  return address_.Get();
}
inline void FrozenRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FrozenRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FrozenRequest::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.FrozenRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FrozenRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.FrozenRequest.address)
}

// .google.protobuf.UInt64Value coin_id = 2 [json_name = "coinId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool FrozenRequest::_internal_has_coin_id() const {
  return this != internal_default_instance() && coin_id_ != nullptr;
}
inline bool FrozenRequest::has_coin_id() const {
  return _internal_has_coin_id();
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& FrozenRequest::_internal_coin_id() const {
  const PROTOBUF_NAMESPACE_ID::UInt64Value* p = coin_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt64Value&>(
      PROTOBUF_NAMESPACE_ID::_UInt64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt64Value& FrozenRequest::coin_id() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenRequest.coin_id)
  return _internal_coin_id();
}
inline void FrozenRequest::unsafe_arena_set_allocated_coin_id(
    PROTOBUF_NAMESPACE_ID::UInt64Value* coin_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_id_);
  }
  coin_id_ = coin_id;
  if (coin_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.FrozenRequest.coin_id)
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* FrozenRequest::release_coin_id() {
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = coin_id_;
  coin_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* FrozenRequest::unsafe_arena_release_coin_id() {
  // @@protoc_insertion_point(field_release:api_pb.FrozenRequest.coin_id)
  
  PROTOBUF_NAMESPACE_ID::UInt64Value* temp = coin_id_;
  coin_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* FrozenRequest::_internal_mutable_coin_id() {
  
  if (coin_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt64Value>(GetArenaForAllocation());
    coin_id_ = p;
  }
  return coin_id_;
}
inline PROTOBUF_NAMESPACE_ID::UInt64Value* FrozenRequest::mutable_coin_id() {
  PROTOBUF_NAMESPACE_ID::UInt64Value* _msg = _internal_mutable_coin_id();
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenRequest.coin_id)
  return _msg;
}
inline void FrozenRequest::set_allocated_coin_id(PROTOBUF_NAMESPACE_ID::UInt64Value* coin_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_id_);
  }
  if (coin_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_id));
    if (message_arena != submessage_arena) {
      coin_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin_id, submessage_arena);
    }
    
  } else {
    
  }
  coin_id_ = coin_id;
  // @@protoc_insertion_point(field_set_allocated:api_pb.FrozenRequest.coin_id)
}

// uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FrozenRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrozenRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrozenRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenRequest.height)
  return _internal_height();
}
inline void FrozenRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void FrozenRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.FrozenRequest.height)
}

// -------------------------------------------------------------------

// FrozenResponse_Frozen

// uint64 height = 1 [json_name = "height"];
inline void FrozenResponse_Frozen::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrozenResponse_Frozen::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FrozenResponse_Frozen::height() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenResponse.Frozen.height)
  return _internal_height();
}
inline void FrozenResponse_Frozen::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void FrozenResponse_Frozen::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.FrozenResponse.Frozen.height)
}

// string address = 2 [json_name = "address"];
inline void FrozenResponse_Frozen::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& FrozenResponse_Frozen::address() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenResponse.Frozen.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrozenResponse_Frozen::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.FrozenResponse.Frozen.address)
}
inline std::string* FrozenResponse_Frozen::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenResponse.Frozen.address)
  return _s;
}
inline const std::string& FrozenResponse_Frozen::_internal_address() const {
  return address_.Get();
}
inline void FrozenResponse_Frozen::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FrozenResponse_Frozen::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FrozenResponse_Frozen::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.FrozenResponse.Frozen.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FrozenResponse_Frozen::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.FrozenResponse.Frozen.address)
}

// string candidate_key = 3 [json_name = "candidateKey"];
inline void FrozenResponse_Frozen::clear_candidate_key() {
  candidate_key_.ClearToEmpty();
}
inline const std::string& FrozenResponse_Frozen::candidate_key() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenResponse.Frozen.candidate_key)
  return _internal_candidate_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrozenResponse_Frozen::set_candidate_key(ArgT0&& arg0, ArgT... args) {
 
 candidate_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.FrozenResponse.Frozen.candidate_key)
}
inline std::string* FrozenResponse_Frozen::mutable_candidate_key() {
  std::string* _s = _internal_mutable_candidate_key();
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenResponse.Frozen.candidate_key)
  return _s;
}
inline const std::string& FrozenResponse_Frozen::_internal_candidate_key() const {
  return candidate_key_.Get();
}
inline void FrozenResponse_Frozen::_internal_set_candidate_key(const std::string& value) {
  
  candidate_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FrozenResponse_Frozen::_internal_mutable_candidate_key() {
  
  return candidate_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FrozenResponse_Frozen::release_candidate_key() {
  // @@protoc_insertion_point(field_release:api_pb.FrozenResponse.Frozen.candidate_key)
  return candidate_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FrozenResponse_Frozen::set_allocated_candidate_key(std::string* candidate_key) {
  if (candidate_key != nullptr) {
    
  } else {
    
  }
  candidate_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.FrozenResponse.Frozen.candidate_key)
}

// .api_pb.Coin coin = 4 [json_name = "coin"];
inline bool FrozenResponse_Frozen::_internal_has_coin() const {
  return this != internal_default_instance() && coin_ != nullptr;
}
inline bool FrozenResponse_Frozen::has_coin() const {
  return _internal_has_coin();
}
inline void FrozenResponse_Frozen::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
inline const ::api_pb::Coin& FrozenResponse_Frozen::_internal_coin() const {
  const ::api_pb::Coin* p = coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& FrozenResponse_Frozen::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenResponse.Frozen.coin)
  return _internal_coin();
}
inline void FrozenResponse_Frozen::unsafe_arena_set_allocated_coin(
    ::api_pb::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_);
  }
  coin_ = coin;
  if (coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.FrozenResponse.Frozen.coin)
}
inline ::api_pb::Coin* FrozenResponse_Frozen::release_coin() {
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* FrozenResponse_Frozen::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:api_pb.FrozenResponse.Frozen.coin)
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* FrozenResponse_Frozen::_internal_mutable_coin() {
  
  if (coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_ = p;
  }
  return coin_;
}
inline ::api_pb::Coin* FrozenResponse_Frozen::mutable_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenResponse.Frozen.coin)
  return _msg;
}
inline void FrozenResponse_Frozen::set_allocated_coin(::api_pb::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_;
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin);
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    
  } else {
    
  }
  coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.FrozenResponse.Frozen.coin)
}

// string value = 5 [json_name = "value"];
inline void FrozenResponse_Frozen::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& FrozenResponse_Frozen::value() const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenResponse.Frozen.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrozenResponse_Frozen::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.FrozenResponse.Frozen.value)
}
inline std::string* FrozenResponse_Frozen::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenResponse.Frozen.value)
  return _s;
}
inline const std::string& FrozenResponse_Frozen::_internal_value() const {
  return value_.Get();
}
inline void FrozenResponse_Frozen::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FrozenResponse_Frozen::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FrozenResponse_Frozen::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.FrozenResponse.Frozen.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FrozenResponse_Frozen::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.FrozenResponse.Frozen.value)
}

// -------------------------------------------------------------------

// FrozenResponse

// repeated .api_pb.FrozenResponse.Frozen frozen = 1 [json_name = "frozen"];
inline int FrozenResponse::_internal_frozen_size() const {
  return frozen_.size();
}
inline int FrozenResponse::frozen_size() const {
  return _internal_frozen_size();
}
inline void FrozenResponse::clear_frozen() {
  frozen_.Clear();
}
inline ::api_pb::FrozenResponse_Frozen* FrozenResponse::mutable_frozen(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.FrozenResponse.frozen)
  return frozen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::FrozenResponse_Frozen >*
FrozenResponse::mutable_frozen() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.FrozenResponse.frozen)
  return &frozen_;
}
inline const ::api_pb::FrozenResponse_Frozen& FrozenResponse::_internal_frozen(int index) const {
  return frozen_.Get(index);
}
inline const ::api_pb::FrozenResponse_Frozen& FrozenResponse::frozen(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.FrozenResponse.frozen)
  return _internal_frozen(index);
}
inline ::api_pb::FrozenResponse_Frozen* FrozenResponse::_internal_add_frozen() {
  return frozen_.Add();
}
inline ::api_pb::FrozenResponse_Frozen* FrozenResponse::add_frozen() {
  ::api_pb::FrozenResponse_Frozen* _add = _internal_add_frozen();
  // @@protoc_insertion_point(field_add:api_pb.FrozenResponse.frozen)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::FrozenResponse_Frozen >&
FrozenResponse::frozen() const {
  // @@protoc_insertion_point(field_list:api_pb.FrozenResponse.frozen)
  return frozen_;
}

// -------------------------------------------------------------------

// WaitListRequest

// string public_key = 1 [json_name = "publicKey"];
inline void WaitListRequest::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& WaitListRequest::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListRequest.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitListRequest::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.WaitListRequest.public_key)
}
inline std::string* WaitListRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.WaitListRequest.public_key)
  return _s;
}
inline const std::string& WaitListRequest::_internal_public_key() const {
  return public_key_.Get();
}
inline void WaitListRequest::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WaitListRequest::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WaitListRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.WaitListRequest.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WaitListRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.WaitListRequest.public_key)
}

// string address = 2 [json_name = "address"];
inline void WaitListRequest::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& WaitListRequest::address() const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitListRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.WaitListRequest.address)
}
inline std::string* WaitListRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:api_pb.WaitListRequest.address)
  return _s;
}
inline const std::string& WaitListRequest::_internal_address() const {
  return address_.Get();
}
inline void WaitListRequest::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WaitListRequest::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WaitListRequest::release_address() {
  // @@protoc_insertion_point(field_release:api_pb.WaitListRequest.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WaitListRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.WaitListRequest.address)
}

// uint64 height = 3 [json_name = "height", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void WaitListRequest::clear_height() {
  height_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WaitListRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WaitListRequest::height() const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListRequest.height)
  return _internal_height();
}
inline void WaitListRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  height_ = value;
}
inline void WaitListRequest::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:api_pb.WaitListRequest.height)
}

// -------------------------------------------------------------------

// WaitListResponse_Wait

// string public_key = 3 [json_name = "publicKey"];
inline void WaitListResponse_Wait::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& WaitListResponse_Wait::public_key() const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListResponse.Wait.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitListResponse_Wait::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.WaitListResponse.Wait.public_key)
}
inline std::string* WaitListResponse_Wait::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:api_pb.WaitListResponse.Wait.public_key)
  return _s;
}
inline const std::string& WaitListResponse_Wait::_internal_public_key() const {
  return public_key_.Get();
}
inline void WaitListResponse_Wait::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WaitListResponse_Wait::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WaitListResponse_Wait::release_public_key() {
  // @@protoc_insertion_point(field_release:api_pb.WaitListResponse.Wait.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WaitListResponse_Wait::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.WaitListResponse.Wait.public_key)
}

// .api_pb.Coin coin = 1 [json_name = "coin"];
inline bool WaitListResponse_Wait::_internal_has_coin() const {
  return this != internal_default_instance() && coin_ != nullptr;
}
inline bool WaitListResponse_Wait::has_coin() const {
  return _internal_has_coin();
}
inline void WaitListResponse_Wait::clear_coin() {
  if (GetArenaForAllocation() == nullptr && coin_ != nullptr) {
    delete coin_;
  }
  coin_ = nullptr;
}
inline const ::api_pb::Coin& WaitListResponse_Wait::_internal_coin() const {
  const ::api_pb::Coin* p = coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::Coin&>(
      ::api_pb::_Coin_default_instance_);
}
inline const ::api_pb::Coin& WaitListResponse_Wait::coin() const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListResponse.Wait.coin)
  return _internal_coin();
}
inline void WaitListResponse_Wait::unsafe_arena_set_allocated_coin(
    ::api_pb::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin_);
  }
  coin_ = coin;
  if (coin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.WaitListResponse.Wait.coin)
}
inline ::api_pb::Coin* WaitListResponse_Wait::release_coin() {
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::Coin* WaitListResponse_Wait::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:api_pb.WaitListResponse.Wait.coin)
  
  ::api_pb::Coin* temp = coin_;
  coin_ = nullptr;
  return temp;
}
inline ::api_pb::Coin* WaitListResponse_Wait::_internal_mutable_coin() {
  
  if (coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::Coin>(GetArenaForAllocation());
    coin_ = p;
  }
  return coin_;
}
inline ::api_pb::Coin* WaitListResponse_Wait::mutable_coin() {
  ::api_pb::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:api_pb.WaitListResponse.Wait.coin)
  return _msg;
}
inline void WaitListResponse_Wait::set_allocated_coin(::api_pb::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete coin_;
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::Coin>::GetOwningArena(coin);
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    
  } else {
    
  }
  coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:api_pb.WaitListResponse.Wait.coin)
}

// string value = 2 [json_name = "value"];
inline void WaitListResponse_Wait::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& WaitListResponse_Wait::value() const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListResponse.Wait.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WaitListResponse_Wait::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.WaitListResponse.Wait.value)
}
inline std::string* WaitListResponse_Wait::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:api_pb.WaitListResponse.Wait.value)
  return _s;
}
inline const std::string& WaitListResponse_Wait::_internal_value() const {
  return value_.Get();
}
inline void WaitListResponse_Wait::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WaitListResponse_Wait::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WaitListResponse_Wait::release_value() {
  // @@protoc_insertion_point(field_release:api_pb.WaitListResponse.Wait.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WaitListResponse_Wait::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.WaitListResponse.Wait.value)
}

// -------------------------------------------------------------------

// WaitListResponse

// repeated .api_pb.WaitListResponse.Wait list = 1 [json_name = "list"];
inline int WaitListResponse::_internal_list_size() const {
  return list_.size();
}
inline int WaitListResponse::list_size() const {
  return _internal_list_size();
}
inline void WaitListResponse::clear_list() {
  list_.Clear();
}
inline ::api_pb::WaitListResponse_Wait* WaitListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:api_pb.WaitListResponse.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::WaitListResponse_Wait >*
WaitListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:api_pb.WaitListResponse.list)
  return &list_;
}
inline const ::api_pb::WaitListResponse_Wait& WaitListResponse::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::api_pb::WaitListResponse_Wait& WaitListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:api_pb.WaitListResponse.list)
  return _internal_list(index);
}
inline ::api_pb::WaitListResponse_Wait* WaitListResponse::_internal_add_list() {
  return list_.Add();
}
inline ::api_pb::WaitListResponse_Wait* WaitListResponse::add_list() {
  ::api_pb::WaitListResponse_Wait* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:api_pb.WaitListResponse.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api_pb::WaitListResponse_Wait >&
WaitListResponse::list() const {
  // @@protoc_insertion_point(field_list:api_pb.WaitListResponse.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api_pb::CandidatesRequest_CandidateStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api_pb::CandidatesRequest_CandidateStatus>() {
  return ::api_pb::CandidatesRequest_CandidateStatus_descriptor();
}
template <> struct is_proto_enum< ::api_pb::TransactionResponse_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api_pb::TransactionResponse_Type>() {
  return ::api_pb::TransactionResponse_Type_descriptor();
}
template <> struct is_proto_enum< ::api_pb::BlockField> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api_pb::BlockField>() {
  return ::api_pb::BlockField_descriptor();
}
template <> struct is_proto_enum< ::api_pb::SwapFrom> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api_pb::SwapFrom>() {
  return ::api_pb::SwapFrom_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_resources_2eproto
