// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swagger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_swagger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_swagger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_swagger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_swagger_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_swagger_2eproto;
namespace api_pb {
class ErrorBody;
struct ErrorBodyDefaultTypeInternal;
extern ErrorBodyDefaultTypeInternal _ErrorBody_default_instance_;
class ErrorBody_Error;
struct ErrorBody_ErrorDefaultTypeInternal;
extern ErrorBody_ErrorDefaultTypeInternal _ErrorBody_Error_default_instance_;
class ErrorBody_Error_DataEntry_DoNotUse;
struct ErrorBody_Error_DataEntry_DoNotUseDefaultTypeInternal;
extern ErrorBody_Error_DataEntry_DoNotUseDefaultTypeInternal _ErrorBody_Error_DataEntry_DoNotUse_default_instance_;
}  // namespace api_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::api_pb::ErrorBody* Arena::CreateMaybeMessage<::api_pb::ErrorBody>(Arena*);
template<> ::api_pb::ErrorBody_Error* Arena::CreateMaybeMessage<::api_pb::ErrorBody_Error>(Arena*);
template<> ::api_pb::ErrorBody_Error_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::api_pb::ErrorBody_Error_DataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api_pb {

// ===================================================================

class ErrorBody_Error_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ErrorBody_Error_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ErrorBody_Error_DataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ErrorBody_Error_DataEntry_DoNotUse();
  explicit constexpr ErrorBody_Error_DataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ErrorBody_Error_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ErrorBody_Error_DataEntry_DoNotUse& other);
  static const ErrorBody_Error_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ErrorBody_Error_DataEntry_DoNotUse*>(&_ErrorBody_Error_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api_pb.ErrorBody.Error.DataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "api_pb.ErrorBody.Error.DataEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ErrorBody_Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.ErrorBody.Error) */ {
 public:
  inline ErrorBody_Error() : ErrorBody_Error(nullptr) {}
  ~ErrorBody_Error() override;
  explicit constexpr ErrorBody_Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorBody_Error(const ErrorBody_Error& from);
  ErrorBody_Error(ErrorBody_Error&& from) noexcept
    : ErrorBody_Error() {
    *this = ::std::move(from);
  }

  inline ErrorBody_Error& operator=(const ErrorBody_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorBody_Error& operator=(ErrorBody_Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorBody_Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorBody_Error* internal_default_instance() {
    return reinterpret_cast<const ErrorBody_Error*>(
               &_ErrorBody_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ErrorBody_Error& a, ErrorBody_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorBody_Error* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorBody_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorBody_Error* New() const final {
    return new ErrorBody_Error();
  }

  ErrorBody_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorBody_Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorBody_Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrorBody_Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorBody_Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.ErrorBody.Error";
  }
  protected:
  explicit ErrorBody_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // map<string, string> data = 3 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_data();

  // string code = 1 [json_name = "code"];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:api_pb.ErrorBody.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ErrorBody_Error_DataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swagger_2eproto;
};
// -------------------------------------------------------------------

class ErrorBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api_pb.ErrorBody) */ {
 public:
  inline ErrorBody() : ErrorBody(nullptr) {}
  ~ErrorBody() override;
  explicit constexpr ErrorBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorBody(const ErrorBody& from);
  ErrorBody(ErrorBody&& from) noexcept
    : ErrorBody() {
    *this = ::std::move(from);
  }

  inline ErrorBody& operator=(const ErrorBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorBody& operator=(ErrorBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorBody* internal_default_instance() {
    return reinterpret_cast<const ErrorBody*>(
               &_ErrorBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ErrorBody& a, ErrorBody& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ErrorBody* New() const final {
    return new ErrorBody();
  }

  ErrorBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ErrorBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrorBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ErrorBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api_pb.ErrorBody";
  }
  protected:
  explicit ErrorBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ErrorBody_Error Error;

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .api_pb.ErrorBody.Error error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::api_pb::ErrorBody_Error& error() const;
  PROTOBUF_MUST_USE_RESULT ::api_pb::ErrorBody_Error* release_error();
  ::api_pb::ErrorBody_Error* mutable_error();
  void set_allocated_error(::api_pb::ErrorBody_Error* error);
  private:
  const ::api_pb::ErrorBody_Error& _internal_error() const;
  ::api_pb::ErrorBody_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::api_pb::ErrorBody_Error* error);
  ::api_pb::ErrorBody_Error* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:api_pb.ErrorBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::api_pb::ErrorBody_Error* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swagger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ErrorBody_Error

// string code = 1 [json_name = "code"];
inline void ErrorBody_Error::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& ErrorBody_Error::code() const {
  // @@protoc_insertion_point(field_get:api_pb.ErrorBody.Error.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorBody_Error::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.ErrorBody.Error.code)
}
inline std::string* ErrorBody_Error::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:api_pb.ErrorBody.Error.code)
  return _s;
}
inline const std::string& ErrorBody_Error::_internal_code() const {
  return code_.Get();
}
inline void ErrorBody_Error::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ErrorBody_Error::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ErrorBody_Error::release_code() {
  // @@protoc_insertion_point(field_release:api_pb.ErrorBody.Error.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ErrorBody_Error::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.ErrorBody.Error.code)
}

// string message = 2 [json_name = "message"];
inline void ErrorBody_Error::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ErrorBody_Error::message() const {
  // @@protoc_insertion_point(field_get:api_pb.ErrorBody.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ErrorBody_Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:api_pb.ErrorBody.Error.message)
}
inline std::string* ErrorBody_Error::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:api_pb.ErrorBody.Error.message)
  return _s;
}
inline const std::string& ErrorBody_Error::_internal_message() const {
  return message_.Get();
}
inline void ErrorBody_Error::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ErrorBody_Error::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ErrorBody_Error::release_message() {
  // @@protoc_insertion_point(field_release:api_pb.ErrorBody.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ErrorBody_Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:api_pb.ErrorBody.Error.message)
}

// map<string, string> data = 3 [json_name = "data"];
inline int ErrorBody_Error::_internal_data_size() const {
  return data_.size();
}
inline int ErrorBody_Error::data_size() const {
  return _internal_data_size();
}
inline void ErrorBody_Error::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ErrorBody_Error::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ErrorBody_Error::data() const {
  // @@protoc_insertion_point(field_map:api_pb.ErrorBody.Error.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ErrorBody_Error::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ErrorBody_Error::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:api_pb.ErrorBody.Error.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// ErrorBody

// .api_pb.ErrorBody.Error error = 1 [json_name = "error"];
inline bool ErrorBody::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ErrorBody::has_error() const {
  return _internal_has_error();
}
inline void ErrorBody::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::api_pb::ErrorBody_Error& ErrorBody::_internal_error() const {
  const ::api_pb::ErrorBody_Error* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::api_pb::ErrorBody_Error&>(
      ::api_pb::_ErrorBody_Error_default_instance_);
}
inline const ::api_pb::ErrorBody_Error& ErrorBody::error() const {
  // @@protoc_insertion_point(field_get:api_pb.ErrorBody.error)
  return _internal_error();
}
inline void ErrorBody::unsafe_arena_set_allocated_error(
    ::api_pb::ErrorBody_Error* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api_pb.ErrorBody.error)
}
inline ::api_pb::ErrorBody_Error* ErrorBody::release_error() {
  
  ::api_pb::ErrorBody_Error* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::api_pb::ErrorBody_Error* ErrorBody::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:api_pb.ErrorBody.error)
  
  ::api_pb::ErrorBody_Error* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::api_pb::ErrorBody_Error* ErrorBody::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::api_pb::ErrorBody_Error>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::api_pb::ErrorBody_Error* ErrorBody::mutable_error() {
  ::api_pb::ErrorBody_Error* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:api_pb.ErrorBody.error)
  return _msg;
}
inline void ErrorBody::set_allocated_error(::api_pb::ErrorBody_Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::api_pb::ErrorBody_Error>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:api_pb.ErrorBody.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_swagger_2eproto
