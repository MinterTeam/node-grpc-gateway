//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: swagger.proto

package network.minter.grpc;

@kotlin.jvm.JvmSynthetic
inline fun errorBody(block: network.minter.grpc.ErrorBodyKt.Dsl.() -> Unit): network.minter.grpc.ErrorBody =
  network.minter.grpc.ErrorBodyKt.Dsl._create(network.minter.grpc.ErrorBody.newBuilder()).apply { block() }._build()
object ErrorBodyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: network.minter.grpc.ErrorBody.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: network.minter.grpc.ErrorBody.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): network.minter.grpc.ErrorBody = _builder.build()

    /**
     * <code>.api_pb.ErrorBody.Error error = 1 [json_name = "error"];</code>
     */
    var error: network.minter.grpc.ErrorBody.Error
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>.api_pb.ErrorBody.Error error = 1 [json_name = "error"];</code>
     */
    fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>.api_pb.ErrorBody.Error error = 1 [json_name = "error"];</code>
     * @return Whether the error field is set.
     */
    fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun error(block: network.minter.grpc.ErrorBodyKt.ErrorKt.Dsl.() -> Unit): network.minter.grpc.ErrorBody.Error =
    network.minter.grpc.ErrorBodyKt.ErrorKt.Dsl._create(network.minter.grpc.ErrorBody.Error.newBuilder()).apply { block() }._build()
  object ErrorKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: network.minter.grpc.ErrorBody.Error.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: network.minter.grpc.ErrorBody.Error.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): network.minter.grpc.ErrorBody.Error = _builder.build()

      /**
       * <code>string code = 1 [json_name = "code"];</code>
       */
      var code: kotlin.String
        @JvmName("getCode")
        get() = _builder.getCode()
        @JvmName("setCode")
        set(value) {
          _builder.setCode(value)
        }
      /**
       * <code>string code = 1 [json_name = "code"];</code>
       */
      fun clearCode() {
        _builder.clearCode()
      }

      /**
       * <code>string message = 2 [json_name = "message"];</code>
       */
      var message: kotlin.String
        @JvmName("getMessage")
        get() = _builder.getMessage()
        @JvmName("setMessage")
        set(value) {
          _builder.setMessage(value)
        }
      /**
       * <code>string message = 2 [json_name = "message"];</code>
       */
      fun clearMessage() {
        _builder.clearMessage()
      }

      /**
       * An uninstantiable, behaviorless type to represent the field in
       * generics.
       */
      @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
      class DataProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
      /**
       * <code>map&lt;string, string&gt; data = 3 [json_name = "data"];</code>
       */
       val data: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, DataProxy>
        @kotlin.jvm.JvmSynthetic
        @JvmName("getDataMap")
        get() = com.google.protobuf.kotlin.DslMap(
          _builder.getDataMap()
        )
      /**
       * <code>map&lt;string, string&gt; data = 3 [json_name = "data"];</code>
       */
      @JvmName("putData")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, DataProxy>
        .put(key: kotlin.String, value: kotlin.String) {
           _builder.putData(key, value)
         }
      /**
       * <code>map&lt;string, string&gt; data = 3 [json_name = "data"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("setData")
      inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, DataProxy>
        .set(key: kotlin.String, value: kotlin.String) {
           put(key, value)
         }
      /**
       * <code>map&lt;string, string&gt; data = 3 [json_name = "data"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("removeData")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, DataProxy>
        .remove(key: kotlin.String) {
           _builder.removeData(key)
         }
      /**
       * <code>map&lt;string, string&gt; data = 3 [json_name = "data"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("putAllData")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, DataProxy>
        .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
           _builder.putAllData(map)
         }
      /**
       * <code>map&lt;string, string&gt; data = 3 [json_name = "data"];</code>
       */
      @kotlin.jvm.JvmSynthetic
      @JvmName("clearData")
      fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, DataProxy>
        .clear() {
           _builder.clearData()
         }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.ErrorBody.copy(block: network.minter.grpc.ErrorBodyKt.Dsl.() -> Unit): network.minter.grpc.ErrorBody =
  network.minter.grpc.ErrorBodyKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.ErrorBody.Error.copy(block: network.minter.grpc.ErrorBodyKt.ErrorKt.Dsl.() -> Unit): network.minter.grpc.ErrorBody.Error =
  network.minter.grpc.ErrorBodyKt.ErrorKt.Dsl._create(this.toBuilder()).apply { block() }._build()
