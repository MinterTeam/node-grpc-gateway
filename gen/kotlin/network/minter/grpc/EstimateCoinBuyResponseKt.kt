//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resources.proto

package network.minter.grpc;

@kotlin.jvm.JvmSynthetic
inline fun estimateCoinBuyResponse(block: network.minter.grpc.EstimateCoinBuyResponseKt.Dsl.() -> Unit): network.minter.grpc.EstimateCoinBuyResponse =
  network.minter.grpc.EstimateCoinBuyResponseKt.Dsl._create(network.minter.grpc.EstimateCoinBuyResponse.newBuilder()).apply { block() }._build()
object EstimateCoinBuyResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: network.minter.grpc.EstimateCoinBuyResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: network.minter.grpc.EstimateCoinBuyResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): network.minter.grpc.EstimateCoinBuyResponse = _builder.build()

    /**
     * <code>string will_pay = 1 [json_name = "willPay"];</code>
     */
    var willPay: kotlin.String
      @JvmName("getWillPay")
      get() = _builder.getWillPay()
      @JvmName("setWillPay")
      set(value) {
        _builder.setWillPay(value)
      }
    /**
     * <code>string will_pay = 1 [json_name = "willPay"];</code>
     */
    fun clearWillPay() {
      _builder.clearWillPay()
    }

    /**
     * <code>string commission = 2 [json_name = "commission"];</code>
     */
    var commission: kotlin.String
      @JvmName("getCommission")
      get() = _builder.getCommission()
      @JvmName("setCommission")
      set(value) {
        _builder.setCommission(value)
      }
    /**
     * <code>string commission = 2 [json_name = "commission"];</code>
     */
    fun clearCommission() {
      _builder.clearCommission()
    }

    /**
     * <code>.api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];</code>
     */
    var swapFrom: network.minter.grpc.SwapFrom
      @JvmName("getSwapFrom")
      get() = _builder.getSwapFrom()
      @JvmName("setSwapFrom")
      set(value) {
        _builder.setSwapFrom(value)
      }
    /**
     * <code>.api_pb.SwapFrom swap_from = 3 [json_name = "swapFrom"];</code>
     */
    fun clearSwapFrom() {
      _builder.clearSwapFrom()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.EstimateCoinBuyResponse.copy(block: network.minter.grpc.EstimateCoinBuyResponseKt.Dsl.() -> Unit): network.minter.grpc.EstimateCoinBuyResponse =
  network.minter.grpc.EstimateCoinBuyResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
