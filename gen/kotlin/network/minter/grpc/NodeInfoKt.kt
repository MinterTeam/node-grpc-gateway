//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resources.proto

package network.minter.grpc;

@kotlin.jvm.JvmSynthetic
inline fun nodeInfo(block: network.minter.grpc.NodeInfoKt.Dsl.() -> Unit): network.minter.grpc.NodeInfo =
  network.minter.grpc.NodeInfoKt.Dsl._create(network.minter.grpc.NodeInfo.newBuilder()).apply { block() }._build()
object NodeInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: network.minter.grpc.NodeInfo.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: network.minter.grpc.NodeInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): network.minter.grpc.NodeInfo = _builder.build()

    /**
     * <code>.api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];</code>
     */
    var protocolVersion: network.minter.grpc.NodeInfo.ProtocolVersion
      @JvmName("getProtocolVersion")
      get() = _builder.getProtocolVersion()
      @JvmName("setProtocolVersion")
      set(value) {
        _builder.setProtocolVersion(value)
      }
    /**
     * <code>.api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];</code>
     */
    fun clearProtocolVersion() {
      _builder.clearProtocolVersion()
    }
    /**
     * <code>.api_pb.NodeInfo.ProtocolVersion protocol_version = 8 [json_name = "protocolVersion"];</code>
     * @return Whether the protocolVersion field is set.
     */
    fun hasProtocolVersion(): kotlin.Boolean {
      return _builder.hasProtocolVersion()
    }

    /**
     * <code>string id = 1 [json_name = "id"];</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <code>string id = 1 [json_name = "id"];</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <code>string listen_addr = 2 [json_name = "listenAddr"];</code>
     */
    var listenAddr: kotlin.String
      @JvmName("getListenAddr")
      get() = _builder.getListenAddr()
      @JvmName("setListenAddr")
      set(value) {
        _builder.setListenAddr(value)
      }
    /**
     * <code>string listen_addr = 2 [json_name = "listenAddr"];</code>
     */
    fun clearListenAddr() {
      _builder.clearListenAddr()
    }

    /**
     * <code>string network = 3 [json_name = "network"];</code>
     */
    var network: kotlin.String
      @JvmName("getNetwork")
      get() = _builder.getNetwork()
      @JvmName("setNetwork")
      set(value) {
        _builder.setNetwork(value)
      }
    /**
     * <code>string network = 3 [json_name = "network"];</code>
     */
    fun clearNetwork() {
      _builder.clearNetwork()
    }

    /**
     * <code>string version = 4 [json_name = "version"];</code>
     */
    var version: kotlin.String
      @JvmName("getVersion")
      get() = _builder.getVersion()
      @JvmName("setVersion")
      set(value) {
        _builder.setVersion(value)
      }
    /**
     * <code>string version = 4 [json_name = "version"];</code>
     */
    fun clearVersion() {
      _builder.clearVersion()
    }

    /**
     * <code>string channels = 5 [json_name = "channels"];</code>
     */
    var channels: kotlin.String
      @JvmName("getChannels")
      get() = _builder.getChannels()
      @JvmName("setChannels")
      set(value) {
        _builder.setChannels(value)
      }
    /**
     * <code>string channels = 5 [json_name = "channels"];</code>
     */
    fun clearChannels() {
      _builder.clearChannels()
    }

    /**
     * <code>string moniker = 6 [json_name = "moniker"];</code>
     */
    var moniker: kotlin.String
      @JvmName("getMoniker")
      get() = _builder.getMoniker()
      @JvmName("setMoniker")
      set(value) {
        _builder.setMoniker(value)
      }
    /**
     * <code>string moniker = 6 [json_name = "moniker"];</code>
     */
    fun clearMoniker() {
      _builder.clearMoniker()
    }

    /**
     * <code>.api_pb.NodeInfo.Other other = 7 [json_name = "other"];</code>
     */
    var other: network.minter.grpc.NodeInfo.Other
      @JvmName("getOther")
      get() = _builder.getOther()
      @JvmName("setOther")
      set(value) {
        _builder.setOther(value)
      }
    /**
     * <code>.api_pb.NodeInfo.Other other = 7 [json_name = "other"];</code>
     */
    fun clearOther() {
      _builder.clearOther()
    }
    /**
     * <code>.api_pb.NodeInfo.Other other = 7 [json_name = "other"];</code>
     * @return Whether the other field is set.
     */
    fun hasOther(): kotlin.Boolean {
      return _builder.hasOther()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun protocolVersion(block: network.minter.grpc.NodeInfoKt.ProtocolVersionKt.Dsl.() -> Unit): network.minter.grpc.NodeInfo.ProtocolVersion =
    network.minter.grpc.NodeInfoKt.ProtocolVersionKt.Dsl._create(network.minter.grpc.NodeInfo.ProtocolVersion.newBuilder()).apply { block() }._build()
  object ProtocolVersionKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: network.minter.grpc.NodeInfo.ProtocolVersion.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: network.minter.grpc.NodeInfo.ProtocolVersion.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): network.minter.grpc.NodeInfo.ProtocolVersion = _builder.build()

      /**
       * <code>uint64 p2p = 3 [json_name = "p2p"];</code>
       */
      var p2P: kotlin.Long
        @JvmName("getP2P")
        get() = _builder.getP2P()
        @JvmName("setP2P")
        set(value) {
          _builder.setP2P(value)
        }
      /**
       * <code>uint64 p2p = 3 [json_name = "p2p"];</code>
       */
      fun clearP2P() {
        _builder.clearP2P()
      }

      /**
       * <code>uint64 block = 1 [json_name = "block"];</code>
       */
      var block: kotlin.Long
        @JvmName("getBlock")
        get() = _builder.getBlock()
        @JvmName("setBlock")
        set(value) {
          _builder.setBlock(value)
        }
      /**
       * <code>uint64 block = 1 [json_name = "block"];</code>
       */
      fun clearBlock() {
        _builder.clearBlock()
      }

      /**
       * <code>uint64 app = 2 [json_name = "app"];</code>
       */
      var app: kotlin.Long
        @JvmName("getApp")
        get() = _builder.getApp()
        @JvmName("setApp")
        set(value) {
          _builder.setApp(value)
        }
      /**
       * <code>uint64 app = 2 [json_name = "app"];</code>
       */
      fun clearApp() {
        _builder.clearApp()
      }
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun other(block: network.minter.grpc.NodeInfoKt.OtherKt.Dsl.() -> Unit): network.minter.grpc.NodeInfo.Other =
    network.minter.grpc.NodeInfoKt.OtherKt.Dsl._create(network.minter.grpc.NodeInfo.Other.newBuilder()).apply { block() }._build()
  object OtherKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: network.minter.grpc.NodeInfo.Other.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: network.minter.grpc.NodeInfo.Other.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): network.minter.grpc.NodeInfo.Other = _builder.build()

      /**
       * <code>string tx_index = 2 [json_name = "txIndex"];</code>
       */
      var txIndex: kotlin.String
        @JvmName("getTxIndex")
        get() = _builder.getTxIndex()
        @JvmName("setTxIndex")
        set(value) {
          _builder.setTxIndex(value)
        }
      /**
       * <code>string tx_index = 2 [json_name = "txIndex"];</code>
       */
      fun clearTxIndex() {
        _builder.clearTxIndex()
      }

      /**
       * <code>string rpc_address = 1 [json_name = "rpcAddress"];</code>
       */
      var rpcAddress: kotlin.String
        @JvmName("getRpcAddress")
        get() = _builder.getRpcAddress()
        @JvmName("setRpcAddress")
        set(value) {
          _builder.setRpcAddress(value)
        }
      /**
       * <code>string rpc_address = 1 [json_name = "rpcAddress"];</code>
       */
      fun clearRpcAddress() {
        _builder.clearRpcAddress()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.NodeInfo.copy(block: network.minter.grpc.NodeInfoKt.Dsl.() -> Unit): network.minter.grpc.NodeInfo =
  network.minter.grpc.NodeInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.NodeInfo.ProtocolVersion.copy(block: network.minter.grpc.NodeInfoKt.ProtocolVersionKt.Dsl.() -> Unit): network.minter.grpc.NodeInfo.ProtocolVersion =
  network.minter.grpc.NodeInfoKt.ProtocolVersionKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.NodeInfo.Other.copy(block: network.minter.grpc.NodeInfoKt.OtherKt.Dsl.() -> Unit): network.minter.grpc.NodeInfo.Other =
  network.minter.grpc.NodeInfoKt.OtherKt.Dsl._create(this.toBuilder()).apply { block() }._build()
