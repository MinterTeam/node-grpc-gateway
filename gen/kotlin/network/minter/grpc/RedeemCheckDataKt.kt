//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: data.proto

package network.minter.grpc;

@kotlin.jvm.JvmSynthetic
inline fun redeemCheckData(block: network.minter.grpc.RedeemCheckDataKt.Dsl.() -> Unit): network.minter.grpc.RedeemCheckData =
  network.minter.grpc.RedeemCheckDataKt.Dsl._create(network.minter.grpc.RedeemCheckData.newBuilder()).apply { block() }._build()
object RedeemCheckDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: network.minter.grpc.RedeemCheckData.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: network.minter.grpc.RedeemCheckData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): network.minter.grpc.RedeemCheckData = _builder.build()

    /**
     * <code>string raw_check = 1 [json_name = "rawCheck"];</code>
     */
    var rawCheck: kotlin.String
      @JvmName("getRawCheck")
      get() = _builder.getRawCheck()
      @JvmName("setRawCheck")
      set(value) {
        _builder.setRawCheck(value)
      }
    /**
     * <code>string raw_check = 1 [json_name = "rawCheck"];</code>
     */
    fun clearRawCheck() {
      _builder.clearRawCheck()
    }

    /**
     * <code>string proof = 2 [json_name = "proof"];</code>
     */
    var proof: kotlin.String
      @JvmName("getProof")
      get() = _builder.getProof()
      @JvmName("setProof")
      set(value) {
        _builder.setProof(value)
      }
    /**
     * <code>string proof = 2 [json_name = "proof"];</code>
     */
    fun clearProof() {
      _builder.clearProof()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.RedeemCheckData.copy(block: network.minter.grpc.RedeemCheckDataKt.Dsl.() -> Unit): network.minter.grpc.RedeemCheckData =
  network.minter.grpc.RedeemCheckDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()
