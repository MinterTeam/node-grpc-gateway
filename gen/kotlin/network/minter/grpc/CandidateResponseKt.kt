//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: resources.proto

package network.minter.grpc;

@kotlin.jvm.JvmSynthetic
inline fun candidateResponse(block: network.minter.grpc.CandidateResponseKt.Dsl.() -> Unit): network.minter.grpc.CandidateResponse =
  network.minter.grpc.CandidateResponseKt.Dsl._create(network.minter.grpc.CandidateResponse.newBuilder()).apply { block() }._build()
object CandidateResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: network.minter.grpc.CandidateResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: network.minter.grpc.CandidateResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): network.minter.grpc.CandidateResponse = _builder.build()

    /**
     * <code>uint64 id = 14 [json_name = "id"];</code>
     */
    var id: kotlin.Long
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <code>uint64 id = 14 [json_name = "id"];</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * Address where validator’s rewards go to.
     * </pre>
     *
     * <code>string reward_address = 1 [json_name = "rewardAddress"];</code>
     */
    var rewardAddress: kotlin.String
      @JvmName("getRewardAddress")
      get() = _builder.getRewardAddress()
      @JvmName("setRewardAddress")
      set(value) {
        _builder.setRewardAddress(value)
      }
    /**
     * <pre>
     * Address where validator’s rewards go to.
     * </pre>
     *
     * <code>string reward_address = 1 [json_name = "rewardAddress"];</code>
     */
    fun clearRewardAddress() {
      _builder.clearRewardAddress()
    }

    /**
     * <pre>
     * Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction. It also enables the owner to edit the node by sending EditCandidate.
     * </pre>
     *
     * <code>string owner_address = 10 [json_name = "ownerAddress"];</code>
     */
    var ownerAddress: kotlin.String
      @JvmName("getOwnerAddress")
      get() = _builder.getOwnerAddress()
      @JvmName("setOwnerAddress")
      set(value) {
        _builder.setOwnerAddress(value)
      }
    /**
     * <pre>
     * Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction. It also enables the owner to edit the node by sending EditCandidate.
     * </pre>
     *
     * <code>string owner_address = 10 [json_name = "ownerAddress"];</code>
     */
    fun clearOwnerAddress() {
      _builder.clearOwnerAddress()
    }

    /**
     * <pre>
     * Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction.
     * </pre>
     *
     * <code>string control_address = 11 [json_name = "controlAddress"];</code>
     */
    var controlAddress: kotlin.String
      @JvmName("getControlAddress")
      get() = _builder.getControlAddress()
      @JvmName("setControlAddress")
      set(value) {
        _builder.setControlAddress(value)
      }
    /**
     * <pre>
     * Address that allows one to start the candidate by sending the SetCandidateOnline transaction or stop it by sending the SetCandidateOffline transaction.
     * </pre>
     *
     * <code>string control_address = 11 [json_name = "controlAddress"];</code>
     */
    fun clearControlAddress() {
      _builder.clearControlAddress()
    }

    /**
     * <pre>
     * Total stake of a candidate
     * </pre>
     *
     * <code>string total_stake = 2 [json_name = "totalStake"];</code>
     */
    var totalStake: kotlin.String
      @JvmName("getTotalStake")
      get() = _builder.getTotalStake()
      @JvmName("setTotalStake")
      set(value) {
        _builder.setTotalStake(value)
      }
    /**
     * <pre>
     * Total stake of a candidate
     * </pre>
     *
     * <code>string total_stake = 2 [json_name = "totalStake"];</code>
     */
    fun clearTotalStake() {
      _builder.clearTotalStake()
    }

    /**
     * <pre>
     * Public key of a candidate
     * </pre>
     *
     * <code>string public_key = 3 [json_name = "publicKey"];</code>
     */
    var publicKey: kotlin.String
      @JvmName("getPublicKey")
      get() = _builder.getPublicKey()
      @JvmName("setPublicKey")
      set(value) {
        _builder.setPublicKey(value)
      }
    /**
     * <pre>
     * Public key of a candidate
     * </pre>
     *
     * <code>string public_key = 3 [json_name = "publicKey"];</code>
     */
    fun clearPublicKey() {
      _builder.clearPublicKey()
    }

    /**
     * <pre>
     * Commission (from 0 to 100) from rewards which delegators will pay to validator
     * </pre>
     *
     * <code>uint64 commission = 4 [json_name = "commission"];</code>
     */
    var commission: kotlin.Long
      @JvmName("getCommission")
      get() = _builder.getCommission()
      @JvmName("setCommission")
      set(value) {
        _builder.setCommission(value)
      }
    /**
     * <pre>
     * Commission (from 0 to 100) from rewards which delegators will pay to validator
     * </pre>
     *
     * <code>uint64 commission = 4 [json_name = "commission"];</code>
     */
    fun clearCommission() {
      _builder.clearCommission()
    }

    /**
     * <pre>
     * Number of occupied steak slots. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];</code>
     */
    var usedSlots: com.google.protobuf.UInt64Value
      @JvmName("getUsedSlots")
      get() = _builder.getUsedSlots()
      @JvmName("setUsedSlots")
      set(value) {
        _builder.setUsedSlots(value)
      }
    /**
     * <pre>
     * Number of occupied steak slots. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];</code>
     */
    fun clearUsedSlots() {
      _builder.clearUsedSlots()
    }
    /**
     * <pre>
     * Number of occupied steak slots. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value used_slots = 7 [json_name = "usedSlots"];</code>
     * @return Whether the usedSlots field is set.
     */
    fun hasUsedSlots(): kotlin.Boolean {
      return _builder.hasUsedSlots()
    }

    /**
     * <pre>
     * Number of unique wallets in steaks. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];</code>
     */
    var uniqUsers: com.google.protobuf.UInt64Value
      @JvmName("getUniqUsers")
      get() = _builder.getUniqUsers()
      @JvmName("setUniqUsers")
      set(value) {
        _builder.setUniqUsers(value)
      }
    /**
     * <pre>
     * Number of unique wallets in steaks. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];</code>
     */
    fun clearUniqUsers() {
      _builder.clearUniqUsers()
    }
    /**
     * <pre>
     * Number of unique wallets in steaks. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.UInt64Value uniq_users = 8 [json_name = "uniqUsers"];</code>
     * @return Whether the uniqUsers field is set.
     */
    fun hasUniqUsers(): kotlin.Boolean {
      return _builder.hasUniqUsers()
    }

    /**
     * <pre>
     * Smallest steak size. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];</code>
     */
    var minStake: com.google.protobuf.StringValue
      @JvmName("getMinStake")
      get() = _builder.getMinStake()
      @JvmName("setMinStake")
      set(value) {
        _builder.setMinStake(value)
      }
    /**
     * <pre>
     * Smallest steak size. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];</code>
     */
    fun clearMinStake() {
      _builder.clearMinStake()
    }
    /**
     * <pre>
     * Smallest steak size. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>.google.protobuf.StringValue min_stake = 9 [json_name = "minStake"];</code>
     * @return Whether the minStake field is set.
     */
    fun hasMinStake(): kotlin.Boolean {
      return _builder.hasMinStake()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class StakesProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     */
     val stakes: com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getStakesList()
      )
    /**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     * @param value The stakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addStakes")
    fun com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>.add(value: network.minter.grpc.CandidateResponse.Stake) {
      _builder.addStakes(value)
    }/**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     * @param value The stakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignStakes")
    inline operator fun com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>.plusAssign(value: network.minter.grpc.CandidateResponse.Stake) {
      add(value)
    }/**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     * @param values The stakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllStakes")
    fun com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>.addAll(values: kotlin.collections.Iterable<network.minter.grpc.CandidateResponse.Stake>) {
      _builder.addAllStakes(values)
    }/**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     * @param values The stakes to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllStakes")
    inline operator fun com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>.plusAssign(values: kotlin.collections.Iterable<network.minter.grpc.CandidateResponse.Stake>) {
      addAll(values)
    }/**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     * @param index The index to set the value at.
     * @param value The stakes to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setStakes")
    operator fun com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>.set(index: kotlin.Int, value: network.minter.grpc.CandidateResponse.Stake) {
      _builder.setStakes(index, value)
    }/**
     * <pre>
     * List of stakes. Note: filled in when request includes_stakes
     * </pre>
     *
     * <code>repeated .api_pb.CandidateResponse.Stake stakes = 5 [json_name = "stakes"];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearStakes")
    fun com.google.protobuf.kotlin.DslList<network.minter.grpc.CandidateResponse.Stake, StakesProxy>.clear() {
      _builder.clearStakes()
    }
    /**
     * <pre>
     * Candidate status. Available values: offline = 1, online = 2
     * </pre>
     *
     * <code>uint64 status = 6 [json_name = "status"];</code>
     */
    var status: kotlin.Long
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * <pre>
     * Candidate status. Available values: offline = 1, online = 2
     * </pre>
     *
     * <code>uint64 status = 6 [json_name = "status"];</code>
     */
    fun clearStatus() {
      _builder.clearStatus()
    }

    /**
     * <pre>
     * Is a validator at the current height
     * </pre>
     *
     * <code>bool validator = 12 [json_name = "validator"];</code>
     */
    var validator: kotlin.Boolean
      @JvmName("getValidator")
      get() = _builder.getValidator()
      @JvmName("setValidator")
      set(value) {
        _builder.setValidator(value)
      }
    /**
     * <pre>
     * Is a validator at the current height
     * </pre>
     *
     * <code>bool validator = 12 [json_name = "validator"];</code>
     */
    fun clearValidator() {
      _builder.clearValidator()
    }

    /**
     * <code>uint64 jailed_until = 13 [json_name = "jailedUntil"];</code>
     */
    var jailedUntil: kotlin.Long
      @JvmName("getJailedUntil")
      get() = _builder.getJailedUntil()
      @JvmName("setJailedUntil")
      set(value) {
        _builder.setJailedUntil(value)
      }
    /**
     * <code>uint64 jailed_until = 13 [json_name = "jailedUntil"];</code>
     */
    fun clearJailedUntil() {
      _builder.clearJailedUntil()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun stake(block: network.minter.grpc.CandidateResponseKt.StakeKt.Dsl.() -> Unit): network.minter.grpc.CandidateResponse.Stake =
    network.minter.grpc.CandidateResponseKt.StakeKt.Dsl._create(network.minter.grpc.CandidateResponse.Stake.newBuilder()).apply { block() }._build()
  object StakeKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: network.minter.grpc.CandidateResponse.Stake.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: network.minter.grpc.CandidateResponse.Stake.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): network.minter.grpc.CandidateResponse.Stake = _builder.build()

      /**
       * <code>string owner = 1 [json_name = "owner"];</code>
       */
      var owner: kotlin.String
        @JvmName("getOwner")
        get() = _builder.getOwner()
        @JvmName("setOwner")
        set(value) {
          _builder.setOwner(value)
        }
      /**
       * <code>string owner = 1 [json_name = "owner"];</code>
       */
      fun clearOwner() {
        _builder.clearOwner()
      }

      /**
       * <code>.api_pb.Coin coin = 2 [json_name = "coin"];</code>
       */
      var coin: network.minter.grpc.Coin
        @JvmName("getCoin")
        get() = _builder.getCoin()
        @JvmName("setCoin")
        set(value) {
          _builder.setCoin(value)
        }
      /**
       * <code>.api_pb.Coin coin = 2 [json_name = "coin"];</code>
       */
      fun clearCoin() {
        _builder.clearCoin()
      }
      /**
       * <code>.api_pb.Coin coin = 2 [json_name = "coin"];</code>
       * @return Whether the coin field is set.
       */
      fun hasCoin(): kotlin.Boolean {
        return _builder.hasCoin()
      }

      /**
       * <code>string value = 3 [json_name = "value"];</code>
       */
      var value: kotlin.String
        @JvmName("getValue")
        get() = _builder.getValue()
        @JvmName("setValue")
        set(value) {
          _builder.setValue(value)
        }
      /**
       * <code>string value = 3 [json_name = "value"];</code>
       */
      fun clearValue() {
        _builder.clearValue()
      }

      /**
       * <code>string bip_value = 4 [json_name = "bipValue"];</code>
       */
      var bipValue: kotlin.String
        @JvmName("getBipValue")
        get() = _builder.getBipValue()
        @JvmName("setBipValue")
        set(value) {
          _builder.setBipValue(value)
        }
      /**
       * <code>string bip_value = 4 [json_name = "bipValue"];</code>
       */
      fun clearBipValue() {
        _builder.clearBipValue()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.CandidateResponse.copy(block: network.minter.grpc.CandidateResponseKt.Dsl.() -> Unit): network.minter.grpc.CandidateResponse =
  network.minter.grpc.CandidateResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.CandidateResponse.Stake.copy(block: network.minter.grpc.CandidateResponseKt.StakeKt.Dsl.() -> Unit): network.minter.grpc.CandidateResponse.Stake =
  network.minter.grpc.CandidateResponseKt.StakeKt.Dsl._create(this.toBuilder()).apply { block() }._build()
