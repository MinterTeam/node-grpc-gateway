//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: data.proto

package network.minter.grpc;

@kotlin.jvm.JvmSynthetic
inline fun recreateTokenData(block: network.minter.grpc.RecreateTokenDataKt.Dsl.() -> Unit): network.minter.grpc.RecreateTokenData =
  network.minter.grpc.RecreateTokenDataKt.Dsl._create(network.minter.grpc.RecreateTokenData.newBuilder()).apply { block() }._build()
object RecreateTokenDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: network.minter.grpc.RecreateTokenData.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: network.minter.grpc.RecreateTokenData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): network.minter.grpc.RecreateTokenData = _builder.build()

    /**
     * <code>string name = 1 [json_name = "name"];</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 1 [json_name = "name"];</code>
     */
    fun clearName() {
      _builder.clearName()
    }

    /**
     * <code>string symbol = 2 [json_name = "symbol"];</code>
     */
    var symbol: kotlin.String
      @JvmName("getSymbol")
      get() = _builder.getSymbol()
      @JvmName("setSymbol")
      set(value) {
        _builder.setSymbol(value)
      }
    /**
     * <code>string symbol = 2 [json_name = "symbol"];</code>
     */
    fun clearSymbol() {
      _builder.clearSymbol()
    }

    /**
     * <code>string initial_amount = 3 [json_name = "initialAmount"];</code>
     */
    var initialAmount: kotlin.String
      @JvmName("getInitialAmount")
      get() = _builder.getInitialAmount()
      @JvmName("setInitialAmount")
      set(value) {
        _builder.setInitialAmount(value)
      }
    /**
     * <code>string initial_amount = 3 [json_name = "initialAmount"];</code>
     */
    fun clearInitialAmount() {
      _builder.clearInitialAmount()
    }

    /**
     * <code>string max_supply = 4 [json_name = "maxSupply"];</code>
     */
    var maxSupply: kotlin.String
      @JvmName("getMaxSupply")
      get() = _builder.getMaxSupply()
      @JvmName("setMaxSupply")
      set(value) {
        _builder.setMaxSupply(value)
      }
    /**
     * <code>string max_supply = 4 [json_name = "maxSupply"];</code>
     */
    fun clearMaxSupply() {
      _builder.clearMaxSupply()
    }

    /**
     * <code>bool mintable = 5 [json_name = "mintable"];</code>
     */
    var mintable: kotlin.Boolean
      @JvmName("getMintable")
      get() = _builder.getMintable()
      @JvmName("setMintable")
      set(value) {
        _builder.setMintable(value)
      }
    /**
     * <code>bool mintable = 5 [json_name = "mintable"];</code>
     */
    fun clearMintable() {
      _builder.clearMintable()
    }

    /**
     * <code>bool burnable = 6 [json_name = "burnable"];</code>
     */
    var burnable: kotlin.Boolean
      @JvmName("getBurnable")
      get() = _builder.getBurnable()
      @JvmName("setBurnable")
      set(value) {
        _builder.setBurnable(value)
      }
    /**
     * <code>bool burnable = 6 [json_name = "burnable"];</code>
     */
    fun clearBurnable() {
      _builder.clearBurnable()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun network.minter.grpc.RecreateTokenData.copy(block: network.minter.grpc.RecreateTokenDataKt.Dsl.() -> Unit): network.minter.grpc.RecreateTokenData =
  network.minter.grpc.RecreateTokenDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()
